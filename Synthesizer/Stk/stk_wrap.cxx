/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE_TYPE swig_types[0]
#define SWIGTYPE_p_Skini__Message swig_types[1]
#define SWIGTYPE_p_THREAD_FUNCTION swig_types[2]
#define SWIGTYPE_p_Vector3D swig_types[3]
#define SWIGTYPE_p_double swig_types[4]
#define SWIGTYPE_p_float swig_types[5]
#define SWIGTYPE_p_int swig_types[6]
#define SWIGTYPE_p_long_long swig_types[7]
#define SWIGTYPE_p_p_char swig_types[8]
#define SWIGTYPE_p_short swig_types[9]
#define SWIGTYPE_p_signed_char swig_types[10]
#define SWIGTYPE_p_std__string swig_types[11]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[12]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[13]
#define SWIGTYPE_p_std__vectorT_unsigned_long_t swig_types[14]
#define SWIGTYPE_p_stk__ADSR swig_types[15]
#define SWIGTYPE_p_stk__Asymp swig_types[16]
#define SWIGTYPE_p_stk__BandedWG swig_types[17]
#define SWIGTYPE_p_stk__BeeThree swig_types[18]
#define SWIGTYPE_p_stk__BiQuad swig_types[19]
#define SWIGTYPE_p_stk__Blit swig_types[20]
#define SWIGTYPE_p_stk__BlitSaw swig_types[21]
#define SWIGTYPE_p_stk__BlitSquare swig_types[22]
#define SWIGTYPE_p_stk__BlowBotl swig_types[23]
#define SWIGTYPE_p_stk__BlowHole swig_types[24]
#define SWIGTYPE_p_stk__BowTable swig_types[25]
#define SWIGTYPE_p_stk__Bowed swig_types[26]
#define SWIGTYPE_p_stk__Brass swig_types[27]
#define SWIGTYPE_p_stk__Chorus swig_types[28]
#define SWIGTYPE_p_stk__Clarinet swig_types[29]
#define SWIGTYPE_p_stk__Cubic swig_types[30]
#define SWIGTYPE_p_stk__Delay swig_types[31]
#define SWIGTYPE_p_stk__DelayA swig_types[32]
#define SWIGTYPE_p_stk__DelayL swig_types[33]
#define SWIGTYPE_p_stk__Drummer swig_types[34]
#define SWIGTYPE_p_stk__Echo swig_types[35]
#define SWIGTYPE_p_stk__Effect swig_types[36]
#define SWIGTYPE_p_stk__Envelope swig_types[37]
#define SWIGTYPE_p_stk__FM swig_types[38]
#define SWIGTYPE_p_stk__FMVoices swig_types[39]
#define SWIGTYPE_p_stk__FileLoop swig_types[40]
#define SWIGTYPE_p_stk__FileRead swig_types[41]
#define SWIGTYPE_p_stk__FileWrite swig_types[42]
#define SWIGTYPE_p_stk__FileWvIn swig_types[43]
#define SWIGTYPE_p_stk__FileWvOut swig_types[44]
#define SWIGTYPE_p_stk__Filter swig_types[45]
#define SWIGTYPE_p_stk__Fir swig_types[46]
#define SWIGTYPE_p_stk__Flute swig_types[47]
#define SWIGTYPE_p_stk__FormSwep swig_types[48]
#define SWIGTYPE_p_stk__FreeVerb swig_types[49]
#define SWIGTYPE_p_stk__Function swig_types[50]
#define SWIGTYPE_p_stk__Generator swig_types[51]
#define SWIGTYPE_p_stk__Granulate swig_types[52]
#define SWIGTYPE_p_stk__Guitar swig_types[53]
#define SWIGTYPE_p_stk__HevyMetl swig_types[54]
#define SWIGTYPE_p_stk__Iir swig_types[55]
#define SWIGTYPE_p_stk__InetWvIn swig_types[56]
#define SWIGTYPE_p_stk__InetWvOut swig_types[57]
#define SWIGTYPE_p_stk__Instrmnt swig_types[58]
#define SWIGTYPE_p_stk__JCRev swig_types[59]
#define SWIGTYPE_p_stk__JetTable swig_types[60]
#define SWIGTYPE_p_stk__LentPitShift swig_types[61]
#define SWIGTYPE_p_stk__Mandolin swig_types[62]
#define SWIGTYPE_p_stk__Mesh2D swig_types[63]
#define SWIGTYPE_p_stk__Messager swig_types[64]
#define SWIGTYPE_p_stk__MidiFileIn swig_types[65]
#define SWIGTYPE_p_stk__Modal swig_types[66]
#define SWIGTYPE_p_stk__ModalBar swig_types[67]
#define SWIGTYPE_p_stk__Modulate swig_types[68]
#define SWIGTYPE_p_stk__Moog swig_types[69]
#define SWIGTYPE_p_stk__Mutex swig_types[70]
#define SWIGTYPE_p_stk__NRev swig_types[71]
#define SWIGTYPE_p_stk__Noise swig_types[72]
#define SWIGTYPE_p_stk__OnePole swig_types[73]
#define SWIGTYPE_p_stk__OneZero swig_types[74]
#define SWIGTYPE_p_stk__PRCRev swig_types[75]
#define SWIGTYPE_p_stk__PercFlut swig_types[76]
#define SWIGTYPE_p_stk__Phonemes swig_types[77]
#define SWIGTYPE_p_stk__PitShift swig_types[78]
#define SWIGTYPE_p_stk__Plucked swig_types[79]
#define SWIGTYPE_p_stk__PoleZero swig_types[80]
#define SWIGTYPE_p_stk__Recorder swig_types[81]
#define SWIGTYPE_p_stk__ReedTable swig_types[82]
#define SWIGTYPE_p_stk__Resonate swig_types[83]
#define SWIGTYPE_p_stk__Rhodey swig_types[84]
#define SWIGTYPE_p_stk__RtWvIn swig_types[85]
#define SWIGTYPE_p_stk__RtWvOut swig_types[86]
#define SWIGTYPE_p_stk__Sampler swig_types[87]
#define SWIGTYPE_p_stk__Saxofony swig_types[88]
#define SWIGTYPE_p_stk__Shakers swig_types[89]
#define SWIGTYPE_p_stk__Simple swig_types[90]
#define SWIGTYPE_p_stk__SineWave swig_types[91]
#define SWIGTYPE_p_stk__SingWave swig_types[92]
#define SWIGTYPE_p_stk__Sitar swig_types[93]
#define SWIGTYPE_p_stk__Socket swig_types[94]
#define SWIGTYPE_p_stk__Sphere swig_types[95]
#define SWIGTYPE_p_stk__StifKarp swig_types[96]
#define SWIGTYPE_p_stk__Stk swig_types[97]
#define SWIGTYPE_p_stk__StkError swig_types[98]
#define SWIGTYPE_p_stk__StkFrames swig_types[99]
#define SWIGTYPE_p_stk__TapDelay swig_types[100]
#define SWIGTYPE_p_stk__TcpClient swig_types[101]
#define SWIGTYPE_p_stk__TcpServer swig_types[102]
#define SWIGTYPE_p_stk__Thread swig_types[103]
#define SWIGTYPE_p_stk__TubeBell swig_types[104]
#define SWIGTYPE_p_stk__Twang swig_types[105]
#define SWIGTYPE_p_stk__TwoPole swig_types[106]
#define SWIGTYPE_p_stk__TwoZero swig_types[107]
#define SWIGTYPE_p_stk__UdpSocket swig_types[108]
#define SWIGTYPE_p_stk__Vector3D swig_types[109]
#define SWIGTYPE_p_stk__VoicForm swig_types[110]
#define SWIGTYPE_p_stk__Voicer swig_types[111]
#define SWIGTYPE_p_stk__Whistle swig_types[112]
#define SWIGTYPE_p_stk__Wurley swig_types[113]
#define SWIGTYPE_p_unsigned_char swig_types[114]
#define SWIGTYPE_p_unsigned_int swig_types[115]
#define SWIGTYPE_p_unsigned_long_long swig_types[116]
#define SWIGTYPE_p_unsigned_short swig_types[117]
static swig_type_info *swig_types[119];
static swig_module_info swig_module = {swig_types, 118, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "stk"
#define SWIG_init      luaopen_stk
#define SWIG_init_user luaopen_stk_user

#define SWIG_LUACODE   luaopen_stk_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}



#define __OS_LINUX__
#include <Stk.h>
#include <Generator.h>
#include <Instrmnt.h>
#include <FM.h>
#include <Filter.h>
#include <Effect.h>
#include <Function.h>

#include <WvIn.h>
#include <WvOut.h>
#include <Sampler.h>
#include <ADSR.h>
#include <Asymp.h>
#include <BandedWG.h>
#include <BeeThree.h>
#include <BiQuad.h>
#include <Blit.h>
#include <BlitSaw.h>
#include <BlitSquare.h>
#include <BlowBotl.h>
#include <BlowHole.h>
#include <BowTable.h>
#include <Bowed.h>
#include <Brass.h>
#include <Chorus.h>
#include <Clarinet.h>
#include <Cubic.h>
#include <Delay.h>
#include <DelayA.h>
#include <DelayL.h>
#include <Drummer.h>
#include <Echo.h>
#include <Effect.h>
#include <Envelope.h>
#include <FMVoices.h>
#include <FileRead.h>
#include <FileWrite.h>
#include <FileWvIn.h>
#include <FileWvOut.h>
#include <FileLoop.h>
#include <Filter.h>
#include <Fir.h>
#include <Flute.h>
#include <FormSwep.h>
#include <FreeVerb.h>
#include <Granulate.h>
#include <Guitar.h>
#include <HevyMetl.h>
#include <Iir.h>
#include <JCRev.h>
#include <JetTable.h>
#include <LentPitShift.h>
#include <Mandolin.h>
#include <Mesh2D.h>
#include <Messager.h>
#include <MidiFileIn.h>
#include <Modal.h>
#include <ModalBar.h>
#include <Modulate.h>
#include <Moog.h>
#include <NRev.h>
#include <Noise.h>
#include <OnePole.h>
#include <OneZero.h>
#include <PRCRev.h>
#include <PercFlut.h>
#include <Phonemes.h>
#include <PitShift.h>
#include <Plucked.h>
#include <PoleZero.h>
#include <Recorder.h>
#include <ReedTable.h>
#include <Resonate.h>
#include <Rhodey.h>
#include <Saxofony.h>
#include <Shakers.h>
#include <Simple.h>
#include <SineWave.h>
#include <SingWave.h>
#include <Sitar.h>
#include <Sphere.h>
#include <StifKarp.h>
#include <TapDelay.h>
#include <TubeBell.h>
#include <Twang.h>
#include <TwoPole.h>
#include <TwoZero.h>
#include <Vector3D.h>
#include <VoicForm.h>
#include <Voicer.h>
#include <Whistle.h>
#include <Wurley.h>
#include <Socket.h>
#include <Mutex.h>
#include <Thread.h>
#include <InetWvIn.h>
#include <InetWvOut.h>
#include <TcpClient.h>
#include <TcpServer.h>
#include <UdpSocket.h>
#include <RtWvIn.h>
#include <RtWvOut.h>

using namespace stk;
using namespace stk;


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include "Effect.h"
#include "Filter.h"
#include "Generator.h"
#include "Instrmnt.h"
#include "Filter.h"
#include "Function.h"
#include "FM.h"

SWIGINTERN stk::StkFloat stk_StkFrames___getitem____SWIG(stk::StkFrames *self,size_t n){ return (*self)[n]; }
SWIGINTERN void stk_StkFrames___setitem____SWIG(stk::StkFrames *self,size_t n,stk::StkFloat value){ (*self)[n] = value; }
SWIGINTERN stk::StkFloat &stk_StkFrames_get__SWIG(stk::StkFrames *self,size_t frame,unsigned int channel){ return (*self)(frame,channel); }

#include "ADSR.h"    


#include "Asymp.h"


#include "BandedWG.h"


#include "BeeThree.h"


#include "BiQuad.h"


#include "Blit.h"


#include "BlitSaw.h"


#include "BlitSquare.h"


#include "BlowBotl.h"


#include "BlowHole.h"


#include "BowTable.h"


#include "Bowed.h"


#include "Brass.h"


#include "Chorus.h"


#include "Clarinet.h"    


#include "Cubic.h"


#include "Delay.h"


#include "DelayA.h"


#include "DelayL.h"


#include "Drummer.h"


#include "Echo.h"


#include "Envelope.h"


#include "FMVoices.h"


#include "FileRead.h"


#include "FileWrite.h"


#include "FileWvIn.h"


#include "FileWvOut.h"    


#include "FileLoop.h"


#include "Fir.h"


#include "Flute.h"


#include "FormSwep.h"


#include "FreeVerb.h"


#include "Granulate.h"


#include "Guitar.h"


#include "HevyMetl.h"


#include "Iir.h"


#include "JCRev.h"


#include "JetTable.h"


#include "LentPitShift.h"


#include "Mandolin.h"


#include "Mesh2D.h"


#include "Messager.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include "MidiFileIn.h"


#include "Modal.h"


#include "Modulate.h"


#include "Moog.h"


#include "NRev.h"


#include "Noise.h"


#include "OnePole.h"


#include "OneZero.h"


#include "PRCRev.h"


#include "PercFlut.h"


#include "Phonemes.h"


#include "PitShift.h"


#include "Plucked.h"

    
    #include "PoleZero.h"


#include "Recorder.h"


#include "ReedTable.h"


#include "Resonate.h"


#include "Rhodey.h"


#include "Saxofony.h"


#include "Shakers.h"


#include "Simple.h"


#include "SineWave.h"


#include "SingWave.h"


#include "Sitar.h"


#include "Sphere.h"


#include "StifKarp.h"


#include "TapDelay.h"


#include "TubeBell.h"


#include "Twang.h"


#include "TwoPole.h"


#include "TwoZero.h"


#include "Vector3D.h"


#include "VoicForm.h"


#include "Voicer.h"


#include "Whistle.h"


#include "Wurley.h"


    #include "Socket.h"
    #include "TcpClient.h"
    #include "TcpServer.h"
    #include "UdpSocket.h"


#include "Mutex.h"


#include "Mutex.h"



#include "InetWvIn.h"


#include "InetWvOut.h"


#include "TcpClient.h"


#include "TcpServer.h"


#include "UdpSocket.h"


#include "RtWvIn.h"


#include "RtWvOut.h"


#include "Sampler.h"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_StkError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  stk::StkError::Type arg2 ;
  stk::StkError *result = 0 ;
  
  SWIG_check_num_args("stk::StkError::StkError",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::StkError::StkError",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkError::StkError",2,"stk::StkError::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_StkError",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (stk::StkError::Type)(int)lua_tonumber(L, 2);
  result = (stk::StkError *)new stk::StkError((std::string const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkError,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StkError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  stk::StkError *result = 0 ;
  
  SWIG_check_num_args("stk::StkError::StkError",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::StkError::StkError",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_StkError",1,SWIGTYPE_p_std__string);
  }
  
  result = (stk::StkError *)new stk::StkError((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkError,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StkError(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StkError__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StkError__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StkError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::StkError::StkError(std::string const &,stk::StkError::Type)\n"
    "    stk::StkError::StkError(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StkError_printMessage(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  
  SWIG_check_num_args("stk::StkError::printMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkError::printMessage",1,"stk::StkError *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkError,0))){
    SWIG_fail_ptr("StkError_printMessage",1,SWIGTYPE_p_stk__StkError);
  }
  
  (arg1)->printMessage();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkError_getType(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  stk::StkError::Type *result = 0 ;
  
  SWIG_check_num_args("stk::StkError::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkError::getType",1,"stk::StkError *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkError,0))){
    SWIG_fail_ptr("StkError_getType",1,SWIGTYPE_p_stk__StkError);
  }
  
  result = (stk::StkError::Type *) &(arg1)->getType();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkError_getMessage(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("stk::StkError::getMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkError::getMessage",1,"stk::StkError *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkError,0))){
    SWIG_fail_ptr("StkError_getMessage",1,SWIGTYPE_p_stk__StkError);
  }
  
  result = (std::string *) &(arg1)->getMessage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkError_getMessageCString(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("stk::StkError::getMessageCString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkError::getMessageCString",1,"stk::StkError *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkError,0))){
    SWIG_fail_ptr("StkError_getMessageCString",1,SWIGTYPE_p_stk__StkError);
  }
  
  result = (char *)(arg1)->getMessageCString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkError_what(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkError *arg1 = (stk::StkError *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("stk::StkError::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkError::what",1,"stk::StkError const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkError,0))){
    SWIG_fail_ptr("StkError_what",1,SWIGTYPE_p_stk__StkError);
  }
  
  result = (char *)((stk::StkError const *)arg1)->what();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StkError(void *obj) {
stk::StkError *arg1 = (stk::StkError *) obj;
delete arg1;
}
static int _proxy__wrap_new_StkError(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StkError);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StkError_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StkError_methods[]= {
    { "printMessage", _wrap_StkError_printMessage},
    { "getType", _wrap_StkError_getType},
    { "getMessage", _wrap_StkError_getMessage},
    { "getMessageCString", _wrap_StkError_getMessageCString},
    { "what", _wrap_StkError_what},
    {0,0}
};
static swig_lua_method swig_StkError_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StkError_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StkError_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("STATUS", stk::StkError::STATUS)},
    {SWIG_LUA_CONSTTAB_INT("WARNING", stk::StkError::WARNING)},
    {SWIG_LUA_CONSTTAB_INT("DEBUG_PRINT", stk::StkError::DEBUG_PRINT)},
    {SWIG_LUA_CONSTTAB_INT("MEMORY_ALLOCATION", stk::StkError::MEMORY_ALLOCATION)},
    {SWIG_LUA_CONSTTAB_INT("MEMORY_ACCESS", stk::StkError::MEMORY_ACCESS)},
    {SWIG_LUA_CONSTTAB_INT("FUNCTION_ARGUMENT", stk::StkError::FUNCTION_ARGUMENT)},
    {SWIG_LUA_CONSTTAB_INT("FILE_NOT_FOUND", stk::StkError::FILE_NOT_FOUND)},
    {SWIG_LUA_CONSTTAB_INT("FILE_UNKNOWN_FORMAT", stk::StkError::FILE_UNKNOWN_FORMAT)},
    {SWIG_LUA_CONSTTAB_INT("FILE_ERROR", stk::StkError::FILE_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("PROCESS_THREAD", stk::StkError::PROCESS_THREAD)},
    {SWIG_LUA_CONSTTAB_INT("PROCESS_SOCKET", stk::StkError::PROCESS_SOCKET)},
    {SWIG_LUA_CONSTTAB_INT("PROCESS_SOCKET_IPADDR", stk::StkError::PROCESS_SOCKET_IPADDR)},
    {SWIG_LUA_CONSTTAB_INT("AUDIO_SYSTEM", stk::StkError::AUDIO_SYSTEM)},
    {SWIG_LUA_CONSTTAB_INT("MIDI_SYSTEM", stk::StkError::MIDI_SYSTEM)},
    {SWIG_LUA_CONSTTAB_INT("UNSPECIFIED", stk::StkError::UNSPECIFIED)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StkError_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StkError_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StkError_Sf_SwigStatic = {
    "StkError",
    swig_StkError_Sf_SwigStatic_methods,
    swig_StkError_Sf_SwigStatic_attributes,
    swig_StkError_Sf_SwigStatic_constants,
    swig_StkError_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StkError_bases[] = {0};
static const char *swig_StkError_base_names[] = {0};
static swig_lua_class _wrap_class_StkError = { "StkError", "StkError", &SWIGTYPE_p_stk__StkError,_proxy__wrap_new_StkError, swig_delete_StkError, swig_StkError_methods, swig_StkError_attributes, &swig_StkError_Sf_SwigStatic, swig_StkError_meta, swig_StkError_bases, swig_StkError_base_names };

static int _wrap_new_StkFrames__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StkFrames::StkFrames",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::StkFrames::StkFrames",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::StkFrames",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFrames *)new stk::StkFrames(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StkFrames__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StkFrames::StkFrames",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::StkFrames::StkFrames",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::StkFrames *)new stk::StkFrames(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StkFrames__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StkFrames::StkFrames",0,0)
  result = (stk::StkFrames *)new stk::StkFrames();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StkFrames__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  stk::StkFloat temp1 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StkFrames::StkFrames",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::StkFrames::StkFrames",1,"stk::StkFloat const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::StkFrames",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StkFrames::StkFrames",3,"unsigned int");
  temp1=(stk::StkFloat)lua_tonumber(L,1); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *)new stk::StkFrames((stk::StkFloat const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StkFrames__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StkFrames::StkFrames",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::StkFrames::StkFrames",1,"stk::StkFrames const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("new_StkFrames",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *)new stk::StkFrames((stk::StkFrames const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StkFrames(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StkFrames__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StkFrames__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StkFrames__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StkFrames__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_StkFrames__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StkFrames'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::StkFrames::StkFrames(unsigned int,unsigned int)\n"
    "    stk::StkFrames::StkFrames(unsigned int)\n"
    "    stk::StkFrames::StkFrames()\n"
    "    stk::StkFrames::StkFrames(stk::StkFloat const &,unsigned int,unsigned int)\n"
    "    stk::StkFrames::StkFrames(stk::StkFrames const &)\n");
  lua_error(L);return 0;
}


static int _wrap_StkFrames___getitem(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::StkFrames::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::__getitem__",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames___getitem",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (stk::StkFloat)stk_StkFrames___getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames___setitem(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::StkFrames::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::__setitem__",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StkFrames::__setitem__",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames___setitem",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  stk_StkFrames___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames___add(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames result;
  
  SWIG_check_num_args("stk::StkFrames::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::operator +",1,"stk::StkFrames const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::StkFrames::operator +",2,"stk::StkFrames const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames___add",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames___add",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = ((stk::StkFrames const *)arg1)->operator +((stk::StkFrames const &)*arg2);
  {
    stk::StkFrames * resultptr = new stk::StkFrames((const stk::StkFrames &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_stk__StkFrames,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames___mul(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFrames result;
  
  SWIG_check_num_args("stk::StkFrames::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::operator *",1,"stk::StkFrames const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::operator *",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames___mul",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = ((stk::StkFrames const *)arg1)->operator *(arg2);
  {
    stk::StkFrames * resultptr = new stk::StkFrames((const stk::StkFrames &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_stk__StkFrames,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  stk::StkFloat *result = 0 ;
  
  SWIG_check_num_args("stk::StkFrames::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::get",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::get",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StkFrames::get",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_get",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFloat *) &stk_StkFrames_get__SWIG(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_interpolate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::StkFrames::interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::interpolate",1,"stk::StkFrames const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::interpolate",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StkFrames::interpolate",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_interpolate",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFloat)((stk::StkFrames const *)arg1)->interpolate(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_interpolate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::StkFrames::interpolate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::interpolate",1,"stk::StkFrames const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::interpolate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_interpolate",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)((stk::StkFrames const *)arg1)->interpolate(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_interpolate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StkFrames_interpolate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StkFrames_interpolate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StkFrames_interpolate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::StkFrames::interpolate(stk::StkFloat,unsigned int) const\n"
    "    stk::StkFrames::interpolate(stk::StkFloat) const\n");
  lua_error(L);return 0;
}


static int _wrap_StkFrames_size(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t result;
  
  SWIG_check_num_args("stk::StkFrames::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::size",1,"stk::StkFrames const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_size",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = ((stk::StkFrames const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_empty(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::StkFrames::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::empty",1,"stk::StkFrames const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_empty",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (bool)((stk::StkFrames const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("stk::StkFrames::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::resize",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StkFrames::resize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_resize",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("stk::StkFrames::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::resize",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_resize",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_resize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::StkFrames::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::resize",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StkFrames::resize",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::StkFrames::resize",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_resize",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->resize(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_resize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StkFrames_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StkFrames_resize__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_StkFrames_resize__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StkFrames_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::StkFrames::resize(size_t,unsigned int)\n"
    "    stk::StkFrames::resize(size_t)\n"
    "    stk::StkFrames::resize(size_t,unsigned int,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_StkFrames_getChannel(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  unsigned int arg2 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StkFrames::getChannel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::getChannel",1,"stk::StkFrames const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::getChannel",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::StkFrames::getChannel",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::StkFrames::getChannel",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_getChannel",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_getChannel",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &((stk::StkFrames const *)arg1)->getChannel(arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_setChannel(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  unsigned int arg2 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("stk::StkFrames::setChannel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::setChannel",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::setChannel",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::StkFrames::setChannel",3,"stk::StkFrames const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::StkFrames::setChannel",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_setChannel",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_setChannel",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->setChannel(arg2,(stk::StkFrames const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_channels(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::StkFrames::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::channels",1,"stk::StkFrames const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_channels",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (unsigned int)((stk::StkFrames const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_frames(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::StkFrames::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::frames",1,"stk::StkFrames const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_frames",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (unsigned int)((stk::StkFrames const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_setDataRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::StkFrames::setDataRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::setDataRate",1,"stk::StkFrames *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StkFrames::setDataRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_setDataRate",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDataRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StkFrames_dataRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFrames *arg1 = (stk::StkFrames *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::StkFrames::dataRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StkFrames::dataRate",1,"stk::StkFrames const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StkFrames_dataRate",1,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFloat)((stk::StkFrames const *)arg1)->dataRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StkFrames(void *obj) {
stk::StkFrames *arg1 = (stk::StkFrames *) obj;
delete arg1;
}
static int _proxy__wrap_new_StkFrames(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StkFrames);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StkFrames_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StkFrames_methods[]= {
    { "__getitem", _wrap_StkFrames___getitem},
    { "__setitem", _wrap_StkFrames___setitem},
    { "__add", _wrap_StkFrames___add},
    { "__mul", _wrap_StkFrames___mul},
    { "get", _wrap_StkFrames_get},
    { "interpolate", _wrap_StkFrames_interpolate},
    { "size", _wrap_StkFrames_size},
    { "empty", _wrap_StkFrames_empty},
    { "resize", _wrap_StkFrames_resize},
    { "getChannel", _wrap_StkFrames_getChannel},
    { "setChannel", _wrap_StkFrames_setChannel},
    { "channels", _wrap_StkFrames_channels},
    { "frames", _wrap_StkFrames_frames},
    { "setDataRate", _wrap_StkFrames_setDataRate},
    { "dataRate", _wrap_StkFrames_dataRate},
    {0,0}
};
static swig_lua_method swig_StkFrames_meta[] = {
    { "__getitem", _wrap_StkFrames___getitem},
    { "__setitem", _wrap_StkFrames___setitem},
    { "__add", _wrap_StkFrames___add},
    { "__mul", _wrap_StkFrames___mul},
    {0,0}
};

static swig_lua_attribute swig_StkFrames_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StkFrames_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StkFrames_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StkFrames_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StkFrames_Sf_SwigStatic = {
    "StkFrames",
    swig_StkFrames_Sf_SwigStatic_methods,
    swig_StkFrames_Sf_SwigStatic_attributes,
    swig_StkFrames_Sf_SwigStatic_constants,
    swig_StkFrames_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StkFrames_bases[] = {0};
static const char *swig_StkFrames_base_names[] = {0};
static swig_lua_class _wrap_class_StkFrames = { "StkFrames", "StkFrames", &SWIGTYPE_p_stk__StkFrames,_proxy__wrap_new_StkFrames, swig_delete_StkFrames, swig_StkFrames_methods, swig_StkFrames_attributes, &swig_StkFrames_Sf_SwigStatic, swig_StkFrames_meta, swig_StkFrames_bases, swig_StkFrames_base_names };

static int _wrap_SRATE_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::SRATE",0,0)
  result = (stk::StkFloat)(stk::StkFloat)stk::SRATE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RT_BUFFER_SIZE_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("stk::RT_BUFFER_SIZE",0,0)
  result = (unsigned int)(unsigned int)stk::RT_BUFFER_SIZE;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PI",0,0)
  result = (stk::StkFloat)(stk::StkFloat)stk::PI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TWO_PI_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TWO_PI",0,0)
  result = (stk::StkFloat)(stk::StkFloat)stk::TWO_PI;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ONE_OVER_128_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::ONE_OVER_128",0,0)
  result = (stk::StkFloat)(stk::StkFloat)stk::ONE_OVER_128;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_channelsOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::Effect::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Effect::channelsOut",1,"stk::Effect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Effect,0))){
    SWIG_fail_ptr("Effect_channelsOut",1,SWIGTYPE_p_stk__Effect);
  }
  
  result = (unsigned int)((stk::Effect const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_lastFrame(lua_State* L) {
  int SWIG_arg = 0;
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Effect::lastFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Effect::lastFrame",1,"stk::Effect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Effect,0))){
    SWIG_fail_ptr("Effect_lastFrame",1,SWIGTYPE_p_stk__Effect);
  }
  
  result = (stk::StkFrames *) &((stk::Effect const *)arg1)->lastFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  
  SWIG_check_num_args("stk::Effect::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Effect::clear",1,"stk::Effect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Effect,0))){
    SWIG_fail_ptr("Effect_clear",1,SWIGTYPE_p_stk__Effect);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Effect_setEffectMix(lua_State* L) {
  int SWIG_arg = 0;
  stk::Effect *arg1 = (stk::Effect *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Effect::setEffectMix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Effect::setEffectMix",1,"stk::Effect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Effect::setEffectMix",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Effect,0))){
    SWIG_fail_ptr("Effect_setEffectMix",1,SWIGTYPE_p_stk__Effect);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setEffectMix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Effect(void *obj) {
stk::Effect *arg1 = (stk::Effect *) obj;
delete arg1;
}
static swig_lua_attribute swig_Effect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Effect_methods[]= {
    { "channelsOut", _wrap_Effect_channelsOut},
    { "lastFrame", _wrap_Effect_lastFrame},
    { "clear", _wrap_Effect_clear},
    { "setEffectMix", _wrap_Effect_setEffectMix},
    {0,0}
};
static swig_lua_method swig_Effect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Effect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Effect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Effect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Effect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Effect_Sf_SwigStatic = {
    "Effect",
    swig_Effect_Sf_SwigStatic_methods,
    swig_Effect_Sf_SwigStatic_attributes,
    swig_Effect_Sf_SwigStatic_constants,
    swig_Effect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Effect_bases[] = {0};
static const char *swig_Effect_base_names[] = {0};
static swig_lua_class _wrap_class_Effect = { "Effect", "Effect", &SWIGTYPE_p_stk__Effect,0, swig_delete_Effect, swig_Effect_methods, swig_Effect_attributes, &swig_Effect_Sf_SwigStatic, swig_Effect_meta, swig_Effect_bases, swig_Effect_base_names };

static int _wrap_Filter_channelsIn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::Filter::channelsIn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::channelsIn",1,"stk::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_channelsIn",1,SWIGTYPE_p_stk__Filter);
  }
  
  result = (unsigned int)((stk::Filter const *)arg1)->channelsIn();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_channelsOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::Filter::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::channelsOut",1,"stk::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_channelsOut",1,SWIGTYPE_p_stk__Filter);
  }
  
  result = (unsigned int)((stk::Filter const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  
  SWIG_check_num_args("stk::Filter::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::clear",1,"stk::Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_clear",1,SWIGTYPE_p_stk__Filter);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_setGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Filter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::setGain",1,"stk::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Filter::setGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_setGain",1,SWIGTYPE_p_stk__Filter);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_getGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Filter::getGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::getGain",1,"stk::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_getGain",1,SWIGTYPE_p_stk__Filter);
  }
  
  result = (stk::StkFloat)((stk::Filter const *)arg1)->getGain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_phaseDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Filter::phaseDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::phaseDelay",1,"stk::Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Filter::phaseDelay",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_phaseDelay",1,SWIGTYPE_p_stk__Filter);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->phaseDelay(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_lastFrame(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Filter::lastFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::lastFrame",1,"stk::Filter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_lastFrame",1,SWIGTYPE_p_stk__Filter);
  }
  
  result = (stk::StkFrames *) &((stk::Filter const *)arg1)->lastFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Filter::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::tick",1,"stk::Filter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Filter::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Filter::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_tick",1,SWIGTYPE_p_stk__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Filter_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Filter *arg1 = (stk::Filter *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Filter::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Filter::tick",1,"stk::Filter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Filter::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Filter,0))){
    SWIG_fail_ptr("Filter_tick",1,SWIGTYPE_p_stk__Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Filter_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Filter_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Filter_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Filter_tick__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Filter_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Filter::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Filter::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Filter(void *obj) {
stk::Filter *arg1 = (stk::Filter *) obj;
delete arg1;
}
static swig_lua_attribute swig_Filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Filter_methods[]= {
    { "channelsIn", _wrap_Filter_channelsIn},
    { "channelsOut", _wrap_Filter_channelsOut},
    { "clear", _wrap_Filter_clear},
    { "setGain", _wrap_Filter_setGain},
    { "getGain", _wrap_Filter_getGain},
    { "phaseDelay", _wrap_Filter_phaseDelay},
    { "lastFrame", _wrap_Filter_lastFrame},
    { "tick", _wrap_Filter_tick},
    {0,0}
};
static swig_lua_method swig_Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Filter_Sf_SwigStatic = {
    "Filter",
    swig_Filter_Sf_SwigStatic_methods,
    swig_Filter_Sf_SwigStatic_attributes,
    swig_Filter_Sf_SwigStatic_constants,
    swig_Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Filter_bases[] = {0};
static const char *swig_Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Filter = { "Filter", "Filter", &SWIGTYPE_p_stk__Filter,0, swig_delete_Filter, swig_Filter_methods, swig_Filter_attributes, &swig_Filter_Sf_SwigStatic, swig_Filter_meta, swig_Filter_bases, swig_Filter_base_names };

static int _wrap_Generator_channelsOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::Generator::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Generator::channelsOut",1,"stk::Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Generator,0))){
    SWIG_fail_ptr("Generator_channelsOut",1,SWIGTYPE_p_stk__Generator);
  }
  
  result = (unsigned int)((stk::Generator const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_lastFrame(lua_State* L) {
  int SWIG_arg = 0;
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Generator::lastFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Generator::lastFrame",1,"stk::Generator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Generator,0))){
    SWIG_fail_ptr("Generator_lastFrame",1,SWIGTYPE_p_stk__Generator);
  }
  
  result = (stk::StkFrames *) &((stk::Generator const *)arg1)->lastFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Generator::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Generator::tick",1,"stk::Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Generator::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Generator::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Generator,0))){
    SWIG_fail_ptr("Generator_tick",1,SWIGTYPE_p_stk__Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Generator_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Generator *arg1 = (stk::Generator *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Generator::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Generator::tick",1,"stk::Generator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Generator::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Generator,0))){
    SWIG_fail_ptr("Generator_tick",1,SWIGTYPE_p_stk__Generator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Generator_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generator_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Generator_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Generator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Generator_tick__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Generator_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Generator::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Generator::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Generator(void *obj) {
stk::Generator *arg1 = (stk::Generator *) obj;
delete arg1;
}
static swig_lua_attribute swig_Generator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Generator_methods[]= {
    { "channelsOut", _wrap_Generator_channelsOut},
    { "lastFrame", _wrap_Generator_lastFrame},
    { "tick", _wrap_Generator_tick},
    {0,0}
};
static swig_lua_method swig_Generator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Generator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Generator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Generator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Generator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Generator_Sf_SwigStatic = {
    "Generator",
    swig_Generator_Sf_SwigStatic_methods,
    swig_Generator_Sf_SwigStatic_attributes,
    swig_Generator_Sf_SwigStatic_constants,
    swig_Generator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Generator_bases[] = {0};
static const char *swig_Generator_base_names[] = {0};
static swig_lua_class _wrap_class_Generator = { "Generator", "Generator", &SWIGTYPE_p_stk__Generator,0, swig_delete_Generator, swig_Generator_methods, swig_Generator_attributes, &swig_Generator_Sf_SwigStatic, swig_Generator_meta, swig_Generator_bases, swig_Generator_base_names };

static int _wrap_Instrmnt_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  
  SWIG_check_num_args("stk::Instrmnt::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::clear",1,"stk::Instrmnt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_clear",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Instrmnt::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::noteOn",1,"stk::Instrmnt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Instrmnt::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Instrmnt::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_noteOn",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Instrmnt::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::noteOff",1,"stk::Instrmnt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Instrmnt::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_noteOff",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Instrmnt::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::setFrequency",1,"stk::Instrmnt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Instrmnt::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_setFrequency",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Instrmnt::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::controlChange",1,"stk::Instrmnt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Instrmnt::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Instrmnt::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_controlChange",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_channelsOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::Instrmnt::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::channelsOut",1,"stk::Instrmnt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_channelsOut",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  result = (unsigned int)((stk::Instrmnt const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_lastFrame(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Instrmnt::lastFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::lastFrame",1,"stk::Instrmnt const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_lastFrame",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  result = (stk::StkFrames *) &((stk::Instrmnt const *)arg1)->lastFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Instrmnt::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::lastOut",1,"stk::Instrmnt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Instrmnt::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_lastOut",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Instrmnt::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::lastOut",1,"stk::Instrmnt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_lastOut",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Instrmnt_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Instrmnt_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Instrmnt_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Instrmnt::lastOut(unsigned int)\n"
    "    stk::Instrmnt::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_Instrmnt_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Instrmnt::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::tick",1,"stk::Instrmnt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Instrmnt::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_tick",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Instrmnt::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::tick",1,"stk::Instrmnt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_tick",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Instrmnt::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::tick",1,"stk::Instrmnt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Instrmnt::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Instrmnt::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_tick",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Instrmnt_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Instrmnt *arg1 = (stk::Instrmnt *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Instrmnt::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Instrmnt::tick",1,"stk::Instrmnt *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Instrmnt::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Instrmnt_tick",1,SWIGTYPE_p_stk__Instrmnt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Instrmnt_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Instrmnt_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Instrmnt_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Instrmnt_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Instrmnt_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Instrmnt_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Instrmnt_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Instrmnt::tick(unsigned int)\n"
    "    stk::Instrmnt::tick()\n"
    "    stk::Instrmnt::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Instrmnt::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Instrmnt(void *obj) {
stk::Instrmnt *arg1 = (stk::Instrmnt *) obj;
delete arg1;
}
static swig_lua_attribute swig_Instrmnt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Instrmnt_methods[]= {
    { "clear", _wrap_Instrmnt_clear},
    { "noteOn", _wrap_Instrmnt_noteOn},
    { "noteOff", _wrap_Instrmnt_noteOff},
    { "setFrequency", _wrap_Instrmnt_setFrequency},
    { "controlChange", _wrap_Instrmnt_controlChange},
    { "channelsOut", _wrap_Instrmnt_channelsOut},
    { "lastFrame", _wrap_Instrmnt_lastFrame},
    { "lastOut", _wrap_Instrmnt_lastOut},
    { "tick", _wrap_Instrmnt_tick},
    {0,0}
};
static swig_lua_method swig_Instrmnt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Instrmnt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Instrmnt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Instrmnt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Instrmnt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Instrmnt_Sf_SwigStatic = {
    "Instrmnt",
    swig_Instrmnt_Sf_SwigStatic_methods,
    swig_Instrmnt_Sf_SwigStatic_attributes,
    swig_Instrmnt_Sf_SwigStatic_constants,
    swig_Instrmnt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Instrmnt_bases[] = {0};
static const char *swig_Instrmnt_base_names[] = {0};
static swig_lua_class _wrap_class_Instrmnt = { "Instrmnt", "Instrmnt", &SWIGTYPE_p_stk__Instrmnt,0, swig_delete_Instrmnt, swig_Instrmnt_methods, swig_Instrmnt_attributes, &swig_Instrmnt_Sf_SwigStatic, swig_Instrmnt_meta, swig_Instrmnt_bases, swig_Instrmnt_base_names };

static int _wrap_Function_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Function *arg1 = (stk::Function *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Function::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Function::lastOut",1,"stk::Function const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Function,0))){
    SWIG_fail_ptr("Function_lastOut",1,SWIGTYPE_p_stk__Function);
  }
  
  result = (stk::StkFloat)((stk::Function const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Function_tick(lua_State* L) {
  int SWIG_arg = 0;
  stk::Function *arg1 = (stk::Function *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Function::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Function::tick",1,"stk::Function *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Function::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Function,0))){
    SWIG_fail_ptr("Function_tick",1,SWIGTYPE_p_stk__Function);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Function(void *obj) {
stk::Function *arg1 = (stk::Function *) obj;
delete arg1;
}
static swig_lua_attribute swig_Function_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Function_methods[]= {
    { "lastOut", _wrap_Function_lastOut},
    { "tick", _wrap_Function_tick},
    {0,0}
};
static swig_lua_method swig_Function_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Function_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Function_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Function_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Function_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Function_Sf_SwigStatic = {
    "Function",
    swig_Function_Sf_SwigStatic_methods,
    swig_Function_Sf_SwigStatic_attributes,
    swig_Function_Sf_SwigStatic_constants,
    swig_Function_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Function_bases[] = {0};
static const char *swig_Function_base_names[] = {0};
static swig_lua_class _wrap_class_Function = { "Function", "Function", &SWIGTYPE_p_stk__Function,0, swig_delete_Function, swig_Function_methods, swig_Function_attributes, &swig_Function_Sf_SwigStatic, swig_Function_meta, swig_Function_bases, swig_Function_base_names };

static int _wrap_FM_loadWaves(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  char **arg2 = (char **) 0 ;
  
  SWIG_check_num_args("stk::FM::loadWaves",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::loadWaves",1,"stk::FM *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::FM::loadWaves",2,"char const **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_loadWaves",1,SWIGTYPE_p_stk__FM);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("FM_loadWaves",2,SWIGTYPE_p_p_char);
  }
  
  (arg1)->loadWaves((char const **)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FM::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::setFrequency",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_setFrequency",1,SWIGTYPE_p_stk__FM);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_setRatio(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FM::setRatio",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::setRatio",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::setRatio",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FM::setRatio",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_setRatio",1,SWIGTYPE_p_stk__FM);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setRatio(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_setGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FM::setGain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::setGain",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::setGain",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FM::setGain",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_setGain",1,SWIGTYPE_p_stk__FM);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setGain(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_setModulationSpeed(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FM::setModulationSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::setModulationSpeed",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::setModulationSpeed",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_setModulationSpeed",1,SWIGTYPE_p_stk__FM);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setModulationSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_setModulationDepth(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FM::setModulationDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::setModulationDepth",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::setModulationDepth",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_setModulationDepth",1,SWIGTYPE_p_stk__FM);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setModulationDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_setControl1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FM::setControl1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::setControl1",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::setControl1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_setControl1",1,SWIGTYPE_p_stk__FM);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setControl1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_setControl2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FM::setControl2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::setControl2",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::setControl2",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_setControl2",1,SWIGTYPE_p_stk__FM);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setControl2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_keyOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  
  SWIG_check_num_args("stk::FM::keyOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::keyOn",1,"stk::FM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_keyOn",1,SWIGTYPE_p_stk__FM);
  }
  
  (arg1)->keyOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_keyOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  
  SWIG_check_num_args("stk::FM::keyOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::keyOff",1,"stk::FM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_keyOff",1,SWIGTYPE_p_stk__FM);
  }
  
  (arg1)->keyOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FM::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::noteOff",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_noteOff",1,SWIGTYPE_p_stk__FM);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FM::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::controlChange",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FM::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_controlChange",1,SWIGTYPE_p_stk__FM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FM::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::tick",1,"stk::FM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FM::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_tick",1,SWIGTYPE_p_stk__FM);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FM::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::tick",1,"stk::FM *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FM::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FM::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_tick",1,SWIGTYPE_p_stk__FM);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FM_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FM *arg1 = (stk::FM *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FM::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FM::tick",1,"stk::FM *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FM::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FM,0))){
    SWIG_fail_ptr("FM_tick",1,SWIGTYPE_p_stk__FM);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FM_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FM_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FM_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FM_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FM, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FM_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FM_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FM::tick(unsigned int)\n"
    "    stk::FM::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::FM::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FM(void *obj) {
stk::FM *arg1 = (stk::FM *) obj;
delete arg1;
}
static swig_lua_attribute swig_FM_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FM_methods[]= {
    { "loadWaves", _wrap_FM_loadWaves},
    { "setFrequency", _wrap_FM_setFrequency},
    { "setRatio", _wrap_FM_setRatio},
    { "setGain", _wrap_FM_setGain},
    { "setModulationSpeed", _wrap_FM_setModulationSpeed},
    { "setModulationDepth", _wrap_FM_setModulationDepth},
    { "setControl1", _wrap_FM_setControl1},
    { "setControl2", _wrap_FM_setControl2},
    { "keyOn", _wrap_FM_keyOn},
    { "keyOff", _wrap_FM_keyOff},
    { "noteOff", _wrap_FM_noteOff},
    { "controlChange", _wrap_FM_controlChange},
    { "tick", _wrap_FM_tick},
    {0,0}
};
static swig_lua_method swig_FM_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FM_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FM_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FM_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FM_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FM_Sf_SwigStatic = {
    "FM",
    swig_FM_Sf_SwigStatic_methods,
    swig_FM_Sf_SwigStatic_attributes,
    swig_FM_Sf_SwigStatic_constants,
    swig_FM_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FM_bases[] = {0,0};
static const char *swig_FM_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_FM = { "FM", "FM", &SWIGTYPE_p_stk__FM,0, swig_delete_FM, swig_FM_methods, swig_FM_attributes, &swig_FM_Sf_SwigStatic, swig_FM_meta, swig_FM_bases, swig_FM_base_names };

static int _wrap_new_ADSR(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *result = 0 ;
  
  SWIG_check_num_args("stk::ADSR::ADSR",0,0)
  result = (stk::ADSR *)new stk::ADSR();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__ADSR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_keyOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  
  SWIG_check_num_args("stk::ADSR::keyOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::keyOn",1,"stk::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_keyOn",1,SWIGTYPE_p_stk__ADSR);
  }
  
  (arg1)->keyOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_keyOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  
  SWIG_check_num_args("stk::ADSR::keyOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::keyOff",1,"stk::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_keyOff",1,SWIGTYPE_p_stk__ADSR);
  }
  
  (arg1)->keyOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setAttackRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setAttackRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setAttackRate",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setAttackRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setAttackRate",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setAttackRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setAttackTarget(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setAttackTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setAttackTarget",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setAttackTarget",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setAttackTarget",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setAttackTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setDecayRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setDecayRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setDecayRate",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setDecayRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setDecayRate",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDecayRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setSustainLevel(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setSustainLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setSustainLevel",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setSustainLevel",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setSustainLevel",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setSustainLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setReleaseRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setReleaseRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setReleaseRate",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setReleaseRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setReleaseRate",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setReleaseRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setAttackTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setAttackTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setAttackTime",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setAttackTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setAttackTime",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setAttackTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setDecayTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setDecayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setDecayTime",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setDecayTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setDecayTime",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDecayTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setReleaseTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setReleaseTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setReleaseTime",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setReleaseTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setReleaseTime",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setReleaseTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setAllTimes(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  stk::StkFloat arg5 ;
  
  SWIG_check_num_args("stk::ADSR::setAllTimes",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setAllTimes",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setAllTimes",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::ADSR::setAllTimes",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::ADSR::setAllTimes",4,"stk::StkFloat");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::ADSR::setAllTimes",5,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setAllTimes",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  arg5 = (stk::StkFloat)lua_tonumber(L, 5);
  (arg1)->setAllTimes(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setTarget(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setTarget",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setTarget",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setTarget",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_getState(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::ADSR::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::getState",1,"stk::ADSR const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_getState",1,SWIGTYPE_p_stk__ADSR);
  }
  
  result = (int)((stk::ADSR const *)arg1)->getState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_setValue(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ADSR::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::setValue",1,"stk::ADSR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ADSR::setValue",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_setValue",1,SWIGTYPE_p_stk__ADSR);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::ADSR::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::lastOut",1,"stk::ADSR const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_lastOut",1,SWIGTYPE_p_stk__ADSR);
  }
  
  result = (stk::StkFloat)((stk::ADSR const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::ADSR::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::tick",1,"stk::ADSR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_tick",1,SWIGTYPE_p_stk__ADSR);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::ADSR::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::tick",1,"stk::ADSR *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::ADSR::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::ADSR::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_tick",1,SWIGTYPE_p_stk__ADSR);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ADSR_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::ADSR *arg1 = (stk::ADSR *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::ADSR::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ADSR::tick",1,"stk::ADSR *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::ADSR::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ADSR,0))){
    SWIG_fail_ptr("ADSR_tick",1,SWIGTYPE_p_stk__ADSR);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ADSR_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ADSR_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ADSR, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ADSR_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ADSR, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ADSR_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ADSR, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ADSR_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ADSR_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::ADSR::tick()\n"
    "    stk::ADSR::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::ADSR::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ADSR(void *obj) {
stk::ADSR *arg1 = (stk::ADSR *) obj;
delete arg1;
}
static int _proxy__wrap_new_ADSR(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ADSR);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ADSR_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ADSR_methods[]= {
    { "keyOn", _wrap_ADSR_keyOn},
    { "keyOff", _wrap_ADSR_keyOff},
    { "setAttackRate", _wrap_ADSR_setAttackRate},
    { "setAttackTarget", _wrap_ADSR_setAttackTarget},
    { "setDecayRate", _wrap_ADSR_setDecayRate},
    { "setSustainLevel", _wrap_ADSR_setSustainLevel},
    { "setReleaseRate", _wrap_ADSR_setReleaseRate},
    { "setAttackTime", _wrap_ADSR_setAttackTime},
    { "setDecayTime", _wrap_ADSR_setDecayTime},
    { "setReleaseTime", _wrap_ADSR_setReleaseTime},
    { "setAllTimes", _wrap_ADSR_setAllTimes},
    { "setTarget", _wrap_ADSR_setTarget},
    { "getState", _wrap_ADSR_getState},
    { "setValue", _wrap_ADSR_setValue},
    { "lastOut", _wrap_ADSR_lastOut},
    { "tick", _wrap_ADSR_tick},
    {0,0}
};
static swig_lua_method swig_ADSR_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ADSR_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ADSR_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ATTACK", stk::ADSR::ATTACK)},
    {SWIG_LUA_CONSTTAB_INT("DECAY", stk::ADSR::DECAY)},
    {SWIG_LUA_CONSTTAB_INT("SUSTAIN", stk::ADSR::SUSTAIN)},
    {SWIG_LUA_CONSTTAB_INT("RELEASE", stk::ADSR::RELEASE)},
    {SWIG_LUA_CONSTTAB_INT("IDLE", stk::ADSR::IDLE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ADSR_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ADSR_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ADSR_Sf_SwigStatic = {
    "ADSR",
    swig_ADSR_Sf_SwigStatic_methods,
    swig_ADSR_Sf_SwigStatic_attributes,
    swig_ADSR_Sf_SwigStatic_constants,
    swig_ADSR_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ADSR_bases[] = {0,0};
static const char *swig_ADSR_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_ADSR = { "ADSR", "ADSR", &SWIGTYPE_p_stk__ADSR,_proxy__wrap_new_ADSR, swig_delete_ADSR, swig_ADSR_methods, swig_ADSR_attributes, &swig_ADSR_Sf_SwigStatic, swig_ADSR_meta, swig_ADSR_bases, swig_ADSR_base_names };

static int _wrap_TARGET_THRESHOLD_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TARGET_THRESHOLD",0,0)
  result = (stk::StkFloat)(stk::StkFloat)stk::TARGET_THRESHOLD;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Asymp(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *result = 0 ;
  
  SWIG_check_num_args("stk::Asymp::Asymp",0,0)
  result = (stk::Asymp *)new stk::Asymp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Asymp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_keyOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  
  SWIG_check_num_args("stk::Asymp::keyOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::keyOn",1,"stk::Asymp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_keyOn",1,SWIGTYPE_p_stk__Asymp);
  }
  
  (arg1)->keyOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_keyOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  
  SWIG_check_num_args("stk::Asymp::keyOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::keyOff",1,"stk::Asymp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_keyOff",1,SWIGTYPE_p_stk__Asymp);
  }
  
  (arg1)->keyOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_setTau(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Asymp::setTau",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::setTau",1,"stk::Asymp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Asymp::setTau",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_setTau",1,SWIGTYPE_p_stk__Asymp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setTau(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_setTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Asymp::setTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::setTime",1,"stk::Asymp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Asymp::setTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_setTime",1,SWIGTYPE_p_stk__Asymp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_setT60(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Asymp::setT60",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::setT60",1,"stk::Asymp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Asymp::setT60",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_setT60",1,SWIGTYPE_p_stk__Asymp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setT60(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_setTarget(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Asymp::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::setTarget",1,"stk::Asymp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Asymp::setTarget",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_setTarget",1,SWIGTYPE_p_stk__Asymp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_setValue(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Asymp::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::setValue",1,"stk::Asymp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Asymp::setValue",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_setValue",1,SWIGTYPE_p_stk__Asymp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_getState(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::Asymp::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::getState",1,"stk::Asymp const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_getState",1,SWIGTYPE_p_stk__Asymp);
  }
  
  result = (int)((stk::Asymp const *)arg1)->getState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Asymp::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::lastOut",1,"stk::Asymp const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_lastOut",1,SWIGTYPE_p_stk__Asymp);
  }
  
  result = (stk::StkFloat)((stk::Asymp const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Asymp::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::tick",1,"stk::Asymp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_tick",1,SWIGTYPE_p_stk__Asymp);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Asymp::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::tick",1,"stk::Asymp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Asymp::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Asymp::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_tick",1,SWIGTYPE_p_stk__Asymp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Asymp_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Asymp *arg1 = (stk::Asymp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Asymp::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Asymp::tick",1,"stk::Asymp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Asymp::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Asymp,0))){
    SWIG_fail_ptr("Asymp_tick",1,SWIGTYPE_p_stk__Asymp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Asymp_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Asymp_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Asymp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Asymp_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Asymp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Asymp_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Asymp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Asymp_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Asymp_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Asymp::tick()\n"
    "    stk::Asymp::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Asymp::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Asymp(void *obj) {
stk::Asymp *arg1 = (stk::Asymp *) obj;
delete arg1;
}
static int _proxy__wrap_new_Asymp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Asymp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Asymp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Asymp_methods[]= {
    { "keyOn", _wrap_Asymp_keyOn},
    { "keyOff", _wrap_Asymp_keyOff},
    { "setTau", _wrap_Asymp_setTau},
    { "setTime", _wrap_Asymp_setTime},
    { "setT60", _wrap_Asymp_setT60},
    { "setTarget", _wrap_Asymp_setTarget},
    { "setValue", _wrap_Asymp_setValue},
    { "getState", _wrap_Asymp_getState},
    { "lastOut", _wrap_Asymp_lastOut},
    { "tick", _wrap_Asymp_tick},
    {0,0}
};
static swig_lua_method swig_Asymp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Asymp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Asymp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Asymp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Asymp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Asymp_SwigStatic = {
    "Asymp",
    swig_Asymp_SwigStatic_methods,
    swig_Asymp_SwigStatic_attributes,
    swig_Asymp_SwigStatic_constants,
    swig_Asymp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Asymp_bases[] = {0,0};
static const char *swig_Asymp_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_Asymp = { "Asymp", "Asymp", &SWIGTYPE_p_stk__Asymp,_proxy__wrap_new_Asymp, swig_delete_Asymp, swig_Asymp_methods, swig_Asymp_attributes, &swig_Asymp_SwigStatic, swig_Asymp_meta, swig_Asymp_bases, swig_Asymp_base_names };

static int _wrap_MAX_BANDED_MODES_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("stk::MAX_BANDED_MODES",0,0)
  result = (int)(int)stk::MAX_BANDED_MODES;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BandedWG(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *result = 0 ;
  
  SWIG_check_num_args("stk::BandedWG::BandedWG",0,0)
  result = (stk::BandedWG *)new stk::BandedWG();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BandedWG,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  
  SWIG_check_num_args("stk::BandedWG::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::clear",1,"stk::BandedWG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_clear",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_setStrikePosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BandedWG::setStrikePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::setStrikePosition",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::setStrikePosition",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_setStrikePosition",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setStrikePosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_setPreset(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("stk::BandedWG::setPreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::setPreset",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::setPreset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_setPreset",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPreset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BandedWG::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::setFrequency",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_setFrequency",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_startBowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BandedWG::startBowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::startBowing",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::startBowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BandedWG::startBowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_startBowing",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_stopBowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BandedWG::stopBowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::stopBowing",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::stopBowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_stopBowing",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_pluck(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BandedWG::pluck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::pluck",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::pluck",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_pluck",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->pluck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BandedWG::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::noteOn",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BandedWG::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_noteOn",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BandedWG::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::noteOff",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_noteOff",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BandedWG::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::controlChange",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BandedWG::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_controlChange",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BandedWG::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::tick",1,"stk::BandedWG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BandedWG::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_tick",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BandedWG::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::tick",1,"stk::BandedWG *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_tick",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BandedWG::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::tick",1,"stk::BandedWG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BandedWG::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BandedWG::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_tick",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BandedWG_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::BandedWG *arg1 = (stk::BandedWG *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BandedWG::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BandedWG::tick",1,"stk::BandedWG *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BandedWG::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BandedWG,0))){
    SWIG_fail_ptr("BandedWG_tick",1,SWIGTYPE_p_stk__BandedWG);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BandedWG_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BandedWG_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BandedWG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BandedWG_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BandedWG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BandedWG_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BandedWG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BandedWG_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BandedWG, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BandedWG_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BandedWG_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BandedWG::tick(unsigned int)\n"
    "    stk::BandedWG::tick()\n"
    "    stk::BandedWG::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BandedWG::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BandedWG(void *obj) {
stk::BandedWG *arg1 = (stk::BandedWG *) obj;
delete arg1;
}
static int _proxy__wrap_new_BandedWG(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BandedWG);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BandedWG_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BandedWG_methods[]= {
    { "clear", _wrap_BandedWG_clear},
    { "setStrikePosition", _wrap_BandedWG_setStrikePosition},
    { "setPreset", _wrap_BandedWG_setPreset},
    { "setFrequency", _wrap_BandedWG_setFrequency},
    { "startBowing", _wrap_BandedWG_startBowing},
    { "stopBowing", _wrap_BandedWG_stopBowing},
    { "pluck", _wrap_BandedWG_pluck},
    { "noteOn", _wrap_BandedWG_noteOn},
    { "noteOff", _wrap_BandedWG_noteOff},
    { "controlChange", _wrap_BandedWG_controlChange},
    { "tick", _wrap_BandedWG_tick},
    {0,0}
};
static swig_lua_method swig_BandedWG_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BandedWG_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BandedWG_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BandedWG_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BandedWG_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BandedWG_Sf_SwigStatic = {
    "BandedWG",
    swig_BandedWG_Sf_SwigStatic_methods,
    swig_BandedWG_Sf_SwigStatic_attributes,
    swig_BandedWG_Sf_SwigStatic_constants,
    swig_BandedWG_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BandedWG_bases[] = {0,0};
static const char *swig_BandedWG_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_BandedWG = { "BandedWG", "BandedWG", &SWIGTYPE_p_stk__BandedWG,_proxy__wrap_new_BandedWG, swig_delete_BandedWG, swig_BandedWG_methods, swig_BandedWG_attributes, &swig_BandedWG_Sf_SwigStatic, swig_BandedWG_meta, swig_BandedWG_bases, swig_BandedWG_base_names };

static int _wrap_new_BeeThree(lua_State* L) {
  int SWIG_arg = 0;
  stk::BeeThree *result = 0 ;
  
  SWIG_check_num_args("stk::BeeThree::BeeThree",0,0)
  result = (stk::BeeThree *)new stk::BeeThree();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BeeThree,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeeThree_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BeeThree::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BeeThree::noteOn",1,"stk::BeeThree *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BeeThree::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BeeThree::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BeeThree,0))){
    SWIG_fail_ptr("BeeThree_noteOn",1,SWIGTYPE_p_stk__BeeThree);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeeThree_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BeeThree::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BeeThree::tick",1,"stk::BeeThree *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BeeThree::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BeeThree,0))){
    SWIG_fail_ptr("BeeThree_tick",1,SWIGTYPE_p_stk__BeeThree);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeeThree_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BeeThree::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BeeThree::tick",1,"stk::BeeThree *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BeeThree,0))){
    SWIG_fail_ptr("BeeThree_tick",1,SWIGTYPE_p_stk__BeeThree);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeeThree_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BeeThree::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BeeThree::tick",1,"stk::BeeThree *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BeeThree::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BeeThree::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BeeThree,0))){
    SWIG_fail_ptr("BeeThree_tick",1,SWIGTYPE_p_stk__BeeThree);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BeeThree_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeeThree_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::BeeThree *arg1 = (stk::BeeThree *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BeeThree::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BeeThree::tick",1,"stk::BeeThree *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BeeThree::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BeeThree,0))){
    SWIG_fail_ptr("BeeThree_tick",1,SWIGTYPE_p_stk__BeeThree);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BeeThree_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BeeThree_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BeeThree, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BeeThree_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BeeThree, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BeeThree_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BeeThree, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BeeThree_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BeeThree, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BeeThree_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BeeThree_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BeeThree::tick(unsigned int)\n"
    "    stk::BeeThree::tick()\n"
    "    stk::BeeThree::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BeeThree::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BeeThree(void *obj) {
stk::BeeThree *arg1 = (stk::BeeThree *) obj;
delete arg1;
}
static int _proxy__wrap_new_BeeThree(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BeeThree);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BeeThree_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BeeThree_methods[]= {
    { "noteOn", _wrap_BeeThree_noteOn},
    { "tick", _wrap_BeeThree_tick},
    {0,0}
};
static swig_lua_method swig_BeeThree_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BeeThree_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BeeThree_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BeeThree_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BeeThree_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BeeThree_Sf_SwigStatic = {
    "BeeThree",
    swig_BeeThree_Sf_SwigStatic_methods,
    swig_BeeThree_Sf_SwigStatic_attributes,
    swig_BeeThree_Sf_SwigStatic_constants,
    swig_BeeThree_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BeeThree_bases[] = {0,0};
static const char *swig_BeeThree_base_names[] = {"stk::FM *",0};
static swig_lua_class _wrap_class_BeeThree = { "BeeThree", "BeeThree", &SWIGTYPE_p_stk__BeeThree,_proxy__wrap_new_BeeThree, swig_delete_BeeThree, swig_BeeThree_methods, swig_BeeThree_attributes, &swig_BeeThree_Sf_SwigStatic, swig_BeeThree_meta, swig_BeeThree_bases, swig_BeeThree_base_names };

static int _wrap_new_BiQuad(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *result = 0 ;
  
  SWIG_check_num_args("stk::BiQuad::BiQuad",0,0)
  result = (stk::BiQuad *)new stk::BiQuad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BiQuad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_ignoreSampleRateChange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stk::BiQuad::ignoreSampleRateChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::ignoreSampleRateChange",1,"stk::BiQuad *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::BiQuad::ignoreSampleRateChange",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_ignoreSampleRateChange",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->ignoreSampleRateChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_ignoreSampleRateChange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  
  SWIG_check_num_args("stk::BiQuad::ignoreSampleRateChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::ignoreSampleRateChange",1,"stk::BiQuad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_ignoreSampleRateChange",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  (arg1)->ignoreSampleRateChange();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_ignoreSampleRateChange(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BiQuad_ignoreSampleRateChange__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiQuad_ignoreSampleRateChange__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiQuad_ignoreSampleRateChange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BiQuad::ignoreSampleRateChange(bool)\n"
    "    stk::BiQuad::ignoreSampleRateChange()\n");
  lua_error(L);return 0;
}


static int _wrap_BiQuad_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  stk::StkFloat arg5 ;
  stk::StkFloat arg6 ;
  bool arg7 ;
  
  SWIG_check_num_args("stk::BiQuad::setCoefficients",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setCoefficients",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BiQuad::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::BiQuad::setCoefficients",4,"stk::StkFloat");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::BiQuad::setCoefficients",5,"stk::StkFloat");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("stk::BiQuad::setCoefficients",6,"stk::StkFloat");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("stk::BiQuad::setCoefficients",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setCoefficients",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  arg5 = (stk::StkFloat)lua_tonumber(L, 5);
  arg6 = (stk::StkFloat)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->setCoefficients(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  stk::StkFloat arg5 ;
  stk::StkFloat arg6 ;
  
  SWIG_check_num_args("stk::BiQuad::setCoefficients",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setCoefficients",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BiQuad::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::BiQuad::setCoefficients",4,"stk::StkFloat");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::BiQuad::setCoefficients",5,"stk::StkFloat");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("stk::BiQuad::setCoefficients",6,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setCoefficients",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  arg5 = (stk::StkFloat)lua_tonumber(L, 5);
  arg6 = (stk::StkFloat)lua_tonumber(L, 6);
  (arg1)->setCoefficients(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setCoefficients(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_BiQuad_setCoefficients__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_BiQuad_setCoefficients__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiQuad_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BiQuad::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat,stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::BiQuad::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat,stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_BiQuad_setB0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BiQuad::setB0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setB0",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setB0",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setB0",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setB1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BiQuad::setB1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setB1",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setB1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setB1",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setB2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BiQuad::setB2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setB2",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setB2",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setB2",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setA1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BiQuad::setA1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setA1",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setA1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setA1",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setA2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BiQuad::setA2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setA2",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setA2",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setA2",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setResonance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("stk::BiQuad::setResonance",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setResonance",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setResonance",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BiQuad::setResonance",3,"stk::StkFloat");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::BiQuad::setResonance",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setResonance",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setResonance(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setResonance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BiQuad::setResonance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setResonance",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setResonance",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BiQuad::setResonance",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setResonance",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setResonance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setResonance(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiQuad_setResonance__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiQuad_setResonance__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiQuad_setResonance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BiQuad::setResonance(stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::BiQuad::setResonance(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_BiQuad_setNotch(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BiQuad::setNotch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setNotch",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::setNotch",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BiQuad::setNotch",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setNotch",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setNotch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_setEqualGainZeroes(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  
  SWIG_check_num_args("stk::BiQuad::setEqualGainZeroes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::setEqualGainZeroes",1,"stk::BiQuad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_setEqualGainZeroes",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  (arg1)->setEqualGainZeroes();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BiQuad::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::lastOut",1,"stk::BiQuad const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_lastOut",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  result = (stk::StkFloat)((stk::BiQuad const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BiQuad::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::tick",1,"stk::BiQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BiQuad::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_tick",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BiQuad::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::tick",1,"stk::BiQuad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BiQuad::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BiQuad::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_tick",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BiQuad::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::tick",1,"stk::BiQuad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BiQuad::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_tick",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BiQuad::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::tick",1,"stk::BiQuad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BiQuad::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::BiQuad::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::BiQuad::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::BiQuad::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_tick",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BiQuad::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::tick",1,"stk::BiQuad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BiQuad::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::BiQuad::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::BiQuad::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_tick",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::BiQuad *arg1 = (stk::BiQuad *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BiQuad::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BiQuad::tick",1,"stk::BiQuad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BiQuad::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::BiQuad::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BiQuad,0))){
    SWIG_fail_ptr("BiQuad_tick",1,SWIGTYPE_p_stk__BiQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BiQuad_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiQuad_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BiQuad_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiQuad_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BiQuad_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiQuad_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiQuad_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BiQuad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiQuad_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiQuad_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BiQuad::tick(stk::StkFloat)\n"
    "    stk::BiQuad::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BiQuad::tick(stk::StkFrames &)\n"
    "    stk::BiQuad::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::BiQuad::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::BiQuad::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiQuad(void *obj) {
stk::BiQuad *arg1 = (stk::BiQuad *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiQuad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiQuad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiQuad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiQuad_methods[]= {
    { "ignoreSampleRateChange", _wrap_BiQuad_ignoreSampleRateChange},
    { "setCoefficients", _wrap_BiQuad_setCoefficients},
    { "setB0", _wrap_BiQuad_setB0},
    { "setB1", _wrap_BiQuad_setB1},
    { "setB2", _wrap_BiQuad_setB2},
    { "setA1", _wrap_BiQuad_setA1},
    { "setA2", _wrap_BiQuad_setA2},
    { "setResonance", _wrap_BiQuad_setResonance},
    { "setNotch", _wrap_BiQuad_setNotch},
    { "setEqualGainZeroes", _wrap_BiQuad_setEqualGainZeroes},
    { "lastOut", _wrap_BiQuad_lastOut},
    { "tick", _wrap_BiQuad_tick},
    {0,0}
};
static swig_lua_method swig_BiQuad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiQuad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiQuad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiQuad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiQuad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiQuad_Sf_SwigStatic = {
    "BiQuad",
    swig_BiQuad_Sf_SwigStatic_methods,
    swig_BiQuad_Sf_SwigStatic_attributes,
    swig_BiQuad_Sf_SwigStatic_constants,
    swig_BiQuad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiQuad_bases[] = {0,0};
static const char *swig_BiQuad_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_BiQuad = { "BiQuad", "BiQuad", &SWIGTYPE_p_stk__BiQuad,_proxy__wrap_new_BiQuad, swig_delete_BiQuad, swig_BiQuad_methods, swig_BiQuad_attributes, &swig_BiQuad_Sf_SwigStatic, swig_BiQuad_meta, swig_BiQuad_bases, swig_BiQuad_base_names };

static int _wrap_new_Blit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Blit *result = 0 ;
  
  SWIG_check_num_args("stk::Blit::Blit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Blit::Blit",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Blit *)new stk::Blit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Blit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Blit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *result = 0 ;
  
  SWIG_check_num_args("stk::Blit::Blit",0,0)
  result = (stk::Blit *)new stk::Blit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Blit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Blit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Blit__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Blit__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Blit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Blit::Blit(stk::StkFloat)\n"
    "    stk::Blit::Blit()\n");
  lua_error(L);return 0;
}


static int _wrap_Blit_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  
  SWIG_check_num_args("stk::Blit::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::reset",1,"stk::Blit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_reset",1,SWIGTYPE_p_stk__Blit);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_setPhase(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Blit::setPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::setPhase",1,"stk::Blit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Blit::setPhase",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_setPhase",1,SWIGTYPE_p_stk__Blit);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Blit::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::getPhase",1,"stk::Blit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_getPhase",1,SWIGTYPE_p_stk__Blit);
  }
  
  result = (stk::StkFloat)((stk::Blit const *)arg1)->getPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Blit::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::setFrequency",1,"stk::Blit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Blit::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_setFrequency",1,SWIGTYPE_p_stk__Blit);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_setHarmonics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::Blit::setHarmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::setHarmonics",1,"stk::Blit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Blit::setHarmonics",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_setHarmonics",1,SWIGTYPE_p_stk__Blit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHarmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_setHarmonics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  
  SWIG_check_num_args("stk::Blit::setHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::setHarmonics",1,"stk::Blit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_setHarmonics",1,SWIGTYPE_p_stk__Blit);
  }
  
  (arg1)->setHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_setHarmonics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Blit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Blit_setHarmonics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Blit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Blit_setHarmonics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Blit_setHarmonics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Blit::setHarmonics(unsigned int)\n"
    "    stk::Blit::setHarmonics()\n");
  lua_error(L);return 0;
}


static int _wrap_Blit_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Blit::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::lastOut",1,"stk::Blit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_lastOut",1,SWIGTYPE_p_stk__Blit);
  }
  
  result = (stk::StkFloat)((stk::Blit const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Blit::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::tick",1,"stk::Blit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_tick",1,SWIGTYPE_p_stk__Blit);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Blit::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::tick",1,"stk::Blit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Blit::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Blit::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_tick",1,SWIGTYPE_p_stk__Blit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Blit_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Blit *arg1 = (stk::Blit *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Blit::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Blit::tick",1,"stk::Blit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Blit::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Blit,0))){
    SWIG_fail_ptr("Blit_tick",1,SWIGTYPE_p_stk__Blit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Blit_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Blit_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Blit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Blit_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Blit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Blit_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Blit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Blit_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Blit_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Blit::tick()\n"
    "    stk::Blit::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Blit::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Blit(void *obj) {
stk::Blit *arg1 = (stk::Blit *) obj;
delete arg1;
}
static int _proxy__wrap_new_Blit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Blit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Blit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Blit_methods[]= {
    { "reset", _wrap_Blit_reset},
    { "setPhase", _wrap_Blit_setPhase},
    { "getPhase", _wrap_Blit_getPhase},
    { "setFrequency", _wrap_Blit_setFrequency},
    { "setHarmonics", _wrap_Blit_setHarmonics},
    { "lastOut", _wrap_Blit_lastOut},
    { "tick", _wrap_Blit_tick},
    {0,0}
};
static swig_lua_method swig_Blit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Blit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Blit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Blit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Blit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Blit_Sf_SwigStatic = {
    "Blit",
    swig_Blit_Sf_SwigStatic_methods,
    swig_Blit_Sf_SwigStatic_attributes,
    swig_Blit_Sf_SwigStatic_constants,
    swig_Blit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Blit_bases[] = {0,0};
static const char *swig_Blit_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_Blit = { "Blit", "Blit", &SWIGTYPE_p_stk__Blit,_proxy__wrap_new_Blit, swig_delete_Blit, swig_Blit_methods, swig_Blit_attributes, &swig_Blit_Sf_SwigStatic, swig_Blit_meta, swig_Blit_bases, swig_Blit_base_names };

static int _wrap_new_BlitSaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::BlitSaw *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSaw::BlitSaw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::BlitSaw::BlitSaw",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::BlitSaw *)new stk::BlitSaw(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BlitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSaw::BlitSaw",0,0)
  result = (stk::BlitSaw *)new stk::BlitSaw();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BlitSaw,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSaw(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BlitSaw__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BlitSaw__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BlitSaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlitSaw::BlitSaw(stk::StkFloat)\n"
    "    stk::BlitSaw::BlitSaw()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSaw_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  
  SWIG_check_num_args("stk::BlitSaw::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::reset",1,"stk::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_reset",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlitSaw::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::setFrequency",1,"stk::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlitSaw::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setFrequency",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setHarmonics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::BlitSaw::setHarmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::setHarmonics",1,"stk::BlitSaw *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlitSaw::setHarmonics",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setHarmonics",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHarmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setHarmonics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  
  SWIG_check_num_args("stk::BlitSaw::setHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::setHarmonics",1,"stk::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_setHarmonics",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  (arg1)->setHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_setHarmonics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitSaw_setHarmonics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlitSaw_setHarmonics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitSaw_setHarmonics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlitSaw::setHarmonics(unsigned int)\n"
    "    stk::BlitSaw::setHarmonics()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSaw_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlitSaw::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::lastOut",1,"stk::BlitSaw const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_lastOut",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  result = (stk::StkFloat)((stk::BlitSaw const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlitSaw::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::tick",1,"stk::BlitSaw *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_tick",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSaw::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::tick",1,"stk::BlitSaw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlitSaw::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlitSaw::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_tick",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlitSaw_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSaw *arg1 = (stk::BlitSaw *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSaw::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSaw::tick",1,"stk::BlitSaw *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlitSaw::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSaw,0))){
    SWIG_fail_ptr("BlitSaw_tick",1,SWIGTYPE_p_stk__BlitSaw);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlitSaw_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSaw_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitSaw_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BlitSaw_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSaw, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BlitSaw_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitSaw_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlitSaw::tick()\n"
    "    stk::BlitSaw::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BlitSaw::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BlitSaw(void *obj) {
stk::BlitSaw *arg1 = (stk::BlitSaw *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlitSaw(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlitSaw);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlitSaw_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BlitSaw_methods[]= {
    { "reset", _wrap_BlitSaw_reset},
    { "setFrequency", _wrap_BlitSaw_setFrequency},
    { "setHarmonics", _wrap_BlitSaw_setHarmonics},
    { "lastOut", _wrap_BlitSaw_lastOut},
    { "tick", _wrap_BlitSaw_tick},
    {0,0}
};
static swig_lua_method swig_BlitSaw_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlitSaw_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlitSaw_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlitSaw_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlitSaw_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlitSaw_Sf_SwigStatic = {
    "BlitSaw",
    swig_BlitSaw_Sf_SwigStatic_methods,
    swig_BlitSaw_Sf_SwigStatic_attributes,
    swig_BlitSaw_Sf_SwigStatic_constants,
    swig_BlitSaw_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlitSaw_bases[] = {0,0};
static const char *swig_BlitSaw_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_BlitSaw = { "BlitSaw", "BlitSaw", &SWIGTYPE_p_stk__BlitSaw,_proxy__wrap_new_BlitSaw, swig_delete_BlitSaw, swig_BlitSaw_methods, swig_BlitSaw_attributes, &swig_BlitSaw_Sf_SwigStatic, swig_BlitSaw_meta, swig_BlitSaw_bases, swig_BlitSaw_base_names };

static int _wrap_new_BlitSquare__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::BlitSquare *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSquare::BlitSquare",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::BlitSquare::BlitSquare",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::BlitSquare *)new stk::BlitSquare(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BlitSquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSquare__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSquare::BlitSquare",0,0)
  result = (stk::BlitSquare *)new stk::BlitSquare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BlitSquare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlitSquare(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BlitSquare__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BlitSquare__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BlitSquare'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlitSquare::BlitSquare(stk::StkFloat)\n"
    "    stk::BlitSquare::BlitSquare()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSquare_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  
  SWIG_check_num_args("stk::BlitSquare::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::reset",1,"stk::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_reset",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_setPhase(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlitSquare::setPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::setPhase",1,"stk::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlitSquare::setPhase",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_setPhase",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_getPhase(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlitSquare::getPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::getPhase",1,"stk::BlitSquare const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_getPhase",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  result = (stk::StkFloat)((stk::BlitSquare const *)arg1)->getPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlitSquare::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::setFrequency",1,"stk::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlitSquare::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_setFrequency",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_setHarmonics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::BlitSquare::setHarmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::setHarmonics",1,"stk::BlitSquare *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlitSquare::setHarmonics",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_setHarmonics",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setHarmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_setHarmonics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  
  SWIG_check_num_args("stk::BlitSquare::setHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::setHarmonics",1,"stk::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_setHarmonics",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  (arg1)->setHarmonics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_setHarmonics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitSquare_setHarmonics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlitSquare_setHarmonics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitSquare_setHarmonics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlitSquare::setHarmonics(unsigned int)\n"
    "    stk::BlitSquare::setHarmonics()\n");
  lua_error(L);return 0;
}


static int _wrap_BlitSquare_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlitSquare::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::lastOut",1,"stk::BlitSquare const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_lastOut",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  result = (stk::StkFloat)((stk::BlitSquare const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlitSquare::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::tick",1,"stk::BlitSquare *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_tick",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSquare::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::tick",1,"stk::BlitSquare *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlitSquare::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlitSquare::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_tick",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlitSquare_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlitSquare *arg1 = (stk::BlitSquare *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlitSquare::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlitSquare::tick",1,"stk::BlitSquare *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlitSquare::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlitSquare,0))){
    SWIG_fail_ptr("BlitSquare_tick",1,SWIGTYPE_p_stk__BlitSquare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlitSquare_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlitSquare_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlitSquare_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BlitSquare_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlitSquare, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BlitSquare_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlitSquare_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlitSquare::tick()\n"
    "    stk::BlitSquare::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BlitSquare::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BlitSquare(void *obj) {
stk::BlitSquare *arg1 = (stk::BlitSquare *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlitSquare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlitSquare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlitSquare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BlitSquare_methods[]= {
    { "reset", _wrap_BlitSquare_reset},
    { "setPhase", _wrap_BlitSquare_setPhase},
    { "getPhase", _wrap_BlitSquare_getPhase},
    { "setFrequency", _wrap_BlitSquare_setFrequency},
    { "setHarmonics", _wrap_BlitSquare_setHarmonics},
    { "lastOut", _wrap_BlitSquare_lastOut},
    { "tick", _wrap_BlitSquare_tick},
    {0,0}
};
static swig_lua_method swig_BlitSquare_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlitSquare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlitSquare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlitSquare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlitSquare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlitSquare_Sf_SwigStatic = {
    "BlitSquare",
    swig_BlitSquare_Sf_SwigStatic_methods,
    swig_BlitSquare_Sf_SwigStatic_attributes,
    swig_BlitSquare_Sf_SwigStatic_constants,
    swig_BlitSquare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlitSquare_bases[] = {0,0};
static const char *swig_BlitSquare_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_BlitSquare = { "BlitSquare", "BlitSquare", &SWIGTYPE_p_stk__BlitSquare,_proxy__wrap_new_BlitSquare, swig_delete_BlitSquare, swig_BlitSquare_methods, swig_BlitSquare_attributes, &swig_BlitSquare_Sf_SwigStatic, swig_BlitSquare_meta, swig_BlitSquare_bases, swig_BlitSquare_base_names };

static int _wrap_new_BlowBotl(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *result = 0 ;
  
  SWIG_check_num_args("stk::BlowBotl::BlowBotl",0,0)
  result = (stk::BlowBotl *)new stk::BlowBotl();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BlowBotl,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  
  SWIG_check_num_args("stk::BlowBotl::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::clear",1,"stk::BlowBotl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_clear",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowBotl::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::setFrequency",1,"stk::BlowBotl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowBotl::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_setFrequency",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BlowBotl::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::startBlowing",1,"stk::BlowBotl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowBotl::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowBotl::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_startBlowing",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowBotl::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::stopBlowing",1,"stk::BlowBotl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowBotl::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_stopBlowing",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BlowBotl::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::noteOn",1,"stk::BlowBotl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowBotl::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowBotl::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_noteOn",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowBotl::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::noteOff",1,"stk::BlowBotl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowBotl::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_noteOff",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BlowBotl::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::controlChange",1,"stk::BlowBotl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowBotl::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowBotl::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_controlChange",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlowBotl::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::tick",1,"stk::BlowBotl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowBotl::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_tick",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlowBotl::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::tick",1,"stk::BlowBotl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_tick",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlowBotl::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::tick",1,"stk::BlowBotl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlowBotl::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowBotl::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_tick",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlowBotl_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowBotl *arg1 = (stk::BlowBotl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlowBotl::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowBotl::tick",1,"stk::BlowBotl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlowBotl::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowBotl,0))){
    SWIG_fail_ptr("BlowBotl_tick",1,SWIGTYPE_p_stk__BlowBotl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlowBotl_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowBotl_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowBotl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlowBotl_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowBotl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BlowBotl_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowBotl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlowBotl_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowBotl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BlowBotl_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlowBotl_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlowBotl::tick(unsigned int)\n"
    "    stk::BlowBotl::tick()\n"
    "    stk::BlowBotl::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BlowBotl::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BlowBotl(void *obj) {
stk::BlowBotl *arg1 = (stk::BlowBotl *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlowBotl(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlowBotl);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlowBotl_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BlowBotl_methods[]= {
    { "clear", _wrap_BlowBotl_clear},
    { "setFrequency", _wrap_BlowBotl_setFrequency},
    { "startBlowing", _wrap_BlowBotl_startBlowing},
    { "stopBlowing", _wrap_BlowBotl_stopBlowing},
    { "noteOn", _wrap_BlowBotl_noteOn},
    { "noteOff", _wrap_BlowBotl_noteOff},
    { "controlChange", _wrap_BlowBotl_controlChange},
    { "tick", _wrap_BlowBotl_tick},
    {0,0}
};
static swig_lua_method swig_BlowBotl_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlowBotl_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlowBotl_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlowBotl_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlowBotl_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlowBotl_Sf_SwigStatic = {
    "BlowBotl",
    swig_BlowBotl_Sf_SwigStatic_methods,
    swig_BlowBotl_Sf_SwigStatic_attributes,
    swig_BlowBotl_Sf_SwigStatic_constants,
    swig_BlowBotl_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlowBotl_bases[] = {0,0};
static const char *swig_BlowBotl_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_BlowBotl = { "BlowBotl", "BlowBotl", &SWIGTYPE_p_stk__BlowBotl,_proxy__wrap_new_BlowBotl, swig_delete_BlowBotl, swig_BlowBotl_methods, swig_BlowBotl_attributes, &swig_BlowBotl_Sf_SwigStatic, swig_BlowBotl_meta, swig_BlowBotl_bases, swig_BlowBotl_base_names };

static int _wrap_new_BlowHole(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::BlowHole *result = 0 ;
  
  SWIG_check_num_args("stk::BlowHole::BlowHole",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::BlowHole::BlowHole",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::BlowHole *)new stk::BlowHole(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BlowHole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  
  SWIG_check_num_args("stk::BlowHole::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::clear",1,"stk::BlowHole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_clear",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowHole::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::setFrequency",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_setFrequency",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_setTonehole(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowHole::setTonehole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::setTonehole",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::setTonehole",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_setTonehole",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setTonehole(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_setVent(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowHole::setVent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::setVent",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::setVent",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_setVent",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BlowHole::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::startBlowing",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowHole::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_startBlowing",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowHole::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::stopBlowing",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_stopBlowing",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BlowHole::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::noteOn",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowHole::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_noteOn",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BlowHole::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::noteOff",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_noteOff",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::BlowHole::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::controlChange",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowHole::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_controlChange",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlowHole::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::tick",1,"stk::BlowHole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BlowHole::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_tick",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BlowHole::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::tick",1,"stk::BlowHole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_tick",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlowHole::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::tick",1,"stk::BlowHole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlowHole::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BlowHole::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_tick",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlowHole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::BlowHole *arg1 = (stk::BlowHole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BlowHole::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BlowHole::tick",1,"stk::BlowHole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BlowHole::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BlowHole,0))){
    SWIG_fail_ptr("BlowHole_tick",1,SWIGTYPE_p_stk__BlowHole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BlowHole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlowHole_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowHole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BlowHole_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowHole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BlowHole_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowHole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BlowHole_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BlowHole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BlowHole_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BlowHole_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BlowHole::tick(unsigned int)\n"
    "    stk::BlowHole::tick()\n"
    "    stk::BlowHole::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BlowHole::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BlowHole(void *obj) {
stk::BlowHole *arg1 = (stk::BlowHole *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlowHole(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlowHole);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlowHole_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BlowHole_methods[]= {
    { "clear", _wrap_BlowHole_clear},
    { "setFrequency", _wrap_BlowHole_setFrequency},
    { "setTonehole", _wrap_BlowHole_setTonehole},
    { "setVent", _wrap_BlowHole_setVent},
    { "startBlowing", _wrap_BlowHole_startBlowing},
    { "stopBlowing", _wrap_BlowHole_stopBlowing},
    { "noteOn", _wrap_BlowHole_noteOn},
    { "noteOff", _wrap_BlowHole_noteOff},
    { "controlChange", _wrap_BlowHole_controlChange},
    { "tick", _wrap_BlowHole_tick},
    {0,0}
};
static swig_lua_method swig_BlowHole_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlowHole_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlowHole_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlowHole_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlowHole_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlowHole_Sf_SwigStatic = {
    "BlowHole",
    swig_BlowHole_Sf_SwigStatic_methods,
    swig_BlowHole_Sf_SwigStatic_attributes,
    swig_BlowHole_Sf_SwigStatic_constants,
    swig_BlowHole_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlowHole_bases[] = {0,0};
static const char *swig_BlowHole_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_BlowHole = { "BlowHole", "BlowHole", &SWIGTYPE_p_stk__BlowHole,_proxy__wrap_new_BlowHole, swig_delete_BlowHole, swig_BlowHole_methods, swig_BlowHole_attributes, &swig_BlowHole_Sf_SwigStatic, swig_BlowHole_meta, swig_BlowHole_bases, swig_BlowHole_base_names };

static int _wrap_new_BowTable(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *result = 0 ;
  
  SWIG_check_num_args("stk::BowTable::BowTable",0,0)
  result = (stk::BowTable *)new stk::BowTable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__BowTable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_setOffset(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BowTable::setOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::setOffset",1,"stk::BowTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BowTable::setOffset",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_setOffset",1,SWIGTYPE_p_stk__BowTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_setSlope(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BowTable::setSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::setSlope",1,"stk::BowTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BowTable::setSlope",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_setSlope",1,SWIGTYPE_p_stk__BowTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setSlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_setMinOutput(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BowTable::setMinOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::setMinOutput",1,"stk::BowTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BowTable::setMinOutput",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_setMinOutput",1,SWIGTYPE_p_stk__BowTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setMinOutput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_setMaxOutput(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::BowTable::setMaxOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::setMaxOutput",1,"stk::BowTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BowTable::setMaxOutput",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_setMaxOutput",1,SWIGTYPE_p_stk__BowTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setMaxOutput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::BowTable::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::tick",1,"stk::BowTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::BowTable::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_tick",1,SWIGTYPE_p_stk__BowTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BowTable::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::tick",1,"stk::BowTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BowTable::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::BowTable::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_tick",1,SWIGTYPE_p_stk__BowTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BowTable::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::tick",1,"stk::BowTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BowTable::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_tick",1,SWIGTYPE_p_stk__BowTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BowTable::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::tick",1,"stk::BowTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BowTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::BowTable::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::BowTable::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::BowTable::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_tick",1,SWIGTYPE_p_stk__BowTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BowTable::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::tick",1,"stk::BowTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BowTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::BowTable::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::BowTable::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_tick",1,SWIGTYPE_p_stk__BowTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::BowTable *arg1 = (stk::BowTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::BowTable::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::BowTable::tick",1,"stk::BowTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::BowTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::BowTable::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__BowTable,0))){
    SWIG_fail_ptr("BowTable_tick",1,SWIGTYPE_p_stk__BowTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("BowTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BowTable_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BowTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BowTable_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BowTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BowTable_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BowTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BowTable_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BowTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BowTable_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BowTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BowTable_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__BowTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BowTable_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BowTable_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::BowTable::tick(stk::StkFloat)\n"
    "    stk::BowTable::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::BowTable::tick(stk::StkFrames &)\n"
    "    stk::BowTable::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::BowTable::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::BowTable::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_BowTable(void *obj) {
stk::BowTable *arg1 = (stk::BowTable *) obj;
delete arg1;
}
static int _proxy__wrap_new_BowTable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BowTable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BowTable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BowTable_methods[]= {
    { "setOffset", _wrap_BowTable_setOffset},
    { "setSlope", _wrap_BowTable_setSlope},
    { "setMinOutput", _wrap_BowTable_setMinOutput},
    { "setMaxOutput", _wrap_BowTable_setMaxOutput},
    { "tick", _wrap_BowTable_tick},
    {0,0}
};
static swig_lua_method swig_BowTable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BowTable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BowTable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BowTable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BowTable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BowTable_Sf_SwigStatic = {
    "BowTable",
    swig_BowTable_Sf_SwigStatic_methods,
    swig_BowTable_Sf_SwigStatic_attributes,
    swig_BowTable_Sf_SwigStatic_constants,
    swig_BowTable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BowTable_bases[] = {0,0};
static const char *swig_BowTable_base_names[] = {"stk::Function *",0};
static swig_lua_class _wrap_class_BowTable = { "BowTable", "BowTable", &SWIGTYPE_p_stk__BowTable,_proxy__wrap_new_BowTable, swig_delete_BowTable, swig_BowTable_methods, swig_BowTable_attributes, &swig_BowTable_Sf_SwigStatic, swig_BowTable_meta, swig_BowTable_bases, swig_BowTable_base_names };

static int _wrap_Bowed_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  
  SWIG_check_num_args("stk::Bowed::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::clear",1,"stk::Bowed *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_clear",1,SWIGTYPE_p_stk__Bowed);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Bowed::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::setFrequency",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_setFrequency",1,SWIGTYPE_p_stk__Bowed);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_setVibrato(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Bowed::setVibrato",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::setVibrato",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::setVibrato",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_setVibrato",1,SWIGTYPE_p_stk__Bowed);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVibrato(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_startBowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Bowed::startBowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::startBowing",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::startBowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Bowed::startBowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_startBowing",1,SWIGTYPE_p_stk__Bowed);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_stopBowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Bowed::stopBowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::stopBowing",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::stopBowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_stopBowing",1,SWIGTYPE_p_stk__Bowed);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Bowed::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::noteOn",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Bowed::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_noteOn",1,SWIGTYPE_p_stk__Bowed);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Bowed::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::noteOff",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_noteOff",1,SWIGTYPE_p_stk__Bowed);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Bowed::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::controlChange",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Bowed::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_controlChange",1,SWIGTYPE_p_stk__Bowed);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Bowed::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::tick",1,"stk::Bowed *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Bowed::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_tick",1,SWIGTYPE_p_stk__Bowed);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Bowed *arg1 = (stk::Bowed *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Bowed::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Bowed::tick",1,"stk::Bowed *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Bowed,0))){
    SWIG_fail_ptr("Bowed_tick",1,SWIGTYPE_p_stk__Bowed);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bowed_tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Bowed, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Bowed_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Bowed, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Bowed_tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Bowed_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Bowed::tick(unsigned int)\n"
    "    stk::Bowed::tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_Bowed(void *obj) {
stk::Bowed *arg1 = (stk::Bowed *) obj;
delete arg1;
}
static swig_lua_attribute swig_Bowed_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Bowed_methods[]= {
    { "clear", _wrap_Bowed_clear},
    { "setFrequency", _wrap_Bowed_setFrequency},
    { "setVibrato", _wrap_Bowed_setVibrato},
    { "startBowing", _wrap_Bowed_startBowing},
    { "stopBowing", _wrap_Bowed_stopBowing},
    { "noteOn", _wrap_Bowed_noteOn},
    { "noteOff", _wrap_Bowed_noteOff},
    { "controlChange", _wrap_Bowed_controlChange},
    { "tick", _wrap_Bowed_tick},
    {0,0}
};
static swig_lua_method swig_Bowed_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Bowed_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Bowed_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Bowed_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Bowed_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Bowed_Sf_SwigStatic = {
    "Bowed",
    swig_Bowed_Sf_SwigStatic_methods,
    swig_Bowed_Sf_SwigStatic_attributes,
    swig_Bowed_Sf_SwigStatic_constants,
    swig_Bowed_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Bowed_bases[] = {0,0};
static const char *swig_Bowed_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Bowed = { "Bowed", "Bowed", &SWIGTYPE_p_stk__Bowed,0, swig_delete_Bowed, swig_Bowed_methods, swig_Bowed_attributes, &swig_Bowed_Sf_SwigStatic, swig_Bowed_meta, swig_Bowed_bases, swig_Bowed_base_names };

static int _wrap_new_Brass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Brass *result = 0 ;
  
  SWIG_check_num_args("stk::Brass::Brass",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Brass::Brass",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Brass *)new stk::Brass(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Brass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Brass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *result = 0 ;
  
  SWIG_check_num_args("stk::Brass::Brass",0,0)
  result = (stk::Brass *)new stk::Brass();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Brass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Brass(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Brass__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Brass__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Brass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Brass::Brass(stk::StkFloat)\n"
    "    stk::Brass::Brass()\n");
  lua_error(L);return 0;
}


static int _wrap_Brass_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  
  SWIG_check_num_args("stk::Brass::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::clear",1,"stk::Brass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_clear",1,SWIGTYPE_p_stk__Brass);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Brass::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::setFrequency",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_setFrequency",1,SWIGTYPE_p_stk__Brass);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_setLip(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Brass::setLip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::setLip",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::setLip",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_setLip",1,SWIGTYPE_p_stk__Brass);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setLip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Brass::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::startBlowing",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Brass::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_startBlowing",1,SWIGTYPE_p_stk__Brass);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Brass::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::stopBlowing",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_stopBlowing",1,SWIGTYPE_p_stk__Brass);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Brass::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::noteOn",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Brass::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_noteOn",1,SWIGTYPE_p_stk__Brass);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Brass::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::noteOff",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_noteOff",1,SWIGTYPE_p_stk__Brass);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Brass::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::controlChange",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Brass::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_controlChange",1,SWIGTYPE_p_stk__Brass);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Brass::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::tick",1,"stk::Brass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Brass::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_tick",1,SWIGTYPE_p_stk__Brass);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Brass::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::tick",1,"stk::Brass *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_tick",1,SWIGTYPE_p_stk__Brass);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Brass::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::tick",1,"stk::Brass *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Brass::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Brass::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_tick",1,SWIGTYPE_p_stk__Brass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Brass_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Brass *arg1 = (stk::Brass *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Brass::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Brass::tick",1,"stk::Brass *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Brass::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Brass,0))){
    SWIG_fail_ptr("Brass_tick",1,SWIGTYPE_p_stk__Brass);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Brass_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Brass_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Brass, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Brass_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Brass, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Brass_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Brass, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Brass_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Brass, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Brass_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Brass_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Brass::tick(unsigned int)\n"
    "    stk::Brass::tick()\n"
    "    stk::Brass::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Brass::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Brass(void *obj) {
stk::Brass *arg1 = (stk::Brass *) obj;
delete arg1;
}
static int _proxy__wrap_new_Brass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Brass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Brass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Brass_methods[]= {
    { "clear", _wrap_Brass_clear},
    { "setFrequency", _wrap_Brass_setFrequency},
    { "setLip", _wrap_Brass_setLip},
    { "startBlowing", _wrap_Brass_startBlowing},
    { "stopBlowing", _wrap_Brass_stopBlowing},
    { "noteOn", _wrap_Brass_noteOn},
    { "noteOff", _wrap_Brass_noteOff},
    { "controlChange", _wrap_Brass_controlChange},
    { "tick", _wrap_Brass_tick},
    {0,0}
};
static swig_lua_method swig_Brass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Brass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Brass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Brass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Brass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Brass_Sf_SwigStatic = {
    "Brass",
    swig_Brass_Sf_SwigStatic_methods,
    swig_Brass_Sf_SwigStatic_attributes,
    swig_Brass_Sf_SwigStatic_constants,
    swig_Brass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Brass_bases[] = {0,0};
static const char *swig_Brass_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Brass = { "Brass", "Brass", &SWIGTYPE_p_stk__Brass,_proxy__wrap_new_Brass, swig_delete_Brass, swig_Brass_methods, swig_Brass_attributes, &swig_Brass_Sf_SwigStatic, swig_Brass_meta, swig_Brass_bases, swig_Brass_base_names };

static int _wrap_new_Chorus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Chorus *result = 0 ;
  
  SWIG_check_num_args("stk::Chorus::Chorus",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Chorus::Chorus",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Chorus *)new stk::Chorus(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Chorus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *result = 0 ;
  
  SWIG_check_num_args("stk::Chorus::Chorus",0,0)
  result = (stk::Chorus *)new stk::Chorus();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Chorus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Chorus__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Chorus__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chorus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Chorus::Chorus(stk::StkFloat)\n"
    "    stk::Chorus::Chorus()\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  
  SWIG_check_num_args("stk::Chorus::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::clear",1,"stk::Chorus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_clear",1,SWIGTYPE_p_stk__Chorus);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_setModDepth(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Chorus::setModDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::setModDepth",1,"stk::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Chorus::setModDepth",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_setModDepth",1,SWIGTYPE_p_stk__Chorus);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setModDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_setModFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Chorus::setModFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::setModFrequency",1,"stk::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Chorus::setModFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_setModFrequency",1,SWIGTYPE_p_stk__Chorus);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setModFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Chorus::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::lastOut",1,"stk::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Chorus::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_lastOut",1,SWIGTYPE_p_stk__Chorus);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Chorus::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::lastOut",1,"stk::Chorus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_lastOut",1,SWIGTYPE_p_stk__Chorus);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Chorus_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Chorus::lastOut(unsigned int)\n"
    "    stk::Chorus::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Chorus::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::tick",1,"stk::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Chorus::tick",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Chorus::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_tick",1,SWIGTYPE_p_stk__Chorus);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Chorus::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::tick",1,"stk::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Chorus::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_tick",1,SWIGTYPE_p_stk__Chorus);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Chorus::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::tick",1,"stk::Chorus *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Chorus::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Chorus::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_tick",1,SWIGTYPE_p_stk__Chorus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Chorus::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::tick",1,"stk::Chorus *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Chorus::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_tick",1,SWIGTYPE_p_stk__Chorus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Chorus::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::tick",1,"stk::Chorus *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Chorus::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Chorus::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Chorus::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Chorus::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_tick",1,SWIGTYPE_p_stk__Chorus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Chorus::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::tick",1,"stk::Chorus *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Chorus::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Chorus::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Chorus::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_tick",1,SWIGTYPE_p_stk__Chorus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_tick__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  stk::Chorus *arg1 = (stk::Chorus *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Chorus::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Chorus::tick",1,"stk::Chorus *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Chorus::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Chorus::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Chorus,0))){
    SWIG_fail_ptr("Chorus_tick",1,SWIGTYPE_p_stk__Chorus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Chorus_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Chorus_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chorus_tick__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_tick__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Chorus_tick__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Chorus_tick__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Chorus::tick(stk::StkFloat,unsigned int)\n"
    "    stk::Chorus::tick(stk::StkFloat)\n"
    "    stk::Chorus::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Chorus::tick(stk::StkFrames &)\n"
    "    stk::Chorus::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Chorus::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Chorus::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chorus(void *obj) {
stk::Chorus *arg1 = (stk::Chorus *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chorus(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chorus);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chorus_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Chorus_methods[]= {
    { "clear", _wrap_Chorus_clear},
    { "setModDepth", _wrap_Chorus_setModDepth},
    { "setModFrequency", _wrap_Chorus_setModFrequency},
    { "lastOut", _wrap_Chorus_lastOut},
    { "tick", _wrap_Chorus_tick},
    {0,0}
};
static swig_lua_method swig_Chorus_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chorus_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chorus_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chorus_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chorus_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chorus_Sf_SwigStatic = {
    "Chorus",
    swig_Chorus_Sf_SwigStatic_methods,
    swig_Chorus_Sf_SwigStatic_attributes,
    swig_Chorus_Sf_SwigStatic_constants,
    swig_Chorus_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chorus_bases[] = {0,0};
static const char *swig_Chorus_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_Chorus = { "Chorus", "Chorus", &SWIGTYPE_p_stk__Chorus,_proxy__wrap_new_Chorus, swig_delete_Chorus, swig_Chorus_methods, swig_Chorus_attributes, &swig_Chorus_Sf_SwigStatic, swig_Chorus_meta, swig_Chorus_bases, swig_Chorus_base_names };

static int _wrap_new_Clarinet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Clarinet *result = 0 ;
  
  SWIG_check_num_args("stk::Clarinet::Clarinet",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Clarinet::Clarinet",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Clarinet *)new stk::Clarinet(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Clarinet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clarinet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *result = 0 ;
  
  SWIG_check_num_args("stk::Clarinet::Clarinet",0,0)
  result = (stk::Clarinet *)new stk::Clarinet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Clarinet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Clarinet(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Clarinet__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Clarinet__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Clarinet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Clarinet::Clarinet(stk::StkFloat)\n"
    "    stk::Clarinet::Clarinet()\n");
  lua_error(L);return 0;
}


static int _wrap_Clarinet_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  
  SWIG_check_num_args("stk::Clarinet::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::clear",1,"stk::Clarinet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_clear",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Clarinet::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::setFrequency",1,"stk::Clarinet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Clarinet::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_setFrequency",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Clarinet::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::startBlowing",1,"stk::Clarinet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Clarinet::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Clarinet::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_startBlowing",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Clarinet::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::stopBlowing",1,"stk::Clarinet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Clarinet::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_stopBlowing",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Clarinet::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::noteOn",1,"stk::Clarinet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Clarinet::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Clarinet::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_noteOn",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Clarinet::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::noteOff",1,"stk::Clarinet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Clarinet::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_noteOff",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Clarinet::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::controlChange",1,"stk::Clarinet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Clarinet::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Clarinet::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_controlChange",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Clarinet::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::tick",1,"stk::Clarinet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Clarinet::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_tick",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Clarinet::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::tick",1,"stk::Clarinet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_tick",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Clarinet::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::tick",1,"stk::Clarinet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Clarinet::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Clarinet::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_tick",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Clarinet_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Clarinet *arg1 = (stk::Clarinet *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Clarinet::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Clarinet::tick",1,"stk::Clarinet *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Clarinet::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Clarinet,0))){
    SWIG_fail_ptr("Clarinet_tick",1,SWIGTYPE_p_stk__Clarinet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Clarinet_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Clarinet_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Clarinet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Clarinet_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Clarinet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Clarinet_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Clarinet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Clarinet_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Clarinet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Clarinet_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Clarinet_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Clarinet::tick(unsigned int)\n"
    "    stk::Clarinet::tick()\n"
    "    stk::Clarinet::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Clarinet::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Clarinet(void *obj) {
stk::Clarinet *arg1 = (stk::Clarinet *) obj;
delete arg1;
}
static int _proxy__wrap_new_Clarinet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Clarinet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Clarinet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Clarinet_methods[]= {
    { "clear", _wrap_Clarinet_clear},
    { "setFrequency", _wrap_Clarinet_setFrequency},
    { "startBlowing", _wrap_Clarinet_startBlowing},
    { "stopBlowing", _wrap_Clarinet_stopBlowing},
    { "noteOn", _wrap_Clarinet_noteOn},
    { "noteOff", _wrap_Clarinet_noteOff},
    { "controlChange", _wrap_Clarinet_controlChange},
    { "tick", _wrap_Clarinet_tick},
    {0,0}
};
static swig_lua_method swig_Clarinet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Clarinet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Clarinet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Clarinet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Clarinet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Clarinet_Sf_SwigStatic = {
    "Clarinet",
    swig_Clarinet_Sf_SwigStatic_methods,
    swig_Clarinet_Sf_SwigStatic_attributes,
    swig_Clarinet_Sf_SwigStatic_constants,
    swig_Clarinet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Clarinet_bases[] = {0,0};
static const char *swig_Clarinet_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Clarinet = { "Clarinet", "Clarinet", &SWIGTYPE_p_stk__Clarinet,_proxy__wrap_new_Clarinet, swig_delete_Clarinet, swig_Clarinet_methods, swig_Clarinet_attributes, &swig_Clarinet_Sf_SwigStatic, swig_Clarinet_meta, swig_Clarinet_bases, swig_Clarinet_base_names };

static int _wrap_new_Cubic(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *result = 0 ;
  
  SWIG_check_num_args("stk::Cubic::Cubic",0,0)
  result = (stk::Cubic *)new stk::Cubic();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Cubic,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_setA1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Cubic::setA1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::setA1",1,"stk::Cubic *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Cubic::setA1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_setA1",1,SWIGTYPE_p_stk__Cubic);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_setA2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Cubic::setA2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::setA2",1,"stk::Cubic *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Cubic::setA2",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_setA2",1,SWIGTYPE_p_stk__Cubic);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_setA3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Cubic::setA3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::setA3",1,"stk::Cubic *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Cubic::setA3",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_setA3",1,SWIGTYPE_p_stk__Cubic);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA3(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_setGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Cubic::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::setGain",1,"stk::Cubic *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Cubic::setGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_setGain",1,SWIGTYPE_p_stk__Cubic);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_setThreshold(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Cubic::setThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::setThreshold",1,"stk::Cubic *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Cubic::setThreshold",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_setThreshold",1,SWIGTYPE_p_stk__Cubic);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Cubic::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::tick",1,"stk::Cubic *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Cubic::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_tick",1,SWIGTYPE_p_stk__Cubic);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Cubic::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::tick",1,"stk::Cubic *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Cubic::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Cubic::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_tick",1,SWIGTYPE_p_stk__Cubic);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Cubic::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::tick",1,"stk::Cubic *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Cubic::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_tick",1,SWIGTYPE_p_stk__Cubic);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Cubic::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::tick",1,"stk::Cubic *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Cubic::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Cubic::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Cubic::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Cubic::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_tick",1,SWIGTYPE_p_stk__Cubic);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Cubic::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::tick",1,"stk::Cubic *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Cubic::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Cubic::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Cubic::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_tick",1,SWIGTYPE_p_stk__Cubic);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Cubic *arg1 = (stk::Cubic *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Cubic::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Cubic::tick",1,"stk::Cubic *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Cubic::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Cubic::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Cubic,0))){
    SWIG_fail_ptr("Cubic_tick",1,SWIGTYPE_p_stk__Cubic);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Cubic_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cubic_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Cubic, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Cubic_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Cubic, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Cubic_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Cubic, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Cubic_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Cubic, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Cubic_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Cubic, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Cubic_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Cubic, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Cubic_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Cubic_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Cubic::tick(stk::StkFloat)\n"
    "    stk::Cubic::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Cubic::tick(stk::StkFrames &)\n"
    "    stk::Cubic::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Cubic::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Cubic::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Cubic(void *obj) {
stk::Cubic *arg1 = (stk::Cubic *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cubic(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cubic);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cubic_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Cubic_methods[]= {
    { "setA1", _wrap_Cubic_setA1},
    { "setA2", _wrap_Cubic_setA2},
    { "setA3", _wrap_Cubic_setA3},
    { "setGain", _wrap_Cubic_setGain},
    { "setThreshold", _wrap_Cubic_setThreshold},
    { "tick", _wrap_Cubic_tick},
    {0,0}
};
static swig_lua_method swig_Cubic_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Cubic_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cubic_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cubic_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cubic_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cubic_Sf_SwigStatic = {
    "Cubic",
    swig_Cubic_Sf_SwigStatic_methods,
    swig_Cubic_Sf_SwigStatic_attributes,
    swig_Cubic_Sf_SwigStatic_constants,
    swig_Cubic_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cubic_bases[] = {0,0};
static const char *swig_Cubic_base_names[] = {"stk::Function *",0};
static swig_lua_class _wrap_class_Cubic = { "Cubic", "Cubic", &SWIGTYPE_p_stk__Cubic,_proxy__wrap_new_Cubic, swig_delete_Cubic, swig_Cubic_methods, swig_Cubic_attributes, &swig_Cubic_Sf_SwigStatic, swig_Cubic_meta, swig_Cubic_bases, swig_Cubic_base_names };

static int _wrap_new_Delay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  unsigned long arg2 ;
  stk::Delay *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::Delay",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Delay::Delay",1,"unsigned long");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Delay::Delay",2,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::Delay *)new stk::Delay(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Delay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  stk::Delay *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::Delay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Delay::Delay",1,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  result = (stk::Delay *)new stk::Delay(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Delay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::Delay",0,0)
  result = (stk::Delay *)new stk::Delay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Delay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Delay__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Delay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Delay__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Delay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Delay::Delay(unsigned long,unsigned long)\n"
    "    stk::Delay::Delay(unsigned long)\n"
    "    stk::Delay::Delay()\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_getMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::Delay::getMaximumDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::getMaximumDelay",1,"stk::Delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_getMaximumDelay",1,SWIGTYPE_p_stk__Delay);
  }
  
  result = (unsigned long)(arg1)->getMaximumDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_setMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("stk::Delay::setMaximumDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::setMaximumDelay",1,"stk::Delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Delay::setMaximumDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_setMaximumDelay",1,SWIGTYPE_p_stk__Delay);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setMaximumDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_setDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("stk::Delay::setDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::setDelay",1,"stk::Delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Delay::setDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_setDelay",1,SWIGTYPE_p_stk__Delay);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_getDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::Delay::getDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::getDelay",1,"stk::Delay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_getDelay",1,SWIGTYPE_p_stk__Delay);
  }
  
  result = (unsigned long)((stk::Delay const *)arg1)->getDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tapOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  unsigned long arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Delay::tapOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tapOut",1,"stk::Delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Delay::tapOut",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tapOut",1,SWIGTYPE_p_stk__Delay);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tapOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tapIn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat arg2 ;
  unsigned long arg3 ;
  
  SWIG_check_num_args("stk::Delay::tapIn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tapIn",1,"stk::Delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Delay::tapIn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Delay::tapIn",3,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tapIn",1,SWIGTYPE_p_stk__Delay);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long)lua_tonumber(L, 3);
  (arg1)->tapIn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_addTo(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat arg2 ;
  unsigned long arg3 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Delay::addTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::addTo",1,"stk::Delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Delay::addTo",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Delay::addTo",3,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_addTo",1,SWIGTYPE_p_stk__Delay);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long)lua_tonumber(L, 3);
  result = (stk::StkFloat)(arg1)->addTo(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Delay::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::lastOut",1,"stk::Delay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_lastOut",1,SWIGTYPE_p_stk__Delay);
  }
  
  result = (stk::StkFloat)((stk::Delay const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_nextOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Delay::nextOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::nextOut",1,"stk::Delay *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_nextOut",1,SWIGTYPE_p_stk__Delay);
  }
  
  result = (stk::StkFloat)(arg1)->nextOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_energy(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Delay::energy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::energy",1,"stk::Delay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_energy",1,SWIGTYPE_p_stk__Delay);
  }
  
  result = (stk::StkFloat)((stk::Delay const *)arg1)->energy();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Delay::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tick",1,"stk::Delay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Delay::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tick",1,SWIGTYPE_p_stk__Delay);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tick",1,"stk::Delay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Delay::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Delay::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tick",1,SWIGTYPE_p_stk__Delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tick",1,"stk::Delay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Delay::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tick",1,SWIGTYPE_p_stk__Delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tick",1,"stk::Delay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Delay::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Delay::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Delay::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Delay::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tick",1,SWIGTYPE_p_stk__Delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tick",1,"stk::Delay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Delay::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Delay::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Delay::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tick",1,SWIGTYPE_p_stk__Delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Delay *arg1 = (stk::Delay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Delay::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Delay::tick",1,"stk::Delay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Delay::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Delay::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Delay,0))){
    SWIG_fail_ptr("Delay_tick",1,SWIGTYPE_p_stk__Delay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Delay_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Delay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Delay_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Delay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Delay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Delay_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Delay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Delay_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Delay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Delay_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Delay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Delay_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Delay::tick(stk::StkFloat)\n"
    "    stk::Delay::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Delay::tick(stk::StkFrames &)\n"
    "    stk::Delay::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Delay::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Delay::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Delay(void *obj) {
stk::Delay *arg1 = (stk::Delay *) obj;
delete arg1;
}
static int _proxy__wrap_new_Delay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Delay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Delay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Delay_methods[]= {
    { "getMaximumDelay", _wrap_Delay_getMaximumDelay},
    { "setMaximumDelay", _wrap_Delay_setMaximumDelay},
    { "setDelay", _wrap_Delay_setDelay},
    { "getDelay", _wrap_Delay_getDelay},
    { "tapOut", _wrap_Delay_tapOut},
    { "tapIn", _wrap_Delay_tapIn},
    { "addTo", _wrap_Delay_addTo},
    { "lastOut", _wrap_Delay_lastOut},
    { "nextOut", _wrap_Delay_nextOut},
    { "energy", _wrap_Delay_energy},
    { "tick", _wrap_Delay_tick},
    {0,0}
};
static swig_lua_method swig_Delay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Delay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Delay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Delay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Delay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Delay_Sf_SwigStatic = {
    "Delay",
    swig_Delay_Sf_SwigStatic_methods,
    swig_Delay_Sf_SwigStatic_attributes,
    swig_Delay_Sf_SwigStatic_constants,
    swig_Delay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Delay_bases[] = {0,0};
static const char *swig_Delay_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_Delay = { "Delay", "Delay", &SWIGTYPE_p_stk__Delay,_proxy__wrap_new_Delay, swig_delete_Delay, swig_Delay_methods, swig_Delay_attributes, &swig_Delay_Sf_SwigStatic, swig_Delay_meta, swig_Delay_bases, swig_Delay_base_names };

static int _wrap_new_DelayA__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  unsigned long arg2 ;
  stk::DelayA *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::DelayA",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::DelayA::DelayA",1,"stk::StkFloat");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayA::DelayA",2,"unsigned long");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::DelayA *)new stk::DelayA(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__DelayA,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayA__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::DelayA *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::DelayA",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::DelayA::DelayA",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::DelayA *)new stk::DelayA(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__DelayA,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayA__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::DelayA",0,0)
  result = (stk::DelayA *)new stk::DelayA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__DelayA,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayA(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DelayA__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DelayA__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DelayA__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DelayA'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::DelayA::DelayA(stk::StkFloat,unsigned long)\n"
    "    stk::DelayA::DelayA(stk::StkFloat)\n"
    "    stk::DelayA::DelayA()\n");
  lua_error(L);return 0;
}


static int _wrap_DelayA_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  
  SWIG_check_num_args("stk::DelayA::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::clear",1,"stk::DelayA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_clear",1,SWIGTYPE_p_stk__DelayA);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_getMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::DelayA::getMaximumDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::getMaximumDelay",1,"stk::DelayA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_getMaximumDelay",1,SWIGTYPE_p_stk__DelayA);
  }
  
  result = (unsigned long)(arg1)->getMaximumDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_setMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("stk::DelayA::setMaximumDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::setMaximumDelay",1,"stk::DelayA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayA::setMaximumDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_setMaximumDelay",1,SWIGTYPE_p_stk__DelayA);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setMaximumDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_setDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::DelayA::setDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::setDelay",1,"stk::DelayA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayA::setDelay",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_setDelay",1,SWIGTYPE_p_stk__DelayA);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_getDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayA::getDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::getDelay",1,"stk::DelayA const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_getDelay",1,SWIGTYPE_p_stk__DelayA);
  }
  
  result = (stk::StkFloat)((stk::DelayA const *)arg1)->getDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tapOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  unsigned long arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayA::tapOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::tapOut",1,"stk::DelayA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayA::tapOut",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_tapOut",1,SWIGTYPE_p_stk__DelayA);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tapOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayA::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::lastOut",1,"stk::DelayA const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_lastOut",1,SWIGTYPE_p_stk__DelayA);
  }
  
  result = (stk::StkFloat)((stk::DelayA const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_nextOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayA::nextOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::nextOut",1,"stk::DelayA *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_nextOut",1,SWIGTYPE_p_stk__DelayA);
  }
  
  result = (stk::StkFloat)(arg1)->nextOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayA::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::tick",1,"stk::DelayA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayA::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_tick",1,SWIGTYPE_p_stk__DelayA);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::tick",1,"stk::DelayA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayA::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::DelayA::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_tick",1,SWIGTYPE_p_stk__DelayA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::tick",1,"stk::DelayA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayA::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_tick",1,SWIGTYPE_p_stk__DelayA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::tick",1,"stk::DelayA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayA::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::DelayA::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::DelayA::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::DelayA::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_tick",1,SWIGTYPE_p_stk__DelayA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::tick",1,"stk::DelayA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayA::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::DelayA::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::DelayA::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_tick",1,SWIGTYPE_p_stk__DelayA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayA *arg1 = (stk::DelayA *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayA::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayA::tick",1,"stk::DelayA *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayA::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::DelayA::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayA,0))){
    SWIG_fail_ptr("DelayA_tick",1,SWIGTYPE_p_stk__DelayA);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayA_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayA_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DelayA_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DelayA_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DelayA_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DelayA_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DelayA_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayA, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DelayA_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DelayA_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::DelayA::tick(stk::StkFloat)\n"
    "    stk::DelayA::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::DelayA::tick(stk::StkFrames &)\n"
    "    stk::DelayA::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::DelayA::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::DelayA::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DelayA(void *obj) {
stk::DelayA *arg1 = (stk::DelayA *) obj;
delete arg1;
}
static int _proxy__wrap_new_DelayA(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DelayA);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DelayA_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DelayA_methods[]= {
    { "clear", _wrap_DelayA_clear},
    { "getMaximumDelay", _wrap_DelayA_getMaximumDelay},
    { "setMaximumDelay", _wrap_DelayA_setMaximumDelay},
    { "setDelay", _wrap_DelayA_setDelay},
    { "getDelay", _wrap_DelayA_getDelay},
    { "tapOut", _wrap_DelayA_tapOut},
    { "lastOut", _wrap_DelayA_lastOut},
    { "nextOut", _wrap_DelayA_nextOut},
    { "tick", _wrap_DelayA_tick},
    {0,0}
};
static swig_lua_method swig_DelayA_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DelayA_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DelayA_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DelayA_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DelayA_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DelayA_Sf_SwigStatic = {
    "DelayA",
    swig_DelayA_Sf_SwigStatic_methods,
    swig_DelayA_Sf_SwigStatic_attributes,
    swig_DelayA_Sf_SwigStatic_constants,
    swig_DelayA_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DelayA_bases[] = {0,0};
static const char *swig_DelayA_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_DelayA = { "DelayA", "DelayA", &SWIGTYPE_p_stk__DelayA,_proxy__wrap_new_DelayA, swig_delete_DelayA, swig_DelayA_methods, swig_DelayA_attributes, &swig_DelayA_Sf_SwigStatic, swig_DelayA_meta, swig_DelayA_bases, swig_DelayA_base_names };

static int _wrap_new_DelayL__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  unsigned long arg2 ;
  stk::DelayL *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::DelayL",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::DelayL::DelayL",1,"stk::StkFloat");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayL::DelayL",2,"unsigned long");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::DelayL *)new stk::DelayL(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__DelayL,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayL__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::DelayL *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::DelayL",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::DelayL::DelayL",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::DelayL *)new stk::DelayL(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__DelayL,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayL__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::DelayL",0,0)
  result = (stk::DelayL *)new stk::DelayL();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__DelayL,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayL(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DelayL__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DelayL__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DelayL__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DelayL'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::DelayL::DelayL(stk::StkFloat,unsigned long)\n"
    "    stk::DelayL::DelayL(stk::StkFloat)\n"
    "    stk::DelayL::DelayL()\n");
  lua_error(L);return 0;
}


static int _wrap_DelayL_getMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::DelayL::getMaximumDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::getMaximumDelay",1,"stk::DelayL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_getMaximumDelay",1,SWIGTYPE_p_stk__DelayL);
  }
  
  result = (unsigned long)(arg1)->getMaximumDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_setMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("stk::DelayL::setMaximumDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::setMaximumDelay",1,"stk::DelayL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayL::setMaximumDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_setMaximumDelay",1,SWIGTYPE_p_stk__DelayL);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setMaximumDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_setDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::DelayL::setDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::setDelay",1,"stk::DelayL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayL::setDelay",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_setDelay",1,SWIGTYPE_p_stk__DelayL);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_getDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayL::getDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::getDelay",1,"stk::DelayL const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_getDelay",1,SWIGTYPE_p_stk__DelayL);
  }
  
  result = (stk::StkFloat)((stk::DelayL const *)arg1)->getDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tapOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  unsigned long arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayL::tapOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tapOut",1,"stk::DelayL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayL::tapOut",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tapOut",1,SWIGTYPE_p_stk__DelayL);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tapOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tapIn(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat arg2 ;
  unsigned long arg3 ;
  
  SWIG_check_num_args("stk::DelayL::tapIn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tapIn",1,"stk::DelayL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayL::tapIn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::DelayL::tapIn",3,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tapIn",1,SWIGTYPE_p_stk__DelayL);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long)lua_tonumber(L, 3);
  (arg1)->tapIn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayL::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::lastOut",1,"stk::DelayL const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_lastOut",1,SWIGTYPE_p_stk__DelayL);
  }
  
  result = (stk::StkFloat)((stk::DelayL const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_nextOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayL::nextOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::nextOut",1,"stk::DelayL *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_nextOut",1,SWIGTYPE_p_stk__DelayL);
  }
  
  result = (stk::StkFloat)(arg1)->nextOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::DelayL::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tick",1,"stk::DelayL *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::DelayL::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tick",1,SWIGTYPE_p_stk__DelayL);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tick",1,"stk::DelayL *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayL::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::DelayL::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tick",1,SWIGTYPE_p_stk__DelayL);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tick",1,"stk::DelayL *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayL::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tick",1,SWIGTYPE_p_stk__DelayL);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tick",1,"stk::DelayL *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayL::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::DelayL::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::DelayL::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::DelayL::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tick",1,SWIGTYPE_p_stk__DelayL);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tick",1,"stk::DelayL *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayL::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::DelayL::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::DelayL::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tick",1,SWIGTYPE_p_stk__DelayL);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::DelayL *arg1 = (stk::DelayL *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::DelayL::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::DelayL::tick",1,"stk::DelayL *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::DelayL::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::DelayL::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__DelayL,0))){
    SWIG_fail_ptr("DelayL_tick",1,SWIGTYPE_p_stk__DelayL);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("DelayL_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayL_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DelayL_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DelayL_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DelayL_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DelayL_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_DelayL_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__DelayL, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_DelayL_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DelayL_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::DelayL::tick(stk::StkFloat)\n"
    "    stk::DelayL::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::DelayL::tick(stk::StkFrames &)\n"
    "    stk::DelayL::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::DelayL::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::DelayL::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DelayL(void *obj) {
stk::DelayL *arg1 = (stk::DelayL *) obj;
delete arg1;
}
static int _proxy__wrap_new_DelayL(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DelayL);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DelayL_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DelayL_methods[]= {
    { "getMaximumDelay", _wrap_DelayL_getMaximumDelay},
    { "setMaximumDelay", _wrap_DelayL_setMaximumDelay},
    { "setDelay", _wrap_DelayL_setDelay},
    { "getDelay", _wrap_DelayL_getDelay},
    { "tapOut", _wrap_DelayL_tapOut},
    { "tapIn", _wrap_DelayL_tapIn},
    { "lastOut", _wrap_DelayL_lastOut},
    { "nextOut", _wrap_DelayL_nextOut},
    { "tick", _wrap_DelayL_tick},
    {0,0}
};
static swig_lua_method swig_DelayL_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DelayL_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DelayL_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DelayL_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DelayL_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DelayL_Sf_SwigStatic = {
    "DelayL",
    swig_DelayL_Sf_SwigStatic_methods,
    swig_DelayL_Sf_SwigStatic_attributes,
    swig_DelayL_Sf_SwigStatic_constants,
    swig_DelayL_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DelayL_bases[] = {0,0};
static const char *swig_DelayL_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_DelayL = { "DelayL", "DelayL", &SWIGTYPE_p_stk__DelayL,_proxy__wrap_new_DelayL, swig_delete_DelayL, swig_DelayL_methods, swig_DelayL_attributes, &swig_DelayL_Sf_SwigStatic, swig_DelayL_meta, swig_DelayL_bases, swig_DelayL_base_names };

static int _wrap_new_Drummer(lua_State* L) {
  int SWIG_arg = 0;
  stk::Drummer *result = 0 ;
  
  SWIG_check_num_args("stk::Drummer::Drummer",0,0)
  result = (stk::Drummer *)new stk::Drummer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Drummer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drummer_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Drummer::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Drummer::noteOn",1,"stk::Drummer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Drummer::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Drummer::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Drummer,0))){
    SWIG_fail_ptr("Drummer_noteOn",1,SWIGTYPE_p_stk__Drummer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drummer_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Drummer::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Drummer::noteOff",1,"stk::Drummer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Drummer::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Drummer,0))){
    SWIG_fail_ptr("Drummer_noteOff",1,SWIGTYPE_p_stk__Drummer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drummer_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Drummer::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Drummer::tick",1,"stk::Drummer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Drummer::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Drummer,0))){
    SWIG_fail_ptr("Drummer_tick",1,SWIGTYPE_p_stk__Drummer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drummer_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Drummer::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Drummer::tick",1,"stk::Drummer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Drummer,0))){
    SWIG_fail_ptr("Drummer_tick",1,SWIGTYPE_p_stk__Drummer);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drummer_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Drummer::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Drummer::tick",1,"stk::Drummer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Drummer::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Drummer::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Drummer,0))){
    SWIG_fail_ptr("Drummer_tick",1,SWIGTYPE_p_stk__Drummer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Drummer_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drummer_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Drummer *arg1 = (stk::Drummer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Drummer::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Drummer::tick",1,"stk::Drummer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Drummer::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Drummer,0))){
    SWIG_fail_ptr("Drummer_tick",1,SWIGTYPE_p_stk__Drummer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Drummer_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drummer_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Drummer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Drummer_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Drummer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Drummer_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Drummer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Drummer_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Drummer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Drummer_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Drummer_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Drummer::tick(unsigned int)\n"
    "    stk::Drummer::tick()\n"
    "    stk::Drummer::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Drummer::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Drummer(void *obj) {
stk::Drummer *arg1 = (stk::Drummer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Drummer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Drummer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Drummer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Drummer_methods[]= {
    { "noteOn", _wrap_Drummer_noteOn},
    { "noteOff", _wrap_Drummer_noteOff},
    { "tick", _wrap_Drummer_tick},
    {0,0}
};
static swig_lua_method swig_Drummer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Drummer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Drummer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Drummer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Drummer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Drummer_Sf_SwigStatic = {
    "Drummer",
    swig_Drummer_Sf_SwigStatic_methods,
    swig_Drummer_Sf_SwigStatic_attributes,
    swig_Drummer_Sf_SwigStatic_constants,
    swig_Drummer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Drummer_bases[] = {0,0};
static const char *swig_Drummer_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Drummer = { "Drummer", "Drummer", &SWIGTYPE_p_stk__Drummer,_proxy__wrap_new_Drummer, swig_delete_Drummer, swig_Drummer_methods, swig_Drummer_attributes, &swig_Drummer_Sf_SwigStatic, swig_Drummer_meta, swig_Drummer_bases, swig_Drummer_base_names };

static int _wrap_new_Echo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  stk::Echo *result = 0 ;
  
  SWIG_check_num_args("stk::Echo::Echo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Echo::Echo",1,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  result = (stk::Echo *)new stk::Echo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Echo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Echo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *result = 0 ;
  
  SWIG_check_num_args("stk::Echo::Echo",0,0)
  result = (stk::Echo *)new stk::Echo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Echo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Echo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Echo__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Echo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Echo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Echo::Echo(unsigned long)\n"
    "    stk::Echo::Echo()\n");
  lua_error(L);return 0;
}


static int _wrap_Echo_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  
  SWIG_check_num_args("stk::Echo::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::clear",1,"stk::Echo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_clear",1,SWIGTYPE_p_stk__Echo);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_setMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("stk::Echo::setMaximumDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::setMaximumDelay",1,"stk::Echo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Echo::setMaximumDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_setMaximumDelay",1,SWIGTYPE_p_stk__Echo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setMaximumDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_setDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("stk::Echo::setDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::setDelay",1,"stk::Echo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Echo::setDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_setDelay",1,SWIGTYPE_p_stk__Echo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Echo::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::lastOut",1,"stk::Echo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_lastOut",1,SWIGTYPE_p_stk__Echo);
  }
  
  result = (stk::StkFloat)((stk::Echo const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Echo::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::tick",1,"stk::Echo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Echo::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_tick",1,SWIGTYPE_p_stk__Echo);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Echo::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::tick",1,"stk::Echo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Echo::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Echo::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_tick",1,SWIGTYPE_p_stk__Echo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Echo::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::tick",1,"stk::Echo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Echo::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_tick",1,SWIGTYPE_p_stk__Echo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Echo::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::tick",1,"stk::Echo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Echo::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Echo::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Echo::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Echo::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_tick",1,SWIGTYPE_p_stk__Echo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Echo::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::tick",1,"stk::Echo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Echo::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Echo::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Echo::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_tick",1,SWIGTYPE_p_stk__Echo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Echo *arg1 = (stk::Echo *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Echo::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Echo::tick",1,"stk::Echo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Echo::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Echo::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Echo,0))){
    SWIG_fail_ptr("Echo_tick",1,SWIGTYPE_p_stk__Echo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Echo_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Echo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Echo_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Echo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Echo_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Echo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Echo_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Echo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Echo_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Echo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Echo_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Echo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Echo_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Echo_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Echo::tick(stk::StkFloat)\n"
    "    stk::Echo::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Echo::tick(stk::StkFrames &)\n"
    "    stk::Echo::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Echo::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Echo::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Echo(void *obj) {
stk::Echo *arg1 = (stk::Echo *) obj;
delete arg1;
}
static int _proxy__wrap_new_Echo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Echo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Echo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Echo_methods[]= {
    { "clear", _wrap_Echo_clear},
    { "setMaximumDelay", _wrap_Echo_setMaximumDelay},
    { "setDelay", _wrap_Echo_setDelay},
    { "lastOut", _wrap_Echo_lastOut},
    { "tick", _wrap_Echo_tick},
    {0,0}
};
static swig_lua_method swig_Echo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Echo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Echo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Echo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Echo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Echo_Sf_SwigStatic = {
    "Echo",
    swig_Echo_Sf_SwigStatic_methods,
    swig_Echo_Sf_SwigStatic_attributes,
    swig_Echo_Sf_SwigStatic_constants,
    swig_Echo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Echo_bases[] = {0,0};
static const char *swig_Echo_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_Echo = { "Echo", "Echo", &SWIGTYPE_p_stk__Echo,_proxy__wrap_new_Echo, swig_delete_Echo, swig_Echo_methods, swig_Echo_attributes, &swig_Echo_Sf_SwigStatic, swig_Echo_meta, swig_Echo_bases, swig_Echo_base_names };

static int _wrap_new_Envelope(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *result = 0 ;
  
  SWIG_check_num_args("stk::Envelope::Envelope",0,0)
  result = (stk::Envelope *)new stk::Envelope();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Envelope,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_keyOn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Envelope::keyOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::keyOn",1,"stk::Envelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Envelope::keyOn",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_keyOn",1,SWIGTYPE_p_stk__Envelope);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->keyOn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_keyOn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  
  SWIG_check_num_args("stk::Envelope::keyOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::keyOn",1,"stk::Envelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_keyOn",1,SWIGTYPE_p_stk__Envelope);
  }
  
  (arg1)->keyOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_keyOn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Envelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Envelope_keyOn__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Envelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Envelope_keyOn__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Envelope_keyOn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Envelope::keyOn(stk::StkFloat)\n"
    "    stk::Envelope::keyOn()\n");
  lua_error(L);return 0;
}


static int _wrap_Envelope_keyOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Envelope::keyOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::keyOff",1,"stk::Envelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Envelope::keyOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_keyOff",1,SWIGTYPE_p_stk__Envelope);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->keyOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_keyOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  
  SWIG_check_num_args("stk::Envelope::keyOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::keyOff",1,"stk::Envelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_keyOff",1,SWIGTYPE_p_stk__Envelope);
  }
  
  (arg1)->keyOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_keyOff(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Envelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Envelope_keyOff__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Envelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Envelope_keyOff__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Envelope_keyOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Envelope::keyOff(stk::StkFloat)\n"
    "    stk::Envelope::keyOff()\n");
  lua_error(L);return 0;
}


static int _wrap_Envelope_setRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Envelope::setRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::setRate",1,"stk::Envelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Envelope::setRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_setRate",1,SWIGTYPE_p_stk__Envelope);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_setTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Envelope::setTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::setTime",1,"stk::Envelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Envelope::setTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_setTime",1,SWIGTYPE_p_stk__Envelope);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_setTarget(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Envelope::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::setTarget",1,"stk::Envelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Envelope::setTarget",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_setTarget",1,SWIGTYPE_p_stk__Envelope);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_setValue(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Envelope::setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::setValue",1,"stk::Envelope *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Envelope::setValue",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_setValue",1,SWIGTYPE_p_stk__Envelope);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_getState(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::Envelope::getState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::getState",1,"stk::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_getState",1,SWIGTYPE_p_stk__Envelope);
  }
  
  result = (int)((stk::Envelope const *)arg1)->getState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Envelope::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::lastOut",1,"stk::Envelope const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_lastOut",1,SWIGTYPE_p_stk__Envelope);
  }
  
  result = (stk::StkFloat)((stk::Envelope const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Envelope::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::tick",1,"stk::Envelope *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_tick",1,SWIGTYPE_p_stk__Envelope);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Envelope::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::tick",1,"stk::Envelope *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Envelope::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Envelope::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_tick",1,SWIGTYPE_p_stk__Envelope);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Envelope_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Envelope *arg1 = (stk::Envelope *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Envelope::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Envelope::tick",1,"stk::Envelope *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Envelope::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Envelope,0))){
    SWIG_fail_ptr("Envelope_tick",1,SWIGTYPE_p_stk__Envelope);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Envelope_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Envelope_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Envelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Envelope_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Envelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Envelope_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Envelope, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Envelope_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Envelope_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Envelope::tick()\n"
    "    stk::Envelope::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Envelope::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Envelope(void *obj) {
stk::Envelope *arg1 = (stk::Envelope *) obj;
delete arg1;
}
static int _proxy__wrap_new_Envelope(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Envelope);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Envelope_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Envelope_methods[]= {
    { "keyOn", _wrap_Envelope_keyOn},
    { "keyOff", _wrap_Envelope_keyOff},
    { "setRate", _wrap_Envelope_setRate},
    { "setTime", _wrap_Envelope_setTime},
    { "setTarget", _wrap_Envelope_setTarget},
    { "setValue", _wrap_Envelope_setValue},
    { "getState", _wrap_Envelope_getState},
    { "lastOut", _wrap_Envelope_lastOut},
    { "tick", _wrap_Envelope_tick},
    {0,0}
};
static swig_lua_method swig_Envelope_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Envelope_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Envelope_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Envelope_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Envelope_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Envelope_Sf_SwigStatic = {
    "Envelope",
    swig_Envelope_Sf_SwigStatic_methods,
    swig_Envelope_Sf_SwigStatic_attributes,
    swig_Envelope_Sf_SwigStatic_constants,
    swig_Envelope_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Envelope_bases[] = {0,0};
static const char *swig_Envelope_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_Envelope = { "Envelope", "Envelope", &SWIGTYPE_p_stk__Envelope,_proxy__wrap_new_Envelope, swig_delete_Envelope, swig_Envelope_methods, swig_Envelope_attributes, &swig_Envelope_Sf_SwigStatic, swig_Envelope_meta, swig_Envelope_bases, swig_Envelope_base_names };

static int _wrap_new_FMVoices(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *result = 0 ;
  
  SWIG_check_num_args("stk::FMVoices::FMVoices",0,0)
  result = (stk::FMVoices *)new stk::FMVoices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FMVoices,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FMVoices::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FMVoices::setFrequency",1,"stk::FMVoices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FMVoices::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FMVoices,0))){
    SWIG_fail_ptr("FMVoices_setFrequency",1,SWIGTYPE_p_stk__FMVoices);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FMVoices::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FMVoices::noteOn",1,"stk::FMVoices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FMVoices::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FMVoices::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FMVoices,0))){
    SWIG_fail_ptr("FMVoices_noteOn",1,SWIGTYPE_p_stk__FMVoices);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FMVoices::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FMVoices::controlChange",1,"stk::FMVoices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FMVoices::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FMVoices::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FMVoices,0))){
    SWIG_fail_ptr("FMVoices_controlChange",1,SWIGTYPE_p_stk__FMVoices);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FMVoices::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FMVoices::tick",1,"stk::FMVoices *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FMVoices::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FMVoices,0))){
    SWIG_fail_ptr("FMVoices_tick",1,SWIGTYPE_p_stk__FMVoices);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FMVoices::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FMVoices::tick",1,"stk::FMVoices *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FMVoices,0))){
    SWIG_fail_ptr("FMVoices_tick",1,SWIGTYPE_p_stk__FMVoices);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FMVoices::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FMVoices::tick",1,"stk::FMVoices *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FMVoices::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FMVoices::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FMVoices,0))){
    SWIG_fail_ptr("FMVoices_tick",1,SWIGTYPE_p_stk__FMVoices);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FMVoices_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FMVoices *arg1 = (stk::FMVoices *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FMVoices::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FMVoices::tick",1,"stk::FMVoices *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FMVoices::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FMVoices,0))){
    SWIG_fail_ptr("FMVoices_tick",1,SWIGTYPE_p_stk__FMVoices);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FMVoices_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FMVoices_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FMVoices, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FMVoices_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FMVoices, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FMVoices_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FMVoices, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FMVoices_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FMVoices, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FMVoices_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FMVoices_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FMVoices::tick(unsigned int)\n"
    "    stk::FMVoices::tick()\n"
    "    stk::FMVoices::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::FMVoices::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FMVoices(void *obj) {
stk::FMVoices *arg1 = (stk::FMVoices *) obj;
delete arg1;
}
static int _proxy__wrap_new_FMVoices(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FMVoices);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FMVoices_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FMVoices_methods[]= {
    { "setFrequency", _wrap_FMVoices_setFrequency},
    { "noteOn", _wrap_FMVoices_noteOn},
    { "controlChange", _wrap_FMVoices_controlChange},
    { "tick", _wrap_FMVoices_tick},
    {0,0}
};
static swig_lua_method swig_FMVoices_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FMVoices_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FMVoices_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FMVoices_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FMVoices_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FMVoices_Sf_SwigStatic = {
    "FMVoices",
    swig_FMVoices_Sf_SwigStatic_methods,
    swig_FMVoices_Sf_SwigStatic_attributes,
    swig_FMVoices_Sf_SwigStatic_constants,
    swig_FMVoices_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FMVoices_bases[] = {0,0};
static const char *swig_FMVoices_base_names[] = {"stk::FM *",0};
static swig_lua_class _wrap_class_FMVoices = { "FMVoices", "FMVoices", &SWIGTYPE_p_stk__FMVoices,_proxy__wrap_new_FMVoices, swig_delete_FMVoices, swig_FMVoices_methods, swig_FMVoices_attributes, &swig_FMVoices_Sf_SwigStatic, swig_FMVoices_meta, swig_FMVoices_bases, swig_FMVoices_base_names };

static int _wrap_new_FileRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *result = 0 ;
  
  SWIG_check_num_args("stk::FileRead::FileRead",0,0)
  result = (stk::FileRead *)new stk::FileRead();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileRead,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  stk::StkFloat arg5 ;
  std::string *argp1 ;
  stk::FileRead *result = 0 ;
  
  SWIG_check_num_args("stk::FileRead::FileRead",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileRead::FileRead",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileRead::FileRead",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileRead::FileRead",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileRead::FileRead",4,"stk::Stk::StkFormat");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileRead::FileRead",5,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileRead",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::Stk::StkFormat)lua_tonumber(L, 4);
  arg5 = (stk::StkFloat)lua_tonumber(L, 5);
  result = (stk::FileRead *)new stk::FileRead(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileRead,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileRead__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  std::string *argp1 ;
  stk::FileRead *result = 0 ;
  
  SWIG_check_num_args("stk::FileRead::FileRead",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileRead::FileRead",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileRead::FileRead",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileRead::FileRead",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileRead::FileRead",4,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileRead",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::Stk::StkFormat)lua_tonumber(L, 4);
  result = (stk::FileRead *)new stk::FileRead(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileRead,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileRead__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::string *argp1 ;
  stk::FileRead *result = 0 ;
  
  SWIG_check_num_args("stk::FileRead::FileRead",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileRead::FileRead",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileRead::FileRead",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileRead::FileRead",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileRead",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::FileRead *)new stk::FileRead(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileRead,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileRead__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  std::string *argp1 ;
  stk::FileRead *result = 0 ;
  
  SWIG_check_num_args("stk::FileRead::FileRead",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileRead::FileRead",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileRead::FileRead",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileRead",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (stk::FileRead *)new stk::FileRead(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileRead,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileRead__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  stk::FileRead *result = 0 ;
  
  SWIG_check_num_args("stk::FileRead::FileRead",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileRead::FileRead",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileRead",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (stk::FileRead *)new stk::FileRead(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileRead,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileRead(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FileRead__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FileRead__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FileRead__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FileRead__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileRead__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileRead__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileRead::FileRead()\n"
    "    stk::FileRead::FileRead(std::string,bool,unsigned int,stk::Stk::StkFormat,stk::StkFloat)\n"
    "    stk::FileRead::FileRead(std::string,bool,unsigned int,stk::Stk::StkFormat)\n"
    "    stk::FileRead::FileRead(std::string,bool,unsigned int)\n"
    "    stk::FileRead::FileRead(std::string,bool)\n"
    "    stk::FileRead::FileRead(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileRead_open__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  stk::StkFloat arg6 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileRead::open",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::open",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::open",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileRead::open",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileRead::open",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileRead::open",5,"stk::Stk::StkFormat");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("stk::FileRead::open",6,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_open",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileRead_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (stk::Stk::StkFormat)lua_tonumber(L, 5);
  arg6 = (stk::StkFloat)lua_tonumber(L, 6);
  (arg1)->open(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileRead::open",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::open",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::open",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileRead::open",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileRead::open",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileRead::open",5,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_open",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileRead_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (stk::Stk::StkFormat)lua_tonumber(L, 5);
  (arg1)->open(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_open__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileRead::open",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::open",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::open",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileRead::open",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileRead::open",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_open",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileRead_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->open(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_open__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileRead::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::open",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::open",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileRead::open",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_open",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileRead_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->open(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_open__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileRead::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::open",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::open",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_open",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileRead_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->open(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_open(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileRead_open__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_FileRead_open__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FileRead_open__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FileRead_open__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_FileRead_open__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileRead_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileRead::open(std::string,bool,unsigned int,stk::Stk::StkFormat,stk::StkFloat)\n"
    "    stk::FileRead::open(std::string,bool,unsigned int,stk::Stk::StkFormat)\n"
    "    stk::FileRead::open(std::string,bool,unsigned int)\n"
    "    stk::FileRead::open(std::string,bool)\n"
    "    stk::FileRead::open(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileRead_close(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  
  SWIG_check_num_args("stk::FileRead::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::close",1,"stk::FileRead *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_close",1,SWIGTYPE_p_stk__FileRead);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_isOpen(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::FileRead::isOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::isOpen",1,"stk::FileRead *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_isOpen",1,SWIGTYPE_p_stk__FileRead);
  }
  
  result = (bool)(arg1)->isOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_fileSize(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::FileRead::fileSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::fileSize",1,"stk::FileRead const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_fileSize",1,SWIGTYPE_p_stk__FileRead);
  }
  
  result = (unsigned long)((stk::FileRead const *)arg1)->fileSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_channels(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::FileRead::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::channels",1,"stk::FileRead const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_channels",1,SWIGTYPE_p_stk__FileRead);
  }
  
  result = (unsigned int)((stk::FileRead const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_format(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::Stk::StkFormat result;
  
  SWIG_check_num_args("stk::FileRead::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::format",1,"stk::FileRead const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_format",1,SWIGTYPE_p_stk__FileRead);
  }
  
  result = (stk::Stk::StkFormat)((stk::FileRead const *)arg1)->format();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_fileRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileRead::fileRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::fileRate",1,"stk::FileRead const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_fileRate",1,SWIGTYPE_p_stk__FileRead);
  }
  
  result = (stk::StkFloat)((stk::FileRead const *)arg1)->fileRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned long arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("stk::FileRead::read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::read",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::read",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileRead::read",3,"unsigned long");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::FileRead::read",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_read",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileRead_read",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->read(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned long arg3 ;
  
  SWIG_check_num_args("stk::FileRead::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::read",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::read",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileRead::read",3,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_read",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileRead_read",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long)lua_tonumber(L, 3);
  (arg1)->read(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileRead *arg1 = (stk::FileRead *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  
  SWIG_check_num_args("stk::FileRead::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileRead::read",1,"stk::FileRead *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileRead::read",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileRead,0))){
    SWIG_fail_ptr("FileRead_read",1,SWIGTYPE_p_stk__FileRead);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileRead_read",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  (arg1)->read(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileRead_read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileRead_read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FileRead_read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileRead, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FileRead_read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileRead_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileRead::read(stk::StkFrames &,unsigned long,bool)\n"
    "    stk::FileRead::read(stk::StkFrames &,unsigned long)\n"
    "    stk::FileRead::read(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FileRead(void *obj) {
stk::FileRead *arg1 = (stk::FileRead *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileRead(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileRead);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileRead_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileRead_methods[]= {
    { "open", _wrap_FileRead_open},
    { "close", _wrap_FileRead_close},
    { "isOpen", _wrap_FileRead_isOpen},
    { "fileSize", _wrap_FileRead_fileSize},
    { "channels", _wrap_FileRead_channels},
    { "format", _wrap_FileRead_format},
    { "fileRate", _wrap_FileRead_fileRate},
    { "read", _wrap_FileRead_read},
    {0,0}
};
static swig_lua_method swig_FileRead_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileRead_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileRead_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileRead_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileRead_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileRead_Sf_SwigStatic = {
    "FileRead",
    swig_FileRead_Sf_SwigStatic_methods,
    swig_FileRead_Sf_SwigStatic_attributes,
    swig_FileRead_Sf_SwigStatic_constants,
    swig_FileRead_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileRead_bases[] = {0};
static const char *swig_FileRead_base_names[] = {0};
static swig_lua_class _wrap_class_FileRead = { "FileRead", "FileRead", &SWIGTYPE_p_stk__FileRead,_proxy__wrap_new_FileRead, swig_delete_FileRead, swig_FileRead_methods, swig_FileRead_attributes, &swig_FileRead_Sf_SwigStatic, swig_FileRead_meta, swig_FileRead_bases, swig_FileRead_base_names };

static int _wrap_FileWrite_FILE_RAW_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite::FILE_TYPE result;
  
  SWIG_check_num_args("stk::FileWrite::FILE_RAW",0,0)
  result = (stk::FileWrite::FILE_TYPE)(stk::FileWrite::FILE_TYPE)stk::FileWrite::FILE_RAW;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_FILE_WAV_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite::FILE_TYPE result;
  
  SWIG_check_num_args("stk::FileWrite::FILE_WAV",0,0)
  result = (stk::FileWrite::FILE_TYPE)(stk::FileWrite::FILE_TYPE)stk::FileWrite::FILE_WAV;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_FILE_SND_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite::FILE_TYPE result;
  
  SWIG_check_num_args("stk::FileWrite::FILE_SND",0,0)
  result = (stk::FileWrite::FILE_TYPE)(stk::FileWrite::FILE_TYPE)stk::FileWrite::FILE_SND;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_FILE_AIF_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite::FILE_TYPE result;
  
  SWIG_check_num_args("stk::FileWrite::FILE_AIF",0,0)
  result = (stk::FileWrite::FILE_TYPE)(stk::FileWrite::FILE_TYPE)stk::FileWrite::FILE_AIF;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_FILE_MAT_get(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite::FILE_TYPE result;
  
  SWIG_check_num_args("stk::FileWrite::FILE_MAT",0,0)
  result = (stk::FileWrite::FILE_TYPE)(stk::FileWrite::FILE_TYPE)stk::FileWrite::FILE_MAT;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *result = 0 ;
  
  SWIG_check_num_args("stk::FileWrite::FileWrite",0,0)
  result = (stk::FileWrite *)new stk::FileWrite();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWrite,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  stk::Stk::StkFormat arg4 ;
  std::string *argp1 ;
  stk::FileWrite *result = 0 ;
  
  SWIG_check_num_args("stk::FileWrite::FileWrite",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWrite::FileWrite",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWrite::FileWrite",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWrite::FileWrite",3,"stk::FileWrite::FILE_TYPE");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWrite::FileWrite",4,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWrite",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::Stk::StkFormat)lua_tonumber(L, 4);
  result = (stk::FileWrite *)new stk::FileWrite(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWrite,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWrite__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  std::string *argp1 ;
  stk::FileWrite *result = 0 ;
  
  SWIG_check_num_args("stk::FileWrite::FileWrite",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWrite::FileWrite",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWrite::FileWrite",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWrite::FileWrite",3,"stk::FileWrite::FILE_TYPE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWrite",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 3);
  result = (stk::FileWrite *)new stk::FileWrite(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWrite,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWrite__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  std::string *argp1 ;
  stk::FileWrite *result = 0 ;
  
  SWIG_check_num_args("stk::FileWrite::FileWrite",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWrite::FileWrite",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWrite::FileWrite",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWrite",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::FileWrite *)new stk::FileWrite(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWrite,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWrite__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  stk::FileWrite *result = 0 ;
  
  SWIG_check_num_args("stk::FileWrite::FileWrite",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWrite::FileWrite",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWrite",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (stk::FileWrite *)new stk::FileWrite(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWrite,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FileWrite__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FileWrite__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FileWrite__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FileWrite__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileWrite__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWrite::FileWrite()\n"
    "    stk::FileWrite::FileWrite(std::string,unsigned int,stk::FileWrite::FILE_TYPE,stk::Stk::StkFormat)\n"
    "    stk::FileWrite::FileWrite(std::string,unsigned int,stk::FileWrite::FILE_TYPE)\n"
    "    stk::FileWrite::FileWrite(std::string,unsigned int)\n"
    "    stk::FileWrite::FileWrite(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWrite_open__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  stk::FileWrite::FILE_TYPE arg4 ;
  stk::Stk::StkFormat arg5 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWrite::open",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWrite::open",1,"stk::FileWrite *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWrite::open",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWrite::open",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWrite::open",4,"stk::FileWrite::FILE_TYPE");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileWrite::open",5,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWrite,0))){
    SWIG_fail_ptr("FileWrite_open",1,SWIGTYPE_p_stk__FileWrite);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWrite_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (stk::Stk::StkFormat)lua_tonumber(L, 5);
  (arg1)->open(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  stk::FileWrite::FILE_TYPE arg4 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWrite::open",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWrite::open",1,"stk::FileWrite *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWrite::open",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWrite::open",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWrite::open",4,"stk::FileWrite::FILE_TYPE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWrite,0))){
    SWIG_fail_ptr("FileWrite_open",1,SWIGTYPE_p_stk__FileWrite);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWrite_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 4);
  (arg1)->open(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_open__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWrite::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWrite::open",1,"stk::FileWrite *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWrite::open",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWrite::open",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWrite,0))){
    SWIG_fail_ptr("FileWrite_open",1,SWIGTYPE_p_stk__FileWrite);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWrite_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->open(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_open__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWrite::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWrite::open",1,"stk::FileWrite *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWrite::open",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWrite,0))){
    SWIG_fail_ptr("FileWrite_open",1,SWIGTYPE_p_stk__FileWrite);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWrite_open",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->open(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_open(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWrite, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileWrite_open__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWrite, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FileWrite_open__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWrite, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FileWrite_open__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWrite, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FileWrite_open__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileWrite_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWrite::open(std::string,unsigned int,stk::FileWrite::FILE_TYPE,stk::Stk::StkFormat)\n"
    "    stk::FileWrite::open(std::string,unsigned int,stk::FileWrite::FILE_TYPE)\n"
    "    stk::FileWrite::open(std::string,unsigned int)\n"
    "    stk::FileWrite::open(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWrite_close(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  
  SWIG_check_num_args("stk::FileWrite::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWrite::close",1,"stk::FileWrite *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWrite,0))){
    SWIG_fail_ptr("FileWrite_close",1,SWIGTYPE_p_stk__FileWrite);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_isOpen(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::FileWrite::isOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWrite::isOpen",1,"stk::FileWrite *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWrite,0))){
    SWIG_fail_ptr("FileWrite_isOpen",1,SWIGTYPE_p_stk__FileWrite);
  }
  
  result = (bool)(arg1)->isOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWrite_write(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWrite *arg1 = (stk::FileWrite *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  
  SWIG_check_num_args("stk::FileWrite::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWrite::write",1,"stk::FileWrite *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWrite::write",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWrite,0))){
    SWIG_fail_ptr("FileWrite_write",1,SWIGTYPE_p_stk__FileWrite);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileWrite_write",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileWrite(void *obj) {
stk::FileWrite *arg1 = (stk::FileWrite *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileWrite(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileWrite);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileWrite_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileWrite_methods[]= {
    { "open", _wrap_FileWrite_open},
    { "close", _wrap_FileWrite_close},
    { "isOpen", _wrap_FileWrite_isOpen},
    { "write", _wrap_FileWrite_write},
    {0,0}
};
static swig_lua_method swig_FileWrite_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileWrite_Sf_SwigStatic_attributes[] = {
    { "FILE_RAW", _wrap_FileWrite_FILE_RAW_get, SWIG_Lua_set_immutable },
    { "FILE_WAV", _wrap_FileWrite_FILE_WAV_get, SWIG_Lua_set_immutable },
    { "FILE_SND", _wrap_FileWrite_FILE_SND_get, SWIG_Lua_set_immutable },
    { "FILE_AIF", _wrap_FileWrite_FILE_AIF_get, SWIG_Lua_set_immutable },
    { "FILE_MAT", _wrap_FileWrite_FILE_MAT_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_FileWrite_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileWrite_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileWrite_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileWrite_Sf_SwigStatic = {
    "FileWrite",
    swig_FileWrite_Sf_SwigStatic_methods,
    swig_FileWrite_Sf_SwigStatic_attributes,
    swig_FileWrite_Sf_SwigStatic_constants,
    swig_FileWrite_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileWrite_bases[] = {0};
static const char *swig_FileWrite_base_names[] = {0};
static swig_lua_class _wrap_class_FileWrite = { "FileWrite", "FileWrite", &SWIGTYPE_p_stk__FileWrite,_proxy__wrap_new_FileWrite, swig_delete_FileWrite, swig_FileWrite_methods, swig_FileWrite_attributes, &swig_FileWrite_Sf_SwigStatic, swig_FileWrite_meta, swig_FileWrite_bases, swig_FileWrite_base_names };

static int _wrap_new_FileWvIn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  unsigned long arg2 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"unsigned long");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",2,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",0,0)
  result = (stk::FileWvIn *)new stk::FileWvIn();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  bool arg6 ;
  std::string *argp1 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",4,"unsigned long");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",5,"unsigned long");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvIn",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned long)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned long)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  std::string *argp1 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",4,"unsigned long");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",5,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvIn",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned long)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned long)lua_tonumber(L, 5);
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  std::string *argp1 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",4,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvIn",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned long)lua_tonumber(L, 4);
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  std::string *argp1 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvIn",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  std::string *argp1 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvIn",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  stk::FileWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::FileWvIn",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvIn::FileWvIn",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvIn",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (stk::FileWvIn *)new stk::FileWvIn(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvIn(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FileWvIn__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FileWvIn__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FileWvIn__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FileWvIn__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FileWvIn__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FileWvIn__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileWvIn__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileWvIn__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileWvIn__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileWvIn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWvIn::FileWvIn(unsigned long,unsigned long)\n"
    "    stk::FileWvIn::FileWvIn(unsigned long)\n"
    "    stk::FileWvIn::FileWvIn()\n"
    "    stk::FileWvIn::FileWvIn(std::string,bool,bool,unsigned long,unsigned long,bool)\n"
    "    stk::FileWvIn::FileWvIn(std::string,bool,bool,unsigned long,unsigned long)\n"
    "    stk::FileWvIn::FileWvIn(std::string,bool,bool,unsigned long)\n"
    "    stk::FileWvIn::FileWvIn(std::string,bool,bool)\n"
    "    stk::FileWvIn::FileWvIn(std::string,bool)\n"
    "    stk::FileWvIn::FileWvIn(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWvIn_openFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWvIn::openFile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::openFile",1,"stk::FileWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvIn::openFile",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileWvIn::openFile",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::FileWvIn::openFile",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("stk::FileWvIn::openFile",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_openFile",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWvIn_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->openFile(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_openFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWvIn::openFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::openFile",1,"stk::FileWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvIn::openFile",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileWvIn::openFile",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::FileWvIn::openFile",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_openFile",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWvIn_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->openFile(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_openFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWvIn::openFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::openFile",1,"stk::FileWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvIn::openFile",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileWvIn::openFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_openFile",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWvIn_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->openFile(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_openFile__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWvIn::openFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::openFile",1,"stk::FileWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvIn::openFile",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_openFile",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWvIn_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->openFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_openFile(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileWvIn_openFile__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_FileWvIn_openFile__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FileWvIn_openFile__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FileWvIn_openFile__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileWvIn_openFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWvIn::openFile(std::string,bool,bool,bool)\n"
    "    stk::FileWvIn::openFile(std::string,bool,bool)\n"
    "    stk::FileWvIn::openFile(std::string,bool)\n"
    "    stk::FileWvIn::openFile(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWvIn_closeFile(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::closeFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::closeFile",1,"stk::FileWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_closeFile",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  (arg1)->closeFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::reset",1,"stk::FileWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_reset",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_normalize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::normalize",1,"stk::FileWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_normalize",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_normalize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileWvIn::normalize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::normalize",1,"stk::FileWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvIn::normalize",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_normalize",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->normalize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_normalize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FileWvIn_normalize__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FileWvIn_normalize__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileWvIn_normalize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWvIn::normalize()\n"
    "    stk::FileWvIn::normalize(stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWvIn_getSize(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::FileWvIn::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::getSize",1,"stk::FileWvIn const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_getSize",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  result = (unsigned long)((stk::FileWvIn const *)arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_getFileRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileWvIn::getFileRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::getFileRate",1,"stk::FileWvIn const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_getFileRate",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  result = (stk::StkFloat)((stk::FileWvIn const *)arg1)->getFileRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_isOpen(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::FileWvIn::isOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::isOpen",1,"stk::FileWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_isOpen",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  result = (bool)(arg1)->isOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_isFinished(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::FileWvIn::isFinished",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::isFinished",1,"stk::FileWvIn const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_isFinished",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  result = (bool)((stk::FileWvIn const *)arg1)->isFinished();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_setRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileWvIn::setRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::setRate",1,"stk::FileWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvIn::setRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_setRate",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_addTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileWvIn::addTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::addTime",1,"stk::FileWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvIn::addTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_addTime",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->addTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_setInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stk::FileWvIn::setInterpolate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::setInterpolate",1,"stk::FileWvIn *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileWvIn::setInterpolate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_setInterpolate",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setInterpolate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileWvIn::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::lastOut",1,"stk::FileWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvIn::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_lastOut",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileWvIn::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::lastOut",1,"stk::FileWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_lastOut",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FileWvIn_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FileWvIn_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileWvIn_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWvIn::lastOut(unsigned int)\n"
    "    stk::FileWvIn::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_FileWvIn_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileWvIn::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::tick",1,"stk::FileWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvIn::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_tick",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileWvIn::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::tick",1,"stk::FileWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_tick",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::tick",1,"stk::FileWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvIn::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWvIn::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_tick",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileWvIn_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvIn *arg1 = (stk::FileWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvIn::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvIn::tick",1,"stk::FileWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvIn::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvIn,0))){
    SWIG_fail_ptr("FileWvIn_tick",1,SWIGTYPE_p_stk__FileWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileWvIn_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvIn_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FileWvIn_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileWvIn_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FileWvIn_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FileWvIn_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileWvIn_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWvIn::tick(unsigned int)\n"
    "    stk::FileWvIn::tick()\n"
    "    stk::FileWvIn::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::FileWvIn::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FileWvIn(void *obj) {
stk::FileWvIn *arg1 = (stk::FileWvIn *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileWvIn(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileWvIn);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileWvIn_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileWvIn_methods[]= {
    { "openFile", _wrap_FileWvIn_openFile},
    { "closeFile", _wrap_FileWvIn_closeFile},
    { "reset", _wrap_FileWvIn_reset},
    { "normalize", _wrap_FileWvIn_normalize},
    { "getSize", _wrap_FileWvIn_getSize},
    { "getFileRate", _wrap_FileWvIn_getFileRate},
    { "isOpen", _wrap_FileWvIn_isOpen},
    { "isFinished", _wrap_FileWvIn_isFinished},
    { "setRate", _wrap_FileWvIn_setRate},
    { "addTime", _wrap_FileWvIn_addTime},
    { "setInterpolate", _wrap_FileWvIn_setInterpolate},
    { "lastOut", _wrap_FileWvIn_lastOut},
    { "tick", _wrap_FileWvIn_tick},
    {0,0}
};
static swig_lua_method swig_FileWvIn_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileWvIn_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileWvIn_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileWvIn_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileWvIn_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileWvIn_Sf_SwigStatic = {
    "FileWvIn",
    swig_FileWvIn_Sf_SwigStatic_methods,
    swig_FileWvIn_Sf_SwigStatic_attributes,
    swig_FileWvIn_Sf_SwigStatic_constants,
    swig_FileWvIn_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileWvIn_bases[] = {0};
static const char *swig_FileWvIn_base_names[] = {0};
static swig_lua_class _wrap_class_FileWvIn = { "FileWvIn", "FileWvIn", &SWIGTYPE_p_stk__FileWvIn,_proxy__wrap_new_FileWvIn, swig_delete_FileWvIn, swig_FileWvIn_methods, swig_FileWvIn_attributes, &swig_FileWvIn_Sf_SwigStatic, swig_FileWvIn_meta, swig_FileWvIn_bases, swig_FileWvIn_base_names };

static int _wrap_new_FileWvOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::FileWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::FileWvOut",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::FileWvOut *)new stk::FileWvOut(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::FileWvOut",0,0)
  result = (stk::FileWvOut *)new stk::FileWvOut();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvOut__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  stk::Stk::StkFormat arg4 ;
  unsigned int arg5 ;
  std::string *argp1 ;
  stk::FileWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::FileWvOut",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",3,"stk::FileWrite::FILE_TYPE");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",4,"stk::Stk::StkFormat");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvOut",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::Stk::StkFormat)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvOut__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  stk::Stk::StkFormat arg4 ;
  std::string *argp1 ;
  stk::FileWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::FileWvOut",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",3,"stk::FileWrite::FILE_TYPE");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",4,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvOut",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::Stk::StkFormat)lua_tonumber(L, 4);
  result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvOut__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  stk::FileWrite::FILE_TYPE arg3 ;
  std::string *argp1 ;
  stk::FileWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::FileWvOut",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",3,"stk::FileWrite::FILE_TYPE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvOut",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 3);
  result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvOut__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  std::string *argp1 ;
  stk::FileWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::FileWvOut",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvOut",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::FileWvOut *)new stk::FileWvOut(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvOut__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  stk::FileWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::FileWvOut",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileWvOut::FileWvOut",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileWvOut",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (stk::FileWvOut *)new stk::FileWvOut(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWvOut(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FileWvOut__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FileWvOut__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FileWvOut__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FileWvOut__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FileWvOut__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileWvOut__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileWvOut__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileWvOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWvOut::FileWvOut(unsigned int)\n"
    "    stk::FileWvOut::FileWvOut()\n"
    "    stk::FileWvOut::FileWvOut(std::string,unsigned int,stk::FileWrite::FILE_TYPE,stk::Stk::StkFormat,unsigned int)\n"
    "    stk::FileWvOut::FileWvOut(std::string,unsigned int,stk::FileWrite::FILE_TYPE,stk::Stk::StkFormat)\n"
    "    stk::FileWvOut::FileWvOut(std::string,unsigned int,stk::FileWrite::FILE_TYPE)\n"
    "    stk::FileWvOut::FileWvOut(std::string,unsigned int)\n"
    "    stk::FileWvOut::FileWvOut(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWvOut_openFile(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  stk::FileWrite::FILE_TYPE arg4 ;
  stk::Stk::StkFormat arg5 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileWvOut::openFile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvOut::openFile",1,"stk::FileWvOut *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvOut::openFile",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileWvOut::openFile",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileWvOut::openFile",4,"stk::FileWrite::FILE_TYPE");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileWvOut::openFile",5,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvOut,0))){
    SWIG_fail_ptr("FileWvOut_openFile",1,SWIGTYPE_p_stk__FileWvOut);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileWvOut_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::FileWrite::FILE_TYPE)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (stk::Stk::StkFormat)lua_tonumber(L, 5);
  (arg1)->openFile(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvOut_closeFile(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::closeFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvOut::closeFile",1,"stk::FileWvOut *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvOut,0))){
    SWIG_fail_ptr("FileWvOut_closeFile",1,SWIGTYPE_p_stk__FileWvOut);
  }
  
  (arg1)->closeFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvOut_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileWvOut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvOut::tick",1,"stk::FileWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileWvOut::tick",2,"stk::StkFloat const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvOut,0))){
    SWIG_fail_ptr("FileWvOut_tick",1,SWIGTYPE_p_stk__FileWvOut);
  }
  
  arg2 = (stk::StkFloat const)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvOut_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileWvOut *arg1 = (stk::FileWvOut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  
  SWIG_check_num_args("stk::FileWvOut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileWvOut::tick",1,"stk::FileWvOut *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileWvOut::tick",2,"stk::StkFrames const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileWvOut,0))){
    SWIG_fail_ptr("FileWvOut_tick",1,SWIGTYPE_p_stk__FileWvOut);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileWvOut_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  (arg1)->tick((stk::StkFrames const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileWvOut_tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileWvOut_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FileWvOut_tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileWvOut_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileWvOut::tick(stk::StkFloat const)\n"
    "    stk::FileWvOut::tick(stk::StkFrames const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FileWvOut(void *obj) {
stk::FileWvOut *arg1 = (stk::FileWvOut *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileWvOut(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileWvOut);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileWvOut_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileWvOut_methods[]= {
    { "openFile", _wrap_FileWvOut_openFile},
    { "closeFile", _wrap_FileWvOut_closeFile},
    { "tick", _wrap_FileWvOut_tick},
    {0,0}
};
static swig_lua_method swig_FileWvOut_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileWvOut_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileWvOut_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileWvOut_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileWvOut_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileWvOut_Sf_SwigStatic = {
    "FileWvOut",
    swig_FileWvOut_Sf_SwigStatic_methods,
    swig_FileWvOut_Sf_SwigStatic_attributes,
    swig_FileWvOut_Sf_SwigStatic_constants,
    swig_FileWvOut_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileWvOut_bases[] = {0};
static const char *swig_FileWvOut_base_names[] = {0};
static swig_lua_class _wrap_class_FileWvOut = { "FileWvOut", "FileWvOut", &SWIGTYPE_p_stk__FileWvOut,_proxy__wrap_new_FileWvOut, swig_delete_FileWvOut, swig_FileWvOut_methods, swig_FileWvOut_attributes, &swig_FileWvOut_Sf_SwigStatic, swig_FileWvOut_meta, swig_FileWvOut_bases, swig_FileWvOut_base_names };

static int _wrap_new_FileLoop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  unsigned long arg2 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"unsigned long");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::FileLoop",2,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  result = (stk::FileLoop *)new stk::FileLoop(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",0,0)
  result = (stk::FileLoop *)new stk::FileLoop();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  bool arg6 ;
  std::string *argp1 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileLoop::FileLoop",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileLoop::FileLoop",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileLoop::FileLoop",4,"unsigned long");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileLoop::FileLoop",5,"unsigned long");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("stk::FileLoop::FileLoop",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileLoop",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned long)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned long)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  std::string *argp1 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileLoop::FileLoop",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileLoop::FileLoop",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileLoop::FileLoop",4,"unsigned long");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FileLoop::FileLoop",5,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileLoop",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned long)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned long)lua_tonumber(L, 5);
  result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long arg4 ;
  std::string *argp1 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileLoop::FileLoop",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileLoop::FileLoop",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FileLoop::FileLoop",4,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileLoop",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned long)lua_tonumber(L, 4);
  result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  bool arg3 ;
  std::string *argp1 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileLoop::FileLoop",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileLoop::FileLoop",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileLoop",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  std::string *argp1 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FileLoop::FileLoop",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileLoop",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (stk::FileLoop *)new stk::FileLoop(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  stk::FileLoop *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::FileLoop",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::FileLoop::FileLoop",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_FileLoop",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (stk::FileLoop *)new stk::FileLoop(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FileLoop,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileLoop(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FileLoop__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FileLoop__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FileLoop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FileLoop__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FileLoop__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FileLoop__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileLoop__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileLoop__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileLoop__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileLoop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileLoop::FileLoop(unsigned long,unsigned long)\n"
    "    stk::FileLoop::FileLoop(unsigned long)\n"
    "    stk::FileLoop::FileLoop()\n"
    "    stk::FileLoop::FileLoop(std::string,bool,bool,unsigned long,unsigned long,bool)\n"
    "    stk::FileLoop::FileLoop(std::string,bool,bool,unsigned long,unsigned long)\n"
    "    stk::FileLoop::FileLoop(std::string,bool,bool,unsigned long)\n"
    "    stk::FileLoop::FileLoop(std::string,bool,bool)\n"
    "    stk::FileLoop::FileLoop(std::string,bool)\n"
    "    stk::FileLoop::FileLoop(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileLoop_openFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileLoop::openFile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::openFile",1,"stk::FileLoop *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileLoop::openFile",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileLoop::openFile",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::FileLoop::openFile",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("stk::FileLoop::openFile",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_openFile",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileLoop_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->openFile(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_openFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileLoop::openFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::openFile",1,"stk::FileLoop *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileLoop::openFile",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileLoop::openFile",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::FileLoop::openFile",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_openFile",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileLoop_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->openFile(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_openFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileLoop::openFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::openFile",1,"stk::FileLoop *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileLoop::openFile",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::FileLoop::openFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_openFile",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileLoop_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->openFile(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_openFile__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::FileLoop::openFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::openFile",1,"stk::FileLoop *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileLoop::openFile",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_openFile",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FileLoop_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->openFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_openFile(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileLoop_openFile__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_FileLoop_openFile__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FileLoop_openFile__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FileLoop_openFile__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileLoop_openFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileLoop::openFile(std::string,bool,bool,bool)\n"
    "    stk::FileLoop::openFile(std::string,bool,bool)\n"
    "    stk::FileLoop::openFile(std::string,bool)\n"
    "    stk::FileLoop::openFile(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FileLoop_closeFile(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  
  SWIG_check_num_args("stk::FileLoop::closeFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::closeFile",1,"stk::FileLoop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_closeFile",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  (arg1)->closeFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  
  SWIG_check_num_args("stk::FileLoop::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::reset",1,"stk::FileLoop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_reset",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_channelsOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::FileLoop::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::channelsOut",1,"stk::FileLoop const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_channelsOut",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  result = (unsigned int)((stk::FileLoop const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_normalize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  
  SWIG_check_num_args("stk::FileLoop::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::normalize",1,"stk::FileLoop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_normalize",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_normalize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileLoop::normalize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::normalize",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::normalize",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_normalize",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->normalize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_normalize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FileLoop_normalize__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FileLoop_normalize__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileLoop_normalize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileLoop::normalize()\n"
    "    stk::FileLoop::normalize(stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_FileLoop_getSize(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::FileLoop::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::getSize",1,"stk::FileLoop const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_getSize",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  result = (unsigned long)((stk::FileLoop const *)arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_getFileRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileLoop::getFileRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::getFileRate",1,"stk::FileLoop const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_getFileRate",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  result = (stk::StkFloat)((stk::FileLoop const *)arg1)->getFileRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_setRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileLoop::setRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::setRate",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::setRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_setRate",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileLoop::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::setFrequency",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_setFrequency",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_addTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileLoop::addTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::addTime",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::addTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_addTime",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->addTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_addPhase(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileLoop::addPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::addPhase",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::addPhase",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_addPhase",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->addPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_addPhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FileLoop::addPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::addPhaseOffset",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::addPhaseOffset",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_addPhaseOffset",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->addPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileLoop::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::lastOut",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_lastOut",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileLoop::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::lastOut",1,"stk::FileLoop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_lastOut",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FileLoop_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FileLoop_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileLoop_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileLoop::lastOut(unsigned int)\n"
    "    stk::FileLoop::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_FileLoop_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileLoop::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::tick",1,"stk::FileLoop *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FileLoop::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_tick",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FileLoop::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::tick",1,"stk::FileLoop *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_tick",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::tick",1,"stk::FileLoop *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileLoop::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FileLoop::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_tick",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileLoop_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FileLoop *arg1 = (stk::FileLoop *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FileLoop::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FileLoop::tick",1,"stk::FileLoop *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FileLoop::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FileLoop,0))){
    SWIG_fail_ptr("FileLoop_tick",1,SWIGTYPE_p_stk__FileLoop);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FileLoop_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FileLoop_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FileLoop_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FileLoop_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FileLoop_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FileLoop, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FileLoop_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FileLoop_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FileLoop::tick(unsigned int)\n"
    "    stk::FileLoop::tick()\n"
    "    stk::FileLoop::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::FileLoop::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FileLoop(void *obj) {
stk::FileLoop *arg1 = (stk::FileLoop *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileLoop(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileLoop);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileLoop_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileLoop_methods[]= {
    { "openFile", _wrap_FileLoop_openFile},
    { "closeFile", _wrap_FileLoop_closeFile},
    { "reset", _wrap_FileLoop_reset},
    { "channelsOut", _wrap_FileLoop_channelsOut},
    { "normalize", _wrap_FileLoop_normalize},
    { "getSize", _wrap_FileLoop_getSize},
    { "getFileRate", _wrap_FileLoop_getFileRate},
    { "setRate", _wrap_FileLoop_setRate},
    { "setFrequency", _wrap_FileLoop_setFrequency},
    { "addTime", _wrap_FileLoop_addTime},
    { "addPhase", _wrap_FileLoop_addPhase},
    { "addPhaseOffset", _wrap_FileLoop_addPhaseOffset},
    { "lastOut", _wrap_FileLoop_lastOut},
    { "tick", _wrap_FileLoop_tick},
    {0,0}
};
static swig_lua_method swig_FileLoop_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileLoop_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileLoop_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileLoop_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileLoop_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileLoop_SwigStatic = {
    "FileLoop",
    swig_FileLoop_SwigStatic_methods,
    swig_FileLoop_SwigStatic_attributes,
    swig_FileLoop_SwigStatic_constants,
    swig_FileLoop_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileLoop_bases[] = {0};
static const char *swig_FileLoop_base_names[] = {0};
static swig_lua_class _wrap_class_FileLoop = { "FileLoop", "FileLoop", &SWIGTYPE_p_stk__FileLoop,_proxy__wrap_new_FileLoop, swig_delete_FileLoop, swig_FileLoop_methods, swig_FileLoop_attributes, &swig_FileLoop_SwigStatic, swig_FileLoop_meta, swig_FileLoop_bases, swig_FileLoop_base_names };

static int _wrap_new_Fir__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *result = 0 ;
  
  SWIG_check_num_args("stk::Fir::Fir",0,0)
  result = (stk::Fir *)new stk::Fir();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Fir,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Fir__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< stk::StkFloat > *arg1 = 0 ;
  stk::Fir *result = 0 ;
  
  SWIG_check_num_args("stk::Fir::Fir",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::Fir::Fir",1,"std::vector< stk::StkFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_Fir",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (stk::Fir *)new stk::Fir(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Fir,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Fir(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Fir__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Fir__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Fir'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Fir::Fir()\n"
    "    stk::Fir::Fir(std::vector< stk::StkFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Fir_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("stk::Fir::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::setCoefficients",1,"stk::Fir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Fir::setCoefficients",2,"std::vector< stk::StkFloat > &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::Fir::setCoefficients",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_setCoefficients",1,SWIGTYPE_p_stk__Fir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Fir_setCoefficients",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setCoefficients(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  
  SWIG_check_num_args("stk::Fir::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::setCoefficients",1,"stk::Fir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Fir::setCoefficients",2,"std::vector< stk::StkFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_setCoefficients",1,SWIGTYPE_p_stk__Fir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Fir_setCoefficients",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->setCoefficients(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_setCoefficients(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Fir_setCoefficients__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Fir_setCoefficients__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fir_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Fir::setCoefficients(std::vector< stk::StkFloat > &,bool)\n"
    "    stk::Fir::setCoefficients(std::vector< stk::StkFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Fir_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Fir::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::lastOut",1,"stk::Fir const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_lastOut",1,SWIGTYPE_p_stk__Fir);
  }
  
  result = (stk::StkFloat)((stk::Fir const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Fir::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::tick",1,"stk::Fir *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Fir::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_tick",1,SWIGTYPE_p_stk__Fir);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Fir::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::tick",1,"stk::Fir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Fir::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Fir::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_tick",1,SWIGTYPE_p_stk__Fir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Fir::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::tick",1,"stk::Fir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Fir::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_tick",1,SWIGTYPE_p_stk__Fir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Fir::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::tick",1,"stk::Fir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Fir::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Fir::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Fir::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Fir::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_tick",1,SWIGTYPE_p_stk__Fir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Fir::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::tick",1,"stk::Fir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Fir::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Fir::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Fir::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_tick",1,SWIGTYPE_p_stk__Fir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Fir *arg1 = (stk::Fir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Fir::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Fir::tick",1,"stk::Fir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Fir::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Fir::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Fir,0))){
    SWIG_fail_ptr("Fir_tick",1,SWIGTYPE_p_stk__Fir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Fir_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fir_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Fir_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Fir_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Fir_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Fir_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Fir_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Fir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Fir_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fir_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Fir::tick(stk::StkFloat)\n"
    "    stk::Fir::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Fir::tick(stk::StkFrames &)\n"
    "    stk::Fir::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Fir::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Fir::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Fir(void *obj) {
stk::Fir *arg1 = (stk::Fir *) obj;
delete arg1;
}
static int _proxy__wrap_new_Fir(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Fir);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Fir_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Fir_methods[]= {
    { "setCoefficients", _wrap_Fir_setCoefficients},
    { "lastOut", _wrap_Fir_lastOut},
    { "tick", _wrap_Fir_tick},
    {0,0}
};
static swig_lua_method swig_Fir_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Fir_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Fir_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Fir_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Fir_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Fir_Sf_SwigStatic = {
    "Fir",
    swig_Fir_Sf_SwigStatic_methods,
    swig_Fir_Sf_SwigStatic_attributes,
    swig_Fir_Sf_SwigStatic_constants,
    swig_Fir_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Fir_bases[] = {0,0};
static const char *swig_Fir_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_Fir = { "Fir", "Fir", &SWIGTYPE_p_stk__Fir,_proxy__wrap_new_Fir, swig_delete_Fir, swig_Fir_methods, swig_Fir_attributes, &swig_Fir_Sf_SwigStatic, swig_Fir_meta, swig_Fir_bases, swig_Fir_base_names };

static int _wrap_new_Flute(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Flute *result = 0 ;
  
  SWIG_check_num_args("stk::Flute::Flute",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Flute::Flute",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Flute *)new stk::Flute(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Flute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  
  SWIG_check_num_args("stk::Flute::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::clear",1,"stk::Flute *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_clear",1,SWIGTYPE_p_stk__Flute);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Flute::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::setFrequency",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_setFrequency",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_setJetReflection(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Flute::setJetReflection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::setJetReflection",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::setJetReflection",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_setJetReflection",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setJetReflection(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_setEndReflection(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Flute::setEndReflection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::setEndReflection",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::setEndReflection",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_setEndReflection",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setEndReflection(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_setJetDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Flute::setJetDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::setJetDelay",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::setJetDelay",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_setJetDelay",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setJetDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Flute::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::startBlowing",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Flute::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_startBlowing",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Flute::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::stopBlowing",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_stopBlowing",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Flute::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::noteOn",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Flute::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_noteOn",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Flute::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::noteOff",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_noteOff",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Flute::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::controlChange",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Flute::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_controlChange",1,SWIGTYPE_p_stk__Flute);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Flute::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::tick",1,"stk::Flute *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Flute::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_tick",1,SWIGTYPE_p_stk__Flute);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Flute::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::tick",1,"stk::Flute *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_tick",1,SWIGTYPE_p_stk__Flute);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Flute::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::tick",1,"stk::Flute *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Flute::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Flute::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_tick",1,SWIGTYPE_p_stk__Flute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Flute_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Flute *arg1 = (stk::Flute *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Flute::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Flute::tick",1,"stk::Flute *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Flute::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Flute,0))){
    SWIG_fail_ptr("Flute_tick",1,SWIGTYPE_p_stk__Flute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Flute_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flute_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Flute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Flute_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Flute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Flute_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Flute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Flute_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Flute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Flute_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Flute_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Flute::tick(unsigned int)\n"
    "    stk::Flute::tick()\n"
    "    stk::Flute::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Flute::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Flute(void *obj) {
stk::Flute *arg1 = (stk::Flute *) obj;
delete arg1;
}
static int _proxy__wrap_new_Flute(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Flute);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Flute_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Flute_methods[]= {
    { "clear", _wrap_Flute_clear},
    { "setFrequency", _wrap_Flute_setFrequency},
    { "setJetReflection", _wrap_Flute_setJetReflection},
    { "setEndReflection", _wrap_Flute_setEndReflection},
    { "setJetDelay", _wrap_Flute_setJetDelay},
    { "startBlowing", _wrap_Flute_startBlowing},
    { "stopBlowing", _wrap_Flute_stopBlowing},
    { "noteOn", _wrap_Flute_noteOn},
    { "noteOff", _wrap_Flute_noteOff},
    { "controlChange", _wrap_Flute_controlChange},
    { "tick", _wrap_Flute_tick},
    {0,0}
};
static swig_lua_method swig_Flute_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Flute_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Flute_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Flute_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Flute_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Flute_Sf_SwigStatic = {
    "Flute",
    swig_Flute_Sf_SwigStatic_methods,
    swig_Flute_Sf_SwigStatic_attributes,
    swig_Flute_Sf_SwigStatic_constants,
    swig_Flute_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Flute_bases[] = {0,0};
static const char *swig_Flute_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Flute = { "Flute", "Flute", &SWIGTYPE_p_stk__Flute,_proxy__wrap_new_Flute, swig_delete_Flute, swig_Flute_methods, swig_Flute_attributes, &swig_Flute_Sf_SwigStatic, swig_Flute_meta, swig_Flute_bases, swig_Flute_base_names };

static int _wrap_new_FormSwep(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *result = 0 ;
  
  SWIG_check_num_args("stk::FormSwep::FormSwep",0,0)
  result = (stk::FormSwep *)new stk::FormSwep();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FormSwep,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_ignoreSampleRateChange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stk::FormSwep::ignoreSampleRateChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::ignoreSampleRateChange",1,"stk::FormSwep *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FormSwep::ignoreSampleRateChange",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_ignoreSampleRateChange",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->ignoreSampleRateChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_ignoreSampleRateChange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  
  SWIG_check_num_args("stk::FormSwep::ignoreSampleRateChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::ignoreSampleRateChange",1,"stk::FormSwep *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_ignoreSampleRateChange",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  (arg1)->ignoreSampleRateChange();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_ignoreSampleRateChange(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FormSwep_ignoreSampleRateChange__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_FormSwep_ignoreSampleRateChange__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FormSwep_ignoreSampleRateChange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FormSwep::ignoreSampleRateChange(bool)\n"
    "    stk::FormSwep::ignoreSampleRateChange()\n");
  lua_error(L);return 0;
}


static int _wrap_FormSwep_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FormSwep::setResonance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::setResonance",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::setResonance",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FormSwep::setResonance",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_setResonance",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setResonance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_setStates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::FormSwep::setStates",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::setStates",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::setStates",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FormSwep::setStates",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FormSwep::setStates",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_setStates",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setStates(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_setStates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FormSwep::setStates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::setStates",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::setStates",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FormSwep::setStates",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_setStates",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setStates(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_setStates(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FormSwep_setStates__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FormSwep_setStates__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FormSwep_setStates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FormSwep::setStates(stk::StkFloat,stk::StkFloat,stk::StkFloat)\n"
    "    stk::FormSwep::setStates(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_FormSwep_setTargets__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::FormSwep::setTargets",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::setTargets",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::setTargets",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FormSwep::setTargets",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FormSwep::setTargets",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_setTargets",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setTargets(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_setTargets__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::FormSwep::setTargets",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::setTargets",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::setTargets",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FormSwep::setTargets",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_setTargets",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setTargets(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_setTargets(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FormSwep_setTargets__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FormSwep_setTargets__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FormSwep_setTargets'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FormSwep::setTargets(stk::StkFloat,stk::StkFloat,stk::StkFloat)\n"
    "    stk::FormSwep::setTargets(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_FormSwep_setSweepRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FormSwep::setSweepRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::setSweepRate",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::setSweepRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_setSweepRate",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setSweepRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_setSweepTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FormSwep::setSweepTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::setSweepTime",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::setSweepTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_setSweepTime",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setSweepTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FormSwep::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::lastOut",1,"stk::FormSwep const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_lastOut",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  result = (stk::StkFloat)((stk::FormSwep const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FormSwep::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::tick",1,"stk::FormSwep *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FormSwep::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_tick",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FormSwep::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::tick",1,"stk::FormSwep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FormSwep::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FormSwep::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_tick",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FormSwep::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::tick",1,"stk::FormSwep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FormSwep::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_tick",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FormSwep::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::tick",1,"stk::FormSwep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FormSwep::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::FormSwep::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FormSwep::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FormSwep::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_tick",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FormSwep::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::tick",1,"stk::FormSwep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FormSwep::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::FormSwep::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FormSwep::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_tick",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::FormSwep *arg1 = (stk::FormSwep *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FormSwep::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FormSwep::tick",1,"stk::FormSwep *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FormSwep::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::FormSwep::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FormSwep,0))){
    SWIG_fail_ptr("FormSwep_tick",1,SWIGTYPE_p_stk__FormSwep);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FormSwep_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormSwep_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FormSwep_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FormSwep_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FormSwep_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FormSwep_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FormSwep_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FormSwep, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FormSwep_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FormSwep_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FormSwep::tick(stk::StkFloat)\n"
    "    stk::FormSwep::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::FormSwep::tick(stk::StkFrames &)\n"
    "    stk::FormSwep::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::FormSwep::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::FormSwep::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FormSwep(void *obj) {
stk::FormSwep *arg1 = (stk::FormSwep *) obj;
delete arg1;
}
static int _proxy__wrap_new_FormSwep(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FormSwep);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FormSwep_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FormSwep_methods[]= {
    { "ignoreSampleRateChange", _wrap_FormSwep_ignoreSampleRateChange},
    { "setResonance", _wrap_FormSwep_setResonance},
    { "setStates", _wrap_FormSwep_setStates},
    { "setTargets", _wrap_FormSwep_setTargets},
    { "setSweepRate", _wrap_FormSwep_setSweepRate},
    { "setSweepTime", _wrap_FormSwep_setSweepTime},
    { "lastOut", _wrap_FormSwep_lastOut},
    { "tick", _wrap_FormSwep_tick},
    {0,0}
};
static swig_lua_method swig_FormSwep_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FormSwep_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FormSwep_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FormSwep_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FormSwep_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FormSwep_SwigStatic = {
    "FormSwep",
    swig_FormSwep_SwigStatic_methods,
    swig_FormSwep_SwigStatic_attributes,
    swig_FormSwep_SwigStatic_constants,
    swig_FormSwep_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FormSwep_bases[] = {0,0};
static const char *swig_FormSwep_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_FormSwep = { "FormSwep", "FormSwep", &SWIGTYPE_p_stk__FormSwep,_proxy__wrap_new_FormSwep, swig_delete_FormSwep, swig_FormSwep_methods, swig_FormSwep_attributes, &swig_FormSwep_SwigStatic, swig_FormSwep_meta, swig_FormSwep_bases, swig_FormSwep_base_names };

static int _wrap_new_FreeVerb(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *result = 0 ;
  
  SWIG_check_num_args("stk::FreeVerb::FreeVerb",0,0)
  result = (stk::FreeVerb *)new stk::FreeVerb();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__FreeVerb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_setEffectMix(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FreeVerb::setEffectMix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::setEffectMix",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::setEffectMix",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_setEffectMix",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setEffectMix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_setRoomSize(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FreeVerb::setRoomSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::setRoomSize",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::setRoomSize",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_setRoomSize",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRoomSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_getRoomSize(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::getRoomSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::getRoomSize",1,"stk::FreeVerb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_getRoomSize",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  result = (stk::StkFloat)(arg1)->getRoomSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_setDamping(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FreeVerb::setDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::setDamping",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::setDamping",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_setDamping",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_getDamping(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::getDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::getDamping",1,"stk::FreeVerb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_getDamping",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  result = (stk::StkFloat)(arg1)->getDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_setWidth(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::FreeVerb::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::setWidth",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::setWidth",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_setWidth",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::getWidth",1,"stk::FreeVerb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_getWidth",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  result = (stk::StkFloat)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_setMode(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stk::FreeVerb::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::setMode",1,"stk::FreeVerb *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::FreeVerb::setMode",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_setMode",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_getMode(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::getMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::getMode",1,"stk::FreeVerb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_getMode",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  result = (stk::StkFloat)(arg1)->getMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  
  SWIG_check_num_args("stk::FreeVerb::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::clear",1,"stk::FreeVerb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_clear",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::lastOut",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_lastOut",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::lastOut",1,"stk::FreeVerb *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_lastOut",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FreeVerb_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FreeVerb_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FreeVerb_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FreeVerb::lastOut(unsigned int)\n"
    "    stk::FreeVerb::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_FreeVerb_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  unsigned int arg4 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FreeVerb::tick",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FreeVerb::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFloat)(arg1)->tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FreeVerb::tick",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::FreeVerb::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FreeVerb::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::FreeVerb::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FreeVerb::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FreeVerb::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::FreeVerb::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FreeVerb::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::FreeVerb::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FreeVerb::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::FreeVerb::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::FreeVerb::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  stk::FreeVerb *arg1 = (stk::FreeVerb *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::FreeVerb::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::FreeVerb::tick",1,"stk::FreeVerb *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::FreeVerb::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::FreeVerb::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__FreeVerb,0))){
    SWIG_fail_ptr("FreeVerb_tick",1,SWIGTYPE_p_stk__FreeVerb);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("FreeVerb_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreeVerb_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FreeVerb_tick__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FreeVerb_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FreeVerb_tick__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FreeVerb_tick__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FreeVerb_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FreeVerb_tick__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FreeVerb_tick__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__FreeVerb, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FreeVerb_tick__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FreeVerb_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::FreeVerb::tick(stk::StkFloat,stk::StkFloat,unsigned int)\n"
    "    stk::FreeVerb::tick(stk::StkFloat,stk::StkFloat)\n"
    "    stk::FreeVerb::tick(stk::StkFloat)\n"
    "    stk::FreeVerb::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::FreeVerb::tick(stk::StkFrames &)\n"
    "    stk::FreeVerb::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::FreeVerb::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::FreeVerb::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FreeVerb(void *obj) {
stk::FreeVerb *arg1 = (stk::FreeVerb *) obj;
delete arg1;
}
static int _proxy__wrap_new_FreeVerb(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FreeVerb);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FreeVerb_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FreeVerb_methods[]= {
    { "setEffectMix", _wrap_FreeVerb_setEffectMix},
    { "setRoomSize", _wrap_FreeVerb_setRoomSize},
    { "getRoomSize", _wrap_FreeVerb_getRoomSize},
    { "setDamping", _wrap_FreeVerb_setDamping},
    { "getDamping", _wrap_FreeVerb_getDamping},
    { "setWidth", _wrap_FreeVerb_setWidth},
    { "getWidth", _wrap_FreeVerb_getWidth},
    { "setMode", _wrap_FreeVerb_setMode},
    { "getMode", _wrap_FreeVerb_getMode},
    { "clear", _wrap_FreeVerb_clear},
    { "lastOut", _wrap_FreeVerb_lastOut},
    { "tick", _wrap_FreeVerb_tick},
    {0,0}
};
static swig_lua_method swig_FreeVerb_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FreeVerb_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FreeVerb_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FreeVerb_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FreeVerb_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FreeVerb_Sf_SwigStatic = {
    "FreeVerb",
    swig_FreeVerb_Sf_SwigStatic_methods,
    swig_FreeVerb_Sf_SwigStatic_attributes,
    swig_FreeVerb_Sf_SwigStatic_constants,
    swig_FreeVerb_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FreeVerb_bases[] = {0,0};
static const char *swig_FreeVerb_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_FreeVerb = { "FreeVerb", "FreeVerb", &SWIGTYPE_p_stk__FreeVerb,_proxy__wrap_new_FreeVerb, swig_delete_FreeVerb, swig_FreeVerb_methods, swig_FreeVerb_attributes, &swig_FreeVerb_Sf_SwigStatic, swig_FreeVerb_meta, swig_FreeVerb_bases, swig_FreeVerb_base_names };

static int _wrap_new_Granulate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *result = 0 ;
  
  SWIG_check_num_args("stk::Granulate::Granulate",0,0)
  result = (stk::Granulate *)new stk::Granulate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Granulate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Granulate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *argp2 ;
  stk::Granulate *result = 0 ;
  
  SWIG_check_num_args("stk::Granulate::Granulate",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Granulate::Granulate",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Granulate::Granulate",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::Granulate::Granulate",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Granulate",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (stk::Granulate *)new stk::Granulate(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Granulate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Granulate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  stk::Granulate *result = 0 ;
  
  SWIG_check_num_args("stk::Granulate::Granulate",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Granulate::Granulate",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Granulate::Granulate",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Granulate",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (stk::Granulate *)new stk::Granulate(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Granulate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Granulate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Granulate__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Granulate__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Granulate__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Granulate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::Granulate()\n"
    "    stk::Granulate::Granulate(unsigned int,std::string,bool)\n"
    "    stk::Granulate::Granulate(unsigned int,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_Granulate_openFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::Granulate::openFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::openFile",1,"stk::Granulate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Granulate::openFile",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::Granulate::openFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_openFile",1,SWIGTYPE_p_stk__Granulate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Granulate_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->openFile(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_openFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::Granulate::openFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::openFile",1,"stk::Granulate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Granulate::openFile",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_openFile",1,SWIGTYPE_p_stk__Granulate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Granulate_openFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->openFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_openFile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Granulate_openFile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Granulate_openFile__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Granulate_openFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::openFile(std::string,bool)\n"
    "    stk::Granulate::openFile(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_Granulate_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  
  SWIG_check_num_args("stk::Granulate::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::reset",1,"stk::Granulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_reset",1,SWIGTYPE_p_stk__Granulate);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setVoices__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::Granulate::setVoices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setVoices",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::setVoices",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setVoices",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setVoices(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setVoices__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  
  SWIG_check_num_args("stk::Granulate::setVoices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setVoices",1,"stk::Granulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setVoices",1,SWIGTYPE_p_stk__Granulate);
  }
  
  (arg1)->setVoices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setVoices(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Granulate_setVoices__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Granulate_setVoices__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Granulate_setVoices'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::setVoices(unsigned int)\n"
    "    stk::Granulate::setVoices()\n");
  lua_error(L);return 0;
}


static int _wrap_Granulate_setStretch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::Granulate::setStretch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setStretch",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::setStretch",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setStretch",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setStretch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setStretch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  
  SWIG_check_num_args("stk::Granulate::setStretch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setStretch",1,"stk::Granulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setStretch",1,SWIGTYPE_p_stk__Granulate);
  }
  
  (arg1)->setStretch();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setStretch(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Granulate_setStretch__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Granulate_setStretch__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Granulate_setStretch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::setStretch(unsigned int)\n"
    "    stk::Granulate::setStretch()\n");
  lua_error(L);return 0;
}


static int _wrap_Granulate_setGrainParameters__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("stk::Granulate::setGrainParameters",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setGrainParameters",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::setGrainParameters",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Granulate::setGrainParameters",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Granulate::setGrainParameters",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Granulate::setGrainParameters",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setGrainParameters",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->setGrainParameters(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setGrainParameters__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("stk::Granulate::setGrainParameters",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setGrainParameters",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::setGrainParameters",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Granulate::setGrainParameters",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Granulate::setGrainParameters",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setGrainParameters",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setGrainParameters(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setGrainParameters__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("stk::Granulate::setGrainParameters",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setGrainParameters",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::setGrainParameters",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Granulate::setGrainParameters",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setGrainParameters",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setGrainParameters(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setGrainParameters__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::Granulate::setGrainParameters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setGrainParameters",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::setGrainParameters",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setGrainParameters",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setGrainParameters(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setGrainParameters__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  
  SWIG_check_num_args("stk::Granulate::setGrainParameters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setGrainParameters",1,"stk::Granulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setGrainParameters",1,SWIGTYPE_p_stk__Granulate);
  }
  
  (arg1)->setGrainParameters();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setGrainParameters(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Granulate_setGrainParameters__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Granulate_setGrainParameters__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Granulate_setGrainParameters__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Granulate_setGrainParameters__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Granulate_setGrainParameters__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Granulate_setGrainParameters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::setGrainParameters(unsigned int,unsigned int,int,unsigned int)\n"
    "    stk::Granulate::setGrainParameters(unsigned int,unsigned int,int)\n"
    "    stk::Granulate::setGrainParameters(unsigned int,unsigned int)\n"
    "    stk::Granulate::setGrainParameters(unsigned int)\n"
    "    stk::Granulate::setGrainParameters()\n");
  lua_error(L);return 0;
}


static int _wrap_Granulate_setRandomFactor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Granulate::setRandomFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setRandomFactor",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::setRandomFactor",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setRandomFactor",1,SWIGTYPE_p_stk__Granulate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRandomFactor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setRandomFactor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  
  SWIG_check_num_args("stk::Granulate::setRandomFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::setRandomFactor",1,"stk::Granulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_setRandomFactor",1,SWIGTYPE_p_stk__Granulate);
  }
  
  (arg1)->setRandomFactor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_setRandomFactor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Granulate_setRandomFactor__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Granulate_setRandomFactor__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Granulate_setRandomFactor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::setRandomFactor(stk::StkFloat)\n"
    "    stk::Granulate::setRandomFactor()\n");
  lua_error(L);return 0;
}


static int _wrap_Granulate_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Granulate::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::lastOut",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_lastOut",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Granulate::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::lastOut",1,"stk::Granulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_lastOut",1,SWIGTYPE_p_stk__Granulate);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Granulate_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Granulate_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Granulate_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::lastOut(unsigned int)\n"
    "    stk::Granulate::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_Granulate_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Granulate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::tick",1,"stk::Granulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Granulate::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_tick",1,SWIGTYPE_p_stk__Granulate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Granulate::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::tick",1,"stk::Granulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_tick",1,SWIGTYPE_p_stk__Granulate);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Granulate::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::tick",1,"stk::Granulate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Granulate::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Granulate::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_tick",1,SWIGTYPE_p_stk__Granulate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Granulate_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Granulate *arg1 = (stk::Granulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Granulate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Granulate::tick",1,"stk::Granulate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Granulate::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Granulate,0))){
    SWIG_fail_ptr("Granulate_tick",1,SWIGTYPE_p_stk__Granulate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Granulate_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Granulate_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Granulate_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Granulate_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Granulate_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Granulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Granulate_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Granulate_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Granulate::tick(unsigned int)\n"
    "    stk::Granulate::tick()\n"
    "    stk::Granulate::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Granulate::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Granulate(void *obj) {
stk::Granulate *arg1 = (stk::Granulate *) obj;
delete arg1;
}
static int _proxy__wrap_new_Granulate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Granulate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Granulate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Granulate_methods[]= {
    { "openFile", _wrap_Granulate_openFile},
    { "reset", _wrap_Granulate_reset},
    { "setVoices", _wrap_Granulate_setVoices},
    { "setStretch", _wrap_Granulate_setStretch},
    { "setGrainParameters", _wrap_Granulate_setGrainParameters},
    { "setRandomFactor", _wrap_Granulate_setRandomFactor},
    { "lastOut", _wrap_Granulate_lastOut},
    { "tick", _wrap_Granulate_tick},
    {0,0}
};
static swig_lua_method swig_Granulate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Granulate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Granulate_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("GRAIN_STOPPED", stk::Granulate::GRAIN_STOPPED)},
    {SWIG_LUA_CONSTTAB_INT("GRAIN_FADEIN", stk::Granulate::GRAIN_FADEIN)},
    {SWIG_LUA_CONSTTAB_INT("GRAIN_SUSTAIN", stk::Granulate::GRAIN_SUSTAIN)},
    {SWIG_LUA_CONSTTAB_INT("GRAIN_FADEOUT", stk::Granulate::GRAIN_FADEOUT)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Granulate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Granulate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Granulate_Sf_SwigStatic = {
    "Granulate",
    swig_Granulate_Sf_SwigStatic_methods,
    swig_Granulate_Sf_SwigStatic_attributes,
    swig_Granulate_Sf_SwigStatic_constants,
    swig_Granulate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Granulate_bases[] = {0,0};
static const char *swig_Granulate_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_Granulate = { "Granulate", "Granulate", &SWIGTYPE_p_stk__Granulate,_proxy__wrap_new_Granulate, swig_delete_Granulate, swig_Granulate_methods, swig_Granulate_attributes, &swig_Granulate_Sf_SwigStatic, swig_Granulate_meta, swig_Granulate_bases, swig_Granulate_base_names };

static int _wrap_new_Guitar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  stk::Guitar *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::Guitar",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Guitar::Guitar",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Guitar::Guitar",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Guitar",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (stk::Guitar *)new stk::Guitar(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Guitar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Guitar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::Guitar *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::Guitar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Guitar::Guitar",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::Guitar *)new stk::Guitar(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Guitar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Guitar__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::Guitar",0,0)
  result = (stk::Guitar *)new stk::Guitar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Guitar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Guitar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Guitar__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Guitar__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Guitar__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Guitar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::Guitar(unsigned int,std::string)\n"
    "    stk::Guitar::Guitar(unsigned int)\n"
    "    stk::Guitar::Guitar()\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  
  SWIG_check_num_args("stk::Guitar::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::clear",1,"stk::Guitar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_clear",1,SWIGTYPE_p_stk__Guitar);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setBodyFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("stk::Guitar::setBodyFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setBodyFile",1,"stk::Guitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Guitar::setBodyFile",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setBodyFile",1,SWIGTYPE_p_stk__Guitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Guitar_setBodyFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->setBodyFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setBodyFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  
  SWIG_check_num_args("stk::Guitar::setBodyFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setBodyFile",1,"stk::Guitar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setBodyFile",1,SWIGTYPE_p_stk__Guitar);
  }
  
  (arg1)->setBodyFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setBodyFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Guitar_setBodyFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Guitar_setBodyFile__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_setBodyFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::setBodyFile(std::string)\n"
    "    stk::Guitar::setBodyFile()\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_setPluckPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("stk::Guitar::setPluckPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setPluckPosition",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::setPluckPosition",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::setPluckPosition",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setPluckPosition",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setPluckPosition(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setPluckPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Guitar::setPluckPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setPluckPosition",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::setPluckPosition",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setPluckPosition",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPluckPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setPluckPosition(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Guitar_setPluckPosition__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Guitar_setPluckPosition__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_setPluckPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::setPluckPosition(stk::StkFloat,int)\n"
    "    stk::Guitar::setPluckPosition(stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_setLoopGain__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("stk::Guitar::setLoopGain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setLoopGain",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::setLoopGain",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::setLoopGain",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setLoopGain",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setLoopGain(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setLoopGain__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Guitar::setLoopGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setLoopGain",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::setLoopGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setLoopGain",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setLoopGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setLoopGain(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Guitar_setLoopGain__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Guitar_setLoopGain__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_setLoopGain'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::setLoopGain(stk::StkFloat,int)\n"
    "    stk::Guitar::setLoopGain(stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_setFrequency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("stk::Guitar::setFrequency",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setFrequency",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::setFrequency",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::setFrequency",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setFrequency",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->setFrequency(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setFrequency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Guitar::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::setFrequency",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_setFrequency",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_setFrequency(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Guitar_setFrequency__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Guitar_setFrequency__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_setFrequency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::setFrequency(stk::StkFloat,unsigned int)\n"
    "    stk::Guitar::setFrequency(stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_noteOn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("stk::Guitar::noteOn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::noteOn",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::noteOn",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Guitar::noteOn",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_noteOn",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->noteOn(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_noteOn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Guitar::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::noteOn",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_noteOn",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_noteOn(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Guitar_noteOn__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Guitar_noteOn__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_noteOn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::noteOn(stk::StkFloat,stk::StkFloat,unsigned int)\n"
    "    stk::Guitar::noteOn(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_noteOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("stk::Guitar::noteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::noteOff",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::noteOff",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::noteOff",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_noteOff",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->noteOff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_noteOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Guitar::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::noteOff",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_noteOff",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_noteOff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Guitar_noteOff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Guitar_noteOff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_noteOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::noteOff(stk::StkFloat,unsigned int)\n"
    "    stk::Guitar::noteOff(stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_controlChange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("stk::Guitar::controlChange",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::controlChange",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::controlChange",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Guitar::controlChange",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_controlChange",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->controlChange(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_controlChange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Guitar::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::controlChange",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_controlChange",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_controlChange(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Guitar_controlChange__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Guitar_controlChange__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_controlChange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::controlChange(int,stk::StkFloat,int)\n"
    "    stk::Guitar::controlChange(int,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Guitar_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Guitar::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::lastOut",1,"stk::Guitar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_lastOut",1,SWIGTYPE_p_stk__Guitar);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Guitar::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::tick",1,"stk::Guitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Guitar::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_tick",1,SWIGTYPE_p_stk__Guitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Guitar::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::tick",1,"stk::Guitar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_tick",1,SWIGTYPE_p_stk__Guitar);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::tick",1,"stk::Guitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Guitar::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Guitar::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_tick",1,SWIGTYPE_p_stk__Guitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::tick",1,"stk::Guitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Guitar::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_tick",1,SWIGTYPE_p_stk__Guitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::tick",1,"stk::Guitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Guitar::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Guitar::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Guitar::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Guitar::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_tick",1,SWIGTYPE_p_stk__Guitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::tick",1,"stk::Guitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Guitar::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Guitar::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Guitar::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_tick",1,SWIGTYPE_p_stk__Guitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  stk::Guitar *arg1 = (stk::Guitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Guitar::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Guitar::tick",1,"stk::Guitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Guitar::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Guitar::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Guitar,0))){
    SWIG_fail_ptr("Guitar_tick",1,SWIGTYPE_p_stk__Guitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Guitar_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Guitar_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Guitar_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Guitar_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Guitar_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Guitar_tick__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Guitar_tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Guitar_tick__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Guitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Guitar_tick__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Guitar_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Guitar::tick(stk::StkFloat)\n"
    "    stk::Guitar::tick()\n"
    "    stk::Guitar::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Guitar::tick(stk::StkFrames &)\n"
    "    stk::Guitar::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Guitar::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Guitar::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Guitar(void *obj) {
stk::Guitar *arg1 = (stk::Guitar *) obj;
delete arg1;
}
static int _proxy__wrap_new_Guitar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Guitar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Guitar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Guitar_methods[]= {
    { "clear", _wrap_Guitar_clear},
    { "setBodyFile", _wrap_Guitar_setBodyFile},
    { "setPluckPosition", _wrap_Guitar_setPluckPosition},
    { "setLoopGain", _wrap_Guitar_setLoopGain},
    { "setFrequency", _wrap_Guitar_setFrequency},
    { "noteOn", _wrap_Guitar_noteOn},
    { "noteOff", _wrap_Guitar_noteOff},
    { "controlChange", _wrap_Guitar_controlChange},
    { "lastOut", _wrap_Guitar_lastOut},
    { "tick", _wrap_Guitar_tick},
    {0,0}
};
static swig_lua_method swig_Guitar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Guitar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Guitar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Guitar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Guitar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Guitar_Sf_SwigStatic = {
    "Guitar",
    swig_Guitar_Sf_SwigStatic_methods,
    swig_Guitar_Sf_SwigStatic_attributes,
    swig_Guitar_Sf_SwigStatic_constants,
    swig_Guitar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Guitar_bases[] = {0};
static const char *swig_Guitar_base_names[] = {0};
static swig_lua_class _wrap_class_Guitar = { "Guitar", "Guitar", &SWIGTYPE_p_stk__Guitar,_proxy__wrap_new_Guitar, swig_delete_Guitar, swig_Guitar_methods, swig_Guitar_attributes, &swig_Guitar_Sf_SwigStatic, swig_Guitar_meta, swig_Guitar_bases, swig_Guitar_base_names };

static int _wrap_new_HevyMetl(lua_State* L) {
  int SWIG_arg = 0;
  stk::HevyMetl *result = 0 ;
  
  SWIG_check_num_args("stk::HevyMetl::HevyMetl",0,0)
  result = (stk::HevyMetl *)new stk::HevyMetl();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__HevyMetl,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HevyMetl_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::HevyMetl::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::HevyMetl::noteOn",1,"stk::HevyMetl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::HevyMetl::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::HevyMetl::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__HevyMetl,0))){
    SWIG_fail_ptr("HevyMetl_noteOn",1,SWIGTYPE_p_stk__HevyMetl);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HevyMetl_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::HevyMetl::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::HevyMetl::tick",1,"stk::HevyMetl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::HevyMetl::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__HevyMetl,0))){
    SWIG_fail_ptr("HevyMetl_tick",1,SWIGTYPE_p_stk__HevyMetl);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HevyMetl_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::HevyMetl::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::HevyMetl::tick",1,"stk::HevyMetl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__HevyMetl,0))){
    SWIG_fail_ptr("HevyMetl_tick",1,SWIGTYPE_p_stk__HevyMetl);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HevyMetl_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::HevyMetl::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::HevyMetl::tick",1,"stk::HevyMetl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::HevyMetl::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::HevyMetl::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__HevyMetl,0))){
    SWIG_fail_ptr("HevyMetl_tick",1,SWIGTYPE_p_stk__HevyMetl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("HevyMetl_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HevyMetl_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::HevyMetl *arg1 = (stk::HevyMetl *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::HevyMetl::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::HevyMetl::tick",1,"stk::HevyMetl *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::HevyMetl::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__HevyMetl,0))){
    SWIG_fail_ptr("HevyMetl_tick",1,SWIGTYPE_p_stk__HevyMetl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("HevyMetl_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HevyMetl_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__HevyMetl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_HevyMetl_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__HevyMetl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_HevyMetl_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__HevyMetl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_HevyMetl_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__HevyMetl, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_HevyMetl_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HevyMetl_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::HevyMetl::tick(unsigned int)\n"
    "    stk::HevyMetl::tick()\n"
    "    stk::HevyMetl::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::HevyMetl::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_HevyMetl(void *obj) {
stk::HevyMetl *arg1 = (stk::HevyMetl *) obj;
delete arg1;
}
static int _proxy__wrap_new_HevyMetl(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HevyMetl);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HevyMetl_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_HevyMetl_methods[]= {
    { "noteOn", _wrap_HevyMetl_noteOn},
    { "tick", _wrap_HevyMetl_tick},
    {0,0}
};
static swig_lua_method swig_HevyMetl_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HevyMetl_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HevyMetl_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HevyMetl_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_HevyMetl_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HevyMetl_Sf_SwigStatic = {
    "HevyMetl",
    swig_HevyMetl_Sf_SwigStatic_methods,
    swig_HevyMetl_Sf_SwigStatic_attributes,
    swig_HevyMetl_Sf_SwigStatic_constants,
    swig_HevyMetl_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HevyMetl_bases[] = {0,0};
static const char *swig_HevyMetl_base_names[] = {"stk::FM *",0};
static swig_lua_class _wrap_class_HevyMetl = { "HevyMetl", "HevyMetl", &SWIGTYPE_p_stk__HevyMetl,_proxy__wrap_new_HevyMetl, swig_delete_HevyMetl, swig_HevyMetl_methods, swig_HevyMetl_attributes, &swig_HevyMetl_Sf_SwigStatic, swig_HevyMetl_meta, swig_HevyMetl_bases, swig_HevyMetl_base_names };

static int _wrap_new_Iir__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *result = 0 ;
  
  SWIG_check_num_args("stk::Iir::Iir",0,0)
  result = (stk::Iir *)new stk::Iir();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Iir,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Iir__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< stk::StkFloat > *arg1 = 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  stk::Iir *result = 0 ;
  
  SWIG_check_num_args("stk::Iir::Iir",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::Iir::Iir",1,"std::vector< stk::StkFloat > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::Iir",2,"std::vector< stk::StkFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_Iir",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_Iir",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (stk::Iir *)new stk::Iir(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Iir,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Iir(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Iir__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Iir__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Iir'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Iir::Iir()\n"
    "    stk::Iir::Iir(std::vector< stk::StkFloat > &,std::vector< stk::StkFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Iir_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  std::vector< stk::StkFloat > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("stk::Iir::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::setCoefficients",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::setCoefficients",2,"std::vector< stk::StkFloat > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Iir::setCoefficients",3,"std::vector< stk::StkFloat > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::Iir::setCoefficients",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_setCoefficients",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setCoefficients",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setCoefficients",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setCoefficients(*arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  std::vector< stk::StkFloat > *arg3 = 0 ;
  
  SWIG_check_num_args("stk::Iir::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::setCoefficients",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::setCoefficients",2,"std::vector< stk::StkFloat > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Iir::setCoefficients",3,"std::vector< stk::StkFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_setCoefficients",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setCoefficients",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setCoefficients",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->setCoefficients(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_setCoefficients(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Iir_setCoefficients__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Iir_setCoefficients__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Iir_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Iir::setCoefficients(std::vector< stk::StkFloat > &,std::vector< stk::StkFloat > &,bool)\n"
    "    stk::Iir::setCoefficients(std::vector< stk::StkFloat > &,std::vector< stk::StkFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Iir_setNumerator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("stk::Iir::setNumerator",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::setNumerator",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::setNumerator",2,"std::vector< stk::StkFloat > &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::Iir::setNumerator",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_setNumerator",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setNumerator",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setNumerator(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_setNumerator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  
  SWIG_check_num_args("stk::Iir::setNumerator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::setNumerator",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::setNumerator",2,"std::vector< stk::StkFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_setNumerator",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setNumerator",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->setNumerator(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_setNumerator(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Iir_setNumerator__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Iir_setNumerator__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Iir_setNumerator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Iir::setNumerator(std::vector< stk::StkFloat > &,bool)\n"
    "    stk::Iir::setNumerator(std::vector< stk::StkFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Iir_setDenominator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("stk::Iir::setDenominator",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::setDenominator",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::setDenominator",2,"std::vector< stk::StkFloat > &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("stk::Iir::setDenominator",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_setDenominator",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setDenominator",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setDenominator(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_setDenominator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  std::vector< stk::StkFloat > *arg2 = 0 ;
  
  SWIG_check_num_args("stk::Iir::setDenominator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::setDenominator",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::setDenominator",2,"std::vector< stk::StkFloat > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_setDenominator",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Iir_setDenominator",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->setDenominator(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_setDenominator(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Iir_setDenominator__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Iir_setDenominator__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Iir_setDenominator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Iir::setDenominator(std::vector< stk::StkFloat > &,bool)\n"
    "    stk::Iir::setDenominator(std::vector< stk::StkFloat > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Iir_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Iir::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::lastOut",1,"stk::Iir const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_lastOut",1,SWIGTYPE_p_stk__Iir);
  }
  
  result = (stk::StkFloat)((stk::Iir const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Iir::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::tick",1,"stk::Iir *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Iir::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_tick",1,SWIGTYPE_p_stk__Iir);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Iir::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::tick",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Iir::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_tick",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Iir::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::tick",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_tick",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Iir::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::tick",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Iir::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Iir::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Iir::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_tick",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Iir::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::tick",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Iir::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Iir::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_tick",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Iir *arg1 = (stk::Iir *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Iir::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Iir::tick",1,"stk::Iir *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Iir::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Iir::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Iir,0))){
    SWIG_fail_ptr("Iir_tick",1,SWIGTYPE_p_stk__Iir);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Iir_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Iir_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Iir_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Iir_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Iir_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Iir_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Iir_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Iir, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Iir_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Iir_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Iir::tick(stk::StkFloat)\n"
    "    stk::Iir::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Iir::tick(stk::StkFrames &)\n"
    "    stk::Iir::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Iir::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Iir::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Iir(void *obj) {
stk::Iir *arg1 = (stk::Iir *) obj;
delete arg1;
}
static int _proxy__wrap_new_Iir(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Iir);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Iir_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Iir_methods[]= {
    { "setCoefficients", _wrap_Iir_setCoefficients},
    { "setNumerator", _wrap_Iir_setNumerator},
    { "setDenominator", _wrap_Iir_setDenominator},
    { "lastOut", _wrap_Iir_lastOut},
    { "tick", _wrap_Iir_tick},
    {0,0}
};
static swig_lua_method swig_Iir_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Iir_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Iir_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Iir_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Iir_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Iir_Sf_SwigStatic = {
    "Iir",
    swig_Iir_Sf_SwigStatic_methods,
    swig_Iir_Sf_SwigStatic_attributes,
    swig_Iir_Sf_SwigStatic_constants,
    swig_Iir_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Iir_bases[] = {0,0};
static const char *swig_Iir_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_Iir = { "Iir", "Iir", &SWIGTYPE_p_stk__Iir,_proxy__wrap_new_Iir, swig_delete_Iir, swig_Iir_methods, swig_Iir_attributes, &swig_Iir_Sf_SwigStatic, swig_Iir_meta, swig_Iir_bases, swig_Iir_base_names };

static int _wrap_new_JCRev__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::JCRev *result = 0 ;
  
  SWIG_check_num_args("stk::JCRev::JCRev",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::JCRev::JCRev",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::JCRev *)new stk::JCRev(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__JCRev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JCRev__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *result = 0 ;
  
  SWIG_check_num_args("stk::JCRev::JCRev",0,0)
  result = (stk::JCRev *)new stk::JCRev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__JCRev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JCRev(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_JCRev__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_JCRev__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_JCRev'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::JCRev::JCRev(stk::StkFloat)\n"
    "    stk::JCRev::JCRev()\n");
  lua_error(L);return 0;
}


static int _wrap_JCRev_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  
  SWIG_check_num_args("stk::JCRev::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::clear",1,"stk::JCRev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_clear",1,SWIGTYPE_p_stk__JCRev);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_setT60(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::JCRev::setT60",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::setT60",1,"stk::JCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::JCRev::setT60",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_setT60",1,SWIGTYPE_p_stk__JCRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setT60(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::JCRev::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::lastOut",1,"stk::JCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::JCRev::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_lastOut",1,SWIGTYPE_p_stk__JCRev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::JCRev::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::lastOut",1,"stk::JCRev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_lastOut",1,SWIGTYPE_p_stk__JCRev);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_JCRev_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JCRev_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JCRev_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::JCRev::lastOut(unsigned int)\n"
    "    stk::JCRev::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_JCRev_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::JCRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::tick",1,"stk::JCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::JCRev::tick",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::JCRev::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_tick",1,SWIGTYPE_p_stk__JCRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::JCRev::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::tick",1,"stk::JCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::JCRev::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_tick",1,SWIGTYPE_p_stk__JCRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JCRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::tick",1,"stk::JCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JCRev::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::JCRev::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_tick",1,SWIGTYPE_p_stk__JCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JCRev::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::tick",1,"stk::JCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JCRev::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_tick",1,SWIGTYPE_p_stk__JCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JCRev::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::tick",1,"stk::JCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JCRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::JCRev::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::JCRev::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::JCRev::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_tick",1,SWIGTYPE_p_stk__JCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JCRev::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::tick",1,"stk::JCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JCRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::JCRev::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::JCRev::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_tick",1,SWIGTYPE_p_stk__JCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_tick__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  stk::JCRev *arg1 = (stk::JCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JCRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JCRev::tick",1,"stk::JCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JCRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::JCRev::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JCRev,0))){
    SWIG_fail_ptr("JCRev_tick",1,SWIGTYPE_p_stk__JCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JCRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JCRev_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JCRev_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JCRev_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_JCRev_tick__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_JCRev_tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_JCRev_tick__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_JCRev_tick__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_JCRev_tick__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JCRev_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::JCRev::tick(stk::StkFloat,unsigned int)\n"
    "    stk::JCRev::tick(stk::StkFloat)\n"
    "    stk::JCRev::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::JCRev::tick(stk::StkFrames &)\n"
    "    stk::JCRev::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::JCRev::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::JCRev::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_JCRev(void *obj) {
stk::JCRev *arg1 = (stk::JCRev *) obj;
delete arg1;
}
static int _proxy__wrap_new_JCRev(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JCRev);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JCRev_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JCRev_methods[]= {
    { "clear", _wrap_JCRev_clear},
    { "setT60", _wrap_JCRev_setT60},
    { "lastOut", _wrap_JCRev_lastOut},
    { "tick", _wrap_JCRev_tick},
    {0,0}
};
static swig_lua_method swig_JCRev_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_JCRev_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JCRev_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JCRev_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JCRev_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JCRev_Sf_SwigStatic = {
    "JCRev",
    swig_JCRev_Sf_SwigStatic_methods,
    swig_JCRev_Sf_SwigStatic_attributes,
    swig_JCRev_Sf_SwigStatic_constants,
    swig_JCRev_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JCRev_bases[] = {0,0};
static const char *swig_JCRev_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_JCRev = { "JCRev", "JCRev", &SWIGTYPE_p_stk__JCRev,_proxy__wrap_new_JCRev, swig_delete_JCRev, swig_JCRev_methods, swig_JCRev_attributes, &swig_JCRev_Sf_SwigStatic, swig_JCRev_meta, swig_JCRev_bases, swig_JCRev_base_names };

static int _wrap_JetTable_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::JetTable::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JetTable::tick",1,"stk::JetTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::JetTable::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JetTable,0))){
    SWIG_fail_ptr("JetTable_tick",1,SWIGTYPE_p_stk__JetTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JetTable_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JetTable::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JetTable::tick",1,"stk::JetTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JetTable::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::JetTable::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JetTable,0))){
    SWIG_fail_ptr("JetTable_tick",1,SWIGTYPE_p_stk__JetTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JetTable_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JetTable::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JetTable::tick",1,"stk::JetTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JetTable::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JetTable,0))){
    SWIG_fail_ptr("JetTable_tick",1,SWIGTYPE_p_stk__JetTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JetTable_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JetTable::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JetTable::tick",1,"stk::JetTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JetTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::JetTable::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::JetTable::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::JetTable::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JetTable,0))){
    SWIG_fail_ptr("JetTable_tick",1,SWIGTYPE_p_stk__JetTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JetTable_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JetTable::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JetTable::tick",1,"stk::JetTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JetTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::JetTable::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::JetTable::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JetTable,0))){
    SWIG_fail_ptr("JetTable_tick",1,SWIGTYPE_p_stk__JetTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JetTable_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::JetTable *arg1 = (stk::JetTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::JetTable::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::JetTable::tick",1,"stk::JetTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::JetTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::JetTable::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__JetTable,0))){
    SWIG_fail_ptr("JetTable_tick",1,SWIGTYPE_p_stk__JetTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("JetTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JetTable_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JetTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_JetTable_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JetTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_JetTable_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JetTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_JetTable_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JetTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_JetTable_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JetTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_JetTable_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__JetTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_JetTable_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'JetTable_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::JetTable::tick(stk::StkFloat)\n"
    "    stk::JetTable::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::JetTable::tick(stk::StkFrames &)\n"
    "    stk::JetTable::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::JetTable::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::JetTable::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_JetTable(lua_State* L) {
  int SWIG_arg = 0;
  stk::JetTable *result = 0 ;
  
  SWIG_check_num_args("stk::JetTable::JetTable",0,0)
  result = (stk::JetTable *)new stk::JetTable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__JetTable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JetTable(void *obj) {
stk::JetTable *arg1 = (stk::JetTable *) obj;
delete arg1;
}
static int _proxy__wrap_new_JetTable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JetTable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JetTable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JetTable_methods[]= {
    { "tick", _wrap_JetTable_tick},
    {0,0}
};
static swig_lua_method swig_JetTable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_JetTable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JetTable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JetTable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JetTable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JetTable_Sf_SwigStatic = {
    "JetTable",
    swig_JetTable_Sf_SwigStatic_methods,
    swig_JetTable_Sf_SwigStatic_attributes,
    swig_JetTable_Sf_SwigStatic_constants,
    swig_JetTable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JetTable_bases[] = {0,0};
static const char *swig_JetTable_base_names[] = {"stk::Function *",0};
static swig_lua_class _wrap_class_JetTable = { "JetTable", "JetTable", &SWIGTYPE_p_stk__JetTable,_proxy__wrap_new_JetTable, swig_delete_JetTable, swig_JetTable_methods, swig_JetTable_attributes, &swig_JetTable_Sf_SwigStatic, swig_JetTable_meta, swig_JetTable_bases, swig_JetTable_base_names };

static int _wrap_new_LentPitShift__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  int arg2 ;
  stk::LentPitShift *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::LentPitShift",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::LentPitShift::LentPitShift",1,"stk::StkFloat");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::LentPitShift::LentPitShift",2,"int");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (stk::LentPitShift *)new stk::LentPitShift(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__LentPitShift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LentPitShift__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::LentPitShift *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::LentPitShift",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::LentPitShift::LentPitShift",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::LentPitShift *)new stk::LentPitShift(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__LentPitShift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LentPitShift__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::LentPitShift",0,0)
  result = (stk::LentPitShift *)new stk::LentPitShift();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__LentPitShift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LentPitShift(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LentPitShift__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LentPitShift__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_LentPitShift__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LentPitShift'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::LentPitShift::LentPitShift(stk::StkFloat,int)\n"
    "    stk::LentPitShift::LentPitShift(stk::StkFloat)\n"
    "    stk::LentPitShift::LentPitShift()\n");
  lua_error(L);return 0;
}


static int _wrap_LentPitShift_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::clear",1,"stk::LentPitShift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_clear",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_setShift(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::LentPitShift::setShift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::setShift",1,"stk::LentPitShift *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::LentPitShift::setShift",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_setShift",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setShift(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::LentPitShift::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::tick",1,"stk::LentPitShift *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::LentPitShift::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_tick",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::tick",1,"stk::LentPitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::LentPitShift::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::LentPitShift::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_tick",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::tick",1,"stk::LentPitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::LentPitShift::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_tick",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::tick",1,"stk::LentPitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::LentPitShift::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::LentPitShift::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::LentPitShift::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::LentPitShift::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_tick",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::tick",1,"stk::LentPitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::LentPitShift::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::LentPitShift::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::LentPitShift::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_tick",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::LentPitShift *arg1 = (stk::LentPitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::LentPitShift::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::LentPitShift::tick",1,"stk::LentPitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::LentPitShift::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::LentPitShift::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__LentPitShift,0))){
    SWIG_fail_ptr("LentPitShift_tick",1,SWIGTYPE_p_stk__LentPitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("LentPitShift_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LentPitShift_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__LentPitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LentPitShift_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__LentPitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LentPitShift_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__LentPitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_LentPitShift_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__LentPitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_LentPitShift_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__LentPitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_LentPitShift_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__LentPitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_LentPitShift_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LentPitShift_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::LentPitShift::tick(stk::StkFloat)\n"
    "    stk::LentPitShift::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::LentPitShift::tick(stk::StkFrames &)\n"
    "    stk::LentPitShift::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::LentPitShift::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::LentPitShift::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_LentPitShift(void *obj) {
stk::LentPitShift *arg1 = (stk::LentPitShift *) obj;
delete arg1;
}
static int _proxy__wrap_new_LentPitShift(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LentPitShift);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LentPitShift_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LentPitShift_methods[]= {
    { "clear", _wrap_LentPitShift_clear},
    { "setShift", _wrap_LentPitShift_setShift},
    { "tick", _wrap_LentPitShift_tick},
    {0,0}
};
static swig_lua_method swig_LentPitShift_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LentPitShift_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LentPitShift_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LentPitShift_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LentPitShift_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LentPitShift_Sf_SwigStatic = {
    "LentPitShift",
    swig_LentPitShift_Sf_SwigStatic_methods,
    swig_LentPitShift_Sf_SwigStatic_attributes,
    swig_LentPitShift_Sf_SwigStatic_constants,
    swig_LentPitShift_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LentPitShift_bases[] = {0,0};
static const char *swig_LentPitShift_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_LentPitShift = { "LentPitShift", "LentPitShift", &SWIGTYPE_p_stk__LentPitShift,_proxy__wrap_new_LentPitShift, swig_delete_LentPitShift, swig_LentPitShift_methods, swig_LentPitShift_attributes, &swig_LentPitShift_Sf_SwigStatic, swig_LentPitShift_meta, swig_LentPitShift_bases, swig_LentPitShift_base_names };

static int _wrap_new_Mandolin(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Mandolin *result = 0 ;
  
  SWIG_check_num_args("stk::Mandolin::Mandolin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Mandolin::Mandolin",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Mandolin *)new stk::Mandolin(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Mandolin,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  
  SWIG_check_num_args("stk::Mandolin::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::clear",1,"stk::Mandolin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_clear",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_setDetune(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mandolin::setDetune",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::setDetune",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::setDetune",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_setDetune",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDetune(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_setBodySize(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mandolin::setBodySize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::setBodySize",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::setBodySize",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_setBodySize",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setBodySize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_setPluckPosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mandolin::setPluckPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::setPluckPosition",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::setPluckPosition",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_setPluckPosition",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPluckPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mandolin::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::setFrequency",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_setFrequency",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_pluck__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mandolin::pluck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::pluck",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::pluck",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_pluck",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->pluck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_pluck__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Mandolin::pluck",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::pluck",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::pluck",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mandolin::pluck",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_pluck",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->pluck(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_pluck(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mandolin, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Mandolin_pluck__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mandolin, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Mandolin_pluck__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mandolin_pluck'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Mandolin::pluck(stk::StkFloat)\n"
    "    stk::Mandolin::pluck(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Mandolin_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Mandolin::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::noteOn",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mandolin::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_noteOn",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mandolin::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::noteOff",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_noteOff",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Mandolin::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::controlChange",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mandolin::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_controlChange",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Mandolin::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::tick",1,"stk::Mandolin *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mandolin::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_tick",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Mandolin::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::tick",1,"stk::Mandolin *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_tick",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Mandolin::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::tick",1,"stk::Mandolin *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Mandolin::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mandolin::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_tick",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Mandolin_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mandolin *arg1 = (stk::Mandolin *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Mandolin::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mandolin::tick",1,"stk::Mandolin *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Mandolin::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mandolin,0))){
    SWIG_fail_ptr("Mandolin_tick",1,SWIGTYPE_p_stk__Mandolin);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Mandolin_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mandolin_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mandolin, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Mandolin_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mandolin, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Mandolin_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mandolin, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Mandolin_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mandolin, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Mandolin_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mandolin_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Mandolin::tick(unsigned int)\n"
    "    stk::Mandolin::tick()\n"
    "    stk::Mandolin::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Mandolin::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Mandolin(void *obj) {
stk::Mandolin *arg1 = (stk::Mandolin *) obj;
delete arg1;
}
static int _proxy__wrap_new_Mandolin(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Mandolin);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Mandolin_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mandolin_methods[]= {
    { "clear", _wrap_Mandolin_clear},
    { "setDetune", _wrap_Mandolin_setDetune},
    { "setBodySize", _wrap_Mandolin_setBodySize},
    { "setPluckPosition", _wrap_Mandolin_setPluckPosition},
    { "setFrequency", _wrap_Mandolin_setFrequency},
    { "pluck", _wrap_Mandolin_pluck},
    { "noteOn", _wrap_Mandolin_noteOn},
    { "noteOff", _wrap_Mandolin_noteOff},
    { "controlChange", _wrap_Mandolin_controlChange},
    { "tick", _wrap_Mandolin_tick},
    {0,0}
};
static swig_lua_method swig_Mandolin_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Mandolin_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Mandolin_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Mandolin_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Mandolin_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Mandolin_Sf_SwigStatic = {
    "Mandolin",
    swig_Mandolin_Sf_SwigStatic_methods,
    swig_Mandolin_Sf_SwigStatic_attributes,
    swig_Mandolin_Sf_SwigStatic_constants,
    swig_Mandolin_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Mandolin_bases[] = {0,0};
static const char *swig_Mandolin_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Mandolin = { "Mandolin", "Mandolin", &SWIGTYPE_p_stk__Mandolin,_proxy__wrap_new_Mandolin, swig_delete_Mandolin, swig_Mandolin_methods, swig_Mandolin_attributes, &swig_Mandolin_Sf_SwigStatic, swig_Mandolin_meta, swig_Mandolin_bases, swig_Mandolin_base_names };

static int _wrap_new_Mesh2D(lua_State* L) {
  int SWIG_arg = 0;
  unsigned short arg1 ;
  unsigned short arg2 ;
  stk::Mesh2D *result = 0 ;
  
  SWIG_check_num_args("stk::Mesh2D::Mesh2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Mesh2D::Mesh2D",1,"unsigned short");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::Mesh2D",2,"unsigned short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned short)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (stk::Mesh2D *)new stk::Mesh2D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Mesh2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  
  SWIG_check_num_args("stk::Mesh2D::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::clear",1,"stk::Mesh2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_clear",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_setNX(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("stk::Mesh2D::setNX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::setNX",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::setNX",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_setNX",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->setNX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_setNY(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("stk::Mesh2D::setNY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::setNY",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::setNY",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_setNY",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->setNY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_setInputPosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Mesh2D::setInputPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::setInputPosition",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::setInputPosition",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mesh2D::setInputPosition",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_setInputPosition",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setInputPosition(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_setDecay(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mesh2D::setDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::setDecay",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::setDecay",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_setDecay",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Mesh2D::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::noteOn",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mesh2D::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_noteOn",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Mesh2D::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::noteOff",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_noteOff",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_energy(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Mesh2D::energy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::energy",1,"stk::Mesh2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_energy",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  result = (stk::StkFloat)(arg1)->energy();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_inputTick(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Mesh2D::inputTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::inputTick",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::inputTick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_inputTick",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->inputTick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Mesh2D::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::controlChange",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mesh2D::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_controlChange",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Mesh2D::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::tick",1,"stk::Mesh2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Mesh2D::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_tick",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Mesh2D::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::tick",1,"stk::Mesh2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_tick",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Mesh2D::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::tick",1,"stk::Mesh2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Mesh2D::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Mesh2D::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_tick",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Mesh2D_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mesh2D *arg1 = (stk::Mesh2D *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Mesh2D::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mesh2D::tick",1,"stk::Mesh2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Mesh2D::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mesh2D,0))){
    SWIG_fail_ptr("Mesh2D_tick",1,SWIGTYPE_p_stk__Mesh2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Mesh2D_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh2D_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mesh2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Mesh2D_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mesh2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Mesh2D_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mesh2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Mesh2D_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Mesh2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Mesh2D_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh2D_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Mesh2D::tick(unsigned int)\n"
    "    stk::Mesh2D::tick()\n"
    "    stk::Mesh2D::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Mesh2D::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Mesh2D(void *obj) {
stk::Mesh2D *arg1 = (stk::Mesh2D *) obj;
delete arg1;
}
static int _proxy__wrap_new_Mesh2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Mesh2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Mesh2D_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mesh2D_methods[]= {
    { "clear", _wrap_Mesh2D_clear},
    { "setNX", _wrap_Mesh2D_setNX},
    { "setNY", _wrap_Mesh2D_setNY},
    { "setInputPosition", _wrap_Mesh2D_setInputPosition},
    { "setDecay", _wrap_Mesh2D_setDecay},
    { "noteOn", _wrap_Mesh2D_noteOn},
    { "noteOff", _wrap_Mesh2D_noteOff},
    { "energy", _wrap_Mesh2D_energy},
    { "inputTick", _wrap_Mesh2D_inputTick},
    { "controlChange", _wrap_Mesh2D_controlChange},
    { "tick", _wrap_Mesh2D_tick},
    {0,0}
};
static swig_lua_method swig_Mesh2D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Mesh2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Mesh2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Mesh2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Mesh2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Mesh2D_Sf_SwigStatic = {
    "Mesh2D",
    swig_Mesh2D_Sf_SwigStatic_methods,
    swig_Mesh2D_Sf_SwigStatic_attributes,
    swig_Mesh2D_Sf_SwigStatic_constants,
    swig_Mesh2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Mesh2D_bases[] = {0,0};
static const char *swig_Mesh2D_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Mesh2D = { "Mesh2D", "Mesh2D", &SWIGTYPE_p_stk__Mesh2D,_proxy__wrap_new_Mesh2D, swig_delete_Mesh2D, swig_Mesh2D_methods, swig_Mesh2D_attributes, &swig_Mesh2D_Sf_SwigStatic, swig_Mesh2D_meta, swig_Mesh2D_bases, swig_Mesh2D_base_names };

static int _wrap_new_Messager(lua_State* L) {
  int SWIG_arg = 0;
  stk::Messager *result = 0 ;
  
  SWIG_check_num_args("stk::Messager::Messager",0,0)
  result = (stk::Messager *)new stk::Messager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Messager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messager_popMessage(lua_State* L) {
  int SWIG_arg = 0;
  stk::Messager *arg1 = (stk::Messager *) 0 ;
  Skini::Message *arg2 = 0 ;
  
  SWIG_check_num_args("stk::Messager::popMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Messager::popMessage",1,"stk::Messager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Messager::popMessage",2,"Skini::Message &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Messager,0))){
    SWIG_fail_ptr("Messager_popMessage",1,SWIGTYPE_p_stk__Messager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skini__Message,0))){
    SWIG_fail_ptr("Messager_popMessage",2,SWIGTYPE_p_Skini__Message);
  }
  
  (arg1)->popMessage(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messager_pushMessage(lua_State* L) {
  int SWIG_arg = 0;
  stk::Messager *arg1 = (stk::Messager *) 0 ;
  Skini::Message *arg2 = 0 ;
  
  SWIG_check_num_args("stk::Messager::pushMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Messager::pushMessage",1,"stk::Messager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Messager::pushMessage",2,"Skini::Message &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Messager,0))){
    SWIG_fail_ptr("Messager_pushMessage",1,SWIGTYPE_p_stk__Messager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Skini__Message,0))){
    SWIG_fail_ptr("Messager_pushMessage",2,SWIGTYPE_p_Skini__Message);
  }
  
  (arg1)->pushMessage(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Messager_setScoreFile(lua_State* L) {
  int SWIG_arg = 0;
  stk::Messager *arg1 = (stk::Messager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::Messager::setScoreFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Messager::setScoreFile",1,"stk::Messager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("stk::Messager::setScoreFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Messager,0))){
    SWIG_fail_ptr("Messager_setScoreFile",1,SWIGTYPE_p_stk__Messager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->setScoreFile((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Messager(void *obj) {
stk::Messager *arg1 = (stk::Messager *) obj;
delete arg1;
}
static int _proxy__wrap_new_Messager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Messager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Messager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Messager_methods[]= {
    { "popMessage", _wrap_Messager_popMessage},
    { "pushMessage", _wrap_Messager_pushMessage},
    { "setScoreFile", _wrap_Messager_setScoreFile},
    {0,0}
};
static swig_lua_method swig_Messager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Messager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Messager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Messager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Messager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Messager_Sf_SwigStatic = {
    "Messager",
    swig_Messager_Sf_SwigStatic_methods,
    swig_Messager_Sf_SwigStatic_attributes,
    swig_Messager_Sf_SwigStatic_constants,
    swig_Messager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Messager_bases[] = {0};
static const char *swig_Messager_base_names[] = {0};
static swig_lua_class _wrap_class_Messager = { "Messager", "Messager", &SWIGTYPE_p_stk__Messager,_proxy__wrap_new_Messager, swig_delete_Messager, swig_Messager_methods, swig_Messager_attributes, &swig_Messager_Sf_SwigStatic, swig_Messager_meta, swig_Messager_bases, swig_Messager_base_names };

static int _wrap_new_MidiFileIn(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  stk::MidiFileIn *result = 0 ;
  
  SWIG_check_num_args("stk::MidiFileIn::MidiFileIn",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::MidiFileIn::MidiFileIn",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_MidiFileIn",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (stk::MidiFileIn *)new stk::MidiFileIn(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__MidiFileIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getFileFormat(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::MidiFileIn::getFileFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getFileFormat",1,"stk::MidiFileIn const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getFileFormat",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  result = (int)((stk::MidiFileIn const *)arg1)->getFileFormat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getNumberOfTracks(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::MidiFileIn::getNumberOfTracks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getNumberOfTracks",1,"stk::MidiFileIn const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getNumberOfTracks",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  result = (unsigned int)((stk::MidiFileIn const *)arg1)->getNumberOfTracks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getDivision(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::MidiFileIn::getDivision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getDivision",1,"stk::MidiFileIn const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getDivision",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  result = (int)((stk::MidiFileIn const *)arg1)->getDivision();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_rewindTrack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::MidiFileIn::rewindTrack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::rewindTrack",1,"stk::MidiFileIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::MidiFileIn::rewindTrack",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_rewindTrack",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->rewindTrack(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_rewindTrack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  
  SWIG_check_num_args("stk::MidiFileIn::rewindTrack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::rewindTrack",1,"stk::MidiFileIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_rewindTrack",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  (arg1)->rewindTrack();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_rewindTrack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MidiFileIn_rewindTrack__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MidiFileIn_rewindTrack__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MidiFileIn_rewindTrack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::MidiFileIn::rewindTrack(unsigned int)\n"
    "    stk::MidiFileIn::rewindTrack()\n");
  lua_error(L);return 0;
}


static int _wrap_MidiFileIn_getTickSeconds__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("stk::MidiFileIn::getTickSeconds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getTickSeconds",1,"stk::MidiFileIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::MidiFileIn::getTickSeconds",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getTickSeconds",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (double)(arg1)->getTickSeconds(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getTickSeconds__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  double result;
  
  SWIG_check_num_args("stk::MidiFileIn::getTickSeconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getTickSeconds",1,"stk::MidiFileIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getTickSeconds",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  result = (double)(arg1)->getTickSeconds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getTickSeconds(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MidiFileIn_getTickSeconds__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MidiFileIn_getTickSeconds__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MidiFileIn_getTickSeconds'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::MidiFileIn::getTickSeconds(unsigned int)\n"
    "    stk::MidiFileIn::getTickSeconds()\n");
  lua_error(L);return 0;
}


static int _wrap_MidiFileIn_getNextEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char > *arg2 = (std::vector< unsigned char > *) 0 ;
  unsigned int arg3 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::MidiFileIn::getNextEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getNextEvent",1,"stk::MidiFileIn *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::MidiFileIn::getNextEvent",2,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::MidiFileIn::getNextEvent",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getNextEvent",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("MidiFileIn_getNextEvent",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned long)(arg1)->getNextEvent(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getNextEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char > *arg2 = (std::vector< unsigned char > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::MidiFileIn::getNextEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getNextEvent",1,"stk::MidiFileIn *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::MidiFileIn::getNextEvent",2,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getNextEvent",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("MidiFileIn_getNextEvent",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned long)(arg1)->getNextEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getNextEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MidiFileIn_getNextEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MidiFileIn_getNextEvent__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MidiFileIn_getNextEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::MidiFileIn::getNextEvent(std::vector< unsigned char > *,unsigned int)\n"
    "    stk::MidiFileIn::getNextEvent(std::vector< unsigned char > *)\n");
  lua_error(L);return 0;
}


static int _wrap_MidiFileIn_getNextMidiEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char > *arg2 = (std::vector< unsigned char > *) 0 ;
  unsigned int arg3 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::MidiFileIn::getNextMidiEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getNextMidiEvent",1,"stk::MidiFileIn *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::MidiFileIn::getNextMidiEvent",2,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::MidiFileIn::getNextMidiEvent",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getNextMidiEvent",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("MidiFileIn_getNextMidiEvent",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (unsigned long)(arg1)->getNextMidiEvent(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getNextMidiEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::MidiFileIn *arg1 = (stk::MidiFileIn *) 0 ;
  std::vector< unsigned char > *arg2 = (std::vector< unsigned char > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("stk::MidiFileIn::getNextMidiEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::MidiFileIn::getNextMidiEvent",1,"stk::MidiFileIn *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::MidiFileIn::getNextMidiEvent",2,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__MidiFileIn,0))){
    SWIG_fail_ptr("MidiFileIn_getNextMidiEvent",1,SWIGTYPE_p_stk__MidiFileIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("MidiFileIn_getNextMidiEvent",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned long)(arg1)->getNextMidiEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MidiFileIn_getNextMidiEvent(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MidiFileIn_getNextMidiEvent__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__MidiFileIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MidiFileIn_getNextMidiEvent__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MidiFileIn_getNextMidiEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::MidiFileIn::getNextMidiEvent(std::vector< unsigned char > *,unsigned int)\n"
    "    stk::MidiFileIn::getNextMidiEvent(std::vector< unsigned char > *)\n");
  lua_error(L);return 0;
}


static void swig_delete_MidiFileIn(void *obj) {
stk::MidiFileIn *arg1 = (stk::MidiFileIn *) obj;
delete arg1;
}
static int _proxy__wrap_new_MidiFileIn(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MidiFileIn);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MidiFileIn_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MidiFileIn_methods[]= {
    { "getFileFormat", _wrap_MidiFileIn_getFileFormat},
    { "getNumberOfTracks", _wrap_MidiFileIn_getNumberOfTracks},
    { "getDivision", _wrap_MidiFileIn_getDivision},
    { "rewindTrack", _wrap_MidiFileIn_rewindTrack},
    { "getTickSeconds", _wrap_MidiFileIn_getTickSeconds},
    { "getNextEvent", _wrap_MidiFileIn_getNextEvent},
    { "getNextMidiEvent", _wrap_MidiFileIn_getNextMidiEvent},
    {0,0}
};
static swig_lua_method swig_MidiFileIn_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MidiFileIn_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MidiFileIn_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MidiFileIn_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MidiFileIn_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MidiFileIn_Sf_SwigStatic = {
    "MidiFileIn",
    swig_MidiFileIn_Sf_SwigStatic_methods,
    swig_MidiFileIn_Sf_SwigStatic_attributes,
    swig_MidiFileIn_Sf_SwigStatic_constants,
    swig_MidiFileIn_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MidiFileIn_bases[] = {0};
static const char *swig_MidiFileIn_base_names[] = {0};
static swig_lua_class _wrap_class_MidiFileIn = { "MidiFileIn", "MidiFileIn", &SWIGTYPE_p_stk__MidiFileIn,_proxy__wrap_new_MidiFileIn, swig_delete_MidiFileIn, swig_MidiFileIn_methods, swig_MidiFileIn_attributes, &swig_MidiFileIn_Sf_SwigStatic, swig_MidiFileIn_meta, swig_MidiFileIn_bases, swig_MidiFileIn_base_names };

static int _wrap_Modal_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  
  SWIG_check_num_args("stk::Modal::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::clear",1,"stk::Modal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_clear",1,SWIGTYPE_p_stk__Modal);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modal::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::setFrequency",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_setFrequency",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_setRatioAndRadius(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::Modal::setRatioAndRadius",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::setRatioAndRadius",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::setRatioAndRadius",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Modal::setRatioAndRadius",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Modal::setRatioAndRadius",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_setRatioAndRadius",1,SWIGTYPE_p_stk__Modal);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setRatioAndRadius(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_setMasterGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modal::setMasterGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::setMasterGain",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::setMasterGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_setMasterGain",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setMasterGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_setDirectGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modal::setDirectGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::setDirectGain",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::setDirectGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_setDirectGain",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setDirectGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_setModeGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Modal::setModeGain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::setModeGain",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::setModeGain",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Modal::setModeGain",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_setModeGain",1,SWIGTYPE_p_stk__Modal);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setModeGain(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_strike(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modal::strike",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::strike",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::strike",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_strike",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->strike(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_damp(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modal::damp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::damp",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::damp",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_damp",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->damp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Modal::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::noteOn",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Modal::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_noteOn",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modal::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::noteOff",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_noteOff",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Modal::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::controlChange",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Modal::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_controlChange",1,SWIGTYPE_p_stk__Modal);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Modal::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::tick",1,"stk::Modal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modal::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_tick",1,SWIGTYPE_p_stk__Modal);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Modal::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::tick",1,"stk::Modal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_tick",1,SWIGTYPE_p_stk__Modal);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Modal::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::tick",1,"stk::Modal *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Modal::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Modal::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_tick",1,SWIGTYPE_p_stk__Modal);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Modal_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modal *arg1 = (stk::Modal *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Modal::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modal::tick",1,"stk::Modal *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Modal::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modal,0))){
    SWIG_fail_ptr("Modal_tick",1,SWIGTYPE_p_stk__Modal);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Modal_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modal_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Modal, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Modal_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Modal, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Modal_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Modal, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Modal_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Modal, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Modal_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Modal_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Modal::tick(unsigned int)\n"
    "    stk::Modal::tick()\n"
    "    stk::Modal::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Modal::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Modal(void *obj) {
stk::Modal *arg1 = (stk::Modal *) obj;
delete arg1;
}
static swig_lua_attribute swig_Modal_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Modal_methods[]= {
    { "clear", _wrap_Modal_clear},
    { "setFrequency", _wrap_Modal_setFrequency},
    { "setRatioAndRadius", _wrap_Modal_setRatioAndRadius},
    { "setMasterGain", _wrap_Modal_setMasterGain},
    { "setDirectGain", _wrap_Modal_setDirectGain},
    { "setModeGain", _wrap_Modal_setModeGain},
    { "strike", _wrap_Modal_strike},
    { "damp", _wrap_Modal_damp},
    { "noteOn", _wrap_Modal_noteOn},
    { "noteOff", _wrap_Modal_noteOff},
    { "controlChange", _wrap_Modal_controlChange},
    { "tick", _wrap_Modal_tick},
    {0,0}
};
static swig_lua_method swig_Modal_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Modal_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Modal_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Modal_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Modal_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Modal_Sf_SwigStatic = {
    "Modal",
    swig_Modal_Sf_SwigStatic_methods,
    swig_Modal_Sf_SwigStatic_attributes,
    swig_Modal_Sf_SwigStatic_constants,
    swig_Modal_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Modal_bases[] = {0,0};
static const char *swig_Modal_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Modal = { "Modal", "Modal", &SWIGTYPE_p_stk__Modal,0, swig_delete_Modal, swig_Modal_methods, swig_Modal_attributes, &swig_Modal_Sf_SwigStatic, swig_Modal_meta, swig_Modal_bases, swig_Modal_base_names };

static int _wrap_new_ModalBar(lua_State* L) {
  int SWIG_arg = 0;
  stk::ModalBar *result = 0 ;
  
  SWIG_check_num_args("stk::ModalBar::ModalBar",0,0)
  result = (stk::ModalBar *)new stk::ModalBar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__ModalBar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalBar_setStickHardness(lua_State* L) {
  int SWIG_arg = 0;
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ModalBar::setStickHardness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ModalBar::setStickHardness",1,"stk::ModalBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ModalBar::setStickHardness",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ModalBar,0))){
    SWIG_fail_ptr("ModalBar_setStickHardness",1,SWIGTYPE_p_stk__ModalBar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setStickHardness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalBar_setStrikePosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ModalBar::setStrikePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ModalBar::setStrikePosition",1,"stk::ModalBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ModalBar::setStrikePosition",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ModalBar,0))){
    SWIG_fail_ptr("ModalBar_setStrikePosition",1,SWIGTYPE_p_stk__ModalBar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setStrikePosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalBar_setPreset(lua_State* L) {
  int SWIG_arg = 0;
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("stk::ModalBar::setPreset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ModalBar::setPreset",1,"stk::ModalBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ModalBar::setPreset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ModalBar,0))){
    SWIG_fail_ptr("ModalBar_setPreset",1,SWIGTYPE_p_stk__ModalBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPreset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalBar_setModulationDepth(lua_State* L) {
  int SWIG_arg = 0;
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ModalBar::setModulationDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ModalBar::setModulationDepth",1,"stk::ModalBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ModalBar::setModulationDepth",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ModalBar,0))){
    SWIG_fail_ptr("ModalBar_setModulationDepth",1,SWIGTYPE_p_stk__ModalBar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setModulationDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalBar_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::ModalBar *arg1 = (stk::ModalBar *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::ModalBar::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ModalBar::controlChange",1,"stk::ModalBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ModalBar::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::ModalBar::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ModalBar,0))){
    SWIG_fail_ptr("ModalBar_controlChange",1,SWIGTYPE_p_stk__ModalBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModalBar(void *obj) {
stk::ModalBar *arg1 = (stk::ModalBar *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModalBar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModalBar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModalBar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ModalBar_methods[]= {
    { "setStickHardness", _wrap_ModalBar_setStickHardness},
    { "setStrikePosition", _wrap_ModalBar_setStrikePosition},
    { "setPreset", _wrap_ModalBar_setPreset},
    { "setModulationDepth", _wrap_ModalBar_setModulationDepth},
    { "controlChange", _wrap_ModalBar_controlChange},
    {0,0}
};
static swig_lua_method swig_ModalBar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModalBar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModalBar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModalBar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModalBar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModalBar_Sf_SwigStatic = {
    "ModalBar",
    swig_ModalBar_Sf_SwigStatic_methods,
    swig_ModalBar_Sf_SwigStatic_attributes,
    swig_ModalBar_Sf_SwigStatic_constants,
    swig_ModalBar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModalBar_bases[] = {0,0};
static const char *swig_ModalBar_base_names[] = {"stk::Modal *",0};
static swig_lua_class _wrap_class_ModalBar = { "ModalBar", "ModalBar", &SWIGTYPE_p_stk__ModalBar,_proxy__wrap_new_ModalBar, swig_delete_ModalBar, swig_ModalBar_methods, swig_ModalBar_attributes, &swig_ModalBar_Sf_SwigStatic, swig_ModalBar_meta, swig_ModalBar_bases, swig_ModalBar_base_names };

static int _wrap_new_Modulate(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *result = 0 ;
  
  SWIG_check_num_args("stk::Modulate::Modulate",0,0)
  result = (stk::Modulate *)new stk::Modulate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Modulate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  
  SWIG_check_num_args("stk::Modulate::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::reset",1,"stk::Modulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_reset",1,SWIGTYPE_p_stk__Modulate);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_setVibratoRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modulate::setVibratoRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::setVibratoRate",1,"stk::Modulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modulate::setVibratoRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_setVibratoRate",1,SWIGTYPE_p_stk__Modulate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVibratoRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_setVibratoGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modulate::setVibratoGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::setVibratoGain",1,"stk::Modulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modulate::setVibratoGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_setVibratoGain",1,SWIGTYPE_p_stk__Modulate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVibratoGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_setRandomRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modulate::setRandomRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::setRandomRate",1,"stk::Modulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modulate::setRandomRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_setRandomRate",1,SWIGTYPE_p_stk__Modulate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRandomRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_setRandomGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Modulate::setRandomGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::setRandomGain",1,"stk::Modulate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Modulate::setRandomGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_setRandomGain",1,SWIGTYPE_p_stk__Modulate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRandomGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Modulate::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::lastOut",1,"stk::Modulate const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_lastOut",1,SWIGTYPE_p_stk__Modulate);
  }
  
  result = (stk::StkFloat)((stk::Modulate const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Modulate::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::tick",1,"stk::Modulate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_tick",1,SWIGTYPE_p_stk__Modulate);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Modulate::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::tick",1,"stk::Modulate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Modulate::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Modulate::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_tick",1,SWIGTYPE_p_stk__Modulate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Modulate_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Modulate *arg1 = (stk::Modulate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Modulate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Modulate::tick",1,"stk::Modulate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Modulate::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Modulate,0))){
    SWIG_fail_ptr("Modulate_tick",1,SWIGTYPE_p_stk__Modulate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Modulate_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Modulate_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Modulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Modulate_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Modulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Modulate_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Modulate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Modulate_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Modulate_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Modulate::tick()\n"
    "    stk::Modulate::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Modulate::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Modulate(void *obj) {
stk::Modulate *arg1 = (stk::Modulate *) obj;
delete arg1;
}
static int _proxy__wrap_new_Modulate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Modulate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Modulate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Modulate_methods[]= {
    { "reset", _wrap_Modulate_reset},
    { "setVibratoRate", _wrap_Modulate_setVibratoRate},
    { "setVibratoGain", _wrap_Modulate_setVibratoGain},
    { "setRandomRate", _wrap_Modulate_setRandomRate},
    { "setRandomGain", _wrap_Modulate_setRandomGain},
    { "lastOut", _wrap_Modulate_lastOut},
    { "tick", _wrap_Modulate_tick},
    {0,0}
};
static swig_lua_method swig_Modulate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Modulate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Modulate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Modulate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Modulate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Modulate_Sf_SwigStatic = {
    "Modulate",
    swig_Modulate_Sf_SwigStatic_methods,
    swig_Modulate_Sf_SwigStatic_attributes,
    swig_Modulate_Sf_SwigStatic_constants,
    swig_Modulate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Modulate_bases[] = {0,0};
static const char *swig_Modulate_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_Modulate = { "Modulate", "Modulate", &SWIGTYPE_p_stk__Modulate,_proxy__wrap_new_Modulate, swig_delete_Modulate, swig_Modulate_methods, swig_Modulate_attributes, &swig_Modulate_Sf_SwigStatic, swig_Modulate_meta, swig_Modulate_bases, swig_Modulate_base_names };

static int _wrap_new_Moog(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *result = 0 ;
  
  SWIG_check_num_args("stk::Moog::Moog",0,0)
  result = (stk::Moog *)new stk::Moog();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Moog,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Moog::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::setFrequency",1,"stk::Moog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Moog::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_setFrequency",1,SWIGTYPE_p_stk__Moog);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Moog::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::noteOn",1,"stk::Moog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Moog::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Moog::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_noteOn",1,SWIGTYPE_p_stk__Moog);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_setModulationSpeed(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Moog::setModulationSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::setModulationSpeed",1,"stk::Moog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Moog::setModulationSpeed",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_setModulationSpeed",1,SWIGTYPE_p_stk__Moog);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setModulationSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_setModulationDepth(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Moog::setModulationDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::setModulationDepth",1,"stk::Moog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Moog::setModulationDepth",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_setModulationDepth",1,SWIGTYPE_p_stk__Moog);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setModulationDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Moog::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::controlChange",1,"stk::Moog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Moog::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Moog::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_controlChange",1,SWIGTYPE_p_stk__Moog);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Moog::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::tick",1,"stk::Moog *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Moog::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_tick",1,SWIGTYPE_p_stk__Moog);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Moog::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::tick",1,"stk::Moog *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_tick",1,SWIGTYPE_p_stk__Moog);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Moog::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::tick",1,"stk::Moog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Moog::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Moog::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_tick",1,SWIGTYPE_p_stk__Moog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Moog_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Moog *arg1 = (stk::Moog *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Moog::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Moog::tick",1,"stk::Moog *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Moog::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Moog,0))){
    SWIG_fail_ptr("Moog_tick",1,SWIGTYPE_p_stk__Moog);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Moog_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Moog_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Moog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Moog_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Moog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Moog_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Moog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Moog_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Moog, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Moog_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Moog_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Moog::tick(unsigned int)\n"
    "    stk::Moog::tick()\n"
    "    stk::Moog::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Moog::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Moog(void *obj) {
stk::Moog *arg1 = (stk::Moog *) obj;
delete arg1;
}
static int _proxy__wrap_new_Moog(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Moog);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Moog_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Moog_methods[]= {
    { "setFrequency", _wrap_Moog_setFrequency},
    { "noteOn", _wrap_Moog_noteOn},
    { "setModulationSpeed", _wrap_Moog_setModulationSpeed},
    { "setModulationDepth", _wrap_Moog_setModulationDepth},
    { "controlChange", _wrap_Moog_controlChange},
    { "tick", _wrap_Moog_tick},
    {0,0}
};
static swig_lua_method swig_Moog_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Moog_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Moog_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Moog_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Moog_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Moog_Sf_SwigStatic = {
    "Moog",
    swig_Moog_Sf_SwigStatic_methods,
    swig_Moog_Sf_SwigStatic_attributes,
    swig_Moog_Sf_SwigStatic_constants,
    swig_Moog_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Moog_bases[] = {0};
static const char *swig_Moog_base_names[] = {0};
static swig_lua_class _wrap_class_Moog = { "Moog", "Moog", &SWIGTYPE_p_stk__Moog,_proxy__wrap_new_Moog, swig_delete_Moog, swig_Moog_methods, swig_Moog_attributes, &swig_Moog_Sf_SwigStatic, swig_Moog_meta, swig_Moog_bases, swig_Moog_base_names };

static int _wrap_new_NRev__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::NRev *result = 0 ;
  
  SWIG_check_num_args("stk::NRev::NRev",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::NRev::NRev",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::NRev *)new stk::NRev(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__NRev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NRev__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *result = 0 ;
  
  SWIG_check_num_args("stk::NRev::NRev",0,0)
  result = (stk::NRev *)new stk::NRev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__NRev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NRev(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NRev__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_NRev__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NRev'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::NRev::NRev(stk::StkFloat)\n"
    "    stk::NRev::NRev()\n");
  lua_error(L);return 0;
}


static int _wrap_NRev_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  
  SWIG_check_num_args("stk::NRev::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::clear",1,"stk::NRev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_clear",1,SWIGTYPE_p_stk__NRev);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_setT60(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::NRev::setT60",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::setT60",1,"stk::NRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::NRev::setT60",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_setT60",1,SWIGTYPE_p_stk__NRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setT60(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::NRev::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::lastOut",1,"stk::NRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::NRev::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_lastOut",1,SWIGTYPE_p_stk__NRev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::NRev::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::lastOut",1,"stk::NRev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_lastOut",1,SWIGTYPE_p_stk__NRev);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NRev_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NRev_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NRev_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::NRev::lastOut(unsigned int)\n"
    "    stk::NRev::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_NRev_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::NRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::tick",1,"stk::NRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::NRev::tick",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::NRev::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_tick",1,SWIGTYPE_p_stk__NRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::NRev::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::tick",1,"stk::NRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::NRev::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_tick",1,SWIGTYPE_p_stk__NRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::NRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::tick",1,"stk::NRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::NRev::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::NRev::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_tick",1,SWIGTYPE_p_stk__NRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::NRev::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::tick",1,"stk::NRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::NRev::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_tick",1,SWIGTYPE_p_stk__NRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::NRev::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::tick",1,"stk::NRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::NRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::NRev::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::NRev::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::NRev::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_tick",1,SWIGTYPE_p_stk__NRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::NRev::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::tick",1,"stk::NRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::NRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::NRev::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::NRev::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_tick",1,SWIGTYPE_p_stk__NRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_tick__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  stk::NRev *arg1 = (stk::NRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::NRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::NRev::tick",1,"stk::NRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::NRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::NRev::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__NRev,0))){
    SWIG_fail_ptr("NRev_tick",1,SWIGTYPE_p_stk__NRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("NRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NRev_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NRev_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NRev_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NRev_tick__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NRev_tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NRev_tick__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NRev_tick__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__NRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NRev_tick__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NRev_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::NRev::tick(stk::StkFloat,unsigned int)\n"
    "    stk::NRev::tick(stk::StkFloat)\n"
    "    stk::NRev::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::NRev::tick(stk::StkFrames &)\n"
    "    stk::NRev::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::NRev::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::NRev::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_NRev(void *obj) {
stk::NRev *arg1 = (stk::NRev *) obj;
delete arg1;
}
static int _proxy__wrap_new_NRev(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NRev);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NRev_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NRev_methods[]= {
    { "clear", _wrap_NRev_clear},
    { "setT60", _wrap_NRev_setT60},
    { "lastOut", _wrap_NRev_lastOut},
    { "tick", _wrap_NRev_tick},
    {0,0}
};
static swig_lua_method swig_NRev_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NRev_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NRev_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NRev_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NRev_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NRev_Sf_SwigStatic = {
    "NRev",
    swig_NRev_Sf_SwigStatic_methods,
    swig_NRev_Sf_SwigStatic_attributes,
    swig_NRev_Sf_SwigStatic_constants,
    swig_NRev_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NRev_bases[] = {0,0};
static const char *swig_NRev_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_NRev = { "NRev", "NRev", &SWIGTYPE_p_stk__NRev,_proxy__wrap_new_NRev, swig_delete_NRev, swig_NRev_methods, swig_NRev_attributes, &swig_NRev_Sf_SwigStatic, swig_NRev_meta, swig_NRev_bases, swig_NRev_base_names };

static int _wrap_new_Noise__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::Noise *result = 0 ;
  
  SWIG_check_num_args("stk::Noise::Noise",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Noise::Noise",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::Noise *)new stk::Noise(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Noise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Noise__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Noise *result = 0 ;
  
  SWIG_check_num_args("stk::Noise::Noise",0,0)
  result = (stk::Noise *)new stk::Noise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Noise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Noise(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Noise__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Noise__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Noise'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Noise::Noise(unsigned int)\n"
    "    stk::Noise::Noise()\n");
  lua_error(L);return 0;
}


static int _wrap_Noise_setSeed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("stk::Noise::setSeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Noise::setSeed",1,"stk::Noise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Noise::setSeed",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Noise,0))){
    SWIG_fail_ptr("Noise_setSeed",1,SWIGTYPE_p_stk__Noise);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setSeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_setSeed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  
  SWIG_check_num_args("stk::Noise::setSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Noise::setSeed",1,"stk::Noise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Noise,0))){
    SWIG_fail_ptr("Noise_setSeed",1,SWIGTYPE_p_stk__Noise);
  }
  
  (arg1)->setSeed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_setSeed(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Noise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Noise_setSeed__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Noise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Noise_setSeed__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Noise_setSeed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Noise::setSeed(unsigned int)\n"
    "    stk::Noise::setSeed()\n");
  lua_error(L);return 0;
}


static int _wrap_Noise_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Noise::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Noise::lastOut",1,"stk::Noise const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Noise,0))){
    SWIG_fail_ptr("Noise_lastOut",1,SWIGTYPE_p_stk__Noise);
  }
  
  result = (stk::StkFloat)((stk::Noise const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Noise::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Noise::tick",1,"stk::Noise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Noise,0))){
    SWIG_fail_ptr("Noise_tick",1,SWIGTYPE_p_stk__Noise);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Noise::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Noise::tick",1,"stk::Noise *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Noise::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Noise::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Noise,0))){
    SWIG_fail_ptr("Noise_tick",1,SWIGTYPE_p_stk__Noise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Noise_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Noise *arg1 = (stk::Noise *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Noise::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Noise::tick",1,"stk::Noise *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Noise::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Noise,0))){
    SWIG_fail_ptr("Noise_tick",1,SWIGTYPE_p_stk__Noise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Noise_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Noise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Noise_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Noise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Noise_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Noise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Noise_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Noise_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Noise::tick()\n"
    "    stk::Noise::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Noise::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Noise(void *obj) {
stk::Noise *arg1 = (stk::Noise *) obj;
delete arg1;
}
static int _proxy__wrap_new_Noise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Noise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Noise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Noise_methods[]= {
    { "setSeed", _wrap_Noise_setSeed},
    { "lastOut", _wrap_Noise_lastOut},
    { "tick", _wrap_Noise_tick},
    {0,0}
};
static swig_lua_method swig_Noise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Noise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Noise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Noise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Noise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Noise_Sf_SwigStatic = {
    "Noise",
    swig_Noise_Sf_SwigStatic_methods,
    swig_Noise_Sf_SwigStatic_attributes,
    swig_Noise_Sf_SwigStatic_constants,
    swig_Noise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Noise_bases[] = {0,0};
static const char *swig_Noise_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_Noise = { "Noise", "Noise", &SWIGTYPE_p_stk__Noise,_proxy__wrap_new_Noise, swig_delete_Noise, swig_Noise_methods, swig_Noise_attributes, &swig_Noise_Sf_SwigStatic, swig_Noise_meta, swig_Noise_bases, swig_Noise_base_names };

static int _wrap_new_OnePole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::OnePole *result = 0 ;
  
  SWIG_check_num_args("stk::OnePole::OnePole",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::OnePole::OnePole",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::OnePole *)new stk::OnePole(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__OnePole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *result = 0 ;
  
  SWIG_check_num_args("stk::OnePole::OnePole",0,0)
  result = (stk::OnePole *)new stk::OnePole();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__OnePole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OnePole__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OnePole__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OnePole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::OnePole::OnePole(stk::StkFloat)\n"
    "    stk::OnePole::OnePole()\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_setB0(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::OnePole::setB0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::setB0",1,"stk::OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OnePole::setB0",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_setB0",1,SWIGTYPE_p_stk__OnePole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_setA1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::OnePole::setA1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::setA1",1,"stk::OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OnePole::setA1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_setA1",1,SWIGTYPE_p_stk__OnePole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("stk::OnePole::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::setCoefficients",1,"stk::OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OnePole::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::OnePole::setCoefficients",3,"stk::StkFloat");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::OnePole::setCoefficients",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_setCoefficients",1,SWIGTYPE_p_stk__OnePole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::OnePole::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::setCoefficients",1,"stk::OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OnePole::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::OnePole::setCoefficients",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_setCoefficients",1,SWIGTYPE_p_stk__OnePole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setCoefficients(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_setCoefficients(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OnePole_setCoefficients__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_OnePole_setCoefficients__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OnePole_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::OnePole::setCoefficients(stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::OnePole::setCoefficients(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_setPole(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::OnePole::setPole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::setPole",1,"stk::OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OnePole::setPole",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_setPole",1,SWIGTYPE_p_stk__OnePole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPole(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::OnePole::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::lastOut",1,"stk::OnePole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_lastOut",1,SWIGTYPE_p_stk__OnePole);
  }
  
  result = (stk::StkFloat)((stk::OnePole const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::OnePole::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::tick",1,"stk::OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OnePole::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_tick",1,SWIGTYPE_p_stk__OnePole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OnePole::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::tick",1,"stk::OnePole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OnePole::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::OnePole::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_tick",1,SWIGTYPE_p_stk__OnePole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OnePole::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::tick",1,"stk::OnePole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OnePole::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_tick",1,SWIGTYPE_p_stk__OnePole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OnePole::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::tick",1,"stk::OnePole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OnePole::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::OnePole::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::OnePole::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::OnePole::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_tick",1,SWIGTYPE_p_stk__OnePole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OnePole::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::tick",1,"stk::OnePole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OnePole::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::OnePole::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::OnePole::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_tick",1,SWIGTYPE_p_stk__OnePole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::OnePole *arg1 = (stk::OnePole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OnePole::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OnePole::tick",1,"stk::OnePole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OnePole::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::OnePole::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OnePole,0))){
    SWIG_fail_ptr("OnePole_tick",1,SWIGTYPE_p_stk__OnePole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OnePole_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OnePole_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OnePole_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OnePole_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OnePole_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OnePole_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OnePole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_OnePole_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OnePole_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::OnePole::tick(stk::StkFloat)\n"
    "    stk::OnePole::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::OnePole::tick(stk::StkFrames &)\n"
    "    stk::OnePole::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::OnePole::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::OnePole::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_OnePole(void *obj) {
stk::OnePole *arg1 = (stk::OnePole *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnePole(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnePole);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnePole_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OnePole_methods[]= {
    { "setB0", _wrap_OnePole_setB0},
    { "setA1", _wrap_OnePole_setA1},
    { "setCoefficients", _wrap_OnePole_setCoefficients},
    { "setPole", _wrap_OnePole_setPole},
    { "lastOut", _wrap_OnePole_lastOut},
    { "tick", _wrap_OnePole_tick},
    {0,0}
};
static swig_lua_method swig_OnePole_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnePole_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnePole_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnePole_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnePole_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnePole_Sf_SwigStatic = {
    "OnePole",
    swig_OnePole_Sf_SwigStatic_methods,
    swig_OnePole_Sf_SwigStatic_attributes,
    swig_OnePole_Sf_SwigStatic_constants,
    swig_OnePole_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnePole_bases[] = {0,0};
static const char *swig_OnePole_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_OnePole = { "OnePole", "OnePole", &SWIGTYPE_p_stk__OnePole,_proxy__wrap_new_OnePole, swig_delete_OnePole, swig_OnePole_methods, swig_OnePole_attributes, &swig_OnePole_Sf_SwigStatic, swig_OnePole_meta, swig_OnePole_bases, swig_OnePole_base_names };

static int _wrap_new_OneZero__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::OneZero *result = 0 ;
  
  SWIG_check_num_args("stk::OneZero::OneZero",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::OneZero::OneZero",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::OneZero *)new stk::OneZero(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__OneZero,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OneZero__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *result = 0 ;
  
  SWIG_check_num_args("stk::OneZero::OneZero",0,0)
  result = (stk::OneZero *)new stk::OneZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__OneZero,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OneZero(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OneZero__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OneZero__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OneZero'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::OneZero::OneZero(stk::StkFloat)\n"
    "    stk::OneZero::OneZero()\n");
  lua_error(L);return 0;
}


static int _wrap_OneZero_setB0(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::OneZero::setB0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::setB0",1,"stk::OneZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OneZero::setB0",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_setB0",1,SWIGTYPE_p_stk__OneZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_setB1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::OneZero::setB1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::setB1",1,"stk::OneZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OneZero::setB1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_setB1",1,SWIGTYPE_p_stk__OneZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("stk::OneZero::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::setCoefficients",1,"stk::OneZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OneZero::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::OneZero::setCoefficients",3,"stk::StkFloat");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::OneZero::setCoefficients",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_setCoefficients",1,SWIGTYPE_p_stk__OneZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::OneZero::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::setCoefficients",1,"stk::OneZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OneZero::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::OneZero::setCoefficients",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_setCoefficients",1,SWIGTYPE_p_stk__OneZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setCoefficients(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_setCoefficients(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OneZero_setCoefficients__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_OneZero_setCoefficients__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OneZero_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::OneZero::setCoefficients(stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::OneZero::setCoefficients(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_OneZero_setZero(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::OneZero::setZero",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::setZero",1,"stk::OneZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OneZero::setZero",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_setZero",1,SWIGTYPE_p_stk__OneZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setZero(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::OneZero::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::lastOut",1,"stk::OneZero const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_lastOut",1,SWIGTYPE_p_stk__OneZero);
  }
  
  result = (stk::StkFloat)((stk::OneZero const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::OneZero::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::tick",1,"stk::OneZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::OneZero::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_tick",1,SWIGTYPE_p_stk__OneZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OneZero::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::tick",1,"stk::OneZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OneZero::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::OneZero::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_tick",1,SWIGTYPE_p_stk__OneZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OneZero::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::tick",1,"stk::OneZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OneZero::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_tick",1,SWIGTYPE_p_stk__OneZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OneZero::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::tick",1,"stk::OneZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OneZero::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::OneZero::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::OneZero::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::OneZero::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_tick",1,SWIGTYPE_p_stk__OneZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OneZero::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::tick",1,"stk::OneZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OneZero::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::OneZero::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::OneZero::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_tick",1,SWIGTYPE_p_stk__OneZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::OneZero *arg1 = (stk::OneZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::OneZero::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::OneZero::tick",1,"stk::OneZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::OneZero::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::OneZero::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__OneZero,0))){
    SWIG_fail_ptr("OneZero_tick",1,SWIGTYPE_p_stk__OneZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("OneZero_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OneZero_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_OneZero_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OneZero_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_OneZero_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OneZero_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_OneZero_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__OneZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_OneZero_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OneZero_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::OneZero::tick(stk::StkFloat)\n"
    "    stk::OneZero::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::OneZero::tick(stk::StkFrames &)\n"
    "    stk::OneZero::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::OneZero::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::OneZero::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_OneZero(void *obj) {
stk::OneZero *arg1 = (stk::OneZero *) obj;
delete arg1;
}
static int _proxy__wrap_new_OneZero(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OneZero);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OneZero_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OneZero_methods[]= {
    { "setB0", _wrap_OneZero_setB0},
    { "setB1", _wrap_OneZero_setB1},
    { "setCoefficients", _wrap_OneZero_setCoefficients},
    { "setZero", _wrap_OneZero_setZero},
    { "lastOut", _wrap_OneZero_lastOut},
    { "tick", _wrap_OneZero_tick},
    {0,0}
};
static swig_lua_method swig_OneZero_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OneZero_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OneZero_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OneZero_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OneZero_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OneZero_Sf_SwigStatic = {
    "OneZero",
    swig_OneZero_Sf_SwigStatic_methods,
    swig_OneZero_Sf_SwigStatic_attributes,
    swig_OneZero_Sf_SwigStatic_constants,
    swig_OneZero_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OneZero_bases[] = {0,0};
static const char *swig_OneZero_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_OneZero = { "OneZero", "OneZero", &SWIGTYPE_p_stk__OneZero,_proxy__wrap_new_OneZero, swig_delete_OneZero, swig_OneZero_methods, swig_OneZero_attributes, &swig_OneZero_Sf_SwigStatic, swig_OneZero_meta, swig_OneZero_bases, swig_OneZero_base_names };

static int _wrap_new_PRCRev__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::PRCRev *result = 0 ;
  
  SWIG_check_num_args("stk::PRCRev::PRCRev",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::PRCRev::PRCRev",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::PRCRev *)new stk::PRCRev(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__PRCRev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PRCRev__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *result = 0 ;
  
  SWIG_check_num_args("stk::PRCRev::PRCRev",0,0)
  result = (stk::PRCRev *)new stk::PRCRev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__PRCRev,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PRCRev(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PRCRev__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PRCRev__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PRCRev'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PRCRev::PRCRev(stk::StkFloat)\n"
    "    stk::PRCRev::PRCRev()\n");
  lua_error(L);return 0;
}


static int _wrap_PRCRev_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  
  SWIG_check_num_args("stk::PRCRev::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::clear",1,"stk::PRCRev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_clear",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_setT60(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PRCRev::setT60",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::setT60",1,"stk::PRCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PRCRev::setT60",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_setT60",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setT60(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PRCRev::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::lastOut",1,"stk::PRCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PRCRev::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_lastOut",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PRCRev::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::lastOut",1,"stk::PRCRev *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_lastOut",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PRCRev_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PRCRev_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PRCRev_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PRCRev::lastOut(unsigned int)\n"
    "    stk::PRCRev::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_PRCRev_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFloat arg2 ;
  unsigned int arg3 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PRCRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::tick",1,"stk::PRCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PRCRev::tick",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PRCRev::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_tick",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFloat)(arg1)->tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PRCRev::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::tick",1,"stk::PRCRev *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PRCRev::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_tick",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PRCRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::tick",1,"stk::PRCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PRCRev::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PRCRev::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_tick",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PRCRev::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::tick",1,"stk::PRCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PRCRev::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_tick",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PRCRev::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::tick",1,"stk::PRCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PRCRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::PRCRev::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::PRCRev::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::PRCRev::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_tick",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PRCRev::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::tick",1,"stk::PRCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PRCRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::PRCRev::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::PRCRev::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_tick",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_tick__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  stk::PRCRev *arg1 = (stk::PRCRev *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PRCRev::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PRCRev::tick",1,"stk::PRCRev *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PRCRev::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::PRCRev::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PRCRev,0))){
    SWIG_fail_ptr("PRCRev_tick",1,SWIGTYPE_p_stk__PRCRev);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PRCRev_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PRCRev_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PRCRev_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PRCRev_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PRCRev_tick__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PRCRev_tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PRCRev_tick__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PRCRev_tick__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PRCRev, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_PRCRev_tick__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PRCRev_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PRCRev::tick(stk::StkFloat,unsigned int)\n"
    "    stk::PRCRev::tick(stk::StkFloat)\n"
    "    stk::PRCRev::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::PRCRev::tick(stk::StkFrames &)\n"
    "    stk::PRCRev::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::PRCRev::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::PRCRev::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_PRCRev(void *obj) {
stk::PRCRev *arg1 = (stk::PRCRev *) obj;
delete arg1;
}
static int _proxy__wrap_new_PRCRev(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PRCRev);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PRCRev_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PRCRev_methods[]= {
    { "clear", _wrap_PRCRev_clear},
    { "setT60", _wrap_PRCRev_setT60},
    { "lastOut", _wrap_PRCRev_lastOut},
    { "tick", _wrap_PRCRev_tick},
    {0,0}
};
static swig_lua_method swig_PRCRev_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PRCRev_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PRCRev_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PRCRev_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PRCRev_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PRCRev_Sf_SwigStatic = {
    "PRCRev",
    swig_PRCRev_Sf_SwigStatic_methods,
    swig_PRCRev_Sf_SwigStatic_attributes,
    swig_PRCRev_Sf_SwigStatic_constants,
    swig_PRCRev_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PRCRev_bases[] = {0,0};
static const char *swig_PRCRev_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_PRCRev = { "PRCRev", "PRCRev", &SWIGTYPE_p_stk__PRCRev,_proxy__wrap_new_PRCRev, swig_delete_PRCRev, swig_PRCRev_methods, swig_PRCRev_attributes, &swig_PRCRev_Sf_SwigStatic, swig_PRCRev_meta, swig_PRCRev_bases, swig_PRCRev_base_names };

static int _wrap_new_PercFlut(lua_State* L) {
  int SWIG_arg = 0;
  stk::PercFlut *result = 0 ;
  
  SWIG_check_num_args("stk::PercFlut::PercFlut",0,0)
  result = (stk::PercFlut *)new stk::PercFlut();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__PercFlut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PercFlut_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PercFlut::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PercFlut::setFrequency",1,"stk::PercFlut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PercFlut::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PercFlut,0))){
    SWIG_fail_ptr("PercFlut_setFrequency",1,SWIGTYPE_p_stk__PercFlut);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PercFlut_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::PercFlut::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PercFlut::noteOn",1,"stk::PercFlut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PercFlut::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PercFlut::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PercFlut,0))){
    SWIG_fail_ptr("PercFlut_noteOn",1,SWIGTYPE_p_stk__PercFlut);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PercFlut_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PercFlut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PercFlut::tick",1,"stk::PercFlut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PercFlut::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PercFlut,0))){
    SWIG_fail_ptr("PercFlut_tick",1,SWIGTYPE_p_stk__PercFlut);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PercFlut_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PercFlut::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PercFlut::tick",1,"stk::PercFlut *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PercFlut,0))){
    SWIG_fail_ptr("PercFlut_tick",1,SWIGTYPE_p_stk__PercFlut);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PercFlut_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PercFlut::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PercFlut::tick",1,"stk::PercFlut *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PercFlut::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PercFlut::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PercFlut,0))){
    SWIG_fail_ptr("PercFlut_tick",1,SWIGTYPE_p_stk__PercFlut);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PercFlut_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PercFlut_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::PercFlut *arg1 = (stk::PercFlut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PercFlut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PercFlut::tick",1,"stk::PercFlut *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PercFlut::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PercFlut,0))){
    SWIG_fail_ptr("PercFlut_tick",1,SWIGTYPE_p_stk__PercFlut);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PercFlut_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PercFlut_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PercFlut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PercFlut_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PercFlut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PercFlut_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PercFlut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PercFlut_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PercFlut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PercFlut_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PercFlut_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PercFlut::tick(unsigned int)\n"
    "    stk::PercFlut::tick()\n"
    "    stk::PercFlut::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::PercFlut::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_PercFlut(void *obj) {
stk::PercFlut *arg1 = (stk::PercFlut *) obj;
delete arg1;
}
static int _proxy__wrap_new_PercFlut(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PercFlut);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PercFlut_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PercFlut_methods[]= {
    { "setFrequency", _wrap_PercFlut_setFrequency},
    { "noteOn", _wrap_PercFlut_noteOn},
    { "tick", _wrap_PercFlut_tick},
    {0,0}
};
static swig_lua_method swig_PercFlut_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PercFlut_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PercFlut_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PercFlut_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PercFlut_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PercFlut_Sf_SwigStatic = {
    "PercFlut",
    swig_PercFlut_Sf_SwigStatic_methods,
    swig_PercFlut_Sf_SwigStatic_attributes,
    swig_PercFlut_Sf_SwigStatic_constants,
    swig_PercFlut_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PercFlut_bases[] = {0,0};
static const char *swig_PercFlut_base_names[] = {"stk::FM *",0};
static swig_lua_class _wrap_class_PercFlut = { "PercFlut", "PercFlut", &SWIGTYPE_p_stk__PercFlut,_proxy__wrap_new_PercFlut, swig_delete_PercFlut, swig_PercFlut_methods, swig_PercFlut_attributes, &swig_PercFlut_Sf_SwigStatic, swig_PercFlut_meta, swig_PercFlut_bases, swig_PercFlut_base_names };

static int _wrap_new_Phonemes(lua_State* L) {
  int SWIG_arg = 0;
  stk::Phonemes *result = 0 ;
  
  SWIG_check_num_args("stk::Phonemes::Phonemes",0,0)
  result = (stk::Phonemes *)new stk::Phonemes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Phonemes,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phonemes_name(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("stk::Phonemes::name",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Phonemes::name",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (char *)stk::Phonemes::name(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phonemes_voiceGain(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Phonemes::voiceGain",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Phonemes::voiceGain",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::StkFloat)stk::Phonemes::voiceGain(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phonemes_noiseGain(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Phonemes::noiseGain",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Phonemes::noiseGain",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::StkFloat)stk::Phonemes::noiseGain(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phonemes_formantFrequency(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Phonemes::formantFrequency",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Phonemes::formantFrequency",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Phonemes::formantFrequency",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)stk::Phonemes::formantFrequency(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phonemes_formantRadius(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Phonemes::formantRadius",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Phonemes::formantRadius",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Phonemes::formantRadius",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)stk::Phonemes::formantRadius(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phonemes_formantGain(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Phonemes::formantGain",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Phonemes::formantGain",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Phonemes::formantGain",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)stk::Phonemes::formantGain(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Phonemes(void *obj) {
stk::Phonemes *arg1 = (stk::Phonemes *) obj;
delete arg1;
}
static int _proxy__wrap_new_Phonemes(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Phonemes);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Phonemes_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Phonemes_methods[]= {
    {0,0}
};
static swig_lua_method swig_Phonemes_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Phonemes_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Phonemes_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Phonemes_Sf_SwigStatic_methods[]= {
    { "name", _wrap_Phonemes_name},
    { "voiceGain", _wrap_Phonemes_voiceGain},
    { "noiseGain", _wrap_Phonemes_noiseGain},
    { "formantFrequency", _wrap_Phonemes_formantFrequency},
    { "formantRadius", _wrap_Phonemes_formantRadius},
    { "formantGain", _wrap_Phonemes_formantGain},
    {0,0}
};
static swig_lua_class* swig_Phonemes_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Phonemes_Sf_SwigStatic = {
    "Phonemes",
    swig_Phonemes_Sf_SwigStatic_methods,
    swig_Phonemes_Sf_SwigStatic_attributes,
    swig_Phonemes_Sf_SwigStatic_constants,
    swig_Phonemes_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Phonemes_bases[] = {0};
static const char *swig_Phonemes_base_names[] = {0};
static swig_lua_class _wrap_class_Phonemes = { "Phonemes", "Phonemes", &SWIGTYPE_p_stk__Phonemes,_proxy__wrap_new_Phonemes, swig_delete_Phonemes, swig_Phonemes_methods, swig_Phonemes_attributes, &swig_Phonemes_Sf_SwigStatic, swig_Phonemes_meta, swig_Phonemes_bases, swig_Phonemes_base_names };

static int _wrap_new_PitShift(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *result = 0 ;
  
  SWIG_check_num_args("stk::PitShift::PitShift",0,0)
  result = (stk::PitShift *)new stk::PitShift();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__PitShift,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  
  SWIG_check_num_args("stk::PitShift::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::clear",1,"stk::PitShift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_clear",1,SWIGTYPE_p_stk__PitShift);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_setShift(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PitShift::setShift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::setShift",1,"stk::PitShift *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PitShift::setShift",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_setShift",1,SWIGTYPE_p_stk__PitShift);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setShift(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PitShift::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::lastOut",1,"stk::PitShift *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_lastOut",1,SWIGTYPE_p_stk__PitShift);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PitShift::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::tick",1,"stk::PitShift *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PitShift::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_tick",1,SWIGTYPE_p_stk__PitShift);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PitShift::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::tick",1,"stk::PitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PitShift::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PitShift::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_tick",1,SWIGTYPE_p_stk__PitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PitShift::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::tick",1,"stk::PitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PitShift::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_tick",1,SWIGTYPE_p_stk__PitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PitShift::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::tick",1,"stk::PitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PitShift::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::PitShift::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::PitShift::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::PitShift::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_tick",1,SWIGTYPE_p_stk__PitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PitShift::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::tick",1,"stk::PitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PitShift::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::PitShift::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::PitShift::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_tick",1,SWIGTYPE_p_stk__PitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::PitShift *arg1 = (stk::PitShift *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PitShift::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PitShift::tick",1,"stk::PitShift *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PitShift::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::PitShift::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PitShift,0))){
    SWIG_fail_ptr("PitShift_tick",1,SWIGTYPE_p_stk__PitShift);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PitShift_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitShift_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PitShift_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PitShift_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PitShift_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PitShift_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PitShift_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PitShift, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_PitShift_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PitShift_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PitShift::tick(stk::StkFloat)\n"
    "    stk::PitShift::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::PitShift::tick(stk::StkFrames &)\n"
    "    stk::PitShift::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::PitShift::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::PitShift::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_PitShift(void *obj) {
stk::PitShift *arg1 = (stk::PitShift *) obj;
delete arg1;
}
static int _proxy__wrap_new_PitShift(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PitShift);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PitShift_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PitShift_methods[]= {
    { "clear", _wrap_PitShift_clear},
    { "setShift", _wrap_PitShift_setShift},
    { "lastOut", _wrap_PitShift_lastOut},
    { "tick", _wrap_PitShift_tick},
    {0,0}
};
static swig_lua_method swig_PitShift_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PitShift_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PitShift_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PitShift_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PitShift_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PitShift_Sf_SwigStatic = {
    "PitShift",
    swig_PitShift_Sf_SwigStatic_methods,
    swig_PitShift_Sf_SwigStatic_attributes,
    swig_PitShift_Sf_SwigStatic_constants,
    swig_PitShift_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PitShift_bases[] = {0,0};
static const char *swig_PitShift_base_names[] = {"stk::Effect *",0};
static swig_lua_class _wrap_class_PitShift = { "PitShift", "PitShift", &SWIGTYPE_p_stk__PitShift,_proxy__wrap_new_PitShift, swig_delete_PitShift, swig_PitShift_methods, swig_PitShift_attributes, &swig_PitShift_Sf_SwigStatic, swig_PitShift_meta, swig_PitShift_bases, swig_PitShift_base_names };

static int _wrap_new_Plucked__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Plucked *result = 0 ;
  
  SWIG_check_num_args("stk::Plucked::Plucked",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Plucked::Plucked",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Plucked *)new stk::Plucked(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Plucked,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plucked__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *result = 0 ;
  
  SWIG_check_num_args("stk::Plucked::Plucked",0,0)
  result = (stk::Plucked *)new stk::Plucked();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Plucked,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plucked(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Plucked__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Plucked__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Plucked'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Plucked::Plucked(stk::StkFloat)\n"
    "    stk::Plucked::Plucked()\n");
  lua_error(L);return 0;
}


static int _wrap_Plucked_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  
  SWIG_check_num_args("stk::Plucked::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::clear",1,"stk::Plucked *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_clear",1,SWIGTYPE_p_stk__Plucked);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Plucked::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::setFrequency",1,"stk::Plucked *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Plucked::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_setFrequency",1,SWIGTYPE_p_stk__Plucked);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_pluck(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Plucked::pluck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::pluck",1,"stk::Plucked *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Plucked::pluck",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_pluck",1,SWIGTYPE_p_stk__Plucked);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->pluck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Plucked::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::noteOn",1,"stk::Plucked *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Plucked::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Plucked::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_noteOn",1,SWIGTYPE_p_stk__Plucked);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Plucked::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::noteOff",1,"stk::Plucked *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Plucked::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_noteOff",1,SWIGTYPE_p_stk__Plucked);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Plucked::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::tick",1,"stk::Plucked *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Plucked::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_tick",1,SWIGTYPE_p_stk__Plucked);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Plucked::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::tick",1,"stk::Plucked *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_tick",1,SWIGTYPE_p_stk__Plucked);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Plucked::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::tick",1,"stk::Plucked *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Plucked::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Plucked::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_tick",1,SWIGTYPE_p_stk__Plucked);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Plucked_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Plucked *arg1 = (stk::Plucked *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Plucked::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Plucked::tick",1,"stk::Plucked *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Plucked::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Plucked,0))){
    SWIG_fail_ptr("Plucked_tick",1,SWIGTYPE_p_stk__Plucked);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Plucked_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plucked_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Plucked, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Plucked_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Plucked, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plucked_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Plucked, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Plucked_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Plucked, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Plucked_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plucked_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Plucked::tick(unsigned int)\n"
    "    stk::Plucked::tick()\n"
    "    stk::Plucked::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Plucked::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Plucked(void *obj) {
stk::Plucked *arg1 = (stk::Plucked *) obj;
delete arg1;
}
static int _proxy__wrap_new_Plucked(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Plucked);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Plucked_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Plucked_methods[]= {
    { "clear", _wrap_Plucked_clear},
    { "setFrequency", _wrap_Plucked_setFrequency},
    { "pluck", _wrap_Plucked_pluck},
    { "noteOn", _wrap_Plucked_noteOn},
    { "noteOff", _wrap_Plucked_noteOff},
    { "tick", _wrap_Plucked_tick},
    {0,0}
};
static swig_lua_method swig_Plucked_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Plucked_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Plucked_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Plucked_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Plucked_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Plucked_Sf_SwigStatic = {
    "Plucked",
    swig_Plucked_Sf_SwigStatic_methods,
    swig_Plucked_Sf_SwigStatic_attributes,
    swig_Plucked_Sf_SwigStatic_constants,
    swig_Plucked_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Plucked_bases[] = {0,0};
static const char *swig_Plucked_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Plucked = { "Plucked", "Plucked", &SWIGTYPE_p_stk__Plucked,_proxy__wrap_new_Plucked, swig_delete_Plucked, swig_Plucked_methods, swig_Plucked_attributes, &swig_Plucked_Sf_SwigStatic, swig_Plucked_meta, swig_Plucked_bases, swig_Plucked_base_names };

static int _wrap_new_PoleZero(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *result = 0 ;
  
  SWIG_check_num_args("stk::PoleZero::PoleZero",0,0)
  result = (stk::PoleZero *)new stk::PoleZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__PoleZero,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setB0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PoleZero::setB0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setB0",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::setB0",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setB0",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setB1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PoleZero::setB1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setB1",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::setB1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setB1",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setA1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PoleZero::setA1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setA1",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::setA1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setA1",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("stk::PoleZero::setCoefficients",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setCoefficients",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PoleZero::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::PoleZero::setCoefficients",4,"stk::StkFloat");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("stk::PoleZero::setCoefficients",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setCoefficients",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setCoefficients(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::PoleZero::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setCoefficients",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PoleZero::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::PoleZero::setCoefficients",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setCoefficients",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setCoefficients(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PoleZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_PoleZero_setCoefficients__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PoleZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_PoleZero_setCoefficients__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PoleZero_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PoleZero::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::PoleZero::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_PoleZero_setAllpass(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PoleZero::setAllpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setAllpass",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::setAllpass",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setAllpass",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setAllpass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setBlockZero__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::PoleZero::setBlockZero",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setBlockZero",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::setBlockZero",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setBlockZero",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setBlockZero(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setBlockZero__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  
  SWIG_check_num_args("stk::PoleZero::setBlockZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::setBlockZero",1,"stk::PoleZero *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_setBlockZero",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  (arg1)->setBlockZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_setBlockZero(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PoleZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PoleZero_setBlockZero__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PoleZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PoleZero_setBlockZero__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PoleZero_setBlockZero'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PoleZero::setBlockZero(stk::StkFloat)\n"
    "    stk::PoleZero::setBlockZero()\n");
  lua_error(L);return 0;
}


static int _wrap_PoleZero_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PoleZero::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::lastOut",1,"stk::PoleZero const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_lastOut",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  result = (stk::StkFloat)((stk::PoleZero const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::PoleZero::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::tick",1,"stk::PoleZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::PoleZero::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_tick",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PoleZero::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::tick",1,"stk::PoleZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PoleZero::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::PoleZero::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_tick",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PoleZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::PoleZero *arg1 = (stk::PoleZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::PoleZero::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::PoleZero::tick",1,"stk::PoleZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::PoleZero::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__PoleZero,0))){
    SWIG_fail_ptr("PoleZero_tick",1,SWIGTYPE_p_stk__PoleZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("PoleZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PoleZero_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PoleZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PoleZero_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PoleZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PoleZero_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__PoleZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PoleZero_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PoleZero_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::PoleZero::tick(stk::StkFloat)\n"
    "    stk::PoleZero::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::PoleZero::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_PoleZero(void *obj) {
stk::PoleZero *arg1 = (stk::PoleZero *) obj;
delete arg1;
}
static int _proxy__wrap_new_PoleZero(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PoleZero);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PoleZero_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PoleZero_methods[]= {
    { "setB0", _wrap_PoleZero_setB0},
    { "setB1", _wrap_PoleZero_setB1},
    { "setA1", _wrap_PoleZero_setA1},
    { "setCoefficients", _wrap_PoleZero_setCoefficients},
    { "setAllpass", _wrap_PoleZero_setAllpass},
    { "setBlockZero", _wrap_PoleZero_setBlockZero},
    { "lastOut", _wrap_PoleZero_lastOut},
    { "tick", _wrap_PoleZero_tick},
    {0,0}
};
static swig_lua_method swig_PoleZero_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PoleZero_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PoleZero_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PoleZero_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PoleZero_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PoleZero_Sf_SwigStatic = {
    "PoleZero",
    swig_PoleZero_Sf_SwigStatic_methods,
    swig_PoleZero_Sf_SwigStatic_attributes,
    swig_PoleZero_Sf_SwigStatic_constants,
    swig_PoleZero_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PoleZero_bases[] = {0,0};
static const char *swig_PoleZero_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_PoleZero = { "PoleZero", "PoleZero", &SWIGTYPE_p_stk__PoleZero,_proxy__wrap_new_PoleZero, swig_delete_PoleZero, swig_PoleZero_methods, swig_PoleZero_attributes, &swig_PoleZero_Sf_SwigStatic, swig_PoleZero_meta, swig_PoleZero_bases, swig_PoleZero_base_names };

static int _wrap_new_Recorder(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *result = 0 ;
  
  SWIG_check_num_args("stk::Recorder::Recorder",0,0)
  result = (stk::Recorder *)new stk::Recorder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  
  SWIG_check_num_args("stk::Recorder::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::clear",1,"stk::Recorder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_clear",1,SWIGTYPE_p_stk__Recorder);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::setFrequency",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_setFrequency",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Recorder::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::startBlowing",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Recorder::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_startBlowing",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::stopBlowing",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_stopBlowing",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Recorder::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::noteOn",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Recorder::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_noteOn",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::noteOff",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_noteOff",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Recorder::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::controlChange",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Recorder::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_controlChange",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Recorder::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::tick",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_tick",1,SWIGTYPE_p_stk__Recorder);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Recorder::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::tick",1,"stk::Recorder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_tick",1,SWIGTYPE_p_stk__Recorder);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Recorder::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::tick",1,"stk::Recorder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Recorder::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Recorder::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_tick",1,SWIGTYPE_p_stk__Recorder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Recorder_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Recorder::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::tick",1,"stk::Recorder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Recorder::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_tick",1,SWIGTYPE_p_stk__Recorder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Recorder_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Recorder_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Recorder_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Recorder_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Recorder_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Recorder_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Recorder::tick(unsigned int)\n"
    "    stk::Recorder::tick()\n"
    "    stk::Recorder::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Recorder::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static int _wrap_Recorder_setBlowPressure(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::setBlowPressure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::setBlowPressure",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::setBlowPressure",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_setBlowPressure",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setBlowPressure(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setVibratoGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::setVibratoGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::setVibratoGain",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::setVibratoGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_setVibratoGain",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVibratoGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setVibratoFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::setVibratoFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::setVibratoFrequency",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::setVibratoFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_setVibratoFrequency",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVibratoFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setNoiseGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::setNoiseGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::setNoiseGain",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::setNoiseGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_setNoiseGain",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setNoiseGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setBreathCutoff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::setBreathCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::setBreathCutoff",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::setBreathCutoff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_setBreathCutoff",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setBreathCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_setSoftness(lua_State* L) {
  int SWIG_arg = 0;
  stk::Recorder *arg1 = (stk::Recorder *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Recorder::setSoftness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Recorder::setSoftness",1,"stk::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Recorder::setSoftness",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Recorder,0))){
    SWIG_fail_ptr("Recorder_setSoftness",1,SWIGTYPE_p_stk__Recorder);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setSoftness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Recorder(void *obj) {
stk::Recorder *arg1 = (stk::Recorder *) obj;
delete arg1;
}
static int _proxy__wrap_new_Recorder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Recorder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Recorder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Recorder_methods[]= {
    { "clear", _wrap_Recorder_clear},
    { "setFrequency", _wrap_Recorder_setFrequency},
    { "startBlowing", _wrap_Recorder_startBlowing},
    { "stopBlowing", _wrap_Recorder_stopBlowing},
    { "noteOn", _wrap_Recorder_noteOn},
    { "noteOff", _wrap_Recorder_noteOff},
    { "controlChange", _wrap_Recorder_controlChange},
    { "tick", _wrap_Recorder_tick},
    { "setBlowPressure", _wrap_Recorder_setBlowPressure},
    { "setVibratoGain", _wrap_Recorder_setVibratoGain},
    { "setVibratoFrequency", _wrap_Recorder_setVibratoFrequency},
    { "setNoiseGain", _wrap_Recorder_setNoiseGain},
    { "setBreathCutoff", _wrap_Recorder_setBreathCutoff},
    { "setSoftness", _wrap_Recorder_setSoftness},
    {0,0}
};
static swig_lua_method swig_Recorder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Recorder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Recorder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Recorder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Recorder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Recorder_Sf_SwigStatic = {
    "Recorder",
    swig_Recorder_Sf_SwigStatic_methods,
    swig_Recorder_Sf_SwigStatic_attributes,
    swig_Recorder_Sf_SwigStatic_constants,
    swig_Recorder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Recorder_bases[] = {0,0};
static const char *swig_Recorder_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Recorder = { "Recorder", "Recorder", &SWIGTYPE_p_stk__Recorder,_proxy__wrap_new_Recorder, swig_delete_Recorder, swig_Recorder_methods, swig_Recorder_attributes, &swig_Recorder_Sf_SwigStatic, swig_Recorder_meta, swig_Recorder_bases, swig_Recorder_base_names };

static int _wrap_new_ReedTable(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *result = 0 ;
  
  SWIG_check_num_args("stk::ReedTable::ReedTable",0,0)
  result = (stk::ReedTable *)new stk::ReedTable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__ReedTable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_setOffset(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ReedTable::setOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::setOffset",1,"stk::ReedTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ReedTable::setOffset",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_setOffset",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_setSlope(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::ReedTable::setSlope",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::setSlope",1,"stk::ReedTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ReedTable::setSlope",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_setSlope",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setSlope(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::ReedTable::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::tick",1,"stk::ReedTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::ReedTable::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_tick",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::ReedTable::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::tick",1,"stk::ReedTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::ReedTable::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::ReedTable::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_tick",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::ReedTable::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::tick",1,"stk::ReedTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::ReedTable::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_tick",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::ReedTable::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::tick",1,"stk::ReedTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::ReedTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::ReedTable::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::ReedTable::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::ReedTable::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_tick",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::ReedTable::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::tick",1,"stk::ReedTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::ReedTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::ReedTable::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::ReedTable::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_tick",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::ReedTable *arg1 = (stk::ReedTable *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::ReedTable::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::ReedTable::tick",1,"stk::ReedTable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::ReedTable::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::ReedTable::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__ReedTable,0))){
    SWIG_fail_ptr("ReedTable_tick",1,SWIGTYPE_p_stk__ReedTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("ReedTable_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReedTable_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ReedTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ReedTable_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ReedTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReedTable_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ReedTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ReedTable_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ReedTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ReedTable_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ReedTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ReedTable_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__ReedTable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ReedTable_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ReedTable_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::ReedTable::tick(stk::StkFloat)\n"
    "    stk::ReedTable::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::ReedTable::tick(stk::StkFrames &)\n"
    "    stk::ReedTable::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::ReedTable::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::ReedTable::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_ReedTable(void *obj) {
stk::ReedTable *arg1 = (stk::ReedTable *) obj;
delete arg1;
}
static int _proxy__wrap_new_ReedTable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ReedTable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ReedTable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ReedTable_methods[]= {
    { "setOffset", _wrap_ReedTable_setOffset},
    { "setSlope", _wrap_ReedTable_setSlope},
    { "tick", _wrap_ReedTable_tick},
    {0,0}
};
static swig_lua_method swig_ReedTable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ReedTable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ReedTable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ReedTable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ReedTable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ReedTable_Sf_SwigStatic = {
    "ReedTable",
    swig_ReedTable_Sf_SwigStatic_methods,
    swig_ReedTable_Sf_SwigStatic_attributes,
    swig_ReedTable_Sf_SwigStatic_constants,
    swig_ReedTable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ReedTable_bases[] = {0,0};
static const char *swig_ReedTable_base_names[] = {"stk::Function *",0};
static swig_lua_class _wrap_class_ReedTable = { "ReedTable", "ReedTable", &SWIGTYPE_p_stk__ReedTable,_proxy__wrap_new_ReedTable, swig_delete_ReedTable, swig_ReedTable_methods, swig_ReedTable_attributes, &swig_ReedTable_Sf_SwigStatic, swig_ReedTable_meta, swig_ReedTable_bases, swig_ReedTable_base_names };

static int _wrap_new_Resonate(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *result = 0 ;
  
  SWIG_check_num_args("stk::Resonate::Resonate",0,0)
  result = (stk::Resonate *)new stk::Resonate();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Resonate,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Resonate::setResonance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::setResonance",1,"stk::Resonate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Resonate::setResonance",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Resonate::setResonance",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_setResonance",1,SWIGTYPE_p_stk__Resonate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setResonance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_setNotch(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Resonate::setNotch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::setNotch",1,"stk::Resonate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Resonate::setNotch",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Resonate::setNotch",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_setNotch",1,SWIGTYPE_p_stk__Resonate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setNotch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_setEqualGainZeroes(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  
  SWIG_check_num_args("stk::Resonate::setEqualGainZeroes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::setEqualGainZeroes",1,"stk::Resonate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_setEqualGainZeroes",1,SWIGTYPE_p_stk__Resonate);
  }
  
  (arg1)->setEqualGainZeroes();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_keyOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  
  SWIG_check_num_args("stk::Resonate::keyOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::keyOn",1,"stk::Resonate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_keyOn",1,SWIGTYPE_p_stk__Resonate);
  }
  
  (arg1)->keyOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_keyOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  
  SWIG_check_num_args("stk::Resonate::keyOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::keyOff",1,"stk::Resonate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_keyOff",1,SWIGTYPE_p_stk__Resonate);
  }
  
  (arg1)->keyOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Resonate::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::noteOn",1,"stk::Resonate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Resonate::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Resonate::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_noteOn",1,SWIGTYPE_p_stk__Resonate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Resonate::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::noteOff",1,"stk::Resonate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Resonate::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_noteOff",1,SWIGTYPE_p_stk__Resonate);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Resonate::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::controlChange",1,"stk::Resonate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Resonate::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Resonate::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_controlChange",1,SWIGTYPE_p_stk__Resonate);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Resonate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::tick",1,"stk::Resonate *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Resonate::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_tick",1,SWIGTYPE_p_stk__Resonate);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Resonate::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::tick",1,"stk::Resonate *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_tick",1,SWIGTYPE_p_stk__Resonate);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Resonate::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::tick",1,"stk::Resonate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Resonate::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Resonate::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_tick",1,SWIGTYPE_p_stk__Resonate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Resonate_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Resonate *arg1 = (stk::Resonate *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Resonate::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Resonate::tick",1,"stk::Resonate *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Resonate::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Resonate,0))){
    SWIG_fail_ptr("Resonate_tick",1,SWIGTYPE_p_stk__Resonate);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Resonate_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonate_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Resonate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Resonate_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Resonate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Resonate_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Resonate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Resonate_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Resonate, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Resonate_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Resonate_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Resonate::tick(unsigned int)\n"
    "    stk::Resonate::tick()\n"
    "    stk::Resonate::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Resonate::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Resonate(void *obj) {
stk::Resonate *arg1 = (stk::Resonate *) obj;
delete arg1;
}
static int _proxy__wrap_new_Resonate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Resonate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Resonate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Resonate_methods[]= {
    { "setResonance", _wrap_Resonate_setResonance},
    { "setNotch", _wrap_Resonate_setNotch},
    { "setEqualGainZeroes", _wrap_Resonate_setEqualGainZeroes},
    { "keyOn", _wrap_Resonate_keyOn},
    { "keyOff", _wrap_Resonate_keyOff},
    { "noteOn", _wrap_Resonate_noteOn},
    { "noteOff", _wrap_Resonate_noteOff},
    { "controlChange", _wrap_Resonate_controlChange},
    { "tick", _wrap_Resonate_tick},
    {0,0}
};
static swig_lua_method swig_Resonate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Resonate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Resonate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Resonate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Resonate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Resonate_Sf_SwigStatic = {
    "Resonate",
    swig_Resonate_Sf_SwigStatic_methods,
    swig_Resonate_Sf_SwigStatic_attributes,
    swig_Resonate_Sf_SwigStatic_constants,
    swig_Resonate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Resonate_bases[] = {0,0};
static const char *swig_Resonate_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Resonate = { "Resonate", "Resonate", &SWIGTYPE_p_stk__Resonate,_proxy__wrap_new_Resonate, swig_delete_Resonate, swig_Resonate_methods, swig_Resonate_attributes, &swig_Resonate_Sf_SwigStatic, swig_Resonate_meta, swig_Resonate_bases, swig_Resonate_base_names };

static int _wrap_new_Rhodey(lua_State* L) {
  int SWIG_arg = 0;
  stk::Rhodey *result = 0 ;
  
  SWIG_check_num_args("stk::Rhodey::Rhodey",0,0)
  result = (stk::Rhodey *)new stk::Rhodey();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Rhodey,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rhodey_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Rhodey::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Rhodey::setFrequency",1,"stk::Rhodey *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Rhodey::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Rhodey,0))){
    SWIG_fail_ptr("Rhodey_setFrequency",1,SWIGTYPE_p_stk__Rhodey);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rhodey_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Rhodey::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Rhodey::noteOn",1,"stk::Rhodey *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Rhodey::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Rhodey::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Rhodey,0))){
    SWIG_fail_ptr("Rhodey_noteOn",1,SWIGTYPE_p_stk__Rhodey);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rhodey_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Rhodey::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Rhodey::tick",1,"stk::Rhodey *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Rhodey::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Rhodey,0))){
    SWIG_fail_ptr("Rhodey_tick",1,SWIGTYPE_p_stk__Rhodey);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rhodey_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Rhodey::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Rhodey::tick",1,"stk::Rhodey *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Rhodey,0))){
    SWIG_fail_ptr("Rhodey_tick",1,SWIGTYPE_p_stk__Rhodey);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rhodey_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Rhodey::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Rhodey::tick",1,"stk::Rhodey *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Rhodey::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Rhodey::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Rhodey,0))){
    SWIG_fail_ptr("Rhodey_tick",1,SWIGTYPE_p_stk__Rhodey);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Rhodey_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rhodey_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Rhodey *arg1 = (stk::Rhodey *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Rhodey::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Rhodey::tick",1,"stk::Rhodey *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Rhodey::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Rhodey,0))){
    SWIG_fail_ptr("Rhodey_tick",1,SWIGTYPE_p_stk__Rhodey);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Rhodey_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Rhodey_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Rhodey, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Rhodey_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Rhodey, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Rhodey_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Rhodey, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Rhodey_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Rhodey, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Rhodey_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rhodey_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Rhodey::tick(unsigned int)\n"
    "    stk::Rhodey::tick()\n"
    "    stk::Rhodey::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Rhodey::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Rhodey(void *obj) {
stk::Rhodey *arg1 = (stk::Rhodey *) obj;
delete arg1;
}
static int _proxy__wrap_new_Rhodey(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Rhodey);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Rhodey_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Rhodey_methods[]= {
    { "setFrequency", _wrap_Rhodey_setFrequency},
    { "noteOn", _wrap_Rhodey_noteOn},
    { "tick", _wrap_Rhodey_tick},
    {0,0}
};
static swig_lua_method swig_Rhodey_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Rhodey_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Rhodey_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Rhodey_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Rhodey_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Rhodey_Sf_SwigStatic = {
    "Rhodey",
    swig_Rhodey_Sf_SwigStatic_methods,
    swig_Rhodey_Sf_SwigStatic_attributes,
    swig_Rhodey_Sf_SwigStatic_constants,
    swig_Rhodey_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Rhodey_bases[] = {0,0};
static const char *swig_Rhodey_base_names[] = {"stk::FM *",0};
static swig_lua_class _wrap_class_Rhodey = { "Rhodey", "Rhodey", &SWIGTYPE_p_stk__Rhodey,_proxy__wrap_new_Rhodey, swig_delete_Rhodey, swig_Rhodey_methods, swig_Rhodey_attributes, &swig_Rhodey_Sf_SwigStatic, swig_Rhodey_meta, swig_Rhodey_bases, swig_Rhodey_base_names };

static int _wrap_new_Saxofony(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Saxofony *result = 0 ;
  
  SWIG_check_num_args("stk::Saxofony::Saxofony",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Saxofony::Saxofony",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Saxofony *)new stk::Saxofony(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Saxofony,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  
  SWIG_check_num_args("stk::Saxofony::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::clear",1,"stk::Saxofony *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_clear",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Saxofony::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::setFrequency",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_setFrequency",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_setBlowPosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Saxofony::setBlowPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::setBlowPosition",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::setBlowPosition",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_setBlowPosition",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setBlowPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Saxofony::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::startBlowing",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Saxofony::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_startBlowing",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Saxofony::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::stopBlowing",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_stopBlowing",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Saxofony::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::noteOn",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Saxofony::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_noteOn",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Saxofony::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::noteOff",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_noteOff",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Saxofony::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::controlChange",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Saxofony::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_controlChange",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Saxofony::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::tick",1,"stk::Saxofony *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Saxofony::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_tick",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Saxofony::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::tick",1,"stk::Saxofony *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_tick",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Saxofony::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::tick",1,"stk::Saxofony *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Saxofony::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Saxofony::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_tick",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Saxofony_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Saxofony *arg1 = (stk::Saxofony *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Saxofony::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Saxofony::tick",1,"stk::Saxofony *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Saxofony::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Saxofony,0))){
    SWIG_fail_ptr("Saxofony_tick",1,SWIGTYPE_p_stk__Saxofony);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Saxofony_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saxofony_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Saxofony, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Saxofony_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Saxofony, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Saxofony_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Saxofony, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Saxofony_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Saxofony, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Saxofony_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Saxofony_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Saxofony::tick(unsigned int)\n"
    "    stk::Saxofony::tick()\n"
    "    stk::Saxofony::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Saxofony::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Saxofony(void *obj) {
stk::Saxofony *arg1 = (stk::Saxofony *) obj;
delete arg1;
}
static int _proxy__wrap_new_Saxofony(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Saxofony);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Saxofony_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Saxofony_methods[]= {
    { "clear", _wrap_Saxofony_clear},
    { "setFrequency", _wrap_Saxofony_setFrequency},
    { "setBlowPosition", _wrap_Saxofony_setBlowPosition},
    { "startBlowing", _wrap_Saxofony_startBlowing},
    { "stopBlowing", _wrap_Saxofony_stopBlowing},
    { "noteOn", _wrap_Saxofony_noteOn},
    { "noteOff", _wrap_Saxofony_noteOff},
    { "controlChange", _wrap_Saxofony_controlChange},
    { "tick", _wrap_Saxofony_tick},
    {0,0}
};
static swig_lua_method swig_Saxofony_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Saxofony_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Saxofony_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Saxofony_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Saxofony_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Saxofony_Sf_SwigStatic = {
    "Saxofony",
    swig_Saxofony_Sf_SwigStatic_methods,
    swig_Saxofony_Sf_SwigStatic_attributes,
    swig_Saxofony_Sf_SwigStatic_constants,
    swig_Saxofony_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Saxofony_bases[] = {0,0};
static const char *swig_Saxofony_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Saxofony = { "Saxofony", "Saxofony", &SWIGTYPE_p_stk__Saxofony,_proxy__wrap_new_Saxofony, swig_delete_Saxofony, swig_Saxofony_methods, swig_Saxofony_attributes, &swig_Saxofony_Sf_SwigStatic, swig_Saxofony_meta, swig_Saxofony_bases, swig_Saxofony_base_names };

static int _wrap_new_Shakers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::Shakers *result = 0 ;
  
  SWIG_check_num_args("stk::Shakers::Shakers",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Shakers::Shakers",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (stk::Shakers *)new stk::Shakers(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Shakers,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shakers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *result = 0 ;
  
  SWIG_check_num_args("stk::Shakers::Shakers",0,0)
  result = (stk::Shakers *)new stk::Shakers();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Shakers,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shakers(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Shakers__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Shakers__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Shakers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Shakers::Shakers(int)\n"
    "    stk::Shakers::Shakers()\n");
  lua_error(L);return 0;
}


static int _wrap_Shakers_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Shakers::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Shakers::noteOn",1,"stk::Shakers *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Shakers::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Shakers::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Shakers,0))){
    SWIG_fail_ptr("Shakers_noteOn",1,SWIGTYPE_p_stk__Shakers);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shakers_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Shakers::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Shakers::noteOff",1,"stk::Shakers *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Shakers::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Shakers,0))){
    SWIG_fail_ptr("Shakers_noteOff",1,SWIGTYPE_p_stk__Shakers);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shakers_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Shakers::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Shakers::controlChange",1,"stk::Shakers *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Shakers::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Shakers::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Shakers,0))){
    SWIG_fail_ptr("Shakers_controlChange",1,SWIGTYPE_p_stk__Shakers);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shakers_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Shakers::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Shakers::tick",1,"stk::Shakers *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Shakers::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Shakers,0))){
    SWIG_fail_ptr("Shakers_tick",1,SWIGTYPE_p_stk__Shakers);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shakers_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Shakers::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Shakers::tick",1,"stk::Shakers *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Shakers,0))){
    SWIG_fail_ptr("Shakers_tick",1,SWIGTYPE_p_stk__Shakers);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shakers_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Shakers::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Shakers::tick",1,"stk::Shakers *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Shakers::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Shakers::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Shakers,0))){
    SWIG_fail_ptr("Shakers_tick",1,SWIGTYPE_p_stk__Shakers);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Shakers_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shakers_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Shakers *arg1 = (stk::Shakers *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Shakers::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Shakers::tick",1,"stk::Shakers *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Shakers::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Shakers,0))){
    SWIG_fail_ptr("Shakers_tick",1,SWIGTYPE_p_stk__Shakers);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Shakers_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shakers_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Shakers, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Shakers_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Shakers, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Shakers_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Shakers, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Shakers_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Shakers, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Shakers_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shakers_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Shakers::tick(unsigned int)\n"
    "    stk::Shakers::tick()\n"
    "    stk::Shakers::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Shakers::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Shakers(void *obj) {
stk::Shakers *arg1 = (stk::Shakers *) obj;
delete arg1;
}
static int _proxy__wrap_new_Shakers(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Shakers);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Shakers_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Shakers_methods[]= {
    { "noteOn", _wrap_Shakers_noteOn},
    { "noteOff", _wrap_Shakers_noteOff},
    { "controlChange", _wrap_Shakers_controlChange},
    { "tick", _wrap_Shakers_tick},
    {0,0}
};
static swig_lua_method swig_Shakers_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Shakers_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Shakers_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Shakers_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Shakers_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Shakers_Sf_SwigStatic = {
    "Shakers",
    swig_Shakers_Sf_SwigStatic_methods,
    swig_Shakers_Sf_SwigStatic_attributes,
    swig_Shakers_Sf_SwigStatic_constants,
    swig_Shakers_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Shakers_bases[] = {0,0};
static const char *swig_Shakers_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Shakers = { "Shakers", "Shakers", &SWIGTYPE_p_stk__Shakers,_proxy__wrap_new_Shakers, swig_delete_Shakers, swig_Shakers_methods, swig_Shakers_attributes, &swig_Shakers_Sf_SwigStatic, swig_Shakers_meta, swig_Shakers_bases, swig_Shakers_base_names };

static int _wrap_new_Simple(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *result = 0 ;
  
  SWIG_check_num_args("stk::Simple::Simple",0,0)
  result = (stk::Simple *)new stk::Simple();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Simple,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Simple::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::setFrequency",1,"stk::Simple *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Simple::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_setFrequency",1,SWIGTYPE_p_stk__Simple);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_keyOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  
  SWIG_check_num_args("stk::Simple::keyOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::keyOn",1,"stk::Simple *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_keyOn",1,SWIGTYPE_p_stk__Simple);
  }
  
  (arg1)->keyOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_keyOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  
  SWIG_check_num_args("stk::Simple::keyOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::keyOff",1,"stk::Simple *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_keyOff",1,SWIGTYPE_p_stk__Simple);
  }
  
  (arg1)->keyOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Simple::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::noteOn",1,"stk::Simple *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Simple::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Simple::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_noteOn",1,SWIGTYPE_p_stk__Simple);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Simple::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::noteOff",1,"stk::Simple *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Simple::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_noteOff",1,SWIGTYPE_p_stk__Simple);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Simple::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::controlChange",1,"stk::Simple *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Simple::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Simple::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_controlChange",1,SWIGTYPE_p_stk__Simple);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Simple::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::tick",1,"stk::Simple *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Simple::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_tick",1,SWIGTYPE_p_stk__Simple);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Simple::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::tick",1,"stk::Simple *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_tick",1,SWIGTYPE_p_stk__Simple);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Simple::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::tick",1,"stk::Simple *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Simple::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Simple::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_tick",1,SWIGTYPE_p_stk__Simple);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Simple_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Simple *arg1 = (stk::Simple *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Simple::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Simple::tick",1,"stk::Simple *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Simple::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Simple,0))){
    SWIG_fail_ptr("Simple_tick",1,SWIGTYPE_p_stk__Simple);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Simple_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Simple_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Simple, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Simple_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Simple, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Simple_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Simple, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Simple_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Simple, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Simple_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Simple_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Simple::tick(unsigned int)\n"
    "    stk::Simple::tick()\n"
    "    stk::Simple::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Simple::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Simple(void *obj) {
stk::Simple *arg1 = (stk::Simple *) obj;
delete arg1;
}
static int _proxy__wrap_new_Simple(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Simple);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Simple_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Simple_methods[]= {
    { "setFrequency", _wrap_Simple_setFrequency},
    { "keyOn", _wrap_Simple_keyOn},
    { "keyOff", _wrap_Simple_keyOff},
    { "noteOn", _wrap_Simple_noteOn},
    { "noteOff", _wrap_Simple_noteOff},
    { "controlChange", _wrap_Simple_controlChange},
    { "tick", _wrap_Simple_tick},
    {0,0}
};
static swig_lua_method swig_Simple_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Simple_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Simple_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Simple_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Simple_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Simple_Sf_SwigStatic = {
    "Simple",
    swig_Simple_Sf_SwigStatic_methods,
    swig_Simple_Sf_SwigStatic_attributes,
    swig_Simple_Sf_SwigStatic_constants,
    swig_Simple_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Simple_bases[] = {0,0};
static const char *swig_Simple_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Simple = { "Simple", "Simple", &SWIGTYPE_p_stk__Simple,_proxy__wrap_new_Simple, swig_delete_Simple, swig_Simple_methods, swig_Simple_attributes, &swig_Simple_Sf_SwigStatic, swig_Simple_meta, swig_Simple_bases, swig_Simple_base_names };

static int _wrap_new_SineWave(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *result = 0 ;
  
  SWIG_check_num_args("stk::SineWave::SineWave",0,0)
  result = (stk::SineWave *)new stk::SineWave();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__SineWave,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  
  SWIG_check_num_args("stk::SineWave::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::reset",1,"stk::SineWave *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_reset",1,SWIGTYPE_p_stk__SineWave);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_setRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SineWave::setRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::setRate",1,"stk::SineWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SineWave::setRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_setRate",1,SWIGTYPE_p_stk__SineWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SineWave::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::setFrequency",1,"stk::SineWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SineWave::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_setFrequency",1,SWIGTYPE_p_stk__SineWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_addTime(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SineWave::addTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::addTime",1,"stk::SineWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SineWave::addTime",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_addTime",1,SWIGTYPE_p_stk__SineWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->addTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_addPhase(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SineWave::addPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::addPhase",1,"stk::SineWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SineWave::addPhase",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_addPhase",1,SWIGTYPE_p_stk__SineWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->addPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_addPhaseOffset(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SineWave::addPhaseOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::addPhaseOffset",1,"stk::SineWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SineWave::addPhaseOffset",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_addPhaseOffset",1,SWIGTYPE_p_stk__SineWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->addPhaseOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::SineWave::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::lastOut",1,"stk::SineWave const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_lastOut",1,SWIGTYPE_p_stk__SineWave);
  }
  
  result = (stk::StkFloat)((stk::SineWave const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::SineWave::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::tick",1,"stk::SineWave *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_tick",1,SWIGTYPE_p_stk__SineWave);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::SineWave::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::tick",1,"stk::SineWave *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::SineWave::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::SineWave::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_tick",1,SWIGTYPE_p_stk__SineWave);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("SineWave_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::SineWave *arg1 = (stk::SineWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::SineWave::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SineWave::tick",1,"stk::SineWave *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::SineWave::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SineWave,0))){
    SWIG_fail_ptr("SineWave_tick",1,SWIGTYPE_p_stk__SineWave);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("SineWave_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineWave_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SineWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SineWave_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SineWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SineWave_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SineWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SineWave_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineWave_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::SineWave::tick()\n"
    "    stk::SineWave::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::SineWave::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_SineWave(void *obj) {
stk::SineWave *arg1 = (stk::SineWave *) obj;
delete arg1;
}
static int _proxy__wrap_new_SineWave(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SineWave);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SineWave_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SineWave_methods[]= {
    { "reset", _wrap_SineWave_reset},
    { "setRate", _wrap_SineWave_setRate},
    { "setFrequency", _wrap_SineWave_setFrequency},
    { "addTime", _wrap_SineWave_addTime},
    { "addPhase", _wrap_SineWave_addPhase},
    { "addPhaseOffset", _wrap_SineWave_addPhaseOffset},
    { "lastOut", _wrap_SineWave_lastOut},
    { "tick", _wrap_SineWave_tick},
    {0,0}
};
static swig_lua_method swig_SineWave_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SineWave_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SineWave_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SineWave_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SineWave_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SineWave_Sf_SwigStatic = {
    "SineWave",
    swig_SineWave_Sf_SwigStatic_methods,
    swig_SineWave_Sf_SwigStatic_attributes,
    swig_SineWave_Sf_SwigStatic_constants,
    swig_SineWave_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SineWave_bases[] = {0,0};
static const char *swig_SineWave_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_SineWave = { "SineWave", "SineWave", &SWIGTYPE_p_stk__SineWave,_proxy__wrap_new_SineWave, swig_delete_SineWave, swig_SineWave_methods, swig_SineWave_attributes, &swig_SineWave_Sf_SwigStatic, swig_SineWave_meta, swig_SineWave_bases, swig_SineWave_base_names };

static int _wrap_new_SingWave__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  bool arg2 ;
  std::string *argp1 ;
  stk::SingWave *result = 0 ;
  
  SWIG_check_num_args("stk::SingWave::SingWave",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::SingWave::SingWave",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::SingWave::SingWave",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_SingWave",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (stk::SingWave *)new stk::SingWave(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__SingWave,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SingWave__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  stk::SingWave *result = 0 ;
  
  SWIG_check_num_args("stk::SingWave::SingWave",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::SingWave::SingWave",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_SingWave",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (stk::SingWave *)new stk::SingWave(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__SingWave,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SingWave(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SingWave__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SingWave__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SingWave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::SingWave::SingWave(std::string,bool)\n"
    "    stk::SingWave::SingWave(std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_SingWave_reset(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  
  SWIG_check_num_args("stk::SingWave::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::reset",1,"stk::SingWave *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_reset",1,SWIGTYPE_p_stk__SingWave);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_normalize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  
  SWIG_check_num_args("stk::SingWave::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::normalize",1,"stk::SingWave *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_normalize",1,SWIGTYPE_p_stk__SingWave);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_normalize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::normalize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::normalize",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::normalize",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_normalize",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->normalize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_normalize(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SingWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SingWave_normalize__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SingWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SingWave_normalize__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SingWave_normalize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::SingWave::normalize()\n"
    "    stk::SingWave::normalize(stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_SingWave_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::setFrequency",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_setFrequency",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_setVibratoRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::setVibratoRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::setVibratoRate",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::setVibratoRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_setVibratoRate",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVibratoRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_setVibratoGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::setVibratoGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::setVibratoGain",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::setVibratoGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_setVibratoGain",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVibratoGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_setRandomGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::setRandomGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::setRandomGain",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::setRandomGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_setRandomGain",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRandomGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_setSweepRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::setSweepRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::setSweepRate",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::setSweepRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_setSweepRate",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setSweepRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_setGainRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::setGainRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::setGainRate",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::setGainRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_setGainRate",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setGainRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_setGainTarget(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::SingWave::setGainTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::setGainTarget",1,"stk::SingWave *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::SingWave::setGainTarget",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_setGainTarget",1,SWIGTYPE_p_stk__SingWave);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setGainTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  
  SWIG_check_num_args("stk::SingWave::noteOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::noteOn",1,"stk::SingWave *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_noteOn",1,SWIGTYPE_p_stk__SingWave);
  }
  
  (arg1)->noteOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  
  SWIG_check_num_args("stk::SingWave::noteOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::noteOff",1,"stk::SingWave *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_noteOff",1,SWIGTYPE_p_stk__SingWave);
  }
  
  (arg1)->noteOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::SingWave::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::lastOut",1,"stk::SingWave const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_lastOut",1,SWIGTYPE_p_stk__SingWave);
  }
  
  result = (stk::StkFloat)((stk::SingWave const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::SingWave::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::tick",1,"stk::SingWave *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_tick",1,SWIGTYPE_p_stk__SingWave);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::SingWave::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::tick",1,"stk::SingWave *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::SingWave::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::SingWave::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_tick",1,SWIGTYPE_p_stk__SingWave);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("SingWave_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::SingWave *arg1 = (stk::SingWave *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::SingWave::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::SingWave::tick",1,"stk::SingWave *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::SingWave::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__SingWave,0))){
    SWIG_fail_ptr("SingWave_tick",1,SWIGTYPE_p_stk__SingWave);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("SingWave_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingWave_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SingWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SingWave_tick__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SingWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SingWave_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__SingWave, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SingWave_tick__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SingWave_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::SingWave::tick()\n"
    "    stk::SingWave::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::SingWave::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_SingWave(void *obj) {
stk::SingWave *arg1 = (stk::SingWave *) obj;
delete arg1;
}
static int _proxy__wrap_new_SingWave(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SingWave);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SingWave_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SingWave_methods[]= {
    { "reset", _wrap_SingWave_reset},
    { "normalize", _wrap_SingWave_normalize},
    { "setFrequency", _wrap_SingWave_setFrequency},
    { "setVibratoRate", _wrap_SingWave_setVibratoRate},
    { "setVibratoGain", _wrap_SingWave_setVibratoGain},
    { "setRandomGain", _wrap_SingWave_setRandomGain},
    { "setSweepRate", _wrap_SingWave_setSweepRate},
    { "setGainRate", _wrap_SingWave_setGainRate},
    { "setGainTarget", _wrap_SingWave_setGainTarget},
    { "noteOn", _wrap_SingWave_noteOn},
    { "noteOff", _wrap_SingWave_noteOff},
    { "lastOut", _wrap_SingWave_lastOut},
    { "tick", _wrap_SingWave_tick},
    {0,0}
};
static swig_lua_method swig_SingWave_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SingWave_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SingWave_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SingWave_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SingWave_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SingWave_Sf_SwigStatic = {
    "SingWave",
    swig_SingWave_Sf_SwigStatic_methods,
    swig_SingWave_Sf_SwigStatic_attributes,
    swig_SingWave_Sf_SwigStatic_constants,
    swig_SingWave_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SingWave_bases[] = {0,0};
static const char *swig_SingWave_base_names[] = {"stk::Generator *",0};
static swig_lua_class _wrap_class_SingWave = { "SingWave", "SingWave", &SWIGTYPE_p_stk__SingWave,_proxy__wrap_new_SingWave, swig_delete_SingWave, swig_SingWave_methods, swig_SingWave_attributes, &swig_SingWave_Sf_SwigStatic, swig_SingWave_meta, swig_SingWave_bases, swig_SingWave_base_names };

static int _wrap_new_Sitar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Sitar *result = 0 ;
  
  SWIG_check_num_args("stk::Sitar::Sitar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Sitar::Sitar",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Sitar *)new stk::Sitar(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Sitar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sitar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *result = 0 ;
  
  SWIG_check_num_args("stk::Sitar::Sitar",0,0)
  result = (stk::Sitar *)new stk::Sitar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Sitar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sitar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sitar__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sitar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sitar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Sitar::Sitar(stk::StkFloat)\n"
    "    stk::Sitar::Sitar()\n");
  lua_error(L);return 0;
}


static int _wrap_Sitar_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  
  SWIG_check_num_args("stk::Sitar::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::clear",1,"stk::Sitar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_clear",1,SWIGTYPE_p_stk__Sitar);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sitar::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::setFrequency",1,"stk::Sitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sitar::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_setFrequency",1,SWIGTYPE_p_stk__Sitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_pluck(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sitar::pluck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::pluck",1,"stk::Sitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sitar::pluck",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_pluck",1,SWIGTYPE_p_stk__Sitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->pluck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Sitar::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::noteOn",1,"stk::Sitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sitar::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Sitar::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_noteOn",1,SWIGTYPE_p_stk__Sitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sitar::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::noteOff",1,"stk::Sitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sitar::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_noteOff",1,SWIGTYPE_p_stk__Sitar);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sitar::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::tick",1,"stk::Sitar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sitar::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_tick",1,SWIGTYPE_p_stk__Sitar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sitar::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::tick",1,"stk::Sitar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_tick",1,SWIGTYPE_p_stk__Sitar);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Sitar::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::tick",1,"stk::Sitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Sitar::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Sitar::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_tick",1,SWIGTYPE_p_stk__Sitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Sitar_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sitar *arg1 = (stk::Sitar *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Sitar::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sitar::tick",1,"stk::Sitar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Sitar::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sitar,0))){
    SWIG_fail_ptr("Sitar_tick",1,SWIGTYPE_p_stk__Sitar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Sitar_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sitar_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Sitar_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sitar_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sitar_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sitar, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sitar_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sitar_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Sitar::tick(unsigned int)\n"
    "    stk::Sitar::tick()\n"
    "    stk::Sitar::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Sitar::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Sitar(void *obj) {
stk::Sitar *arg1 = (stk::Sitar *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sitar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sitar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sitar_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sitar_methods[]= {
    { "clear", _wrap_Sitar_clear},
    { "setFrequency", _wrap_Sitar_setFrequency},
    { "pluck", _wrap_Sitar_pluck},
    { "noteOn", _wrap_Sitar_noteOn},
    { "noteOff", _wrap_Sitar_noteOff},
    { "tick", _wrap_Sitar_tick},
    {0,0}
};
static swig_lua_method swig_Sitar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sitar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sitar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sitar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sitar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sitar_Sf_SwigStatic = {
    "Sitar",
    swig_Sitar_Sf_SwigStatic_methods,
    swig_Sitar_Sf_SwigStatic_attributes,
    swig_Sitar_Sf_SwigStatic_constants,
    swig_Sitar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sitar_bases[] = {0,0};
static const char *swig_Sitar_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Sitar = { "Sitar", "Sitar", &SWIGTYPE_p_stk__Sitar,_proxy__wrap_new_Sitar, swig_delete_Sitar, swig_Sitar_methods, swig_Sitar_attributes, &swig_Sitar_Sf_SwigStatic, swig_Sitar_meta, swig_Sitar_bases, swig_Sitar_base_names };

static int _wrap_new_Sphere__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Sphere *result = 0 ;
  
  SWIG_check_num_args("stk::Sphere::Sphere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Sphere::Sphere",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Sphere *)new stk::Sphere(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *result = 0 ;
  
  SWIG_check_num_args("stk::Sphere::Sphere",0,0)
  result = (stk::Sphere *)new stk::Sphere();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sphere__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sphere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Sphere::Sphere(stk::StkFloat)\n"
    "    stk::Sphere::Sphere()\n");
  lua_error(L);return 0;
}


static int _wrap_Sphere_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::Sphere::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::setPosition",1,"stk::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sphere::setPosition",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Sphere::setPosition",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Sphere::setPosition",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_setPosition",1,SWIGTYPE_p_stk__Sphere);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setPosition(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_setVelocity(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::Sphere::setVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::setVelocity",1,"stk::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sphere::setVelocity",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Sphere::setVelocity",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Sphere::setVelocity",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_setVelocity",1,SWIGTYPE_p_stk__Sphere);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_setRadius(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sphere::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::setRadius",1,"stk::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sphere::setRadius",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_setRadius",1,SWIGTYPE_p_stk__Sphere);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_setMass(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sphere::setMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::setMass",1,"stk::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sphere::setMass",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_setMass",1,SWIGTYPE_p_stk__Sphere);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  Vector3D *result = 0 ;
  
  SWIG_check_num_args("stk::Sphere::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::getPosition",1,"stk::Sphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_getPosition",1,SWIGTYPE_p_stk__Sphere);
  }
  
  result = (Vector3D *)(arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vector3D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_getRelativePosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  Vector3D *arg2 = (Vector3D *) 0 ;
  Vector3D *result = 0 ;
  
  SWIG_check_num_args("stk::Sphere::getRelativePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::getRelativePosition",1,"stk::Sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Sphere::getRelativePosition",2,"Vector3D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_getRelativePosition",1,SWIGTYPE_p_stk__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vector3D,0))){
    SWIG_fail_ptr("Sphere_getRelativePosition",2,SWIGTYPE_p_Vector3D);
  }
  
  result = (Vector3D *)(arg1)->getRelativePosition(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Vector3D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  Vector3D *arg2 = (Vector3D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sphere::getVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::getVelocity",1,"stk::Sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Sphere::getVelocity",2,"Vector3D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_getVelocity",1,SWIGTYPE_p_stk__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vector3D,0))){
    SWIG_fail_ptr("Sphere_getVelocity",2,SWIGTYPE_p_Vector3D);
  }
  
  result = (stk::StkFloat)(arg1)->getVelocity(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_isInside(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  Vector3D *arg2 = (Vector3D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sphere::isInside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::isInside",1,"stk::Sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Sphere::isInside",2,"Vector3D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_isInside",1,SWIGTYPE_p_stk__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Vector3D,0))){
    SWIG_fail_ptr("Sphere_isInside",2,SWIGTYPE_p_Vector3D);
  }
  
  result = (stk::StkFloat)(arg1)->isInside(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_getRadius(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sphere::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::getRadius",1,"stk::Sphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_getRadius",1,SWIGTYPE_p_stk__Sphere);
  }
  
  result = (stk::StkFloat)(arg1)->getRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_getMass(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sphere::getMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::getMass",1,"stk::Sphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_getMass",1,SWIGTYPE_p_stk__Sphere);
  }
  
  result = (stk::StkFloat)(arg1)->getMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_addVelocity(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::Sphere::addVelocity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::addVelocity",1,"stk::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sphere::addVelocity",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Sphere::addVelocity",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Sphere::addVelocity",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_addVelocity",1,SWIGTYPE_p_stk__Sphere);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->addVelocity(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_tick(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sphere *arg1 = (stk::Sphere *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sphere::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sphere::tick",1,"stk::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sphere::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sphere,0))){
    SWIG_fail_ptr("Sphere_tick",1,SWIGTYPE_p_stk__Sphere);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sphere(void *obj) {
stk::Sphere *arg1 = (stk::Sphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sphere_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sphere_methods[]= {
    { "setPosition", _wrap_Sphere_setPosition},
    { "setVelocity", _wrap_Sphere_setVelocity},
    { "setRadius", _wrap_Sphere_setRadius},
    { "setMass", _wrap_Sphere_setMass},
    { "getPosition", _wrap_Sphere_getPosition},
    { "getRelativePosition", _wrap_Sphere_getRelativePosition},
    { "getVelocity", _wrap_Sphere_getVelocity},
    { "isInside", _wrap_Sphere_isInside},
    { "getRadius", _wrap_Sphere_getRadius},
    { "getMass", _wrap_Sphere_getMass},
    { "addVelocity", _wrap_Sphere_addVelocity},
    { "tick", _wrap_Sphere_tick},
    {0,0}
};
static swig_lua_method swig_Sphere_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sphere_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sphere_Sf_SwigStatic = {
    "Sphere",
    swig_Sphere_Sf_SwigStatic_methods,
    swig_Sphere_Sf_SwigStatic_attributes,
    swig_Sphere_Sf_SwigStatic_constants,
    swig_Sphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sphere_bases[] = {0};
static const char *swig_Sphere_base_names[] = {0};
static swig_lua_class _wrap_class_Sphere = { "Sphere", "Sphere", &SWIGTYPE_p_stk__Sphere,_proxy__wrap_new_Sphere, swig_delete_Sphere, swig_Sphere_methods, swig_Sphere_attributes, &swig_Sphere_Sf_SwigStatic, swig_Sphere_meta, swig_Sphere_bases, swig_Sphere_base_names };

static int _wrap_new_StifKarp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::StifKarp *result = 0 ;
  
  SWIG_check_num_args("stk::StifKarp::StifKarp",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::StifKarp::StifKarp",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::StifKarp *)new stk::StifKarp(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StifKarp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StifKarp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *result = 0 ;
  
  SWIG_check_num_args("stk::StifKarp::StifKarp",0,0)
  result = (stk::StifKarp *)new stk::StifKarp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StifKarp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StifKarp(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StifKarp__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StifKarp__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StifKarp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::StifKarp::StifKarp(stk::StkFloat)\n"
    "    stk::StifKarp::StifKarp()\n");
  lua_error(L);return 0;
}


static int _wrap_StifKarp_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  
  SWIG_check_num_args("stk::StifKarp::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::clear",1,"stk::StifKarp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_clear",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::StifKarp::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::setFrequency",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_setFrequency",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_setStretch(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::StifKarp::setStretch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::setStretch",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::setStretch",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_setStretch",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setStretch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_setPickupPosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::StifKarp::setPickupPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::setPickupPosition",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::setPickupPosition",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_setPickupPosition",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPickupPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_setBaseLoopGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::StifKarp::setBaseLoopGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::setBaseLoopGain",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::setBaseLoopGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_setBaseLoopGain",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setBaseLoopGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_pluck(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::StifKarp::pluck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::pluck",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::pluck",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_pluck",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->pluck(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::StifKarp::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::noteOn",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StifKarp::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_noteOn",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::StifKarp::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::noteOff",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_noteOff",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::StifKarp::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::controlChange",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StifKarp::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_controlChange",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::StifKarp::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::tick",1,"stk::StifKarp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::StifKarp::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_tick",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::StifKarp::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::tick",1,"stk::StifKarp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_tick",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StifKarp::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::tick",1,"stk::StifKarp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::StifKarp::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::StifKarp::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_tick",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StifKarp_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::StifKarp *arg1 = (stk::StifKarp *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::StifKarp::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::StifKarp::tick",1,"stk::StifKarp *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::StifKarp::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__StifKarp,0))){
    SWIG_fail_ptr("StifKarp_tick",1,SWIGTYPE_p_stk__StifKarp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("StifKarp_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StifKarp_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StifKarp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StifKarp_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StifKarp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_StifKarp_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StifKarp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_StifKarp_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__StifKarp, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_StifKarp_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StifKarp_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::StifKarp::tick(unsigned int)\n"
    "    stk::StifKarp::tick()\n"
    "    stk::StifKarp::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::StifKarp::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StifKarp(void *obj) {
stk::StifKarp *arg1 = (stk::StifKarp *) obj;
delete arg1;
}
static int _proxy__wrap_new_StifKarp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StifKarp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StifKarp_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StifKarp_methods[]= {
    { "clear", _wrap_StifKarp_clear},
    { "setFrequency", _wrap_StifKarp_setFrequency},
    { "setStretch", _wrap_StifKarp_setStretch},
    { "setPickupPosition", _wrap_StifKarp_setPickupPosition},
    { "setBaseLoopGain", _wrap_StifKarp_setBaseLoopGain},
    { "pluck", _wrap_StifKarp_pluck},
    { "noteOn", _wrap_StifKarp_noteOn},
    { "noteOff", _wrap_StifKarp_noteOff},
    { "controlChange", _wrap_StifKarp_controlChange},
    { "tick", _wrap_StifKarp_tick},
    {0,0}
};
static swig_lua_method swig_StifKarp_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StifKarp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StifKarp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StifKarp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StifKarp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StifKarp_SwigStatic = {
    "StifKarp",
    swig_StifKarp_SwigStatic_methods,
    swig_StifKarp_SwigStatic_attributes,
    swig_StifKarp_SwigStatic_constants,
    swig_StifKarp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StifKarp_bases[] = {0,0};
static const char *swig_StifKarp_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_StifKarp = { "StifKarp", "StifKarp", &SWIGTYPE_p_stk__StifKarp,_proxy__wrap_new_StifKarp, swig_delete_StifKarp, swig_StifKarp_methods, swig_StifKarp_attributes, &swig_StifKarp_SwigStatic, swig_StifKarp_meta, swig_StifKarp_bases, swig_StifKarp_base_names };

static int _wrap_new_TapDelay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::vector< unsigned long > > arg1 ;
  unsigned long arg2 ;
  std::vector< unsigned long > *argp1 ;
  stk::TapDelay *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::TapDelay",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::TapDelay::TapDelay",1,"std::vector< unsigned long >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TapDelay::TapDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_TapDelay",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (stk::TapDelay *)new stk::TapDelay(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TapDelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TapDelay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< std::vector< unsigned long > > arg1 ;
  std::vector< unsigned long > *argp1 ;
  stk::TapDelay *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::TapDelay",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("stk::TapDelay::TapDelay",1,"std::vector< unsigned long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_TapDelay",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  arg1 = *argp1;
  
  result = (stk::TapDelay *)new stk::TapDelay(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TapDelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TapDelay__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::TapDelay",0,0)
  result = (stk::TapDelay *)new stk::TapDelay();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TapDelay,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TapDelay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TapDelay__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TapDelay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TapDelay__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TapDelay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TapDelay::TapDelay(std::vector< unsigned long >,unsigned long)\n"
    "    stk::TapDelay::TapDelay(std::vector< unsigned long >)\n"
    "    stk::TapDelay::TapDelay()\n");
  lua_error(L);return 0;
}


static int _wrap_TapDelay_setMaximumDelay(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("stk::TapDelay::setMaximumDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::setMaximumDelay",1,"stk::TapDelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TapDelay::setMaximumDelay",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_setMaximumDelay",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->setMaximumDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_setTapDelays(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  SwigValueWrapper< std::vector< unsigned long > > arg2 ;
  std::vector< unsigned long > *argp2 ;
  
  SWIG_check_num_args("stk::TapDelay::setTapDelays",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::setTapDelays",1,"stk::TapDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TapDelay::setTapDelays",2,"std::vector< unsigned long >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_setTapDelays",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("TapDelay_setTapDelays",2,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  arg2 = *argp2;
  
  (arg1)->setTapDelays(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_getTapDelays(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  SwigValueWrapper< std::vector< unsigned long > > result;
  
  SWIG_check_num_args("stk::TapDelay::getTapDelays",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::getTapDelays",1,"stk::TapDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_getTapDelays",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  result = ((stk::TapDelay const *)arg1)->getTapDelays();
  {
    std::vector< unsigned long > * resultptr = new std::vector< unsigned long >((const std::vector< unsigned long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TapDelay::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::lastOut",1,"stk::TapDelay const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TapDelay::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_lastOut",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)((stk::TapDelay const *)arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TapDelay::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::lastOut",1,"stk::TapDelay const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_lastOut",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  result = (stk::StkFloat)((stk::TapDelay const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TapDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TapDelay_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TapDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TapDelay_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TapDelay_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TapDelay::lastOut(unsigned int) const\n"
    "    stk::TapDelay::lastOut() const\n");
  lua_error(L);return 0;
}


static int _wrap_TapDelay_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::tick",1,"stk::TapDelay *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TapDelay::tick",2,"stk::StkFloat");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TapDelay::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_tick",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TapDelay_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::tick",1,"stk::TapDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TapDelay::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TapDelay::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_tick",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TapDelay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::tick",1,"stk::TapDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TapDelay::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_tick",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TapDelay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::tick",1,"stk::TapDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TapDelay::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TapDelay::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TapDelay::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_tick",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TapDelay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TapDelay_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::TapDelay *arg1 = (stk::TapDelay *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TapDelay::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TapDelay::tick",1,"stk::TapDelay *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TapDelay::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TapDelay::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TapDelay,0))){
    SWIG_fail_ptr("TapDelay_tick",1,SWIGTYPE_p_stk__TapDelay);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TapDelay_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TapDelay_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapDelay_tick(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TapDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TapDelay_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TapDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TapDelay_tick__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TapDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TapDelay_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TapDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TapDelay_tick__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TapDelay, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TapDelay_tick__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TapDelay_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TapDelay::tick(stk::StkFloat,stk::StkFrames &)\n"
    "    stk::TapDelay::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::TapDelay::tick(stk::StkFrames &)\n"
    "    stk::TapDelay::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::TapDelay::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_TapDelay(void *obj) {
stk::TapDelay *arg1 = (stk::TapDelay *) obj;
delete arg1;
}
static int _proxy__wrap_new_TapDelay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TapDelay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TapDelay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TapDelay_methods[]= {
    { "setMaximumDelay", _wrap_TapDelay_setMaximumDelay},
    { "setTapDelays", _wrap_TapDelay_setTapDelays},
    { "getTapDelays", _wrap_TapDelay_getTapDelays},
    { "lastOut", _wrap_TapDelay_lastOut},
    { "tick", _wrap_TapDelay_tick},
    {0,0}
};
static swig_lua_method swig_TapDelay_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TapDelay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TapDelay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TapDelay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TapDelay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TapDelay_Sf_SwigStatic = {
    "TapDelay",
    swig_TapDelay_Sf_SwigStatic_methods,
    swig_TapDelay_Sf_SwigStatic_attributes,
    swig_TapDelay_Sf_SwigStatic_constants,
    swig_TapDelay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TapDelay_bases[] = {0,0};
static const char *swig_TapDelay_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_TapDelay = { "TapDelay", "TapDelay", &SWIGTYPE_p_stk__TapDelay,_proxy__wrap_new_TapDelay, swig_delete_TapDelay, swig_TapDelay_methods, swig_TapDelay_attributes, &swig_TapDelay_Sf_SwigStatic, swig_TapDelay_meta, swig_TapDelay_bases, swig_TapDelay_base_names };

static int _wrap_new_TubeBell(lua_State* L) {
  int SWIG_arg = 0;
  stk::TubeBell *result = 0 ;
  
  SWIG_check_num_args("stk::TubeBell::TubeBell",0,0)
  result = (stk::TubeBell *)new stk::TubeBell();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TubeBell,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TubeBell_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::TubeBell::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TubeBell::noteOn",1,"stk::TubeBell *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TubeBell::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TubeBell::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TubeBell,0))){
    SWIG_fail_ptr("TubeBell_noteOn",1,SWIGTYPE_p_stk__TubeBell);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TubeBell_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TubeBell::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TubeBell::tick",1,"stk::TubeBell *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TubeBell::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TubeBell,0))){
    SWIG_fail_ptr("TubeBell_tick",1,SWIGTYPE_p_stk__TubeBell);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TubeBell_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TubeBell::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TubeBell::tick",1,"stk::TubeBell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TubeBell,0))){
    SWIG_fail_ptr("TubeBell_tick",1,SWIGTYPE_p_stk__TubeBell);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TubeBell_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TubeBell::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TubeBell::tick",1,"stk::TubeBell *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TubeBell::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TubeBell::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TubeBell,0))){
    SWIG_fail_ptr("TubeBell_tick",1,SWIGTYPE_p_stk__TubeBell);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TubeBell_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TubeBell_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::TubeBell *arg1 = (stk::TubeBell *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TubeBell::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TubeBell::tick",1,"stk::TubeBell *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TubeBell::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TubeBell,0))){
    SWIG_fail_ptr("TubeBell_tick",1,SWIGTYPE_p_stk__TubeBell);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TubeBell_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TubeBell_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TubeBell, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TubeBell_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TubeBell, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TubeBell_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TubeBell, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TubeBell_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TubeBell, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TubeBell_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TubeBell_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TubeBell::tick(unsigned int)\n"
    "    stk::TubeBell::tick()\n"
    "    stk::TubeBell::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::TubeBell::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_TubeBell(void *obj) {
stk::TubeBell *arg1 = (stk::TubeBell *) obj;
delete arg1;
}
static int _proxy__wrap_new_TubeBell(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TubeBell);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TubeBell_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TubeBell_methods[]= {
    { "noteOn", _wrap_TubeBell_noteOn},
    { "tick", _wrap_TubeBell_tick},
    {0,0}
};
static swig_lua_method swig_TubeBell_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TubeBell_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TubeBell_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TubeBell_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TubeBell_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TubeBell_Sf_SwigStatic = {
    "TubeBell",
    swig_TubeBell_Sf_SwigStatic_methods,
    swig_TubeBell_Sf_SwigStatic_attributes,
    swig_TubeBell_Sf_SwigStatic_constants,
    swig_TubeBell_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TubeBell_bases[] = {0,0};
static const char *swig_TubeBell_base_names[] = {"stk::FM *",0};
static swig_lua_class _wrap_class_TubeBell = { "TubeBell", "TubeBell", &SWIGTYPE_p_stk__TubeBell,_proxy__wrap_new_TubeBell, swig_delete_TubeBell, swig_TubeBell_methods, swig_TubeBell_attributes, &swig_TubeBell_Sf_SwigStatic, swig_TubeBell_meta, swig_TubeBell_bases, swig_TubeBell_base_names };

static int _wrap_new_Twang__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Twang *result = 0 ;
  
  SWIG_check_num_args("stk::Twang::Twang",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Twang::Twang",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Twang *)new stk::Twang(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Twang,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Twang__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *result = 0 ;
  
  SWIG_check_num_args("stk::Twang::Twang",0,0)
  result = (stk::Twang *)new stk::Twang();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Twang,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Twang(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Twang__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Twang__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Twang'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Twang::Twang(stk::StkFloat)\n"
    "    stk::Twang::Twang()\n");
  lua_error(L);return 0;
}


static int _wrap_Twang_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  
  SWIG_check_num_args("stk::Twang::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::clear",1,"stk::Twang *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_clear",1,SWIGTYPE_p_stk__Twang);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_setLowestFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Twang::setLowestFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::setLowestFrequency",1,"stk::Twang *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Twang::setLowestFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_setLowestFrequency",1,SWIGTYPE_p_stk__Twang);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setLowestFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Twang::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::setFrequency",1,"stk::Twang *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Twang::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_setFrequency",1,SWIGTYPE_p_stk__Twang);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_setPluckPosition(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Twang::setPluckPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::setPluckPosition",1,"stk::Twang *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Twang::setPluckPosition",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_setPluckPosition",1,SWIGTYPE_p_stk__Twang);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPluckPosition(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_setLoopGain(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Twang::setLoopGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::setLoopGain",1,"stk::Twang *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Twang::setLoopGain",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_setLoopGain",1,SWIGTYPE_p_stk__Twang);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setLoopGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Twang::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::lastOut",1,"stk::Twang *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_lastOut",1,SWIGTYPE_p_stk__Twang);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Twang::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::tick",1,"stk::Twang *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Twang::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_tick",1,SWIGTYPE_p_stk__Twang);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Twang::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::tick",1,"stk::Twang *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Twang::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Twang::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_tick",1,SWIGTYPE_p_stk__Twang);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Twang::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::tick",1,"stk::Twang *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Twang::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_tick",1,SWIGTYPE_p_stk__Twang);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Twang::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::tick",1,"stk::Twang *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Twang::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Twang::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Twang::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::Twang::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_tick",1,SWIGTYPE_p_stk__Twang);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Twang::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::tick",1,"stk::Twang *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Twang::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Twang::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Twang::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_tick",1,SWIGTYPE_p_stk__Twang);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::Twang *arg1 = (stk::Twang *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Twang::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Twang::tick",1,"stk::Twang *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Twang::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::Twang::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Twang,0))){
    SWIG_fail_ptr("Twang_tick",1,SWIGTYPE_p_stk__Twang);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Twang_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Twang_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Twang, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Twang_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Twang, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Twang_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Twang, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Twang_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Twang, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Twang_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Twang, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Twang_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Twang, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Twang_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Twang_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Twang::tick(stk::StkFloat)\n"
    "    stk::Twang::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Twang::tick(stk::StkFrames &)\n"
    "    stk::Twang::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::Twang::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::Twang::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Twang(void *obj) {
stk::Twang *arg1 = (stk::Twang *) obj;
delete arg1;
}
static int _proxy__wrap_new_Twang(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Twang);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Twang_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Twang_methods[]= {
    { "clear", _wrap_Twang_clear},
    { "setLowestFrequency", _wrap_Twang_setLowestFrequency},
    { "setFrequency", _wrap_Twang_setFrequency},
    { "setPluckPosition", _wrap_Twang_setPluckPosition},
    { "setLoopGain", _wrap_Twang_setLoopGain},
    { "lastOut", _wrap_Twang_lastOut},
    { "tick", _wrap_Twang_tick},
    {0,0}
};
static swig_lua_method swig_Twang_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Twang_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Twang_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Twang_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Twang_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Twang_Sf_SwigStatic = {
    "Twang",
    swig_Twang_Sf_SwigStatic_methods,
    swig_Twang_Sf_SwigStatic_attributes,
    swig_Twang_Sf_SwigStatic_constants,
    swig_Twang_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Twang_bases[] = {0};
static const char *swig_Twang_base_names[] = {0};
static swig_lua_class _wrap_class_Twang = { "Twang", "Twang", &SWIGTYPE_p_stk__Twang,_proxy__wrap_new_Twang, swig_delete_Twang, swig_Twang_methods, swig_Twang_attributes, &swig_Twang_Sf_SwigStatic, swig_Twang_meta, swig_Twang_bases, swig_Twang_base_names };

static int _wrap_new_TwoPole(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *result = 0 ;
  
  SWIG_check_num_args("stk::TwoPole::TwoPole",0,0)
  result = (stk::TwoPole *)new stk::TwoPole();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TwoPole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_ignoreSampleRateChange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stk::TwoPole::ignoreSampleRateChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::ignoreSampleRateChange",1,"stk::TwoPole *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::TwoPole::ignoreSampleRateChange",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_ignoreSampleRateChange",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->ignoreSampleRateChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_ignoreSampleRateChange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  
  SWIG_check_num_args("stk::TwoPole::ignoreSampleRateChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::ignoreSampleRateChange",1,"stk::TwoPole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_ignoreSampleRateChange",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  (arg1)->ignoreSampleRateChange();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_ignoreSampleRateChange(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TwoPole_ignoreSampleRateChange__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TwoPole_ignoreSampleRateChange__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TwoPole_ignoreSampleRateChange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TwoPole::ignoreSampleRateChange(bool)\n"
    "    stk::TwoPole::ignoreSampleRateChange()\n");
  lua_error(L);return 0;
}


static int _wrap_TwoPole_setB0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::TwoPole::setB0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::setB0",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::setB0",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_setB0",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_setA1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::TwoPole::setA1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::setA1",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::setA1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_setA1",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_setA2(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::TwoPole::setA2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::setA2",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::setA2",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_setA2",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setA2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("stk::TwoPole::setCoefficients",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::setCoefficients",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoPole::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoPole::setCoefficients",4,"stk::StkFloat");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("stk::TwoPole::setCoefficients",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_setCoefficients",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setCoefficients(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::TwoPole::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::setCoefficients",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoPole::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoPole::setCoefficients",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_setCoefficients",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_setCoefficients(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TwoPole_setCoefficients__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_TwoPole_setCoefficients__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TwoPole_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TwoPole::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::TwoPole::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_TwoPole_setResonance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("stk::TwoPole::setResonance",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::setResonance",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::setResonance",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoPole::setResonance",3,"stk::StkFloat");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("stk::TwoPole::setResonance",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_setResonance",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setResonance(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_setResonance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::TwoPole::setResonance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::setResonance",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::setResonance",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoPole::setResonance",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_setResonance",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setResonance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_setResonance(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TwoPole_setResonance__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_TwoPole_setResonance__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TwoPole_setResonance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TwoPole::setResonance(stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::TwoPole::setResonance(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_TwoPole_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TwoPole::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::lastOut",1,"stk::TwoPole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_lastOut",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  result = (stk::StkFloat)((stk::TwoPole const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TwoPole::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::tick",1,"stk::TwoPole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoPole::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_tick",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoPole::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::tick",1,"stk::TwoPole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoPole::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoPole::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_tick",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoPole::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::tick",1,"stk::TwoPole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoPole::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_tick",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoPole::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::tick",1,"stk::TwoPole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoPole::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TwoPole::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoPole::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::TwoPole::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_tick",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoPole::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::tick",1,"stk::TwoPole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoPole::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TwoPole::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoPole::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_tick",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoPole *arg1 = (stk::TwoPole *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoPole::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoPole::tick",1,"stk::TwoPole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoPole::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TwoPole::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoPole,0))){
    SWIG_fail_ptr("TwoPole_tick",1,SWIGTYPE_p_stk__TwoPole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoPole_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoPole_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TwoPole_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TwoPole_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TwoPole_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TwoPole_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TwoPole_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoPole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TwoPole_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TwoPole_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TwoPole::tick(stk::StkFloat)\n"
    "    stk::TwoPole::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::TwoPole::tick(stk::StkFrames &)\n"
    "    stk::TwoPole::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::TwoPole::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::TwoPole::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_TwoPole(void *obj) {
stk::TwoPole *arg1 = (stk::TwoPole *) obj;
delete arg1;
}
static int _proxy__wrap_new_TwoPole(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TwoPole);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TwoPole_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TwoPole_methods[]= {
    { "ignoreSampleRateChange", _wrap_TwoPole_ignoreSampleRateChange},
    { "setB0", _wrap_TwoPole_setB0},
    { "setA1", _wrap_TwoPole_setA1},
    { "setA2", _wrap_TwoPole_setA2},
    { "setCoefficients", _wrap_TwoPole_setCoefficients},
    { "setResonance", _wrap_TwoPole_setResonance},
    { "lastOut", _wrap_TwoPole_lastOut},
    { "tick", _wrap_TwoPole_tick},
    {0,0}
};
static swig_lua_method swig_TwoPole_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TwoPole_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TwoPole_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TwoPole_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TwoPole_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TwoPole_Sf_SwigStatic = {
    "TwoPole",
    swig_TwoPole_Sf_SwigStatic_methods,
    swig_TwoPole_Sf_SwigStatic_attributes,
    swig_TwoPole_Sf_SwigStatic_constants,
    swig_TwoPole_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TwoPole_bases[] = {0,0};
static const char *swig_TwoPole_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_TwoPole = { "TwoPole", "TwoPole", &SWIGTYPE_p_stk__TwoPole,_proxy__wrap_new_TwoPole, swig_delete_TwoPole, swig_TwoPole_methods, swig_TwoPole_attributes, &swig_TwoPole_Sf_SwigStatic, swig_TwoPole_meta, swig_TwoPole_bases, swig_TwoPole_base_names };

static int _wrap_new_TwoZero(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *result = 0 ;
  
  SWIG_check_num_args("stk::TwoZero::TwoZero",0,0)
  result = (stk::TwoZero *)new stk::TwoZero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TwoZero,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_ignoreSampleRateChange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("stk::TwoZero::ignoreSampleRateChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::ignoreSampleRateChange",1,"stk::TwoZero *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::TwoZero::ignoreSampleRateChange",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_ignoreSampleRateChange",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->ignoreSampleRateChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_ignoreSampleRateChange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  
  SWIG_check_num_args("stk::TwoZero::ignoreSampleRateChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::ignoreSampleRateChange",1,"stk::TwoZero *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_ignoreSampleRateChange",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  (arg1)->ignoreSampleRateChange();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_ignoreSampleRateChange(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TwoZero_ignoreSampleRateChange__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TwoZero_ignoreSampleRateChange__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TwoZero_ignoreSampleRateChange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TwoZero::ignoreSampleRateChange(bool)\n"
    "    stk::TwoZero::ignoreSampleRateChange()\n");
  lua_error(L);return 0;
}


static int _wrap_TwoZero_setB0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::TwoZero::setB0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::setB0",1,"stk::TwoZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoZero::setB0",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_setB0",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB0(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_setB1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::TwoZero::setB1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::setB1",1,"stk::TwoZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoZero::setB1",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_setB1",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB1(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_setB2(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::TwoZero::setB2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::setB2",1,"stk::TwoZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoZero::setB2",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_setB2",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setB2(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("stk::TwoZero::setCoefficients",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::setCoefficients",1,"stk::TwoZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoZero::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoZero::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoZero::setCoefficients",4,"stk::StkFloat");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("stk::TwoZero::setCoefficients",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_setCoefficients",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setCoefficients(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::TwoZero::setCoefficients",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::setCoefficients",1,"stk::TwoZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoZero::setCoefficients",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoZero::setCoefficients",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoZero::setCoefficients",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_setCoefficients",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setCoefficients(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_setCoefficients(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TwoZero_setCoefficients__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_TwoZero_setCoefficients__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TwoZero_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TwoZero::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat,bool)\n"
    "    stk::TwoZero::setCoefficients(stk::StkFloat,stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_TwoZero_setNotch(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::TwoZero::setNotch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::setNotch",1,"stk::TwoZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoZero::setNotch",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoZero::setNotch",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_setNotch",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setNotch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_lastOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TwoZero::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::lastOut",1,"stk::TwoZero const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_lastOut",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  result = (stk::StkFloat)((stk::TwoZero const *)arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::TwoZero::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::tick",1,"stk::TwoZero *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TwoZero::tick",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_tick",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoZero::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::tick",1,"stk::TwoZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoZero::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TwoZero::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_tick",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoZero::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::tick",1,"stk::TwoZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoZero::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_tick",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoZero::tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::tick",1,"stk::TwoZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoZero::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TwoZero::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoZero::tick",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::TwoZero::tick",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_tick",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_tick__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  unsigned int arg4 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoZero::tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::tick",1,"stk::TwoZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoZero::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TwoZero::tick",3,"stk::StkFrames &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TwoZero::tick",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_tick",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_tick__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::TwoZero *arg1 = (stk::TwoZero *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *arg3 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::TwoZero::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TwoZero::tick",1,"stk::TwoZero *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TwoZero::tick",2,"stk::StkFrames &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TwoZero::tick",3,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TwoZero,0))){
    SWIG_fail_ptr("TwoZero_tick",1,SWIGTYPE_p_stk__TwoZero);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("TwoZero_tick",3,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TwoZero_tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TwoZero_tick__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TwoZero_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TwoZero_tick__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TwoZero_tick__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TwoZero_tick__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TwoZero, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TwoZero_tick__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TwoZero_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TwoZero::tick(stk::StkFloat)\n"
    "    stk::TwoZero::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::TwoZero::tick(stk::StkFrames &)\n"
    "    stk::TwoZero::tick(stk::StkFrames &,stk::StkFrames &,unsigned int,unsigned int)\n"
    "    stk::TwoZero::tick(stk::StkFrames &,stk::StkFrames &,unsigned int)\n"
    "    stk::TwoZero::tick(stk::StkFrames &,stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_TwoZero(void *obj) {
stk::TwoZero *arg1 = (stk::TwoZero *) obj;
delete arg1;
}
static int _proxy__wrap_new_TwoZero(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TwoZero);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TwoZero_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TwoZero_methods[]= {
    { "ignoreSampleRateChange", _wrap_TwoZero_ignoreSampleRateChange},
    { "setB0", _wrap_TwoZero_setB0},
    { "setB1", _wrap_TwoZero_setB1},
    { "setB2", _wrap_TwoZero_setB2},
    { "setCoefficients", _wrap_TwoZero_setCoefficients},
    { "setNotch", _wrap_TwoZero_setNotch},
    { "lastOut", _wrap_TwoZero_lastOut},
    { "tick", _wrap_TwoZero_tick},
    {0,0}
};
static swig_lua_method swig_TwoZero_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TwoZero_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TwoZero_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TwoZero_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TwoZero_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TwoZero_Sf_SwigStatic = {
    "TwoZero",
    swig_TwoZero_Sf_SwigStatic_methods,
    swig_TwoZero_Sf_SwigStatic_attributes,
    swig_TwoZero_Sf_SwigStatic_constants,
    swig_TwoZero_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TwoZero_bases[] = {0,0};
static const char *swig_TwoZero_base_names[] = {"stk::Filter *",0};
static swig_lua_class _wrap_class_TwoZero = { "TwoZero", "TwoZero", &SWIGTYPE_p_stk__TwoZero,_proxy__wrap_new_TwoZero, swig_delete_TwoZero, swig_TwoZero_methods, swig_TwoZero_attributes, &swig_TwoZero_Sf_SwigStatic, swig_TwoZero_meta, swig_TwoZero_bases, swig_TwoZero_base_names };

static int _wrap_new_Vector3D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::Vector3D *result = 0 ;
  
  SWIG_check_num_args("stk::Vector3D::Vector3D",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Vector3D::Vector3D",1,"stk::StkFloat");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Vector3D::Vector3D",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Vector3D::Vector3D",3,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  result = (stk::Vector3D *)new stk::Vector3D(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Vector3D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::StkFloat arg2 ;
  stk::Vector3D *result = 0 ;
  
  SWIG_check_num_args("stk::Vector3D::Vector3D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Vector3D::Vector3D",1,"stk::StkFloat");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Vector3D::Vector3D",2,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::Vector3D *)new stk::Vector3D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Vector3D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Vector3D *result = 0 ;
  
  SWIG_check_num_args("stk::Vector3D::Vector3D",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Vector3D::Vector3D",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Vector3D *)new stk::Vector3D(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Vector3D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *result = 0 ;
  
  SWIG_check_num_args("stk::Vector3D::Vector3D",0,0)
  result = (stk::Vector3D *)new stk::Vector3D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Vector3D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3D(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3D__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector3D__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector3D__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3D__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Vector3D::Vector3D(stk::StkFloat,stk::StkFloat,stk::StkFloat)\n"
    "    stk::Vector3D::Vector3D(stk::StkFloat,stk::StkFloat)\n"
    "    stk::Vector3D::Vector3D(stk::StkFloat)\n"
    "    stk::Vector3D::Vector3D()\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3D_getX(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Vector3D::getX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::getX",1,"stk::Vector3D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_getX",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  result = (stk::StkFloat)(arg1)->getX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3D_getY(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Vector3D::getY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::getY",1,"stk::Vector3D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_getY",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  result = (stk::StkFloat)(arg1)->getY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3D_getZ(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Vector3D::getZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::getZ",1,"stk::Vector3D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_getZ",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  result = (stk::StkFloat)(arg1)->getZ();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3D_getLength(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Vector3D::getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::getLength",1,"stk::Vector3D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_getLength",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  result = (stk::StkFloat)(arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3D_setXYZ(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::Vector3D::setXYZ",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::setXYZ",1,"stk::Vector3D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Vector3D::setXYZ",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Vector3D::setXYZ",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Vector3D::setXYZ",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_setXYZ",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->setXYZ(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3D_setX(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Vector3D::setX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::setX",1,"stk::Vector3D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Vector3D::setX",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_setX",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3D_setY(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Vector3D::setY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::setY",1,"stk::Vector3D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Vector3D::setY",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_setY",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3D_setZ(lua_State* L) {
  int SWIG_arg = 0;
  stk::Vector3D *arg1 = (stk::Vector3D *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Vector3D::setZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Vector3D::setZ",1,"stk::Vector3D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Vector3D::setZ",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Vector3D,0))){
    SWIG_fail_ptr("Vector3D_setZ",1,SWIGTYPE_p_stk__Vector3D);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3D(void *obj) {
stk::Vector3D *arg1 = (stk::Vector3D *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3D_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vector3D_methods[]= {
    { "getX", _wrap_Vector3D_getX},
    { "getY", _wrap_Vector3D_getY},
    { "getZ", _wrap_Vector3D_getZ},
    { "getLength", _wrap_Vector3D_getLength},
    { "setXYZ", _wrap_Vector3D_setXYZ},
    { "setX", _wrap_Vector3D_setX},
    { "setY", _wrap_Vector3D_setY},
    { "setZ", _wrap_Vector3D_setZ},
    {0,0}
};
static swig_lua_method swig_Vector3D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Vector3D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector3D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3D_Sf_SwigStatic = {
    "Vector3D",
    swig_Vector3D_Sf_SwigStatic_methods,
    swig_Vector3D_Sf_SwigStatic_attributes,
    swig_Vector3D_Sf_SwigStatic_constants,
    swig_Vector3D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3D_bases[] = {0};
static const char *swig_Vector3D_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3D = { "Vector3D", "Vector3D", &SWIGTYPE_p_stk__Vector3D,_proxy__wrap_new_Vector3D, swig_delete_Vector3D, swig_Vector3D_methods, swig_Vector3D_attributes, &swig_Vector3D_Sf_SwigStatic, swig_Vector3D_meta, swig_Vector3D_bases, swig_Vector3D_base_names };

static int _wrap_new_VoicForm(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *result = 0 ;
  
  SWIG_check_num_args("stk::VoicForm::VoicForm",0,0)
  result = (stk::VoicForm *)new stk::VoicForm();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__VoicForm,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  
  SWIG_check_num_args("stk::VoicForm::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::clear",1,"stk::VoicForm *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_clear",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::VoicForm::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::setFrequency",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_setFrequency",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_setPhoneme(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::VoicForm::setPhoneme",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::setPhoneme",1,"stk::VoicForm *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("stk::VoicForm::setPhoneme",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_setPhoneme",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->setPhoneme((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_setVoiced(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::VoicForm::setVoiced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::setVoiced",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::setVoiced",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_setVoiced",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setVoiced(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_setUnVoiced(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::VoicForm::setUnVoiced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::setUnVoiced",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::setUnVoiced",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_setUnVoiced",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setUnVoiced(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_setFilterSweepRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::VoicForm::setFilterSweepRate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::setFilterSweepRate",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::setFilterSweepRate",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::VoicForm::setFilterSweepRate",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_setFilterSweepRate",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setFilterSweepRate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_setPitchSweepRate(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::VoicForm::setPitchSweepRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::setPitchSweepRate",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::setPitchSweepRate",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_setPitchSweepRate",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setPitchSweepRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_speak(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  
  SWIG_check_num_args("stk::VoicForm::speak",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::speak",1,"stk::VoicForm *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_speak",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  (arg1)->speak();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_quiet(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  
  SWIG_check_num_args("stk::VoicForm::quiet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::quiet",1,"stk::VoicForm *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_quiet",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  (arg1)->quiet();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::VoicForm::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::noteOn",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::VoicForm::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_noteOn",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::VoicForm::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::noteOff",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_noteOff",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::VoicForm::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::controlChange",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::VoicForm::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_controlChange",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::VoicForm::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::tick",1,"stk::VoicForm *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::VoicForm::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_tick",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::VoicForm::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::tick",1,"stk::VoicForm *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_tick",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::VoicForm::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::tick",1,"stk::VoicForm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::VoicForm::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::VoicForm::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_tick",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("VoicForm_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::VoicForm *arg1 = (stk::VoicForm *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::VoicForm::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::VoicForm::tick",1,"stk::VoicForm *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::VoicForm::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__VoicForm,0))){
    SWIG_fail_ptr("VoicForm_tick",1,SWIGTYPE_p_stk__VoicForm);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("VoicForm_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VoicForm_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__VoicForm, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_VoicForm_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__VoicForm, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_VoicForm_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__VoicForm, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_VoicForm_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__VoicForm, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_VoicForm_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VoicForm_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::VoicForm::tick(unsigned int)\n"
    "    stk::VoicForm::tick()\n"
    "    stk::VoicForm::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::VoicForm::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_VoicForm(void *obj) {
stk::VoicForm *arg1 = (stk::VoicForm *) obj;
delete arg1;
}
static int _proxy__wrap_new_VoicForm(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VoicForm);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VoicForm_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VoicForm_methods[]= {
    { "clear", _wrap_VoicForm_clear},
    { "setFrequency", _wrap_VoicForm_setFrequency},
    { "setPhoneme", _wrap_VoicForm_setPhoneme},
    { "setVoiced", _wrap_VoicForm_setVoiced},
    { "setUnVoiced", _wrap_VoicForm_setUnVoiced},
    { "setFilterSweepRate", _wrap_VoicForm_setFilterSweepRate},
    { "setPitchSweepRate", _wrap_VoicForm_setPitchSweepRate},
    { "speak", _wrap_VoicForm_speak},
    { "quiet", _wrap_VoicForm_quiet},
    { "noteOn", _wrap_VoicForm_noteOn},
    { "noteOff", _wrap_VoicForm_noteOff},
    { "controlChange", _wrap_VoicForm_controlChange},
    { "tick", _wrap_VoicForm_tick},
    {0,0}
};
static swig_lua_method swig_VoicForm_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VoicForm_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VoicForm_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VoicForm_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VoicForm_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VoicForm_Sf_SwigStatic = {
    "VoicForm",
    swig_VoicForm_Sf_SwigStatic_methods,
    swig_VoicForm_Sf_SwigStatic_attributes,
    swig_VoicForm_Sf_SwigStatic_constants,
    swig_VoicForm_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VoicForm_bases[] = {0,0};
static const char *swig_VoicForm_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_VoicForm = { "VoicForm", "VoicForm", &SWIGTYPE_p_stk__VoicForm,_proxy__wrap_new_VoicForm, swig_delete_VoicForm, swig_VoicForm_methods, swig_VoicForm_attributes, &swig_VoicForm_Sf_SwigStatic, swig_VoicForm_meta, swig_VoicForm_bases, swig_VoicForm_base_names };

static int _wrap_new_Voicer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::StkFloat arg1 ;
  stk::Voicer *result = 0 ;
  
  SWIG_check_num_args("stk::Voicer::Voicer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Voicer::Voicer",1,"stk::StkFloat");
  arg1 = (stk::StkFloat)lua_tonumber(L, 1);
  result = (stk::Voicer *)new stk::Voicer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Voicer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Voicer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *result = 0 ;
  
  SWIG_check_num_args("stk::Voicer::Voicer",0,0)
  result = (stk::Voicer *)new stk::Voicer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Voicer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Voicer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Voicer__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Voicer__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Voicer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::Voicer(stk::StkFloat)\n"
    "    stk::Voicer::Voicer()\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_addInstrument__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::Instrmnt *arg2 = (stk::Instrmnt *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("stk::Voicer::addInstrument",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::addInstrument",1,"stk::Voicer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Voicer::addInstrument",2,"stk::Instrmnt *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::addInstrument",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_addInstrument",1,SWIGTYPE_p_stk__Voicer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Voicer_addInstrument",2,SWIGTYPE_p_stk__Instrmnt);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addInstrument(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_addInstrument__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::Instrmnt *arg2 = (stk::Instrmnt *) 0 ;
  
  SWIG_check_num_args("stk::Voicer::addInstrument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::addInstrument",1,"stk::Voicer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Voicer::addInstrument",2,"stk::Instrmnt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_addInstrument",1,SWIGTYPE_p_stk__Voicer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Voicer_addInstrument",2,SWIGTYPE_p_stk__Instrmnt);
  }
  
  (arg1)->addInstrument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_addInstrument(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Voicer_addInstrument__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__Instrmnt, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_addInstrument__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_addInstrument'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::addInstrument(stk::Instrmnt *,int)\n"
    "    stk::Voicer::addInstrument(stk::Instrmnt *)\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_removeInstrument(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::Instrmnt *arg2 = (stk::Instrmnt *) 0 ;
  
  SWIG_check_num_args("stk::Voicer::removeInstrument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::removeInstrument",1,"stk::Voicer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Voicer::removeInstrument",2,"stk::Instrmnt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_removeInstrument",1,SWIGTYPE_p_stk__Voicer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__Instrmnt,0))){
    SWIG_fail_ptr("Voicer_removeInstrument",2,SWIGTYPE_p_stk__Instrmnt);
  }
  
  (arg1)->removeInstrument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_noteOn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  long result;
  
  SWIG_check_num_args("stk::Voicer::noteOn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::noteOn",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::noteOn",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Voicer::noteOn",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_noteOn",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (long)(arg1)->noteOn(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_noteOn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  long result;
  
  SWIG_check_num_args("stk::Voicer::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::noteOn",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_noteOn",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  result = (long)(arg1)->noteOn(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_noteOn(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_noteOn__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Voicer_noteOn__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_noteOn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::noteOn(stk::StkFloat,stk::StkFloat,int)\n"
    "    stk::Voicer::noteOn(stk::StkFloat,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_noteOff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("stk::Voicer::noteOff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::noteOff",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::noteOff",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::noteOff",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Voicer::noteOff",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_noteOff",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->noteOff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_noteOff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Voicer::noteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::noteOff",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::noteOff",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::noteOff",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_noteOff",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_noteOff__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Voicer::noteOff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::noteOff",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::noteOff",2,"long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::noteOff",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_noteOff",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_noteOff(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_noteOff__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_noteOff__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Voicer_noteOff__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_noteOff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::noteOff(stk::StkFloat,stk::StkFloat,int)\n"
    "    stk::Voicer::noteOff(stk::StkFloat,stk::StkFloat)\n"
    "    stk::Voicer::noteOff(long,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_setFrequency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("stk::Voicer::setFrequency",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::setFrequency",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::setFrequency",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::setFrequency",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_setFrequency",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setFrequency(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_setFrequency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Voicer::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::setFrequency",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_setFrequency",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_setFrequency__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Voicer::setFrequency",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::setFrequency",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::setFrequency",2,"long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::setFrequency",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_setFrequency",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->setFrequency(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_setFrequency(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Voicer_setFrequency__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_setFrequency__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_setFrequency__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_setFrequency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::setFrequency(stk::StkFloat,int)\n"
    "    stk::Voicer::setFrequency(stk::StkFloat)\n"
    "    stk::Voicer::setFrequency(long,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_pitchBend__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("stk::Voicer::pitchBend",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::pitchBend",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::pitchBend",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::pitchBend",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_pitchBend",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->pitchBend(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_pitchBend__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Voicer::pitchBend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::pitchBend",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::pitchBend",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_pitchBend",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->pitchBend(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_pitchBend__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Voicer::pitchBend",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::pitchBend",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::pitchBend",2,"long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::pitchBend",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_pitchBend",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->pitchBend(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_pitchBend(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Voicer_pitchBend__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_pitchBend__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_pitchBend__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_pitchBend'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::pitchBend(stk::StkFloat,int)\n"
    "    stk::Voicer::pitchBend(stk::StkFloat)\n"
    "    stk::Voicer::pitchBend(long,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_controlChange__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("stk::Voicer::controlChange",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::controlChange",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::controlChange",3,"stk::StkFloat");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Voicer::controlChange",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_controlChange",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->controlChange(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_controlChange__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Voicer::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::controlChange",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_controlChange",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_controlChange__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  long arg2 ;
  int arg3 ;
  stk::StkFloat arg4 ;
  
  SWIG_check_num_args("stk::Voicer::controlChange",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::controlChange",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::controlChange",2,"long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::controlChange",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Voicer::controlChange",4,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_controlChange",1,SWIGTYPE_p_stk__Voicer);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (stk::StkFloat)lua_tonumber(L, 4);
  (arg1)->controlChange(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_controlChange(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_controlChange__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Voicer_controlChange__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Voicer_controlChange__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_controlChange'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::controlChange(int,stk::StkFloat,int)\n"
    "    stk::Voicer::controlChange(int,stk::StkFloat)\n"
    "    stk::Voicer::controlChange(long,int,stk::StkFloat)\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_silence(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  
  SWIG_check_num_args("stk::Voicer::silence",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::silence",1,"stk::Voicer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_silence",1,SWIGTYPE_p_stk__Voicer);
  }
  
  (arg1)->silence();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_channelsOut(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("stk::Voicer::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::channelsOut",1,"stk::Voicer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_channelsOut",1,SWIGTYPE_p_stk__Voicer);
  }
  
  result = (unsigned int)((stk::Voicer const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_lastFrame(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Voicer::lastFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::lastFrame",1,"stk::Voicer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_lastFrame",1,SWIGTYPE_p_stk__Voicer);
  }
  
  result = (stk::StkFrames *) &((stk::Voicer const *)arg1)->lastFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Voicer::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::lastOut",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_lastOut",1,SWIGTYPE_p_stk__Voicer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Voicer::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::lastOut",1,"stk::Voicer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_lastOut",1,SWIGTYPE_p_stk__Voicer);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Voicer_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Voicer_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::lastOut(unsigned int)\n"
    "    stk::Voicer::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_Voicer_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Voicer::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::tick",1,"stk::Voicer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Voicer::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_tick",1,SWIGTYPE_p_stk__Voicer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Voicer::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::tick",1,"stk::Voicer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_tick",1,SWIGTYPE_p_stk__Voicer);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Voicer::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::tick",1,"stk::Voicer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Voicer::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Voicer::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_tick",1,SWIGTYPE_p_stk__Voicer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Voicer_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Voicer *arg1 = (stk::Voicer *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Voicer::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Voicer::tick",1,"stk::Voicer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Voicer::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Voicer,0))){
    SWIG_fail_ptr("Voicer_tick",1,SWIGTYPE_p_stk__Voicer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Voicer_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Voicer_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Voicer_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Voicer_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Voicer_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Voicer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Voicer_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Voicer_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Voicer::tick(unsigned int)\n"
    "    stk::Voicer::tick()\n"
    "    stk::Voicer::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Voicer::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Voicer(void *obj) {
stk::Voicer *arg1 = (stk::Voicer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Voicer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Voicer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Voicer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Voicer_methods[]= {
    { "addInstrument", _wrap_Voicer_addInstrument},
    { "removeInstrument", _wrap_Voicer_removeInstrument},
    { "noteOn", _wrap_Voicer_noteOn},
    { "noteOff", _wrap_Voicer_noteOff},
    { "setFrequency", _wrap_Voicer_setFrequency},
    { "pitchBend", _wrap_Voicer_pitchBend},
    { "controlChange", _wrap_Voicer_controlChange},
    { "silence", _wrap_Voicer_silence},
    { "channelsOut", _wrap_Voicer_channelsOut},
    { "lastFrame", _wrap_Voicer_lastFrame},
    { "lastOut", _wrap_Voicer_lastOut},
    { "tick", _wrap_Voicer_tick},
    {0,0}
};
static swig_lua_method swig_Voicer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Voicer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Voicer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Voicer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Voicer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Voicer_Sf_SwigStatic = {
    "Voicer",
    swig_Voicer_Sf_SwigStatic_methods,
    swig_Voicer_Sf_SwigStatic_attributes,
    swig_Voicer_Sf_SwigStatic_constants,
    swig_Voicer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Voicer_bases[] = {0};
static const char *swig_Voicer_base_names[] = {0};
static swig_lua_class _wrap_class_Voicer = { "Voicer", "Voicer", &SWIGTYPE_p_stk__Voicer,_proxy__wrap_new_Voicer, swig_delete_Voicer, swig_Voicer_methods, swig_Voicer_attributes, &swig_Voicer_Sf_SwigStatic, swig_Voicer_meta, swig_Voicer_bases, swig_Voicer_base_names };

static int _wrap_new_Whistle(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *result = 0 ;
  
  SWIG_check_num_args("stk::Whistle::Whistle",0,0)
  result = (stk::Whistle *)new stk::Whistle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Whistle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_clear(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  
  SWIG_check_num_args("stk::Whistle::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::clear",1,"stk::Whistle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_clear",1,SWIGTYPE_p_stk__Whistle);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Whistle::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::setFrequency",1,"stk::Whistle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Whistle::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_setFrequency",1,SWIGTYPE_p_stk__Whistle);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_startBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Whistle::startBlowing",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::startBlowing",1,"stk::Whistle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Whistle::startBlowing",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Whistle::startBlowing",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_startBlowing",1,SWIGTYPE_p_stk__Whistle);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->startBlowing(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_stopBlowing(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Whistle::stopBlowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::stopBlowing",1,"stk::Whistle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Whistle::stopBlowing",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_stopBlowing",1,SWIGTYPE_p_stk__Whistle);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->stopBlowing(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Whistle::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::noteOn",1,"stk::Whistle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Whistle::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Whistle::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_noteOn",1,SWIGTYPE_p_stk__Whistle);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Whistle::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::noteOff",1,"stk::Whistle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Whistle::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_noteOff",1,SWIGTYPE_p_stk__Whistle);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Whistle::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::controlChange",1,"stk::Whistle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Whistle::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Whistle::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_controlChange",1,SWIGTYPE_p_stk__Whistle);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Whistle::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::tick",1,"stk::Whistle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Whistle::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_tick",1,SWIGTYPE_p_stk__Whistle);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Whistle::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::tick",1,"stk::Whistle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_tick",1,SWIGTYPE_p_stk__Whistle);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Whistle::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::tick",1,"stk::Whistle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Whistle::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Whistle::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_tick",1,SWIGTYPE_p_stk__Whistle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Whistle_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Whistle *arg1 = (stk::Whistle *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Whistle::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Whistle::tick",1,"stk::Whistle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Whistle::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Whistle,0))){
    SWIG_fail_ptr("Whistle_tick",1,SWIGTYPE_p_stk__Whistle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Whistle_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Whistle_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Whistle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Whistle_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Whistle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Whistle_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Whistle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Whistle_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Whistle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Whistle_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Whistle_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Whistle::tick(unsigned int)\n"
    "    stk::Whistle::tick()\n"
    "    stk::Whistle::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Whistle::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Whistle(void *obj) {
stk::Whistle *arg1 = (stk::Whistle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Whistle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Whistle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Whistle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Whistle_methods[]= {
    { "clear", _wrap_Whistle_clear},
    { "setFrequency", _wrap_Whistle_setFrequency},
    { "startBlowing", _wrap_Whistle_startBlowing},
    { "stopBlowing", _wrap_Whistle_stopBlowing},
    { "noteOn", _wrap_Whistle_noteOn},
    { "noteOff", _wrap_Whistle_noteOff},
    { "controlChange", _wrap_Whistle_controlChange},
    { "tick", _wrap_Whistle_tick},
    {0,0}
};
static swig_lua_method swig_Whistle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Whistle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Whistle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Whistle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Whistle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Whistle_Sf_SwigStatic = {
    "Whistle",
    swig_Whistle_Sf_SwigStatic_methods,
    swig_Whistle_Sf_SwigStatic_attributes,
    swig_Whistle_Sf_SwigStatic_constants,
    swig_Whistle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Whistle_bases[] = {0,0};
static const char *swig_Whistle_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Whistle = { "Whistle", "Whistle", &SWIGTYPE_p_stk__Whistle,_proxy__wrap_new_Whistle, swig_delete_Whistle, swig_Whistle_methods, swig_Whistle_attributes, &swig_Whistle_Sf_SwigStatic, swig_Whistle_meta, swig_Whistle_bases, swig_Whistle_base_names };

static int _wrap_new_Wurley(lua_State* L) {
  int SWIG_arg = 0;
  stk::Wurley *result = 0 ;
  
  SWIG_check_num_args("stk::Wurley::Wurley",0,0)
  result = (stk::Wurley *)new stk::Wurley();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Wurley,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wurley_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Wurley::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Wurley::setFrequency",1,"stk::Wurley *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Wurley::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Wurley,0))){
    SWIG_fail_ptr("Wurley_setFrequency",1,SWIGTYPE_p_stk__Wurley);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wurley_noteOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFloat arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Wurley::noteOn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Wurley::noteOn",1,"stk::Wurley *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Wurley::noteOn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Wurley::noteOn",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Wurley,0))){
    SWIG_fail_ptr("Wurley_noteOn",1,SWIGTYPE_p_stk__Wurley);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->noteOn(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wurley_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Wurley::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Wurley::tick",1,"stk::Wurley *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Wurley::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Wurley,0))){
    SWIG_fail_ptr("Wurley_tick",1,SWIGTYPE_p_stk__Wurley);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wurley_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Wurley::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Wurley::tick",1,"stk::Wurley *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Wurley,0))){
    SWIG_fail_ptr("Wurley_tick",1,SWIGTYPE_p_stk__Wurley);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wurley_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Wurley::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Wurley::tick",1,"stk::Wurley *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Wurley::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Wurley::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Wurley,0))){
    SWIG_fail_ptr("Wurley_tick",1,SWIGTYPE_p_stk__Wurley);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Wurley_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wurley_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Wurley *arg1 = (stk::Wurley *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Wurley::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Wurley::tick",1,"stk::Wurley *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Wurley::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Wurley,0))){
    SWIG_fail_ptr("Wurley_tick",1,SWIGTYPE_p_stk__Wurley);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Wurley_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Wurley_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Wurley, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Wurley_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Wurley, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Wurley_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Wurley, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Wurley_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Wurley, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Wurley_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Wurley_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Wurley::tick(unsigned int)\n"
    "    stk::Wurley::tick()\n"
    "    stk::Wurley::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Wurley::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Wurley(void *obj) {
stk::Wurley *arg1 = (stk::Wurley *) obj;
delete arg1;
}
static int _proxy__wrap_new_Wurley(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Wurley);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Wurley_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Wurley_methods[]= {
    { "setFrequency", _wrap_Wurley_setFrequency},
    { "noteOn", _wrap_Wurley_noteOn},
    { "tick", _wrap_Wurley_tick},
    {0,0}
};
static swig_lua_method swig_Wurley_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Wurley_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Wurley_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Wurley_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Wurley_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Wurley_Sf_SwigStatic = {
    "Wurley",
    swig_Wurley_Sf_SwigStatic_methods,
    swig_Wurley_Sf_SwigStatic_attributes,
    swig_Wurley_Sf_SwigStatic_constants,
    swig_Wurley_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Wurley_bases[] = {0,0};
static const char *swig_Wurley_base_names[] = {"stk::FM *",0};
static swig_lua_class _wrap_class_Wurley = { "Wurley", "Wurley", &SWIGTYPE_p_stk__Wurley,_proxy__wrap_new_Wurley, swig_delete_Wurley, swig_Wurley_methods, swig_Wurley_attributes, &swig_Wurley_Sf_SwigStatic, swig_Wurley_meta, swig_Wurley_bases, swig_Wurley_base_names };

static int _wrap_Socket_close(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("stk::Socket::close",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Socket::close",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  stk::Socket::close(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_id(lua_State* L) {
  int SWIG_arg = 0;
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Socket::id",1,"stk::Socket const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Socket,0))){
    SWIG_fail_ptr("Socket_id",1,SWIGTYPE_p_stk__Socket);
  }
  
  result = (int)((stk::Socket const *)arg1)->id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_port(lua_State* L) {
  int SWIG_arg = 0;
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Socket::port",1,"stk::Socket const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Socket,0))){
    SWIG_fail_ptr("Socket_port",1,SWIGTYPE_p_stk__Socket);
  }
  
  result = (int)((stk::Socket const *)arg1)->port();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_isValid(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool result;
  
  SWIG_check_num_args("stk::Socket::isValid",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Socket::isValid",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (bool)stk::Socket::isValid(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_setBlocking(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  bool arg2 ;
  
  SWIG_check_num_args("stk::Socket::setBlocking",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Socket::setBlocking",1,"int");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("stk::Socket::setBlocking",2,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  stk::Socket::setBlocking(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_writeBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::writeBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Socket::writeBuffer",1,"stk::Socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Socket::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Socket::writeBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Socket::writeBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Socket,0))){
    SWIG_fail_ptr("Socket_writeBuffer",1,SWIGTYPE_p_stk__Socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Socket_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_writeBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::writeBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Socket::writeBuffer",1,"stk::Socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Socket::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Socket::writeBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Socket,0))){
    SWIG_fail_ptr("Socket_writeBuffer",1,SWIGTYPE_p_stk__Socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Socket_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_readBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::readBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Socket::readBuffer",1,"stk::Socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Socket::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Socket::readBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Socket::readBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Socket,0))){
    SWIG_fail_ptr("Socket_readBuffer",1,SWIGTYPE_p_stk__Socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Socket_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_readBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Socket *arg1 = (stk::Socket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::readBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Socket::readBuffer",1,"stk::Socket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Socket::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Socket::readBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Socket,0))){
    SWIG_fail_ptr("Socket_readBuffer",1,SWIGTYPE_p_stk__Socket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Socket_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->readBuffer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_writeBuffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::writeBuffer",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Socket::writeBuffer",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Socket::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Socket::writeBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Socket::writeBuffer",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Socket_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)stk::Socket::writeBuffer(arg1,(void const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_writeBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Socket_writeBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Socket_writeBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Socket_writeBuffer__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Socket_writeBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Socket::writeBuffer(void const *,long,int)\n"
    "    stk::Socket::writeBuffer(void const *,long)\n"
    "    stk::Socket::writeBuffer(int,void const *,long,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Socket_readBuffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::Socket::readBuffer",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::Socket::readBuffer",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::Socket::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Socket::readBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::Socket::readBuffer",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Socket_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)stk::Socket::readBuffer(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Socket_readBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Socket_readBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Socket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Socket_readBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Socket_readBuffer__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Socket_readBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Socket::readBuffer(void *,long,int)\n"
    "    stk::Socket::readBuffer(void *,long)\n"
    "    stk::Socket::readBuffer(int,void *,long,int)\n");
  lua_error(L);return 0;
}


static void swig_delete_Socket(void *obj) {
stk::Socket *arg1 = (stk::Socket *) obj;
delete arg1;
}
static swig_lua_attribute swig_Socket_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Socket_methods[]= {
    { "id", _wrap_Socket_id},
    { "port", _wrap_Socket_port},
    {0,0}
};
static swig_lua_method swig_Socket_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Socket_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Socket_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PROTO_TCP", stk::Socket::PROTO_TCP)},
    {SWIG_LUA_CONSTTAB_INT("PROTO_UDP", stk::Socket::PROTO_UDP)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Socket_Sf_SwigStatic_methods[]= {
    { "close", _wrap_Socket_close},
    { "isValid", _wrap_Socket_isValid},
    { "setBlocking", _wrap_Socket_setBlocking},
    { "writeBuffer", _wrap_Socket_writeBuffer},
    { "readBuffer", _wrap_Socket_readBuffer},
    {0,0}
};
static swig_lua_class* swig_Socket_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Socket_Sf_SwigStatic = {
    "Socket",
    swig_Socket_Sf_SwigStatic_methods,
    swig_Socket_Sf_SwigStatic_attributes,
    swig_Socket_Sf_SwigStatic_constants,
    swig_Socket_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Socket_bases[] = {0};
static const char *swig_Socket_base_names[] = {0};
static swig_lua_class _wrap_class_Socket = { "Socket", "Socket", &SWIGTYPE_p_stk__Socket,0, swig_delete_Socket, swig_Socket_methods, swig_Socket_attributes, &swig_Socket_Sf_SwigStatic, swig_Socket_meta, swig_Socket_bases, swig_Socket_base_names };

static int _wrap_new_TcpClient__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  stk::TcpClient *result = 0 ;
  
  SWIG_check_num_args("stk::TcpClient::TcpClient",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::TcpClient::TcpClient",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::TcpClient::TcpClient",2,"std::string");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_TcpClient",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (stk::TcpClient *)new stk::TcpClient(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TcpClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TcpClient__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::TcpClient *result = 0 ;
  
  SWIG_check_num_args("stk::TcpClient::TcpClient",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::TcpClient::TcpClient",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (stk::TcpClient *)new stk::TcpClient(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TcpClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TcpClient(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TcpClient__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_TcpClient__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TcpClient'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TcpClient::TcpClient(int,std::string)\n"
    "    stk::TcpClient::TcpClient(int)\n");
  lua_error(L);return 0;
}


static int _wrap_TcpClient_connect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string *argp3 ;
  int result;
  
  SWIG_check_num_args("stk::TcpClient::connect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpClient::connect",1,"stk::TcpClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TcpClient::connect",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::TcpClient::connect",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpClient,0))){
    SWIG_fail_ptr("TcpClient_connect",1,SWIGTYPE_p_stk__TcpClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TcpClient_connect",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  result = (int)(arg1)->connect(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpClient_connect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("stk::TcpClient::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpClient::connect",1,"stk::TcpClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::TcpClient::connect",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpClient,0))){
    SWIG_fail_ptr("TcpClient_connect",1,SWIGTYPE_p_stk__TcpClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->connect(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpClient_connect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TcpClient_connect__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TcpClient_connect__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TcpClient_connect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TcpClient::connect(int,std::string)\n"
    "    stk::TcpClient::connect(int)\n");
  lua_error(L);return 0;
}


static int _wrap_TcpClient_writeBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::TcpClient::writeBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpClient::writeBuffer",1,"stk::TcpClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpClient::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpClient::writeBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TcpClient::writeBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpClient,0))){
    SWIG_fail_ptr("TcpClient_writeBuffer",1,SWIGTYPE_p_stk__TcpClient);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpClient_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpClient_writeBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::TcpClient::writeBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpClient::writeBuffer",1,"stk::TcpClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpClient::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpClient::writeBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpClient,0))){
    SWIG_fail_ptr("TcpClient_writeBuffer",1,SWIGTYPE_p_stk__TcpClient);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpClient_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpClient_writeBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TcpClient_writeBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TcpClient_writeBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TcpClient_writeBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TcpClient::writeBuffer(void const *,long,int)\n"
    "    stk::TcpClient::writeBuffer(void const *,long)\n");
  lua_error(L);return 0;
}


static int _wrap_TcpClient_readBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::TcpClient::readBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpClient::readBuffer",1,"stk::TcpClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpClient::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpClient::readBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TcpClient::readBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpClient,0))){
    SWIG_fail_ptr("TcpClient_readBuffer",1,SWIGTYPE_p_stk__TcpClient);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpClient_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpClient_readBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpClient *arg1 = (stk::TcpClient *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::TcpClient::readBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpClient::readBuffer",1,"stk::TcpClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpClient::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpClient::readBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpClient,0))){
    SWIG_fail_ptr("TcpClient_readBuffer",1,SWIGTYPE_p_stk__TcpClient);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpClient_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->readBuffer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpClient_readBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TcpClient_readBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpClient, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TcpClient_readBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TcpClient_readBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TcpClient::readBuffer(void *,long,int)\n"
    "    stk::TcpClient::readBuffer(void *,long)\n");
  lua_error(L);return 0;
}


static void swig_delete_TcpClient(void *obj) {
stk::TcpClient *arg1 = (stk::TcpClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_TcpClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TcpClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TcpClient_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TcpClient_methods[]= {
    { "connect", _wrap_TcpClient_connect},
    { "writeBuffer", _wrap_TcpClient_writeBuffer},
    { "readBuffer", _wrap_TcpClient_readBuffer},
    {0,0}
};
static swig_lua_method swig_TcpClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TcpClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TcpClient_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TcpClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TcpClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TcpClient_Sf_SwigStatic = {
    "TcpClient",
    swig_TcpClient_Sf_SwigStatic_methods,
    swig_TcpClient_Sf_SwigStatic_attributes,
    swig_TcpClient_Sf_SwigStatic_constants,
    swig_TcpClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TcpClient_bases[] = {0,0};
static const char *swig_TcpClient_base_names[] = {"stk::Socket *",0};
static swig_lua_class _wrap_class_TcpClient = { "TcpClient", "TcpClient", &SWIGTYPE_p_stk__TcpClient,_proxy__wrap_new_TcpClient, swig_delete_TcpClient, swig_TcpClient_methods, swig_TcpClient_attributes, &swig_TcpClient_Sf_SwigStatic, swig_TcpClient_meta, swig_TcpClient_bases, swig_TcpClient_base_names };

static int _wrap_new_TcpServer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::TcpServer *result = 0 ;
  
  SWIG_check_num_args("stk::TcpServer::TcpServer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::TcpServer::TcpServer",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (stk::TcpServer *)new stk::TcpServer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TcpServer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TcpServer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpServer *result = 0 ;
  
  SWIG_check_num_args("stk::TcpServer::TcpServer",0,0)
  result = (stk::TcpServer *)new stk::TcpServer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__TcpServer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TcpServer(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TcpServer__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TcpServer__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TcpServer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TcpServer::TcpServer(int)\n"
    "    stk::TcpServer::TcpServer()\n");
  lua_error(L);return 0;
}


static int _wrap_TcpServer_accept(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  int result;
  
  SWIG_check_num_args("stk::TcpServer::accept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpServer::accept",1,"stk::TcpServer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpServer,0))){
    SWIG_fail_ptr("TcpServer_accept",1,SWIGTYPE_p_stk__TcpServer);
  }
  
  result = (int)(arg1)->accept();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpServer_writeBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::TcpServer::writeBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpServer::writeBuffer",1,"stk::TcpServer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpServer::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpServer::writeBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TcpServer::writeBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpServer,0))){
    SWIG_fail_ptr("TcpServer_writeBuffer",1,SWIGTYPE_p_stk__TcpServer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpServer_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpServer_writeBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::TcpServer::writeBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpServer::writeBuffer",1,"stk::TcpServer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpServer::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpServer::writeBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpServer,0))){
    SWIG_fail_ptr("TcpServer_writeBuffer",1,SWIGTYPE_p_stk__TcpServer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpServer_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpServer_writeBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TcpServer_writeBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TcpServer_writeBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TcpServer_writeBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TcpServer::writeBuffer(void const *,long,int)\n"
    "    stk::TcpServer::writeBuffer(void const *,long)\n");
  lua_error(L);return 0;
}


static int _wrap_TcpServer_readBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::TcpServer::readBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpServer::readBuffer",1,"stk::TcpServer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpServer::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpServer::readBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::TcpServer::readBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpServer,0))){
    SWIG_fail_ptr("TcpServer_readBuffer",1,SWIGTYPE_p_stk__TcpServer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpServer_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpServer_readBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::TcpServer *arg1 = (stk::TcpServer *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::TcpServer::readBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::TcpServer::readBuffer",1,"stk::TcpServer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::TcpServer::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::TcpServer::readBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__TcpServer,0))){
    SWIG_fail_ptr("TcpServer_readBuffer",1,SWIGTYPE_p_stk__TcpServer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"TcpServer_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->readBuffer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TcpServer_readBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TcpServer_readBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__TcpServer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TcpServer_readBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TcpServer_readBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::TcpServer::readBuffer(void *,long,int)\n"
    "    stk::TcpServer::readBuffer(void *,long)\n");
  lua_error(L);return 0;
}


static void swig_delete_TcpServer(void *obj) {
stk::TcpServer *arg1 = (stk::TcpServer *) obj;
delete arg1;
}
static int _proxy__wrap_new_TcpServer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TcpServer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TcpServer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TcpServer_methods[]= {
    { "accept", _wrap_TcpServer_accept},
    { "writeBuffer", _wrap_TcpServer_writeBuffer},
    { "readBuffer", _wrap_TcpServer_readBuffer},
    {0,0}
};
static swig_lua_method swig_TcpServer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TcpServer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TcpServer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TcpServer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TcpServer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TcpServer_Sf_SwigStatic = {
    "TcpServer",
    swig_TcpServer_Sf_SwigStatic_methods,
    swig_TcpServer_Sf_SwigStatic_attributes,
    swig_TcpServer_Sf_SwigStatic_constants,
    swig_TcpServer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TcpServer_bases[] = {0,0};
static const char *swig_TcpServer_base_names[] = {"stk::Socket *",0};
static swig_lua_class _wrap_class_TcpServer = { "TcpServer", "TcpServer", &SWIGTYPE_p_stk__TcpServer,_proxy__wrap_new_TcpServer, swig_delete_TcpServer, swig_TcpServer_methods, swig_TcpServer_attributes, &swig_TcpServer_Sf_SwigStatic, swig_TcpServer_meta, swig_TcpServer_bases, swig_TcpServer_base_names };

static int _wrap_new_UdpSocket__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::UdpSocket *result = 0 ;
  
  SWIG_check_num_args("stk::UdpSocket::UdpSocket",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::UdpSocket::UdpSocket",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (stk::UdpSocket *)new stk::UdpSocket(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__UdpSocket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UdpSocket__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *result = 0 ;
  
  SWIG_check_num_args("stk::UdpSocket::UdpSocket",0,0)
  result = (stk::UdpSocket *)new stk::UdpSocket();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__UdpSocket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UdpSocket(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UdpSocket__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UdpSocket__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UdpSocket'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::UdpSocket::UdpSocket(int)\n"
    "    stk::UdpSocket::UdpSocket()\n");
  lua_error(L);return 0;
}


static int _wrap_UdpSocket_setDestination__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("stk::UdpSocket::setDestination",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::setDestination",1,"stk::UdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::UdpSocket::setDestination",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::UdpSocket::setDestination",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_setDestination",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("UdpSocket_setDestination",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->setDestination(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_setDestination__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("stk::UdpSocket::setDestination",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::setDestination",1,"stk::UdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::UdpSocket::setDestination",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_setDestination",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDestination(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_setDestination__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  
  SWIG_check_num_args("stk::UdpSocket::setDestination",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::setDestination",1,"stk::UdpSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_setDestination",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  (arg1)->setDestination();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_setDestination(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_UdpSocket_setDestination__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UdpSocket_setDestination__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_UdpSocket_setDestination__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UdpSocket_setDestination'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::UdpSocket::setDestination(int,std::string)\n"
    "    stk::UdpSocket::setDestination(int)\n"
    "    stk::UdpSocket::setDestination()\n");
  lua_error(L);return 0;
}


static int _wrap_UdpSocket_writeBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::UdpSocket::writeBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::writeBuffer",1,"stk::UdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::UdpSocket::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::UdpSocket::writeBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::UdpSocket::writeBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_writeBuffer",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"UdpSocket_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_writeBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::UdpSocket::writeBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::writeBuffer",1,"stk::UdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::UdpSocket::writeBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::UdpSocket::writeBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_writeBuffer",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"UdpSocket_writeBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->writeBuffer((void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_writeBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UdpSocket_writeBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UdpSocket_writeBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UdpSocket_writeBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::UdpSocket::writeBuffer(void const *,long,int)\n"
    "    stk::UdpSocket::writeBuffer(void const *,long)\n");
  lua_error(L);return 0;
}


static int _wrap_UdpSocket_readBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::UdpSocket::readBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::readBuffer",1,"stk::UdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::UdpSocket::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::UdpSocket::readBuffer",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::UdpSocket::readBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_readBuffer",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"UdpSocket_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readBuffer(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_readBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int result;
  
  SWIG_check_num_args("stk::UdpSocket::readBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::readBuffer",1,"stk::UdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::UdpSocket::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::UdpSocket::readBuffer",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_readBuffer",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"UdpSocket_readBuffer");
  arg3 = (long)lua_tonumber(L, 3);
  result = (int)(arg1)->readBuffer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_readBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_UdpSocket_readBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UdpSocket_readBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UdpSocket_readBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::UdpSocket::readBuffer(void *,long,int)\n"
    "    stk::UdpSocket::readBuffer(void *,long)\n");
  lua_error(L);return 0;
}


static int _wrap_UdpSocket_writeBufferTo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  std::string arg5 ;
  int arg6 ;
  std::string *argp5 ;
  int result;
  
  SWIG_check_num_args("stk::UdpSocket::writeBufferTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",1,"stk::UdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",5,"std::string");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_writeBufferTo",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"UdpSocket_writeBufferTo");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("UdpSocket_writeBufferTo",5,SWIGTYPE_p_std__string);
  }
  arg5 = *argp5;
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->writeBufferTo((void const *)arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_writeBufferTo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  std::string arg5 ;
  std::string *argp5 ;
  int result;
  
  SWIG_check_num_args("stk::UdpSocket::writeBufferTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",1,"stk::UdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",5,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_writeBufferTo",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"UdpSocket_writeBufferTo");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("UdpSocket_writeBufferTo",5,SWIGTYPE_p_std__string);
  }
  arg5 = *argp5;
  
  result = (int)(arg1)->writeBufferTo((void const *)arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_writeBufferTo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::UdpSocket *arg1 = (stk::UdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  long arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("stk::UdpSocket::writeBufferTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",1,"stk::UdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",3,"long");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::UdpSocket::writeBufferTo",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__UdpSocket,0))){
    SWIG_fail_ptr("UdpSocket_writeBufferTo",1,SWIGTYPE_p_stk__UdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"UdpSocket_writeBufferTo");
  arg3 = (long)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeBufferTo((void const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UdpSocket_writeBufferTo(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_UdpSocket_writeBufferTo__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_UdpSocket_writeBufferTo__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__UdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_UdpSocket_writeBufferTo__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UdpSocket_writeBufferTo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::UdpSocket::writeBufferTo(void const *,long,int,std::string,int)\n"
    "    stk::UdpSocket::writeBufferTo(void const *,long,int,std::string)\n"
    "    stk::UdpSocket::writeBufferTo(void const *,long,int)\n");
  lua_error(L);return 0;
}


static void swig_delete_UdpSocket(void *obj) {
stk::UdpSocket *arg1 = (stk::UdpSocket *) obj;
delete arg1;
}
static int _proxy__wrap_new_UdpSocket(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UdpSocket);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UdpSocket_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UdpSocket_methods[]= {
    { "setDestination", _wrap_UdpSocket_setDestination},
    { "writeBuffer", _wrap_UdpSocket_writeBuffer},
    { "readBuffer", _wrap_UdpSocket_readBuffer},
    { "writeBufferTo", _wrap_UdpSocket_writeBufferTo},
    {0,0}
};
static swig_lua_method swig_UdpSocket_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UdpSocket_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UdpSocket_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UdpSocket_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UdpSocket_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UdpSocket_Sf_SwigStatic = {
    "UdpSocket",
    swig_UdpSocket_Sf_SwigStatic_methods,
    swig_UdpSocket_Sf_SwigStatic_attributes,
    swig_UdpSocket_Sf_SwigStatic_constants,
    swig_UdpSocket_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UdpSocket_bases[] = {0,0};
static const char *swig_UdpSocket_base_names[] = {"stk::Socket *",0};
static swig_lua_class _wrap_class_UdpSocket = { "UdpSocket", "UdpSocket", &SWIGTYPE_p_stk__UdpSocket,_proxy__wrap_new_UdpSocket, swig_delete_UdpSocket, swig_UdpSocket_methods, swig_UdpSocket_attributes, &swig_UdpSocket_Sf_SwigStatic, swig_UdpSocket_meta, swig_UdpSocket_bases, swig_UdpSocket_base_names };

static int _wrap_new_Mutex(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mutex *result = 0 ;
  
  SWIG_check_num_args("stk::Mutex::Mutex",0,0)
  result = (stk::Mutex *)new stk::Mutex();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Mutex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mutex_lock(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  
  SWIG_check_num_args("stk::Mutex::lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mutex::lock",1,"stk::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mutex,0))){
    SWIG_fail_ptr("Mutex_lock",1,SWIGTYPE_p_stk__Mutex);
  }
  
  (arg1)->lock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mutex_unlock(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  
  SWIG_check_num_args("stk::Mutex::unlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mutex::unlock",1,"stk::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mutex,0))){
    SWIG_fail_ptr("Mutex_unlock",1,SWIGTYPE_p_stk__Mutex);
  }
  
  (arg1)->unlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mutex_wait(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  
  SWIG_check_num_args("stk::Mutex::wait",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mutex::wait",1,"stk::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mutex,0))){
    SWIG_fail_ptr("Mutex_wait",1,SWIGTYPE_p_stk__Mutex);
  }
  
  (arg1)->wait();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mutex_signal(lua_State* L) {
  int SWIG_arg = 0;
  stk::Mutex *arg1 = (stk::Mutex *) 0 ;
  
  SWIG_check_num_args("stk::Mutex::signal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Mutex::signal",1,"stk::Mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Mutex,0))){
    SWIG_fail_ptr("Mutex_signal",1,SWIGTYPE_p_stk__Mutex);
  }
  
  (arg1)->signal();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mutex(void *obj) {
stk::Mutex *arg1 = (stk::Mutex *) obj;
delete arg1;
}
static int _proxy__wrap_new_Mutex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Mutex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Mutex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mutex_methods[]= {
    { "lock", _wrap_Mutex_lock},
    { "unlock", _wrap_Mutex_unlock},
    { "wait", _wrap_Mutex_wait},
    { "signal", _wrap_Mutex_signal},
    {0,0}
};
static swig_lua_method swig_Mutex_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Mutex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Mutex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Mutex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Mutex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Mutex_Sf_SwigStatic = {
    "Mutex",
    swig_Mutex_Sf_SwigStatic_methods,
    swig_Mutex_Sf_SwigStatic_attributes,
    swig_Mutex_Sf_SwigStatic_constants,
    swig_Mutex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Mutex_bases[] = {0};
static const char *swig_Mutex_base_names[] = {0};
static swig_lua_class _wrap_class_Mutex = { "Mutex", "Mutex", &SWIGTYPE_p_stk__Mutex,_proxy__wrap_new_Mutex, swig_delete_Mutex, swig_Mutex_methods, swig_Mutex_attributes, &swig_Mutex_Sf_SwigStatic, swig_Mutex_meta, swig_Mutex_bases, swig_Mutex_base_names };

static int _wrap_new_Thread(lua_State* L) {
  int SWIG_arg = 0;
  stk::Thread *result = 0 ;
  
  SWIG_check_num_args("stk::Thread::Thread",0,0)
  result = (stk::Thread *)new stk::Thread();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__Thread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_start__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  THREAD_FUNCTION arg2 ;
  void *arg3 = (void *) 0 ;
  THREAD_FUNCTION *argp2 ;
  bool result;
  
  SWIG_check_num_args("stk::Thread::start",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Thread::start",1,"stk::Thread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Thread::start",2,"THREAD_FUNCTION");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("stk::Thread::start",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Thread,0))){
    SWIG_fail_ptr("Thread_start",1,SWIGTYPE_p_stk__Thread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_THREAD_FUNCTION,0))){
    SWIG_fail_ptr("Thread_start",2,SWIGTYPE_p_THREAD_FUNCTION);
  }
  arg2 = *argp2;
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"Thread_start");
  result = (bool)(arg1)->start(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_start__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  THREAD_FUNCTION arg2 ;
  THREAD_FUNCTION *argp2 ;
  bool result;
  
  SWIG_check_num_args("stk::Thread::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Thread::start",1,"stk::Thread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Thread::start",2,"THREAD_FUNCTION");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Thread,0))){
    SWIG_fail_ptr("Thread_start",1,SWIGTYPE_p_stk__Thread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_THREAD_FUNCTION,0))){
    SWIG_fail_ptr("Thread_start",2,SWIGTYPE_p_THREAD_FUNCTION);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->start(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_start(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_THREAD_FUNCTION, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Thread_start__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Thread, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_THREAD_FUNCTION, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, 0, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Thread_start__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Thread_start'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Thread::start(THREAD_FUNCTION,void *)\n"
    "    stk::Thread::start(THREAD_FUNCTION)\n");
  lua_error(L);return 0;
}


static int _wrap_Thread_cancel(lua_State* L) {
  int SWIG_arg = 0;
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::Thread::cancel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Thread::cancel",1,"stk::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Thread,0))){
    SWIG_fail_ptr("Thread_cancel",1,SWIGTYPE_p_stk__Thread);
  }
  
  result = (bool)(arg1)->cancel();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_wait(lua_State* L) {
  int SWIG_arg = 0;
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::Thread::wait",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Thread::wait",1,"stk::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Thread,0))){
    SWIG_fail_ptr("Thread_wait",1,SWIGTYPE_p_stk__Thread);
  }
  
  result = (bool)(arg1)->wait();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Thread_testCancel(lua_State* L) {
  int SWIG_arg = 0;
  stk::Thread *arg1 = (stk::Thread *) 0 ;
  
  SWIG_check_num_args("stk::Thread::testCancel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Thread::testCancel",1,"stk::Thread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Thread,0))){
    SWIG_fail_ptr("Thread_testCancel",1,SWIGTYPE_p_stk__Thread);
  }
  
  (arg1)->testCancel();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Thread(void *obj) {
stk::Thread *arg1 = (stk::Thread *) obj;
delete arg1;
}
static int _proxy__wrap_new_Thread(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Thread);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Thread_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Thread_methods[]= {
    { "start", _wrap_Thread_start},
    { "cancel", _wrap_Thread_cancel},
    { "wait", _wrap_Thread_wait},
    { "testCancel", _wrap_Thread_testCancel},
    {0,0}
};
static swig_lua_method swig_Thread_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Thread_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Thread_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Thread_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Thread_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Thread_Sf_SwigStatic = {
    "Thread",
    swig_Thread_Sf_SwigStatic_methods,
    swig_Thread_Sf_SwigStatic_attributes,
    swig_Thread_Sf_SwigStatic_constants,
    swig_Thread_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Thread_bases[] = {0};
static const char *swig_Thread_base_names[] = {0};
static swig_lua_class _wrap_class_Thread = { "Thread", "Thread", &SWIGTYPE_p_stk__Thread,_proxy__wrap_new_Thread, swig_delete_Thread, swig_Thread_methods, swig_Thread_attributes, &swig_Thread_Sf_SwigStatic, swig_Thread_meta, swig_Thread_bases, swig_Thread_base_names };

static int _wrap_new_InetWvIn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  unsigned int arg2 ;
  stk::InetWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvIn::InetWvIn",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvIn::InetWvIn",1,"unsigned long");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvIn::InetWvIn",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::InetWvIn *)new stk::InetWvIn(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvIn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  stk::InetWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvIn::InetWvIn",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvIn::InetWvIn",1,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  result = (stk::InetWvIn *)new stk::InetWvIn(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvIn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvIn::InetWvIn",0,0)
  result = (stk::InetWvIn *)new stk::InetWvIn();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvIn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_InetWvIn__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_InetWvIn__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_InetWvIn__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InetWvIn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::InetWvIn::InetWvIn(unsigned long,unsigned int)\n"
    "    stk::InetWvIn::InetWvIn(unsigned long)\n"
    "    stk::InetWvIn::InetWvIn()\n");
  lua_error(L);return 0;
}


static int _wrap_InetWvIn_listen__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  stk::Socket::ProtocolType arg5 ;
  
  SWIG_check_num_args("stk::InetWvIn::listen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::listen",1,"stk::InetWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvIn::listen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvIn::listen",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::InetWvIn::listen",4,"stk::Stk::StkFormat");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::InetWvIn::listen",5,"stk::Socket::ProtocolType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_listen",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::Stk::StkFormat)lua_tonumber(L, 4);
  arg5 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 5);
  (arg1)->listen(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_listen__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  stk::Stk::StkFormat arg4 ;
  
  SWIG_check_num_args("stk::InetWvIn::listen",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::listen",1,"stk::InetWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvIn::listen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvIn::listen",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::InetWvIn::listen",4,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_listen",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (stk::Stk::StkFormat)lua_tonumber(L, 4);
  (arg1)->listen(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_listen__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("stk::InetWvIn::listen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::listen",1,"stk::InetWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvIn::listen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvIn::listen",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_listen",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->listen(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_listen__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("stk::InetWvIn::listen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::listen",1,"stk::InetWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvIn::listen",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_listen",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->listen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_listen__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  
  SWIG_check_num_args("stk::InetWvIn::listen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::listen",1,"stk::InetWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_listen",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  (arg1)->listen();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_listen(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_InetWvIn_listen__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InetWvIn_listen__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InetWvIn_listen__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InetWvIn_listen__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_InetWvIn_listen__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InetWvIn_listen'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::InetWvIn::listen(int,unsigned int,stk::Stk::StkFormat,stk::Socket::ProtocolType)\n"
    "    stk::InetWvIn::listen(int,unsigned int,stk::Stk::StkFormat)\n"
    "    stk::InetWvIn::listen(int,unsigned int)\n"
    "    stk::InetWvIn::listen(int)\n"
    "    stk::InetWvIn::listen()\n");
  lua_error(L);return 0;
}


static int _wrap_InetWvIn_isConnected(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  bool result;
  
  SWIG_check_num_args("stk::InetWvIn::isConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::isConnected",1,"stk::InetWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_isConnected",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  result = (bool)(arg1)->isConnected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::InetWvIn::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::lastOut",1,"stk::InetWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvIn::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_lastOut",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::InetWvIn::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::lastOut",1,"stk::InetWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_lastOut",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_InetWvIn_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InetWvIn_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InetWvIn_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::InetWvIn::lastOut(unsigned int)\n"
    "    stk::InetWvIn::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_InetWvIn_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::InetWvIn::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::tick",1,"stk::InetWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvIn::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_tick",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::InetWvIn::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::tick",1,"stk::InetWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_tick",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvIn::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::tick",1,"stk::InetWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::InetWvIn::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvIn::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_tick",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("InetWvIn_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvIn::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::tick",1,"stk::InetWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::InetWvIn::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_tick",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("InetWvIn_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvIn_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_InetWvIn_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InetWvIn_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InetWvIn_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InetWvIn_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InetWvIn_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::InetWvIn::tick(unsigned int)\n"
    "    stk::InetWvIn::tick()\n"
    "    stk::InetWvIn::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::InetWvIn::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static int _wrap_InetWvIn_receive(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvIn *arg1 = (stk::InetWvIn *) 0 ;
  
  SWIG_check_num_args("stk::InetWvIn::receive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvIn::receive",1,"stk::InetWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvIn,0))){
    SWIG_fail_ptr("InetWvIn_receive",1,SWIGTYPE_p_stk__InetWvIn);
  }
  
  (arg1)->receive();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InetWvIn(void *obj) {
stk::InetWvIn *arg1 = (stk::InetWvIn *) obj;
delete arg1;
}
static int _proxy__wrap_new_InetWvIn(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InetWvIn);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InetWvIn_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InetWvIn_methods[]= {
    { "listen", _wrap_InetWvIn_listen},
    { "isConnected", _wrap_InetWvIn_isConnected},
    { "lastOut", _wrap_InetWvIn_lastOut},
    { "tick", _wrap_InetWvIn_tick},
    { "receive", _wrap_InetWvIn_receive},
    {0,0}
};
static swig_lua_method swig_InetWvIn_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InetWvIn_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InetWvIn_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InetWvIn_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InetWvIn_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InetWvIn_Sf_SwigStatic = {
    "InetWvIn",
    swig_InetWvIn_Sf_SwigStatic_methods,
    swig_InetWvIn_Sf_SwigStatic_attributes,
    swig_InetWvIn_Sf_SwigStatic_constants,
    swig_InetWvIn_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InetWvIn_bases[] = {0};
static const char *swig_InetWvIn_base_names[] = {0};
static swig_lua_class _wrap_class_InetWvIn = { "InetWvIn", "InetWvIn", &SWIGTYPE_p_stk__InetWvIn,_proxy__wrap_new_InetWvIn, swig_delete_InetWvIn, swig_InetWvIn_methods, swig_InetWvIn_attributes, &swig_InetWvIn_Sf_SwigStatic, swig_InetWvIn_meta, swig_InetWvIn_bases, swig_InetWvIn_base_names };

static int _wrap_new_InetWvOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned long arg1 ;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",1,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned long)lua_tonumber(L, 1);
  result = (stk::InetWvOut *)new stk::InetWvOut(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",0,0)
  result = (stk::InetWvOut *)new stk::InetWvOut();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  unsigned long arg6 ;
  std::string *argp3 ;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",2,"stk::Socket::ProtocolType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",3,"std::string");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",5,"stk::Stk::StkFormat");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",6,"unsigned long");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_InetWvOut",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (stk::Stk::StkFormat)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (unsigned long)lua_tonumber(L, 6);
  result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  stk::Stk::StkFormat arg5 ;
  std::string *argp3 ;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",2,"stk::Socket::ProtocolType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",3,"std::string");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",5,"stk::Stk::StkFormat");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_InetWvOut",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (stk::Stk::StkFormat)lua_tonumber(L, 5);
  result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  std::string *argp3 ;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",2,"stk::Socket::ProtocolType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",3,"std::string");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",4,"unsigned int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_InetWvOut",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  std::string arg3 ;
  std::string *argp3 ;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",2,"stk::Socket::ProtocolType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",3,"std::string");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_InetWvOut",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::Socket::ProtocolType arg2 ;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",2,"stk::Socket::ProtocolType");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 2);
  result = (stk::InetWvOut *)new stk::InetWvOut(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  stk::InetWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::InetWvOut",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::InetWvOut::InetWvOut",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (stk::InetWvOut *)new stk::InetWvOut(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__InetWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InetWvOut(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_InetWvOut__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_InetWvOut__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_InetWvOut__SWIG_7(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_InetWvOut__SWIG_6(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_InetWvOut__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InetWvOut__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InetWvOut__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InetWvOut__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InetWvOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::InetWvOut::InetWvOut(unsigned long)\n"
    "    stk::InetWvOut::InetWvOut()\n"
    "    stk::InetWvOut::InetWvOut(int,stk::Socket::ProtocolType,std::string,unsigned int,stk::Stk::StkFormat,unsigned long)\n"
    "    stk::InetWvOut::InetWvOut(int,stk::Socket::ProtocolType,std::string,unsigned int,stk::Stk::StkFormat)\n"
    "    stk::InetWvOut::InetWvOut(int,stk::Socket::ProtocolType,std::string,unsigned int)\n"
    "    stk::InetWvOut::InetWvOut(int,stk::Socket::ProtocolType,std::string)\n"
    "    stk::InetWvOut::InetWvOut(int,stk::Socket::ProtocolType)\n"
    "    stk::InetWvOut::InetWvOut(int)\n");
  lua_error(L);return 0;
}


static int _wrap_InetWvOut_connect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  stk::Stk::StkFormat arg6 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("stk::InetWvOut::connect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::connect",1,"stk::InetWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::connect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvOut::connect",3,"stk::Socket::ProtocolType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("stk::InetWvOut::connect",4,"std::string");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::InetWvOut::connect",5,"unsigned int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("stk::InetWvOut::connect",6,"stk::Stk::StkFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_connect",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("InetWvOut_connect",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (stk::Stk::StkFormat)lua_tonumber(L, 6);
  (arg1)->connect(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_connect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("stk::InetWvOut::connect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::connect",1,"stk::InetWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::connect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvOut::connect",3,"stk::Socket::ProtocolType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("stk::InetWvOut::connect",4,"std::string");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::InetWvOut::connect",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_connect",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("InetWvOut_connect",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (arg1)->connect(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_connect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  std::string arg4 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("stk::InetWvOut::connect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::connect",1,"stk::InetWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::connect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvOut::connect",3,"stk::Socket::ProtocolType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("stk::InetWvOut::connect",4,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_connect",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("InetWvOut_connect",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  (arg1)->connect(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_connect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  stk::Socket::ProtocolType arg3 ;
  
  SWIG_check_num_args("stk::InetWvOut::connect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::connect",1,"stk::InetWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::connect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::InetWvOut::connect",3,"stk::Socket::ProtocolType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_connect",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::Socket::ProtocolType)(int)lua_tonumber(L, 3);
  (arg1)->connect(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_connect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("stk::InetWvOut::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::connect",1,"stk::InetWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::connect",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_connect",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->connect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_connect(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InetWvOut_connect__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InetWvOut_connect__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_InetWvOut_connect__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_InetWvOut_connect__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_InetWvOut_connect__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InetWvOut_connect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::InetWvOut::connect(int,stk::Socket::ProtocolType,std::string,unsigned int,stk::Stk::StkFormat)\n"
    "    stk::InetWvOut::connect(int,stk::Socket::ProtocolType,std::string,unsigned int)\n"
    "    stk::InetWvOut::connect(int,stk::Socket::ProtocolType,std::string)\n"
    "    stk::InetWvOut::connect(int,stk::Socket::ProtocolType)\n"
    "    stk::InetWvOut::connect(int)\n");
  lua_error(L);return 0;
}


static int _wrap_InetWvOut_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::disconnect",1,"stk::InetWvOut *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_disconnect",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  (arg1)->disconnect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::InetWvOut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::tick",1,"stk::InetWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::InetWvOut::tick",2,"stk::StkFloat const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_tick",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  arg2 = (stk::StkFloat const)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::InetWvOut *arg1 = (stk::InetWvOut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  
  SWIG_check_num_args("stk::InetWvOut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::InetWvOut::tick",1,"stk::InetWvOut *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::InetWvOut::tick",2,"stk::StkFrames const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__InetWvOut,0))){
    SWIG_fail_ptr("InetWvOut_tick",1,SWIGTYPE_p_stk__InetWvOut);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("InetWvOut_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  (arg1)->tick((stk::StkFrames const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InetWvOut_tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_InetWvOut_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__InetWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_InetWvOut_tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InetWvOut_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::InetWvOut::tick(stk::StkFloat const)\n"
    "    stk::InetWvOut::tick(stk::StkFrames const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_InetWvOut(void *obj) {
stk::InetWvOut *arg1 = (stk::InetWvOut *) obj;
delete arg1;
}
static int _proxy__wrap_new_InetWvOut(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InetWvOut);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InetWvOut_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InetWvOut_methods[]= {
    { "connect", _wrap_InetWvOut_connect},
    { "disconnect", _wrap_InetWvOut_disconnect},
    { "tick", _wrap_InetWvOut_tick},
    {0,0}
};
static swig_lua_method swig_InetWvOut_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InetWvOut_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InetWvOut_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InetWvOut_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InetWvOut_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InetWvOut_Sf_SwigStatic = {
    "InetWvOut",
    swig_InetWvOut_Sf_SwigStatic_methods,
    swig_InetWvOut_Sf_SwigStatic_attributes,
    swig_InetWvOut_Sf_SwigStatic_constants,
    swig_InetWvOut_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InetWvOut_bases[] = {0};
static const char *swig_InetWvOut_base_names[] = {0};
static swig_lua_class _wrap_class_InetWvOut = { "InetWvOut", "InetWvOut", &SWIGTYPE_p_stk__InetWvOut,_proxy__wrap_new_InetWvOut, swig_delete_InetWvOut, swig_InetWvOut_methods, swig_InetWvOut_attributes, &swig_InetWvOut_Sf_SwigStatic, swig_InetWvOut_meta, swig_InetWvOut_bases, swig_InetWvOut_base_names };

static int _wrap_new_RtWvIn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  stk::RtWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::RtWvIn",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",5,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvIn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  stk::RtWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::RtWvIn",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",4,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvIn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  stk::RtWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::RtWvIn",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",3,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvIn__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  stk::RtWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::RtWvIn",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",2,"stk::StkFloat");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::RtWvIn *)new stk::RtWvIn(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvIn__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::RtWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::RtWvIn",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvIn::RtWvIn",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::RtWvIn *)new stk::RtWvIn(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvIn__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::RtWvIn",0,0)
  result = (stk::RtWvIn *)new stk::RtWvIn();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvIn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvIn(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RtWvIn__SWIG_5(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RtWvIn__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RtWvIn__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RtWvIn__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RtWvIn__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_RtWvIn__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RtWvIn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::RtWvIn::RtWvIn(unsigned int,stk::StkFloat,int,int,int)\n"
    "    stk::RtWvIn::RtWvIn(unsigned int,stk::StkFloat,int,int)\n"
    "    stk::RtWvIn::RtWvIn(unsigned int,stk::StkFloat,int)\n"
    "    stk::RtWvIn::RtWvIn(unsigned int,stk::StkFloat)\n"
    "    stk::RtWvIn::RtWvIn(unsigned int)\n"
    "    stk::RtWvIn::RtWvIn()\n");
  lua_error(L);return 0;
}


static int _wrap_RtWvIn_start(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::start",1,"stk::RtWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_start",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_stop(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::stop",1,"stk::RtWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_stop",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_lastOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::RtWvIn::lastOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::lastOut",1,"stk::RtWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvIn::lastOut",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_lastOut",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->lastOut(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_lastOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::RtWvIn::lastOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::lastOut",1,"stk::RtWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_lastOut",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  result = (stk::StkFloat)(arg1)->lastOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_lastOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RtWvIn_lastOut__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RtWvIn_lastOut__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RtWvIn_lastOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::RtWvIn::lastOut(unsigned int)\n"
    "    stk::RtWvIn::lastOut()\n");
  lua_error(L);return 0;
}


static int _wrap_RtWvIn_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::RtWvIn::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::tick",1,"stk::RtWvIn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvIn::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_tick",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::RtWvIn::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::tick",1,"stk::RtWvIn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_tick",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::tick",1,"stk::RtWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::RtWvIn::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvIn::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_tick",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("RtWvIn_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvIn::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::tick",1,"stk::RtWvIn *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::RtWvIn::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_tick",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("RtWvIn_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvIn_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_RtWvIn_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RtWvIn_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RtWvIn_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvIn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RtWvIn_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RtWvIn_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::RtWvIn::tick(unsigned int)\n"
    "    stk::RtWvIn::tick()\n"
    "    stk::RtWvIn::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::RtWvIn::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static int _wrap_RtWvIn_fillBuffer(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvIn *arg1 = (stk::RtWvIn *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("stk::RtWvIn::fillBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvIn::fillBuffer",1,"stk::RtWvIn *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::RtWvIn::fillBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvIn::fillBuffer",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvIn,0))){
    SWIG_fail_ptr("RtWvIn_fillBuffer",1,SWIGTYPE_p_stk__RtWvIn);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RtWvIn_fillBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->fillBuffer(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RtWvIn(void *obj) {
stk::RtWvIn *arg1 = (stk::RtWvIn *) obj;
delete arg1;
}
static int _proxy__wrap_new_RtWvIn(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RtWvIn);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RtWvIn_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RtWvIn_methods[]= {
    { "start", _wrap_RtWvIn_start},
    { "stop", _wrap_RtWvIn_stop},
    { "lastOut", _wrap_RtWvIn_lastOut},
    { "tick", _wrap_RtWvIn_tick},
    { "fillBuffer", _wrap_RtWvIn_fillBuffer},
    {0,0}
};
static swig_lua_method swig_RtWvIn_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RtWvIn_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RtWvIn_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RtWvIn_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RtWvIn_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RtWvIn_Sf_SwigStatic = {
    "RtWvIn",
    swig_RtWvIn_Sf_SwigStatic_methods,
    swig_RtWvIn_Sf_SwigStatic_attributes,
    swig_RtWvIn_Sf_SwigStatic_constants,
    swig_RtWvIn_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RtWvIn_bases[] = {0};
static const char *swig_RtWvIn_base_names[] = {0};
static swig_lua_class _wrap_class_RtWvIn = { "RtWvIn", "RtWvIn", &SWIGTYPE_p_stk__RtWvIn,_proxy__wrap_new_RtWvIn, swig_delete_RtWvIn, swig_RtWvIn_methods, swig_RtWvIn_attributes, &swig_RtWvIn_Sf_SwigStatic, swig_RtWvIn_meta, swig_RtWvIn_bases, swig_RtWvIn_base_names };

static int _wrap_new_RtWvOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  stk::RtWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::RtWvOut",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",5,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  int arg4 ;
  stk::RtWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::RtWvOut",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",4,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvOut__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  int arg3 ;
  stk::RtWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::RtWvOut",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",2,"stk::StkFloat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",3,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvOut__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::StkFloat arg2 ;
  stk::RtWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::RtWvOut",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",2,"stk::StkFloat");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  result = (stk::RtWvOut *)new stk::RtWvOut(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvOut__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  stk::RtWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::RtWvOut",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("stk::RtWvOut::RtWvOut",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (stk::RtWvOut *)new stk::RtWvOut(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvOut__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvOut *result = 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::RtWvOut",0,0)
  result = (stk::RtWvOut *)new stk::RtWvOut();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__RtWvOut,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtWvOut(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RtWvOut__SWIG_5(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RtWvOut__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RtWvOut__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RtWvOut__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RtWvOut__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_RtWvOut__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RtWvOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::RtWvOut::RtWvOut(unsigned int,stk::StkFloat,int,int,int)\n"
    "    stk::RtWvOut::RtWvOut(unsigned int,stk::StkFloat,int,int)\n"
    "    stk::RtWvOut::RtWvOut(unsigned int,stk::StkFloat,int)\n"
    "    stk::RtWvOut::RtWvOut(unsigned int,stk::StkFloat)\n"
    "    stk::RtWvOut::RtWvOut(unsigned int)\n"
    "    stk::RtWvOut::RtWvOut()\n");
  lua_error(L);return 0;
}


static int _wrap_RtWvOut_start(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvOut::start",1,"stk::RtWvOut *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvOut,0))){
    SWIG_fail_ptr("RtWvOut_start",1,SWIGTYPE_p_stk__RtWvOut);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvOut_stop(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvOut::stop",1,"stk::RtWvOut *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvOut,0))){
    SWIG_fail_ptr("RtWvOut_stop",1,SWIGTYPE_p_stk__RtWvOut);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvOut_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::RtWvOut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvOut::tick",1,"stk::RtWvOut *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::RtWvOut::tick",2,"stk::StkFloat const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvOut,0))){
    SWIG_fail_ptr("RtWvOut_tick",1,SWIGTYPE_p_stk__RtWvOut);
  }
  
  arg2 = (stk::StkFloat const)lua_tonumber(L, 2);
  (arg1)->tick(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvOut_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  
  SWIG_check_num_args("stk::RtWvOut::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvOut::tick",1,"stk::RtWvOut *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::RtWvOut::tick",2,"stk::StkFrames const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvOut,0))){
    SWIG_fail_ptr("RtWvOut_tick",1,SWIGTYPE_p_stk__RtWvOut);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("RtWvOut_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  (arg1)->tick((stk::StkFrames const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtWvOut_tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RtWvOut_tick__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__RtWvOut, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RtWvOut_tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RtWvOut_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::RtWvOut::tick(stk::StkFloat const)\n"
    "    stk::RtWvOut::tick(stk::StkFrames const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RtWvOut_readBuffer(lua_State* L) {
  int SWIG_arg = 0;
  stk::RtWvOut *arg1 = (stk::RtWvOut *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  int result;
  
  SWIG_check_num_args("stk::RtWvOut::readBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::RtWvOut::readBuffer",1,"stk::RtWvOut *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("stk::RtWvOut::readBuffer",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::RtWvOut::readBuffer",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__RtWvOut,0))){
    SWIG_fail_ptr("RtWvOut_readBuffer",1,SWIGTYPE_p_stk__RtWvOut);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"RtWvOut_readBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (int)(arg1)->readBuffer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RtWvOut(void *obj) {
stk::RtWvOut *arg1 = (stk::RtWvOut *) obj;
delete arg1;
}
static int _proxy__wrap_new_RtWvOut(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RtWvOut);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RtWvOut_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RtWvOut_methods[]= {
    { "start", _wrap_RtWvOut_start},
    { "stop", _wrap_RtWvOut_stop},
    { "tick", _wrap_RtWvOut_tick},
    { "readBuffer", _wrap_RtWvOut_readBuffer},
    {0,0}
};
static swig_lua_method swig_RtWvOut_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RtWvOut_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RtWvOut_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RtWvOut_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RtWvOut_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RtWvOut_Sf_SwigStatic = {
    "RtWvOut",
    swig_RtWvOut_Sf_SwigStatic_methods,
    swig_RtWvOut_Sf_SwigStatic_attributes,
    swig_RtWvOut_Sf_SwigStatic_constants,
    swig_RtWvOut_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RtWvOut_bases[] = {0};
static const char *swig_RtWvOut_base_names[] = {0};
static swig_lua_class _wrap_class_RtWvOut = { "RtWvOut", "RtWvOut", &SWIGTYPE_p_stk__RtWvOut,_proxy__wrap_new_RtWvOut, swig_delete_RtWvOut, swig_RtWvOut_methods, swig_RtWvOut_attributes, &swig_RtWvOut_Sf_SwigStatic, swig_RtWvOut_meta, swig_RtWvOut_bases, swig_RtWvOut_base_names };

static int _wrap_Sampler_setFrequency(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sampler::setFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::setFrequency",1,"stk::Sampler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sampler::setFrequency",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_setFrequency",1,SWIGTYPE_p_stk__Sampler);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->setFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_keyOn(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  
  SWIG_check_num_args("stk::Sampler::keyOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::keyOn",1,"stk::Sampler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_keyOn",1,SWIGTYPE_p_stk__Sampler);
  }
  
  (arg1)->keyOn();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_keyOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  
  SWIG_check_num_args("stk::Sampler::keyOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::keyOff",1,"stk::Sampler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_keyOff",1,SWIGTYPE_p_stk__Sampler);
  }
  
  (arg1)->keyOff();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_noteOff(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFloat arg2 ;
  
  SWIG_check_num_args("stk::Sampler::noteOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::noteOff",1,"stk::Sampler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sampler::noteOff",2,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_noteOff",1,SWIGTYPE_p_stk__Sampler);
  }
  
  arg2 = (stk::StkFloat)lua_tonumber(L, 2);
  (arg1)->noteOff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_controlChange(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  int arg2 ;
  stk::StkFloat arg3 ;
  
  SWIG_check_num_args("stk::Sampler::controlChange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::controlChange",1,"stk::Sampler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sampler::controlChange",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Sampler::controlChange",3,"stk::StkFloat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_controlChange",1,SWIGTYPE_p_stk__Sampler);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (stk::StkFloat)lua_tonumber(L, 3);
  (arg1)->controlChange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  unsigned int arg2 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sampler::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::tick",1,"stk::Sampler *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("stk::Sampler::tick",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_tick",1,SWIGTYPE_p_stk__Sampler);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (stk::StkFloat)(arg1)->tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFloat result;
  
  SWIG_check_num_args("stk::Sampler::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::tick",1,"stk::Sampler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_tick",1,SWIGTYPE_p_stk__Sampler);
  }
  
  result = (stk::StkFloat)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  unsigned int arg3 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Sampler::tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::tick",1,"stk::Sampler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Sampler::tick",2,"stk::StkFrames &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("stk::Sampler::tick",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_tick",1,SWIGTYPE_p_stk__Sampler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Sampler_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (stk::StkFrames *) &(arg1)->tick(*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  stk::Sampler *arg1 = (stk::Sampler *) 0 ;
  stk::StkFrames *arg2 = 0 ;
  stk::StkFrames *result = 0 ;
  
  SWIG_check_num_args("stk::Sampler::tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("stk::Sampler::tick",1,"stk::Sampler *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("stk::Sampler::tick",2,"stk::StkFrames &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_stk__Sampler,0))){
    SWIG_fail_ptr("Sampler_tick",1,SWIGTYPE_p_stk__Sampler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_stk__StkFrames,0))){
    SWIG_fail_ptr("Sampler_tick",2,SWIGTYPE_p_stk__StkFrames);
  }
  
  result = (stk::StkFrames *) &(arg1)->tick(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_stk__StkFrames,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sampler_tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sampler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Sampler_tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sampler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sampler_tick__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sampler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sampler_tick__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_stk__Sampler, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_stk__StkFrames, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Sampler_tick__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sampler_tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    stk::Sampler::tick(unsigned int)\n"
    "    stk::Sampler::tick()\n"
    "    stk::Sampler::tick(stk::StkFrames &,unsigned int)\n"
    "    stk::Sampler::tick(stk::StkFrames &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Sampler(void *obj) {
stk::Sampler *arg1 = (stk::Sampler *) obj;
delete arg1;
}
static swig_lua_attribute swig_Sampler_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sampler_methods[]= {
    { "setFrequency", _wrap_Sampler_setFrequency},
    { "keyOn", _wrap_Sampler_keyOn},
    { "keyOff", _wrap_Sampler_keyOff},
    { "noteOff", _wrap_Sampler_noteOff},
    { "controlChange", _wrap_Sampler_controlChange},
    { "tick", _wrap_Sampler_tick},
    {0,0}
};
static swig_lua_method swig_Sampler_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sampler_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sampler_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sampler_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sampler_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sampler_Sf_SwigStatic = {
    "Sampler",
    swig_Sampler_Sf_SwigStatic_methods,
    swig_Sampler_Sf_SwigStatic_attributes,
    swig_Sampler_Sf_SwigStatic_constants,
    swig_Sampler_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sampler_bases[] = {0,0};
static const char *swig_Sampler_base_names[] = {"stk::Instrmnt *",0};
static swig_lua_class _wrap_class_Sampler = { "Sampler", "Sampler", &SWIGTYPE_p_stk__Sampler,0, swig_delete_Sampler, swig_Sampler_methods, swig_Sampler_attributes, &swig_Sampler_Sf_SwigStatic, swig_Sampler_meta, swig_Sampler_bases, swig_Sampler_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "SRATE", _wrap_SRATE_get, SWIG_Lua_set_immutable },
    { "RT_BUFFER_SIZE", _wrap_RT_BUFFER_SIZE_get, SWIG_Lua_set_immutable },
    { "PI", _wrap_PI_get, SWIG_Lua_set_immutable },
    { "TWO_PI", _wrap_TWO_PI_get, SWIG_Lua_set_immutable },
    { "ONE_OVER_128", _wrap_ONE_OVER_128_get, SWIG_Lua_set_immutable },
    { "TARGET_THRESHOLD", _wrap_TARGET_THRESHOLD_get, SWIG_Lua_set_immutable },
    { "MAX_BANDED_MODES", _wrap_MAX_BANDED_MODES_get, SWIG_Lua_set_immutable },
    { "FileWrite_FILE_RAW", _wrap_FileWrite_FILE_RAW_get, SWIG_Lua_set_immutable },
    { "FileWrite_FILE_WAV", _wrap_FileWrite_FILE_WAV_get, SWIG_Lua_set_immutable },
    { "FileWrite_FILE_SND", _wrap_FileWrite_FILE_SND_get, SWIG_Lua_set_immutable },
    { "FileWrite_FILE_AIF", _wrap_FileWrite_FILE_AIF_get, SWIG_Lua_set_immutable },
    { "FileWrite_FILE_MAT", _wrap_FileWrite_FILE_MAT_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("StkError_STATUS", stk::StkError::STATUS)},
    {SWIG_LUA_CONSTTAB_INT("StkError_WARNING", stk::StkError::WARNING)},
    {SWIG_LUA_CONSTTAB_INT("StkError_DEBUG_PRINT", stk::StkError::DEBUG_PRINT)},
    {SWIG_LUA_CONSTTAB_INT("StkError_MEMORY_ALLOCATION", stk::StkError::MEMORY_ALLOCATION)},
    {SWIG_LUA_CONSTTAB_INT("StkError_MEMORY_ACCESS", stk::StkError::MEMORY_ACCESS)},
    {SWIG_LUA_CONSTTAB_INT("StkError_FUNCTION_ARGUMENT", stk::StkError::FUNCTION_ARGUMENT)},
    {SWIG_LUA_CONSTTAB_INT("StkError_FILE_NOT_FOUND", stk::StkError::FILE_NOT_FOUND)},
    {SWIG_LUA_CONSTTAB_INT("StkError_FILE_UNKNOWN_FORMAT", stk::StkError::FILE_UNKNOWN_FORMAT)},
    {SWIG_LUA_CONSTTAB_INT("StkError_FILE_ERROR", stk::StkError::FILE_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("StkError_PROCESS_THREAD", stk::StkError::PROCESS_THREAD)},
    {SWIG_LUA_CONSTTAB_INT("StkError_PROCESS_SOCKET", stk::StkError::PROCESS_SOCKET)},
    {SWIG_LUA_CONSTTAB_INT("StkError_PROCESS_SOCKET_IPADDR", stk::StkError::PROCESS_SOCKET_IPADDR)},
    {SWIG_LUA_CONSTTAB_INT("StkError_AUDIO_SYSTEM", stk::StkError::AUDIO_SYSTEM)},
    {SWIG_LUA_CONSTTAB_INT("StkError_MIDI_SYSTEM", stk::StkError::MIDI_SYSTEM)},
    {SWIG_LUA_CONSTTAB_INT("StkError_UNSPECIFIED", stk::StkError::UNSPECIFIED)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_ATTACK", stk::ADSR::ATTACK)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_DECAY", stk::ADSR::DECAY)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_SUSTAIN", stk::ADSR::SUSTAIN)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_RELEASE", stk::ADSR::RELEASE)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_IDLE", stk::ADSR::IDLE)},
    {SWIG_LUA_CONSTTAB_INT("Granulate_GRAIN_STOPPED", stk::Granulate::GRAIN_STOPPED)},
    {SWIG_LUA_CONSTTAB_INT("Granulate_GRAIN_FADEIN", stk::Granulate::GRAIN_FADEIN)},
    {SWIG_LUA_CONSTTAB_INT("Granulate_GRAIN_SUSTAIN", stk::Granulate::GRAIN_SUSTAIN)},
    {SWIG_LUA_CONSTTAB_INT("Granulate_GRAIN_FADEOUT", stk::Granulate::GRAIN_FADEOUT)},
    {SWIG_LUA_CONSTTAB_INT("Socket_PROTO_TCP", stk::Socket::PROTO_TCP)},
    {SWIG_LUA_CONSTTAB_INT("Socket_PROTO_UDP", stk::Socket::PROTO_UDP)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Phonemes_name", _wrap_Phonemes_name},
    { "Phonemes_voiceGain", _wrap_Phonemes_voiceGain},
    { "Phonemes_noiseGain", _wrap_Phonemes_noiseGain},
    { "Phonemes_formantFrequency", _wrap_Phonemes_formantFrequency},
    { "Phonemes_formantRadius", _wrap_Phonemes_formantRadius},
    { "Phonemes_formantGain", _wrap_Phonemes_formantGain},
    { "Socket_close", _wrap_Socket_close},
    { "Socket_isValid", _wrap_Socket_isValid},
    { "Socket_setBlocking", _wrap_Socket_setBlocking},
    { "Socket_writeBuffer", _wrap_Socket_writeBuffer},
    { "Socket_readBuffer", _wrap_Socket_readBuffer},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_StkError,
&_wrap_class_StkFrames,
&_wrap_class_Effect,
&_wrap_class_Filter,
&_wrap_class_Generator,
&_wrap_class_Instrmnt,
&_wrap_class_Function,
&_wrap_class_FM,
&_wrap_class_ADSR,
&_wrap_class_Asymp,
&_wrap_class_BandedWG,
&_wrap_class_BeeThree,
&_wrap_class_BiQuad,
&_wrap_class_Blit,
&_wrap_class_BlitSaw,
&_wrap_class_BlitSquare,
&_wrap_class_BlowBotl,
&_wrap_class_BlowHole,
&_wrap_class_BowTable,
&_wrap_class_Bowed,
&_wrap_class_Brass,
&_wrap_class_Chorus,
&_wrap_class_Clarinet,
&_wrap_class_Cubic,
&_wrap_class_Delay,
&_wrap_class_DelayA,
&_wrap_class_DelayL,
&_wrap_class_Drummer,
&_wrap_class_Echo,
&_wrap_class_Envelope,
&_wrap_class_FMVoices,
&_wrap_class_FileRead,
&_wrap_class_FileWrite,
&_wrap_class_FileWvIn,
&_wrap_class_FileWvOut,
&_wrap_class_FileLoop,
&_wrap_class_Fir,
&_wrap_class_Flute,
&_wrap_class_FormSwep,
&_wrap_class_FreeVerb,
&_wrap_class_Granulate,
&_wrap_class_Guitar,
&_wrap_class_HevyMetl,
&_wrap_class_Iir,
&_wrap_class_JCRev,
&_wrap_class_JetTable,
&_wrap_class_LentPitShift,
&_wrap_class_Mandolin,
&_wrap_class_Mesh2D,
&_wrap_class_Messager,
&_wrap_class_MidiFileIn,
&_wrap_class_Modal,
&_wrap_class_ModalBar,
&_wrap_class_Modulate,
&_wrap_class_Moog,
&_wrap_class_NRev,
&_wrap_class_Noise,
&_wrap_class_OnePole,
&_wrap_class_OneZero,
&_wrap_class_PRCRev,
&_wrap_class_PercFlut,
&_wrap_class_Phonemes,
&_wrap_class_PitShift,
&_wrap_class_Plucked,
&_wrap_class_PoleZero,
&_wrap_class_Recorder,
&_wrap_class_ReedTable,
&_wrap_class_Resonate,
&_wrap_class_Rhodey,
&_wrap_class_Saxofony,
&_wrap_class_Shakers,
&_wrap_class_Simple,
&_wrap_class_SineWave,
&_wrap_class_SingWave,
&_wrap_class_Sitar,
&_wrap_class_Sphere,
&_wrap_class_StifKarp,
&_wrap_class_TapDelay,
&_wrap_class_TubeBell,
&_wrap_class_Twang,
&_wrap_class_TwoPole,
&_wrap_class_TwoZero,
&_wrap_class_Vector3D,
&_wrap_class_VoicForm,
&_wrap_class_Voicer,
&_wrap_class_Whistle,
&_wrap_class_Wurley,
&_wrap_class_Socket,
&_wrap_class_TcpClient,
&_wrap_class_TcpServer,
&_wrap_class_UdpSocket,
&_wrap_class_Mutex,
&_wrap_class_Thread,
&_wrap_class_InetWvIn,
&_wrap_class_InetWvOut,
&_wrap_class_RtWvIn,
&_wrap_class_RtWvOut,
&_wrap_class_Sampler,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "stk",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_stk__AsympTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Asymp *) x));
}
static void *_p_stk__BlitSquareTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::BlitSquare *) x));
}
static void *_p_stk__NoiseTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Noise *) x));
}
static void *_p_stk__BlitSawTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::BlitSaw *) x));
}
static void *_p_stk__ADSRTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::ADSR *) x));
}
static void *_p_stk__BlitTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Blit *) x));
}
static void *_p_stk__EnvelopeTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Envelope *) x));
}
static void *_p_stk__GranulateTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Granulate *) x));
}
static void *_p_stk__SineWaveTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::SineWave *) x));
}
static void *_p_stk__ModulateTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::Modulate *) x));
}
static void *_p_stk__SingWaveTo_p_stk__Generator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Generator *)  ((stk::SingWave *) x));
}
static void *_p_stk__FileLoopTo_p_stk__FileWvIn(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FileWvIn *)  ((stk::FileLoop *) x));
}
static void *_p_stk__GeneratorTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Generator *) x));
}
static void *_p_stk__DelayATo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::DelayA *) x));
}
static void *_p_stk__FluteTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Flute *) x));
}
static void *_p_stk__WhistleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Whistle *) x));
}
static void *_p_stk__BandedWGTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::BandedWG *) x));
}
static void *_p_stk__BlitSawTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::BlitSaw *) x));
}
static void *_p_stk__SaxofonyTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Saxofony *) x));
}
static void *_p_stk__TapDelayTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::TapDelay *) x));
}
static void *_p_stk__MutexTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Mutex *) x));
}
static void *_p_stk__AsympTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Asymp *) x));
}
static void *_p_stk__BlitTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Blit *) x));
}
static void *_p_stk__IirTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::Iir *) x));
}
static void *_p_stk__TcpServerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Socket *) ((stk::TcpServer *) x));
}
static void *_p_stk__DelayLTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::DelayL *) x));
}
static void *_p_stk__OnePoleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::OnePole *) x));
}
static void *_p_stk__DelayTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::Delay *) x));
}
static void *_p_stk__ModalTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Modal *) x));
}
static void *_p_stk__FirTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::Fir *) x));
}
static void *_p_stk__BlowHoleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::BlowHole *) x));
}
static void *_p_stk__SineWaveTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::SineWave *) x));
}
static void *_p_stk__SamplerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Sampler *) x));
}
static void *_p_stk__RhodeyTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::Rhodey *) x));
}
static void *_p_stk__ModulateTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Modulate *) x));
}
static void *_p_stk__SphereTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Sphere *) x));
}
static void *_p_stk__BeeThreeTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::BeeThree *) x));
}
static void *_p_stk__Mesh2DTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Mesh2D *) x));
}
static void *_p_stk__EchoTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::Echo *) x));
}
static void *_p_stk__NoiseTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Noise *) x));
}
static void *_p_stk__FileReadTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::FileRead *) x));
}
static void *_p_stk__MandolinTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Mandolin *) x));
}
static void *_p_stk__PhonemesTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Phonemes *) x));
}
static void *_p_stk__DrummerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Drummer *) x));
}
static void *_p_stk__VoicFormTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::VoicForm *) x));
}
static void *_p_stk__MidiFileInTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::MidiFileIn *) x));
}
static void *_p_stk__ChorusTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::Chorus *) x));
}
static void *_p_stk__SingWaveTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::SingWave *) x));
}
static void *_p_stk__Vector3DTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Vector3D *) x));
}
static void *_p_stk__FreeVerbTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::FreeVerb *) x));
}
static void *_p_stk__ADSRTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::ADSR *) x));
}
static void *_p_stk__InstrmntTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Instrmnt *) x));
}
static void *_p_stk__FMVoicesTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::FMVoices *) x));
}
static void *_p_stk__TwoZeroTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::TwoZero *) x));
}
static void *_p_stk__FilterTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Filter *) x));
}
static void *_p_stk__SimpleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Simple *) x));
}
static void *_p_stk__FileWriteTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::FileWrite *) x));
}
static void *_p_stk__PRCRevTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::PRCRev *) x));
}
static void *_p_stk__PluckedTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Plucked *) x));
}
static void *_p_stk__EnvelopeTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Envelope *) x));
}
static void *_p_stk__GuitarTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Guitar *) x));
}
static void *_p_stk__ReedTableTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::ReedTable *) x));
}
static void *_p_stk__TwangTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Twang *) x));
}
static void *_p_stk__PercFlutTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::PercFlut *) x));
}
static void *_p_stk__RecorderTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Recorder *) x));
}
static void *_p_stk__ModalBarTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::Modal *) ((stk::ModalBar *) x));
}
static void *_p_stk__PoleZeroTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::PoleZero *) x));
}
static void *_p_stk__EffectTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Effect *) x));
}
static void *_p_stk__SitarTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Sitar *) x));
}
static void *_p_stk__GranulateTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::Granulate *) x));
}
static void *_p_stk__FunctionTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Function *) x));
}
static void *_p_stk__BowedTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Bowed *) x));
}
static void *_p_stk__BlitSquareTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Generator *) ((stk::BlitSquare *) x));
}
static void *_p_stk__JCRevTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::JCRev *) x));
}
static void *_p_stk__FMTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::FM *) x));
}
static void *_p_stk__TwoPoleTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::TwoPole *) x));
}
static void *_p_stk__PitShiftTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::PitShift *) x));
}
static void *_p_stk__LentPitShiftTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::LentPitShift *) x));
}
static void *_p_stk__BrassTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Brass *) x));
}
static void *_p_stk__ResonateTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Resonate *) x));
}
static void *_p_stk__BlowBotlTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::BlowBotl *) x));
}
static void *_p_stk__TcpClientTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Socket *) ((stk::TcpClient *) x));
}
static void *_p_stk__BowTableTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::BowTable *) x));
}
static void *_p_stk__VoicerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Voicer *) x));
}
static void *_p_stk__StifKarpTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::StifKarp *) x));
}
static void *_p_stk__TubeBellTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::TubeBell *) x));
}
static void *_p_stk__ClarinetTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Clarinet *) x));
}
static void *_p_stk__NRevTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Effect *) ((stk::NRev *) x));
}
static void *_p_stk__JetTableTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::JetTable *) x));
}
static void *_p_stk__OneZeroTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::OneZero *) x));
}
static void *_p_stk__SocketTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Socket *) x));
}
static void *_p_stk__UdpSocketTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Socket *) ((stk::UdpSocket *) x));
}
static void *_p_stk__BiQuadTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::BiQuad *) x));
}
static void *_p_stk__MessagerTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Messager *) x));
}
static void *_p_stk__HevyMetlTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::HevyMetl *) x));
}
static void *_p_stk__ThreadTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *)  ((stk::Thread *) x));
}
static void *_p_stk__CubicTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Function *) ((stk::Cubic *) x));
}
static void *_p_stk__FormSwepTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Filter *) ((stk::FormSwep *) x));
}
static void *_p_stk__ShakersTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *) ((stk::Shakers *) x));
}
static void *_p_stk__WurleyTo_p_stk__Stk(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Stk *) (stk::Instrmnt *)(stk::FM *) ((stk::Wurley *) x));
}
static void *_p_stk__ModalBarTo_p_stk__Modal(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Modal *)  ((stk::ModalBar *) x));
}
static void *_p_stk__BlowHoleTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::BlowHole *) x));
}
static void *_p_stk__ShakersTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Shakers *) x));
}
static void *_p_stk__Mesh2DTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Mesh2D *) x));
}
static void *_p_stk__MandolinTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Mandolin *) x));
}
static void *_p_stk__ResonateTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Resonate *) x));
}
static void *_p_stk__SitarTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Sitar *) x));
}
static void *_p_stk__DrummerTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Drummer *) x));
}
static void *_p_stk__WhistleTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Whistle *) x));
}
static void *_p_stk__SamplerTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Sampler *) x));
}
static void *_p_stk__BlowBotlTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::BlowBotl *) x));
}
static void *_p_stk__BrassTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Brass *) x));
}
static void *_p_stk__SimpleTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Simple *) x));
}
static void *_p_stk__VoicFormTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::VoicForm *) x));
}
static void *_p_stk__ModalTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Modal *) x));
}
static void *_p_stk__RecorderTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Recorder *) x));
}
static void *_p_stk__RhodeyTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::Rhodey *) x));
}
static void *_p_stk__StifKarpTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::StifKarp *) x));
}
static void *_p_stk__FMVoicesTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::FMVoices *) x));
}
static void *_p_stk__ClarinetTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Clarinet *) x));
}
static void *_p_stk__BeeThreeTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::BeeThree *) x));
}
static void *_p_stk__SaxofonyTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Saxofony *) x));
}
static void *_p_stk__TubeBellTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::TubeBell *) x));
}
static void *_p_stk__FMTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::FM *) x));
}
static void *_p_stk__FluteTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Flute *) x));
}
static void *_p_stk__BowedTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Bowed *) x));
}
static void *_p_stk__HevyMetlTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::HevyMetl *) x));
}
static void *_p_stk__BandedWGTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::BandedWG *) x));
}
static void *_p_stk__ModalBarTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::Modal *) ((stk::ModalBar *) x));
}
static void *_p_stk__PercFlutTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::PercFlut *) x));
}
static void *_p_stk__WurleyTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *) (stk::FM *) ((stk::Wurley *) x));
}
static void *_p_stk__PluckedTo_p_stk__Instrmnt(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Instrmnt *)  ((stk::Plucked *) x));
}
static void *_p_stk__DelayLTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::DelayL *) x));
}
static void *_p_stk__FirTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::Fir *) x));
}
static void *_p_stk__FormSwepTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::FormSwep *) x));
}
static void *_p_stk__OnePoleTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::OnePole *) x));
}
static void *_p_stk__BiQuadTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::BiQuad *) x));
}
static void *_p_stk__DelayTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::Delay *) x));
}
static void *_p_stk__DelayATo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::DelayA *) x));
}
static void *_p_stk__OneZeroTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::OneZero *) x));
}
static void *_p_stk__TapDelayTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::TapDelay *) x));
}
static void *_p_stk__TwoPoleTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::TwoPole *) x));
}
static void *_p_stk__IirTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::Iir *) x));
}
static void *_p_stk__PoleZeroTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::PoleZero *) x));
}
static void *_p_stk__TwoZeroTo_p_stk__Filter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Filter *)  ((stk::TwoZero *) x));
}
static void *_p_stk__ChorusTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::Chorus *) x));
}
static void *_p_stk__EchoTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::Echo *) x));
}
static void *_p_stk__PRCRevTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::PRCRev *) x));
}
static void *_p_stk__JCRevTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::JCRev *) x));
}
static void *_p_stk__FreeVerbTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::FreeVerb *) x));
}
static void *_p_stk__NRevTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::NRev *) x));
}
static void *_p_stk__LentPitShiftTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::LentPitShift *) x));
}
static void *_p_stk__PitShiftTo_p_stk__Effect(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Effect *)  ((stk::PitShift *) x));
}
static void *_p_stk__ReedTableTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::ReedTable *) x));
}
static void *_p_stk__BowTableTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::BowTable *) x));
}
static void *_p_stk__CubicTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::Cubic *) x));
}
static void *_p_stk__JetTableTo_p_stk__Function(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Function *)  ((stk::JetTable *) x));
}
static void *_p_stk__BeeThreeTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::BeeThree *) x));
}
static void *_p_stk__HevyMetlTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::HevyMetl *) x));
}
static void *_p_stk__PercFlutTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::PercFlut *) x));
}
static void *_p_stk__RhodeyTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::Rhodey *) x));
}
static void *_p_stk__FMVoicesTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::FMVoices *) x));
}
static void *_p_stk__WurleyTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::Wurley *) x));
}
static void *_p_stk__TubeBellTo_p_stk__FM(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::FM *)  ((stk::TubeBell *) x));
}
static void *_p_stk__TcpServerTo_p_stk__Socket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Socket *)  ((stk::TcpServer *) x));
}
static void *_p_stk__TcpClientTo_p_stk__Socket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Socket *)  ((stk::TcpClient *) x));
}
static void *_p_stk__UdpSocketTo_p_stk__Socket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((stk::Socket *)  ((stk::UdpSocket *) x));
}
static swig_type_info _swigt__p_FILE_TYPE = {"_p_FILE_TYPE", "FILE_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Skini__Message = {"_p_Skini__Message", "Skini::Message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_THREAD_FUNCTION = {"_p_THREAD_FUNCTION", "THREAD_FUNCTION *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector3D = {"_p_Vector3D", "Vector3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "stk::FLOAT64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|stk::FLOAT32 *|stk::StkFloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "stk::SINT32 *|intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|stk::SINT16 *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< stk::StkFloat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_t = {"_p_std__vectorT_unsigned_long_t", "std::vector< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stk__ADSR = {"_p_stk__ADSR", "stk::ADSR *", 0, 0, (void*)&_wrap_class_ADSR, 0};
static swig_type_info _swigt__p_stk__Asymp = {"_p_stk__Asymp", "stk::Asymp *", 0, 0, (void*)&_wrap_class_Asymp, 0};
static swig_type_info _swigt__p_stk__BandedWG = {"_p_stk__BandedWG", "stk::BandedWG *", 0, 0, (void*)&_wrap_class_BandedWG, 0};
static swig_type_info _swigt__p_stk__BeeThree = {"_p_stk__BeeThree", "stk::BeeThree *", 0, 0, (void*)&_wrap_class_BeeThree, 0};
static swig_type_info _swigt__p_stk__BiQuad = {"_p_stk__BiQuad", "stk::BiQuad *", 0, 0, (void*)&_wrap_class_BiQuad, 0};
static swig_type_info _swigt__p_stk__Blit = {"_p_stk__Blit", "stk::Blit *", 0, 0, (void*)&_wrap_class_Blit, 0};
static swig_type_info _swigt__p_stk__BlitSaw = {"_p_stk__BlitSaw", "stk::BlitSaw *", 0, 0, (void*)&_wrap_class_BlitSaw, 0};
static swig_type_info _swigt__p_stk__BlitSquare = {"_p_stk__BlitSquare", "stk::BlitSquare *", 0, 0, (void*)&_wrap_class_BlitSquare, 0};
static swig_type_info _swigt__p_stk__BlowBotl = {"_p_stk__BlowBotl", "stk::BlowBotl *", 0, 0, (void*)&_wrap_class_BlowBotl, 0};
static swig_type_info _swigt__p_stk__BlowHole = {"_p_stk__BlowHole", "stk::BlowHole *", 0, 0, (void*)&_wrap_class_BlowHole, 0};
static swig_type_info _swigt__p_stk__BowTable = {"_p_stk__BowTable", "stk::BowTable *", 0, 0, (void*)&_wrap_class_BowTable, 0};
static swig_type_info _swigt__p_stk__Bowed = {"_p_stk__Bowed", "stk::Bowed *", 0, 0, (void*)&_wrap_class_Bowed, 0};
static swig_type_info _swigt__p_stk__Brass = {"_p_stk__Brass", "stk::Brass *", 0, 0, (void*)&_wrap_class_Brass, 0};
static swig_type_info _swigt__p_stk__Chorus = {"_p_stk__Chorus", "stk::Chorus *", 0, 0, (void*)&_wrap_class_Chorus, 0};
static swig_type_info _swigt__p_stk__Clarinet = {"_p_stk__Clarinet", "stk::Clarinet *", 0, 0, (void*)&_wrap_class_Clarinet, 0};
static swig_type_info _swigt__p_stk__Cubic = {"_p_stk__Cubic", "stk::Cubic *", 0, 0, (void*)&_wrap_class_Cubic, 0};
static swig_type_info _swigt__p_stk__Delay = {"_p_stk__Delay", "stk::Delay *", 0, 0, (void*)&_wrap_class_Delay, 0};
static swig_type_info _swigt__p_stk__DelayA = {"_p_stk__DelayA", "stk::DelayA *", 0, 0, (void*)&_wrap_class_DelayA, 0};
static swig_type_info _swigt__p_stk__DelayL = {"_p_stk__DelayL", "stk::DelayL *", 0, 0, (void*)&_wrap_class_DelayL, 0};
static swig_type_info _swigt__p_stk__Drummer = {"_p_stk__Drummer", "stk::Drummer *", 0, 0, (void*)&_wrap_class_Drummer, 0};
static swig_type_info _swigt__p_stk__Echo = {"_p_stk__Echo", "stk::Echo *", 0, 0, (void*)&_wrap_class_Echo, 0};
static swig_type_info _swigt__p_stk__Effect = {"_p_stk__Effect", "stk::Effect *", 0, 0, (void*)&_wrap_class_Effect, 0};
static swig_type_info _swigt__p_stk__Envelope = {"_p_stk__Envelope", "stk::Envelope *", 0, 0, (void*)&_wrap_class_Envelope, 0};
static swig_type_info _swigt__p_stk__FM = {"_p_stk__FM", "stk::FM *", 0, 0, (void*)&_wrap_class_FM, 0};
static swig_type_info _swigt__p_stk__FMVoices = {"_p_stk__FMVoices", "stk::FMVoices *", 0, 0, (void*)&_wrap_class_FMVoices, 0};
static swig_type_info _swigt__p_stk__FileLoop = {"_p_stk__FileLoop", "stk::FileLoop *", 0, 0, (void*)&_wrap_class_FileLoop, 0};
static swig_type_info _swigt__p_stk__FileRead = {"_p_stk__FileRead", "stk::FileRead *", 0, 0, (void*)&_wrap_class_FileRead, 0};
static swig_type_info _swigt__p_stk__FileWrite = {"_p_stk__FileWrite", "stk::FileWrite *", 0, 0, (void*)&_wrap_class_FileWrite, 0};
static swig_type_info _swigt__p_stk__FileWvIn = {"_p_stk__FileWvIn", "stk::FileWvIn *", 0, 0, (void*)&_wrap_class_FileWvIn, 0};
static swig_type_info _swigt__p_stk__FileWvOut = {"_p_stk__FileWvOut", "stk::FileWvOut *", 0, 0, (void*)&_wrap_class_FileWvOut, 0};
static swig_type_info _swigt__p_stk__Filter = {"_p_stk__Filter", "stk::Filter *", 0, 0, (void*)&_wrap_class_Filter, 0};
static swig_type_info _swigt__p_stk__Fir = {"_p_stk__Fir", "stk::Fir *", 0, 0, (void*)&_wrap_class_Fir, 0};
static swig_type_info _swigt__p_stk__Flute = {"_p_stk__Flute", "stk::Flute *", 0, 0, (void*)&_wrap_class_Flute, 0};
static swig_type_info _swigt__p_stk__FormSwep = {"_p_stk__FormSwep", "stk::FormSwep *", 0, 0, (void*)&_wrap_class_FormSwep, 0};
static swig_type_info _swigt__p_stk__FreeVerb = {"_p_stk__FreeVerb", "stk::FreeVerb *", 0, 0, (void*)&_wrap_class_FreeVerb, 0};
static swig_type_info _swigt__p_stk__Function = {"_p_stk__Function", "stk::Function *", 0, 0, (void*)&_wrap_class_Function, 0};
static swig_type_info _swigt__p_stk__Generator = {"_p_stk__Generator", "stk::Generator *", 0, 0, (void*)&_wrap_class_Generator, 0};
static swig_type_info _swigt__p_stk__Granulate = {"_p_stk__Granulate", "stk::Granulate *", 0, 0, (void*)&_wrap_class_Granulate, 0};
static swig_type_info _swigt__p_stk__Guitar = {"_p_stk__Guitar", "stk::Guitar *", 0, 0, (void*)&_wrap_class_Guitar, 0};
static swig_type_info _swigt__p_stk__HevyMetl = {"_p_stk__HevyMetl", "stk::HevyMetl *", 0, 0, (void*)&_wrap_class_HevyMetl, 0};
static swig_type_info _swigt__p_stk__Iir = {"_p_stk__Iir", "stk::Iir *", 0, 0, (void*)&_wrap_class_Iir, 0};
static swig_type_info _swigt__p_stk__InetWvIn = {"_p_stk__InetWvIn", "stk::InetWvIn *", 0, 0, (void*)&_wrap_class_InetWvIn, 0};
static swig_type_info _swigt__p_stk__InetWvOut = {"_p_stk__InetWvOut", "stk::InetWvOut *", 0, 0, (void*)&_wrap_class_InetWvOut, 0};
static swig_type_info _swigt__p_stk__Instrmnt = {"_p_stk__Instrmnt", "stk::Instrmnt *", 0, 0, (void*)&_wrap_class_Instrmnt, 0};
static swig_type_info _swigt__p_stk__JCRev = {"_p_stk__JCRev", "stk::JCRev *", 0, 0, (void*)&_wrap_class_JCRev, 0};
static swig_type_info _swigt__p_stk__JetTable = {"_p_stk__JetTable", "stk::JetTable *", 0, 0, (void*)&_wrap_class_JetTable, 0};
static swig_type_info _swigt__p_stk__LentPitShift = {"_p_stk__LentPitShift", "stk::LentPitShift *", 0, 0, (void*)&_wrap_class_LentPitShift, 0};
static swig_type_info _swigt__p_stk__Mandolin = {"_p_stk__Mandolin", "stk::Mandolin *", 0, 0, (void*)&_wrap_class_Mandolin, 0};
static swig_type_info _swigt__p_stk__Mesh2D = {"_p_stk__Mesh2D", "stk::Mesh2D *", 0, 0, (void*)&_wrap_class_Mesh2D, 0};
static swig_type_info _swigt__p_stk__Messager = {"_p_stk__Messager", "stk::Messager *", 0, 0, (void*)&_wrap_class_Messager, 0};
static swig_type_info _swigt__p_stk__MidiFileIn = {"_p_stk__MidiFileIn", "stk::MidiFileIn *", 0, 0, (void*)&_wrap_class_MidiFileIn, 0};
static swig_type_info _swigt__p_stk__Modal = {"_p_stk__Modal", "stk::Modal *", 0, 0, (void*)&_wrap_class_Modal, 0};
static swig_type_info _swigt__p_stk__ModalBar = {"_p_stk__ModalBar", "stk::ModalBar *", 0, 0, (void*)&_wrap_class_ModalBar, 0};
static swig_type_info _swigt__p_stk__Modulate = {"_p_stk__Modulate", "stk::Modulate *", 0, 0, (void*)&_wrap_class_Modulate, 0};
static swig_type_info _swigt__p_stk__Moog = {"_p_stk__Moog", "stk::Moog *", 0, 0, (void*)&_wrap_class_Moog, 0};
static swig_type_info _swigt__p_stk__Mutex = {"_p_stk__Mutex", "stk::Mutex *", 0, 0, (void*)&_wrap_class_Mutex, 0};
static swig_type_info _swigt__p_stk__NRev = {"_p_stk__NRev", "stk::NRev *", 0, 0, (void*)&_wrap_class_NRev, 0};
static swig_type_info _swigt__p_stk__Noise = {"_p_stk__Noise", "stk::Noise *", 0, 0, (void*)&_wrap_class_Noise, 0};
static swig_type_info _swigt__p_stk__OnePole = {"_p_stk__OnePole", "stk::OnePole *", 0, 0, (void*)&_wrap_class_OnePole, 0};
static swig_type_info _swigt__p_stk__OneZero = {"_p_stk__OneZero", "stk::OneZero *", 0, 0, (void*)&_wrap_class_OneZero, 0};
static swig_type_info _swigt__p_stk__PRCRev = {"_p_stk__PRCRev", "stk::PRCRev *", 0, 0, (void*)&_wrap_class_PRCRev, 0};
static swig_type_info _swigt__p_stk__PercFlut = {"_p_stk__PercFlut", "stk::PercFlut *", 0, 0, (void*)&_wrap_class_PercFlut, 0};
static swig_type_info _swigt__p_stk__Phonemes = {"_p_stk__Phonemes", "stk::Phonemes *", 0, 0, (void*)&_wrap_class_Phonemes, 0};
static swig_type_info _swigt__p_stk__PitShift = {"_p_stk__PitShift", "stk::PitShift *", 0, 0, (void*)&_wrap_class_PitShift, 0};
static swig_type_info _swigt__p_stk__Plucked = {"_p_stk__Plucked", "stk::Plucked *", 0, 0, (void*)&_wrap_class_Plucked, 0};
static swig_type_info _swigt__p_stk__PoleZero = {"_p_stk__PoleZero", "stk::PoleZero *", 0, 0, (void*)&_wrap_class_PoleZero, 0};
static swig_type_info _swigt__p_stk__Recorder = {"_p_stk__Recorder", "stk::Recorder *", 0, 0, (void*)&_wrap_class_Recorder, 0};
static swig_type_info _swigt__p_stk__ReedTable = {"_p_stk__ReedTable", "stk::ReedTable *", 0, 0, (void*)&_wrap_class_ReedTable, 0};
static swig_type_info _swigt__p_stk__Resonate = {"_p_stk__Resonate", "stk::Resonate *", 0, 0, (void*)&_wrap_class_Resonate, 0};
static swig_type_info _swigt__p_stk__Rhodey = {"_p_stk__Rhodey", "stk::Rhodey *", 0, 0, (void*)&_wrap_class_Rhodey, 0};
static swig_type_info _swigt__p_stk__RtWvIn = {"_p_stk__RtWvIn", "stk::RtWvIn *", 0, 0, (void*)&_wrap_class_RtWvIn, 0};
static swig_type_info _swigt__p_stk__RtWvOut = {"_p_stk__RtWvOut", "stk::RtWvOut *", 0, 0, (void*)&_wrap_class_RtWvOut, 0};
static swig_type_info _swigt__p_stk__Sampler = {"_p_stk__Sampler", "stk::Sampler *", 0, 0, (void*)&_wrap_class_Sampler, 0};
static swig_type_info _swigt__p_stk__Saxofony = {"_p_stk__Saxofony", "stk::Saxofony *", 0, 0, (void*)&_wrap_class_Saxofony, 0};
static swig_type_info _swigt__p_stk__Shakers = {"_p_stk__Shakers", "stk::Shakers *", 0, 0, (void*)&_wrap_class_Shakers, 0};
static swig_type_info _swigt__p_stk__Simple = {"_p_stk__Simple", "stk::Simple *", 0, 0, (void*)&_wrap_class_Simple, 0};
static swig_type_info _swigt__p_stk__SineWave = {"_p_stk__SineWave", "stk::SineWave *", 0, 0, (void*)&_wrap_class_SineWave, 0};
static swig_type_info _swigt__p_stk__SingWave = {"_p_stk__SingWave", "stk::SingWave *", 0, 0, (void*)&_wrap_class_SingWave, 0};
static swig_type_info _swigt__p_stk__Sitar = {"_p_stk__Sitar", "stk::Sitar *", 0, 0, (void*)&_wrap_class_Sitar, 0};
static swig_type_info _swigt__p_stk__Socket = {"_p_stk__Socket", "stk::Socket *", 0, 0, (void*)&_wrap_class_Socket, 0};
static swig_type_info _swigt__p_stk__Sphere = {"_p_stk__Sphere", "stk::Sphere *", 0, 0, (void*)&_wrap_class_Sphere, 0};
static swig_type_info _swigt__p_stk__StifKarp = {"_p_stk__StifKarp", "stk::StifKarp *", 0, 0, (void*)&_wrap_class_StifKarp, 0};
static swig_type_info _swigt__p_stk__Stk = {"_p_stk__Stk", "stk::Stk *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_stk__StkError = {"_p_stk__StkError", "stk::StkError *", 0, 0, (void*)&_wrap_class_StkError, 0};
static swig_type_info _swigt__p_stk__StkFrames = {"_p_stk__StkFrames", "stk::StkFrames *", 0, 0, (void*)&_wrap_class_StkFrames, 0};
static swig_type_info _swigt__p_stk__TapDelay = {"_p_stk__TapDelay", "stk::TapDelay *", 0, 0, (void*)&_wrap_class_TapDelay, 0};
static swig_type_info _swigt__p_stk__TcpClient = {"_p_stk__TcpClient", "stk::TcpClient *", 0, 0, (void*)&_wrap_class_TcpClient, 0};
static swig_type_info _swigt__p_stk__TcpServer = {"_p_stk__TcpServer", "stk::TcpServer *", 0, 0, (void*)&_wrap_class_TcpServer, 0};
static swig_type_info _swigt__p_stk__Thread = {"_p_stk__Thread", "stk::Thread *", 0, 0, (void*)&_wrap_class_Thread, 0};
static swig_type_info _swigt__p_stk__TubeBell = {"_p_stk__TubeBell", "stk::TubeBell *", 0, 0, (void*)&_wrap_class_TubeBell, 0};
static swig_type_info _swigt__p_stk__Twang = {"_p_stk__Twang", "stk::Twang *", 0, 0, (void*)&_wrap_class_Twang, 0};
static swig_type_info _swigt__p_stk__TwoPole = {"_p_stk__TwoPole", "stk::TwoPole *", 0, 0, (void*)&_wrap_class_TwoPole, 0};
static swig_type_info _swigt__p_stk__TwoZero = {"_p_stk__TwoZero", "stk::TwoZero *", 0, 0, (void*)&_wrap_class_TwoZero, 0};
static swig_type_info _swigt__p_stk__UdpSocket = {"_p_stk__UdpSocket", "stk::UdpSocket *", 0, 0, (void*)&_wrap_class_UdpSocket, 0};
static swig_type_info _swigt__p_stk__Vector3D = {"_p_stk__Vector3D", "stk::Vector3D *", 0, 0, (void*)&_wrap_class_Vector3D, 0};
static swig_type_info _swigt__p_stk__VoicForm = {"_p_stk__VoicForm", "stk::VoicForm *", 0, 0, (void*)&_wrap_class_VoicForm, 0};
static swig_type_info _swigt__p_stk__Voicer = {"_p_stk__Voicer", "stk::Voicer *", 0, 0, (void*)&_wrap_class_Voicer, 0};
static swig_type_info _swigt__p_stk__Whistle = {"_p_stk__Whistle", "stk::Whistle *", 0, 0, (void*)&_wrap_class_Whistle, 0};
static swig_type_info _swigt__p_stk__Wurley = {"_p_stk__Wurley", "stk::Wurley *", 0, 0, (void*)&_wrap_class_Wurley, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "stk::UINT32 *|uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *|stk::UINT16 *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE_TYPE,
  &_swigt__p_Skini__Message,
  &_swigt__p_THREAD_FUNCTION,
  &_swigt__p_Vector3D,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_long_t,
  &_swigt__p_stk__ADSR,
  &_swigt__p_stk__Asymp,
  &_swigt__p_stk__BandedWG,
  &_swigt__p_stk__BeeThree,
  &_swigt__p_stk__BiQuad,
  &_swigt__p_stk__Blit,
  &_swigt__p_stk__BlitSaw,
  &_swigt__p_stk__BlitSquare,
  &_swigt__p_stk__BlowBotl,
  &_swigt__p_stk__BlowHole,
  &_swigt__p_stk__BowTable,
  &_swigt__p_stk__Bowed,
  &_swigt__p_stk__Brass,
  &_swigt__p_stk__Chorus,
  &_swigt__p_stk__Clarinet,
  &_swigt__p_stk__Cubic,
  &_swigt__p_stk__Delay,
  &_swigt__p_stk__DelayA,
  &_swigt__p_stk__DelayL,
  &_swigt__p_stk__Drummer,
  &_swigt__p_stk__Echo,
  &_swigt__p_stk__Effect,
  &_swigt__p_stk__Envelope,
  &_swigt__p_stk__FM,
  &_swigt__p_stk__FMVoices,
  &_swigt__p_stk__FileLoop,
  &_swigt__p_stk__FileRead,
  &_swigt__p_stk__FileWrite,
  &_swigt__p_stk__FileWvIn,
  &_swigt__p_stk__FileWvOut,
  &_swigt__p_stk__Filter,
  &_swigt__p_stk__Fir,
  &_swigt__p_stk__Flute,
  &_swigt__p_stk__FormSwep,
  &_swigt__p_stk__FreeVerb,
  &_swigt__p_stk__Function,
  &_swigt__p_stk__Generator,
  &_swigt__p_stk__Granulate,
  &_swigt__p_stk__Guitar,
  &_swigt__p_stk__HevyMetl,
  &_swigt__p_stk__Iir,
  &_swigt__p_stk__InetWvIn,
  &_swigt__p_stk__InetWvOut,
  &_swigt__p_stk__Instrmnt,
  &_swigt__p_stk__JCRev,
  &_swigt__p_stk__JetTable,
  &_swigt__p_stk__LentPitShift,
  &_swigt__p_stk__Mandolin,
  &_swigt__p_stk__Mesh2D,
  &_swigt__p_stk__Messager,
  &_swigt__p_stk__MidiFileIn,
  &_swigt__p_stk__Modal,
  &_swigt__p_stk__ModalBar,
  &_swigt__p_stk__Modulate,
  &_swigt__p_stk__Moog,
  &_swigt__p_stk__Mutex,
  &_swigt__p_stk__NRev,
  &_swigt__p_stk__Noise,
  &_swigt__p_stk__OnePole,
  &_swigt__p_stk__OneZero,
  &_swigt__p_stk__PRCRev,
  &_swigt__p_stk__PercFlut,
  &_swigt__p_stk__Phonemes,
  &_swigt__p_stk__PitShift,
  &_swigt__p_stk__Plucked,
  &_swigt__p_stk__PoleZero,
  &_swigt__p_stk__Recorder,
  &_swigt__p_stk__ReedTable,
  &_swigt__p_stk__Resonate,
  &_swigt__p_stk__Rhodey,
  &_swigt__p_stk__RtWvIn,
  &_swigt__p_stk__RtWvOut,
  &_swigt__p_stk__Sampler,
  &_swigt__p_stk__Saxofony,
  &_swigt__p_stk__Shakers,
  &_swigt__p_stk__Simple,
  &_swigt__p_stk__SineWave,
  &_swigt__p_stk__SingWave,
  &_swigt__p_stk__Sitar,
  &_swigt__p_stk__Socket,
  &_swigt__p_stk__Sphere,
  &_swigt__p_stk__StifKarp,
  &_swigt__p_stk__Stk,
  &_swigt__p_stk__StkError,
  &_swigt__p_stk__StkFrames,
  &_swigt__p_stk__TapDelay,
  &_swigt__p_stk__TcpClient,
  &_swigt__p_stk__TcpServer,
  &_swigt__p_stk__Thread,
  &_swigt__p_stk__TubeBell,
  &_swigt__p_stk__Twang,
  &_swigt__p_stk__TwoPole,
  &_swigt__p_stk__TwoZero,
  &_swigt__p_stk__UdpSocket,
  &_swigt__p_stk__Vector3D,
  &_swigt__p_stk__VoicForm,
  &_swigt__p_stk__Voicer,
  &_swigt__p_stk__Whistle,
  &_swigt__p_stk__Wurley,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_FILE_TYPE[] = {  {&_swigt__p_FILE_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Skini__Message[] = {  {&_swigt__p_Skini__Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_THREAD_FUNCTION[] = {  {&_swigt__p_THREAD_FUNCTION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector3D[] = {  {&_swigt__p_Vector3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__ADSR[] = {  {&_swigt__p_stk__ADSR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Asymp[] = {  {&_swigt__p_stk__Asymp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BandedWG[] = {  {&_swigt__p_stk__BandedWG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BeeThree[] = {  {&_swigt__p_stk__BeeThree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BiQuad[] = {  {&_swigt__p_stk__BiQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Blit[] = {  {&_swigt__p_stk__Blit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlitSaw[] = {  {&_swigt__p_stk__BlitSaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlitSquare[] = {  {&_swigt__p_stk__BlitSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlowBotl[] = {  {&_swigt__p_stk__BlowBotl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BlowHole[] = {  {&_swigt__p_stk__BlowHole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__BowTable[] = {  {&_swigt__p_stk__BowTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Bowed[] = {  {&_swigt__p_stk__Bowed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Brass[] = {  {&_swigt__p_stk__Brass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Chorus[] = {  {&_swigt__p_stk__Chorus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Clarinet[] = {  {&_swigt__p_stk__Clarinet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Cubic[] = {  {&_swigt__p_stk__Cubic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Delay[] = {  {&_swigt__p_stk__Delay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__DelayA[] = {  {&_swigt__p_stk__DelayA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__DelayL[] = {  {&_swigt__p_stk__DelayL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Drummer[] = {  {&_swigt__p_stk__Drummer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Echo[] = {  {&_swigt__p_stk__Echo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Effect[] = {  {&_swigt__p_stk__Chorus, _p_stk__ChorusTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__PRCRev, _p_stk__PRCRevTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__NRev, _p_stk__NRevTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__Effect, 0, 0, 0},  {&_swigt__p_stk__Echo, _p_stk__EchoTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__JCRev, _p_stk__JCRevTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__FreeVerb, _p_stk__FreeVerbTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__LentPitShift, _p_stk__LentPitShiftTo_p_stk__Effect, 0, 0},  {&_swigt__p_stk__PitShift, _p_stk__PitShiftTo_p_stk__Effect, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Envelope[] = {  {&_swigt__p_stk__Envelope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FM[] = {  {&_swigt__p_stk__BeeThree, _p_stk__BeeThreeTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__HevyMetl, _p_stk__HevyMetlTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__PercFlut, _p_stk__PercFlutTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__Rhodey, _p_stk__RhodeyTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__FMVoices, _p_stk__FMVoicesTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__FM, 0, 0, 0},  {&_swigt__p_stk__Wurley, _p_stk__WurleyTo_p_stk__FM, 0, 0},  {&_swigt__p_stk__TubeBell, _p_stk__TubeBellTo_p_stk__FM, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FMVoices[] = {  {&_swigt__p_stk__FMVoices, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileLoop[] = {  {&_swigt__p_stk__FileLoop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileRead[] = {  {&_swigt__p_stk__FileRead, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileWrite[] = {  {&_swigt__p_stk__FileWrite, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileWvIn[] = {  {&_swigt__p_stk__FileLoop, _p_stk__FileLoopTo_p_stk__FileWvIn, 0, 0},  {&_swigt__p_stk__FileWvIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FileWvOut[] = {  {&_swigt__p_stk__FileWvOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Filter[] = {  {&_swigt__p_stk__PoleZero, _p_stk__PoleZeroTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__OneZero, _p_stk__OneZeroTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Iir, _p_stk__IirTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__FormSwep, _p_stk__FormSwepTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__OnePole, _p_stk__OnePoleTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__TwoZero, _p_stk__TwoZeroTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Delay, _p_stk__DelayTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__TapDelay, _p_stk__TapDelayTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__DelayL, _p_stk__DelayLTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Fir, _p_stk__FirTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__Filter, 0, 0, 0},  {&_swigt__p_stk__TwoPole, _p_stk__TwoPoleTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__BiQuad, _p_stk__BiQuadTo_p_stk__Filter, 0, 0},  {&_swigt__p_stk__DelayA, _p_stk__DelayATo_p_stk__Filter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Fir[] = {  {&_swigt__p_stk__Fir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Flute[] = {  {&_swigt__p_stk__Flute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FormSwep[] = {  {&_swigt__p_stk__FormSwep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__FreeVerb[] = {  {&_swigt__p_stk__FreeVerb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Function[] = {  {&_swigt__p_stk__ReedTable, _p_stk__ReedTableTo_p_stk__Function, 0, 0},  {&_swigt__p_stk__Function, 0, 0, 0},  {&_swigt__p_stk__BowTable, _p_stk__BowTableTo_p_stk__Function, 0, 0},  {&_swigt__p_stk__JetTable, _p_stk__JetTableTo_p_stk__Function, 0, 0},  {&_swigt__p_stk__Cubic, _p_stk__CubicTo_p_stk__Function, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Generator[] = {  {&_swigt__p_stk__BlitSquare, _p_stk__BlitSquareTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Asymp, _p_stk__AsympTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Noise, _p_stk__NoiseTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__BlitSaw, _p_stk__BlitSawTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Generator, 0, 0, 0},  {&_swigt__p_stk__Envelope, _p_stk__EnvelopeTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Granulate, _p_stk__GranulateTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__SineWave, _p_stk__SineWaveTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__ADSR, _p_stk__ADSRTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Blit, _p_stk__BlitTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__Modulate, _p_stk__ModulateTo_p_stk__Generator, 0, 0},  {&_swigt__p_stk__SingWave, _p_stk__SingWaveTo_p_stk__Generator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Granulate[] = {  {&_swigt__p_stk__Granulate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Guitar[] = {  {&_swigt__p_stk__Guitar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__HevyMetl[] = {  {&_swigt__p_stk__HevyMetl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Iir[] = {  {&_swigt__p_stk__Iir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__InetWvIn[] = {  {&_swigt__p_stk__InetWvIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__InetWvOut[] = {  {&_swigt__p_stk__InetWvOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Instrmnt[] = {  {&_swigt__p_stk__FM, _p_stk__FMTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BlowHole, _p_stk__BlowHoleTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Shakers, _p_stk__ShakersTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Instrmnt, 0, 0, 0},  {&_swigt__p_stk__Mandolin, _p_stk__MandolinTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Resonate, _p_stk__ResonateTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Simple, _p_stk__SimpleTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Drummer, _p_stk__DrummerTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Whistle, _p_stk__WhistleTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Sitar, _p_stk__SitarTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Sampler, _p_stk__SamplerTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Rhodey, _p_stk__RhodeyTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BlowBotl, _p_stk__BlowBotlTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__VoicForm, _p_stk__VoicFormTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Brass, _p_stk__BrassTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Recorder, _p_stk__RecorderTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__StifKarp, _p_stk__StifKarpTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Wurley, _p_stk__WurleyTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__FMVoices, _p_stk__FMVoicesTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BeeThree, _p_stk__BeeThreeTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Modal, _p_stk__ModalTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Clarinet, _p_stk__ClarinetTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Saxofony, _p_stk__SaxofonyTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__TubeBell, _p_stk__TubeBellTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__HevyMetl, _p_stk__HevyMetlTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__BandedWG, _p_stk__BandedWGTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__ModalBar, _p_stk__ModalBarTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Flute, _p_stk__FluteTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Bowed, _p_stk__BowedTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__PercFlut, _p_stk__PercFlutTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Mesh2D, _p_stk__Mesh2DTo_p_stk__Instrmnt, 0, 0},  {&_swigt__p_stk__Plucked, _p_stk__PluckedTo_p_stk__Instrmnt, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__JCRev[] = {  {&_swigt__p_stk__JCRev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__JetTable[] = {  {&_swigt__p_stk__JetTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__LentPitShift[] = {  {&_swigt__p_stk__LentPitShift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Mandolin[] = {  {&_swigt__p_stk__Mandolin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Mesh2D[] = {  {&_swigt__p_stk__Mesh2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Messager[] = {  {&_swigt__p_stk__Messager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__MidiFileIn[] = {  {&_swigt__p_stk__MidiFileIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Modal[] = {  {&_swigt__p_stk__Modal, 0, 0, 0},  {&_swigt__p_stk__ModalBar, _p_stk__ModalBarTo_p_stk__Modal, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__ModalBar[] = {  {&_swigt__p_stk__ModalBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Modulate[] = {  {&_swigt__p_stk__Modulate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Moog[] = {  {&_swigt__p_stk__Moog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Mutex[] = {  {&_swigt__p_stk__Mutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__NRev[] = {  {&_swigt__p_stk__NRev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Noise[] = {  {&_swigt__p_stk__Noise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__OnePole[] = {  {&_swigt__p_stk__OnePole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__OneZero[] = {  {&_swigt__p_stk__OneZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PRCRev[] = {  {&_swigt__p_stk__PRCRev, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PercFlut[] = {  {&_swigt__p_stk__PercFlut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Phonemes[] = {  {&_swigt__p_stk__Phonemes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PitShift[] = {  {&_swigt__p_stk__PitShift, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Plucked[] = {  {&_swigt__p_stk__Plucked, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__PoleZero[] = {  {&_swigt__p_stk__PoleZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Recorder[] = {  {&_swigt__p_stk__Recorder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__ReedTable[] = {  {&_swigt__p_stk__ReedTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Resonate[] = {  {&_swigt__p_stk__Resonate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Rhodey[] = {  {&_swigt__p_stk__Rhodey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__RtWvIn[] = {  {&_swigt__p_stk__RtWvIn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__RtWvOut[] = {  {&_swigt__p_stk__RtWvOut, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Sampler[] = {  {&_swigt__p_stk__Sampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Saxofony[] = {  {&_swigt__p_stk__Saxofony, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Shakers[] = {  {&_swigt__p_stk__Shakers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Simple[] = {  {&_swigt__p_stk__Simple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__SineWave[] = {  {&_swigt__p_stk__SineWave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__SingWave[] = {  {&_swigt__p_stk__SingWave, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Sitar[] = {  {&_swigt__p_stk__Sitar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Socket[] = {  {&_swigt__p_stk__Socket, 0, 0, 0},  {&_swigt__p_stk__TcpServer, _p_stk__TcpServerTo_p_stk__Socket, 0, 0},  {&_swigt__p_stk__TcpClient, _p_stk__TcpClientTo_p_stk__Socket, 0, 0},  {&_swigt__p_stk__UdpSocket, _p_stk__UdpSocketTo_p_stk__Socket, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Sphere[] = {  {&_swigt__p_stk__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__StifKarp[] = {  {&_swigt__p_stk__StifKarp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Stk[] = {  {&_swigt__p_stk__Whistle, _p_stk__WhistleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Generator, _p_stk__GeneratorTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BandedWG, _p_stk__BandedWGTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlitSaw, _p_stk__BlitSawTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Saxofony, _p_stk__SaxofonyTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TapDelay, _p_stk__TapDelayTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Chorus, _p_stk__ChorusTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Delay, _p_stk__DelayTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Echo, _p_stk__EchoTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Modal, _p_stk__ModalTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TcpServer, _p_stk__TcpServerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__OnePole, _p_stk__OnePoleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Simple, _p_stk__SimpleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PRCRev, _p_stk__PRCRevTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Filter, _p_stk__FilterTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Sampler, _p_stk__SamplerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlowHole, _p_stk__BlowHoleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__SineWave, _p_stk__SineWaveTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Noise, _p_stk__NoiseTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Guitar, _p_stk__GuitarTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Modulate, _p_stk__ModulateTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__ADSR, _p_stk__ADSRTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BeeThree, _p_stk__BeeThreeTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Effect, _p_stk__EffectTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FileRead, _p_stk__FileReadTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Stk, 0, 0, 0},  {&_swigt__p_stk__Iir, _p_stk__IirTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Mandolin, _p_stk__MandolinTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Phonemes, _p_stk__PhonemesTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__VoicForm, _p_stk__VoicFormTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Drummer, _p_stk__DrummerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__MidiFileIn, _p_stk__MidiFileInTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FM, _p_stk__FMTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__SingWave, _p_stk__SingWaveTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Fir, _p_stk__FirTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Vector3D, _p_stk__Vector3DTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FreeVerb, _p_stk__FreeVerbTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Instrmnt, _p_stk__InstrmntTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Twang, _p_stk__TwangTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Voicer, _p_stk__VoicerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FMVoices, _p_stk__FMVoicesTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TwoZero, _p_stk__TwoZeroTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Sitar, _p_stk__SitarTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Plucked, _p_stk__PluckedTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FileWrite, _p_stk__FileWriteTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Envelope, _p_stk__EnvelopeTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__ReedTable, _p_stk__ReedTableTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Socket, _p_stk__SocketTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PercFlut, _p_stk__PercFlutTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BiQuad, _p_stk__BiQuadTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Recorder, _p_stk__RecorderTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Thread, _p_stk__ThreadTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__ModalBar, _p_stk__ModalBarTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PoleZero, _p_stk__PoleZeroTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Bowed, _p_stk__BowedTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Wurley, _p_stk__WurleyTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__DelayA, _p_stk__DelayATo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__JCRev, _p_stk__JCRevTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__NRev, _p_stk__NRevTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Brass, _p_stk__BrassTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Granulate, _p_stk__GranulateTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Function, _p_stk__FunctionTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlitSquare, _p_stk__BlitSquareTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TwoPole, _p_stk__TwoPoleTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__PitShift, _p_stk__PitShiftTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__LentPitShift, _p_stk__LentPitShiftTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__DelayL, _p_stk__DelayLTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Resonate, _p_stk__ResonateTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BlowBotl, _p_stk__BlowBotlTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TcpClient, _p_stk__TcpClientTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__BowTable, _p_stk__BowTableTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__StifKarp, _p_stk__StifKarpTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__TubeBell, _p_stk__TubeBellTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Blit, _p_stk__BlitTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Cubic, _p_stk__CubicTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Rhodey, _p_stk__RhodeyTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Clarinet, _p_stk__ClarinetTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Flute, _p_stk__FluteTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__JetTable, _p_stk__JetTableTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__OneZero, _p_stk__OneZeroTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__UdpSocket, _p_stk__UdpSocketTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Sphere, _p_stk__SphereTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__HevyMetl, _p_stk__HevyMetlTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Messager, _p_stk__MessagerTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Mesh2D, _p_stk__Mesh2DTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Mutex, _p_stk__MutexTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Asymp, _p_stk__AsympTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__FormSwep, _p_stk__FormSwepTo_p_stk__Stk, 0, 0},  {&_swigt__p_stk__Shakers, _p_stk__ShakersTo_p_stk__Stk, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__StkError[] = {  {&_swigt__p_stk__StkError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__StkFrames[] = {  {&_swigt__p_stk__StkFrames, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TapDelay[] = {  {&_swigt__p_stk__TapDelay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TcpClient[] = {  {&_swigt__p_stk__TcpClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TcpServer[] = {  {&_swigt__p_stk__TcpServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Thread[] = {  {&_swigt__p_stk__Thread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TubeBell[] = {  {&_swigt__p_stk__TubeBell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Twang[] = {  {&_swigt__p_stk__Twang, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TwoPole[] = {  {&_swigt__p_stk__TwoPole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__TwoZero[] = {  {&_swigt__p_stk__TwoZero, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__UdpSocket[] = {  {&_swigt__p_stk__UdpSocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Vector3D[] = {  {&_swigt__p_stk__Vector3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__VoicForm[] = {  {&_swigt__p_stk__VoicForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Voicer[] = {  {&_swigt__p_stk__Voicer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Whistle[] = {  {&_swigt__p_stk__Whistle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_stk__Wurley[] = {  {&_swigt__p_stk__Wurley, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE_TYPE,
  _swigc__p_Skini__Message,
  _swigc__p_THREAD_FUNCTION,
  _swigc__p_Vector3D,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_long_t,
  _swigc__p_stk__ADSR,
  _swigc__p_stk__Asymp,
  _swigc__p_stk__BandedWG,
  _swigc__p_stk__BeeThree,
  _swigc__p_stk__BiQuad,
  _swigc__p_stk__Blit,
  _swigc__p_stk__BlitSaw,
  _swigc__p_stk__BlitSquare,
  _swigc__p_stk__BlowBotl,
  _swigc__p_stk__BlowHole,
  _swigc__p_stk__BowTable,
  _swigc__p_stk__Bowed,
  _swigc__p_stk__Brass,
  _swigc__p_stk__Chorus,
  _swigc__p_stk__Clarinet,
  _swigc__p_stk__Cubic,
  _swigc__p_stk__Delay,
  _swigc__p_stk__DelayA,
  _swigc__p_stk__DelayL,
  _swigc__p_stk__Drummer,
  _swigc__p_stk__Echo,
  _swigc__p_stk__Effect,
  _swigc__p_stk__Envelope,
  _swigc__p_stk__FM,
  _swigc__p_stk__FMVoices,
  _swigc__p_stk__FileLoop,
  _swigc__p_stk__FileRead,
  _swigc__p_stk__FileWrite,
  _swigc__p_stk__FileWvIn,
  _swigc__p_stk__FileWvOut,
  _swigc__p_stk__Filter,
  _swigc__p_stk__Fir,
  _swigc__p_stk__Flute,
  _swigc__p_stk__FormSwep,
  _swigc__p_stk__FreeVerb,
  _swigc__p_stk__Function,
  _swigc__p_stk__Generator,
  _swigc__p_stk__Granulate,
  _swigc__p_stk__Guitar,
  _swigc__p_stk__HevyMetl,
  _swigc__p_stk__Iir,
  _swigc__p_stk__InetWvIn,
  _swigc__p_stk__InetWvOut,
  _swigc__p_stk__Instrmnt,
  _swigc__p_stk__JCRev,
  _swigc__p_stk__JetTable,
  _swigc__p_stk__LentPitShift,
  _swigc__p_stk__Mandolin,
  _swigc__p_stk__Mesh2D,
  _swigc__p_stk__Messager,
  _swigc__p_stk__MidiFileIn,
  _swigc__p_stk__Modal,
  _swigc__p_stk__ModalBar,
  _swigc__p_stk__Modulate,
  _swigc__p_stk__Moog,
  _swigc__p_stk__Mutex,
  _swigc__p_stk__NRev,
  _swigc__p_stk__Noise,
  _swigc__p_stk__OnePole,
  _swigc__p_stk__OneZero,
  _swigc__p_stk__PRCRev,
  _swigc__p_stk__PercFlut,
  _swigc__p_stk__Phonemes,
  _swigc__p_stk__PitShift,
  _swigc__p_stk__Plucked,
  _swigc__p_stk__PoleZero,
  _swigc__p_stk__Recorder,
  _swigc__p_stk__ReedTable,
  _swigc__p_stk__Resonate,
  _swigc__p_stk__Rhodey,
  _swigc__p_stk__RtWvIn,
  _swigc__p_stk__RtWvOut,
  _swigc__p_stk__Sampler,
  _swigc__p_stk__Saxofony,
  _swigc__p_stk__Shakers,
  _swigc__p_stk__Simple,
  _swigc__p_stk__SineWave,
  _swigc__p_stk__SingWave,
  _swigc__p_stk__Sitar,
  _swigc__p_stk__Socket,
  _swigc__p_stk__Sphere,
  _swigc__p_stk__StifKarp,
  _swigc__p_stk__Stk,
  _swigc__p_stk__StkError,
  _swigc__p_stk__StkFrames,
  _swigc__p_stk__TapDelay,
  _swigc__p_stk__TcpClient,
  _swigc__p_stk__TcpServer,
  _swigc__p_stk__Thread,
  _swigc__p_stk__TubeBell,
  _swigc__p_stk__Twang,
  _swigc__p_stk__TwoPole,
  _swigc__p_stk__TwoZero,
  _swigc__p_stk__UdpSocket,
  _swigc__p_stk__Vector3D,
  _swigc__p_stk__VoicForm,
  _swigc__p_stk__Voicer,
  _swigc__p_stk__Whistle,
  _swigc__p_stk__Wurley,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

