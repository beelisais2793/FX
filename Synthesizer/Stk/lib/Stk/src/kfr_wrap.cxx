/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DSP__BandPassFilterT_double_t swig_types[0]
#define SWIGTYPE_p_DSP__BandPassFilterT_float_t swig_types[1]
#define SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t swig_types[2]
#define SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t swig_types[3]
#define SWIGTYPE_p_DSP__BesselFilterT_float_t swig_types[4]
#define SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t swig_types[5]
#define SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t swig_types[6]
#define SWIGTYPE_p_DSP__BiQuadParamsT_double_t swig_types[7]
#define SWIGTYPE_p_DSP__BiQuadParamsT_float_t swig_types[8]
#define SWIGTYPE_p_DSP__BiquadT_double_t swig_types[9]
#define SWIGTYPE_p_DSP__BiquadT_float_t swig_types[10]
#define SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t swig_types[11]
#define SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t swig_types[12]
#define SWIGTYPE_p_DSP__ButterworthFilterT_float_t swig_types[13]
#define SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t swig_types[14]
#define SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t swig_types[15]
#define SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t swig_types[16]
#define SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t swig_types[17]
#define SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t swig_types[18]
#define SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t swig_types[19]
#define SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t swig_types[20]
#define SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t swig_types[21]
#define SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t swig_types[22]
#define SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t swig_types[23]
#define SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t swig_types[24]
#define SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t swig_types[25]
#define SWIGTYPE_p_DSP__ComplexT_double_t swig_types[26]
#define SWIGTYPE_p_DSP__ComplexT_float_t swig_types[27]
#define SWIGTYPE_p_DSP__ConvolveFilterT_float_t swig_types[28]
#define SWIGTYPE_p_DSP__DCTPlanT_float_t swig_types[29]
#define SWIGTYPE_p_DSP__DFTPlanT_float_t swig_types[30]
#define SWIGTYPE_p_DSP__DFTRealPlanT_float_t swig_types[31]
#define SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t swig_types[32]
#define SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t swig_types[33]
#define SWIGTYPE_p_DSP__FIRFilterT_float_t swig_types[34]
#define SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t swig_types[35]
#define SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t swig_types[36]
#define SWIGTYPE_p_DSP__FlacReaderT_double_t swig_types[37]
#define SWIGTYPE_p_DSP__FlacReaderT_float_t swig_types[38]
#define SWIGTYPE_p_DSP__HighPassFilterT_double_t swig_types[39]
#define SWIGTYPE_p_DSP__HighPassFilterT_float_t swig_types[40]
#define SWIGTYPE_p_DSP__HighShelfFilterT_double_t swig_types[41]
#define SWIGTYPE_p_DSP__HighShelfFilterT_float_t swig_types[42]
#define SWIGTYPE_p_DSP__LowPassFilterT_double_t swig_types[43]
#define SWIGTYPE_p_DSP__LowPassFilterT_float_t swig_types[44]
#define SWIGTYPE_p_DSP__LowShelfFilterT_double_t swig_types[45]
#define SWIGTYPE_p_DSP__LowShelfFilterT_float_t swig_types[46]
#define SWIGTYPE_p_DSP__MP3ReaderT_double_t swig_types[47]
#define SWIGTYPE_p_DSP__MP3ReaderT_float_t swig_types[48]
#define SWIGTYPE_p_DSP__NotchFilterT_double_t swig_types[49]
#define SWIGTYPE_p_DSP__NotchFilterT_float_t swig_types[50]
#define SWIGTYPE_p_DSP__PeakFilterT_double_t swig_types[51]
#define SWIGTYPE_p_DSP__PeakFilterT_float_t swig_types[52]
#define SWIGTYPE_p_DSP__ScalarT_double_t swig_types[53]
#define SWIGTYPE_p_DSP__ScalarT_float_t swig_types[54]
#define SWIGTYPE_p_DSP__ScalarT_int64_t_t swig_types[55]
#define SWIGTYPE_p_DSP__ScalarT_int_t swig_types[56]
#define SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t swig_types[57]
#define SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t swig_types[58]
#define SWIGTYPE_p_DSP__ScalarT_short_t swig_types[59]
#define SWIGTYPE_p_DSP__ScalarT_signed_char_t swig_types[60]
#define SWIGTYPE_p_DSP__ScalarT_u64_t swig_types[61]
#define SWIGTYPE_p_DSP__ScalarT_unsigned_char_t swig_types[62]
#define SWIGTYPE_p_DSP__ScalarT_unsigned_int_t swig_types[63]
#define SWIGTYPE_p_DSP__ScalarT_unsigned_short_t swig_types[64]
#define SWIGTYPE_p_DSP__UniComplexT_double_t swig_types[65]
#define SWIGTYPE_p_DSP__UniComplexT_float_t swig_types[66]
#define SWIGTYPE_p_DSP__UniVector2DT_double_t swig_types[67]
#define SWIGTYPE_p_DSP__UniVector2DT_float_t swig_types[68]
#define SWIGTYPE_p_DSP__UniVectorT_double_t swig_types[69]
#define SWIGTYPE_p_DSP__UniVectorT_float_t swig_types[70]
#define SWIGTYPE_p_DSP__UniVectorT_int64_t_t swig_types[71]
#define SWIGTYPE_p_DSP__UniVectorT_int_t swig_types[72]
#define SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t swig_types[73]
#define SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t swig_types[74]
#define SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t swig_types[75]
#define SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t swig_types[76]
#define SWIGTYPE_p_DSP__UniVectorT_short_t swig_types[77]
#define SWIGTYPE_p_DSP__UniVectorT_signed_char_t swig_types[78]
#define SWIGTYPE_p_DSP__UniVectorT_u64_t swig_types[79]
#define SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t swig_types[80]
#define SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t swig_types[81]
#define SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t swig_types[82]
#define SWIGTYPE_p_DSP__WavReaderT_double_t swig_types[83]
#define SWIGTYPE_p_DSP__WavReaderT_float_t swig_types[84]
#define SWIGTYPE_p_DSP__WavWriterT_double_t swig_types[85]
#define SWIGTYPE_p_DSP__WavWriterT_float_t swig_types[86]
#define SWIGTYPE_p_difference_type swig_types[87]
#define SWIGTYPE_p_double swig_types[88]
#define SWIGTYPE_p_float swig_types[89]
#define SWIGTYPE_p_int swig_types[90]
#define SWIGTYPE_p_int64_t swig_types[91]
#define SWIGTYPE_p_kfr__audio_format_and_length swig_types[92]
#define SWIGTYPE_p_kfr__audio_reader_flacT_double_t swig_types[93]
#define SWIGTYPE_p_kfr__audio_reader_flacT_float_t swig_types[94]
#define SWIGTYPE_p_kfr__audio_reader_mp3T_double_t swig_types[95]
#define SWIGTYPE_p_kfr__audio_reader_mp3T_float_t swig_types[96]
#define SWIGTYPE_p_kfr__audio_writer_wavT_double_t swig_types[97]
#define SWIGTYPE_p_kfr__audio_writer_wavT_float_t swig_types[98]
#define SWIGTYPE_p_kfr__biquad_filterT_double_t swig_types[99]
#define SWIGTYPE_p_kfr__biquad_filterT_float_t swig_types[100]
#define SWIGTYPE_p_kfr__biquad_paramsT_double_t swig_types[101]
#define SWIGTYPE_p_kfr__biquad_paramsT_float_t swig_types[102]
#define SWIGTYPE_p_kfr__complexT_double_t swig_types[103]
#define SWIGTYPE_p_kfr__complexT_float_t swig_types[104]
#define SWIGTYPE_p_kfr__dft_order swig_types[105]
#define SWIGTYPE_p_kfr__expression_pointerT_double_t swig_types[106]
#define SWIGTYPE_p_kfr__expression_pointerT_float_t swig_types[107]
#define SWIGTYPE_p_kfr__sample_rate_conversion_quality swig_types[108]
#define SWIGTYPE_p_kfr__seek_origin swig_types[109]
#define SWIGTYPE_p_kfr__univector2dT_double_t swig_types[110]
#define SWIGTYPE_p_kfr__univector2dT_float_t swig_types[111]
#define SWIGTYPE_p_kfr__univectorT_double_t swig_types[112]
#define SWIGTYPE_p_kfr__univectorT_float_t swig_types[113]
#define SWIGTYPE_p_kfr__univectorT_int64_t_t swig_types[114]
#define SWIGTYPE_p_kfr__univectorT_int_t swig_types[115]
#define SWIGTYPE_p_kfr__univectorT_kfr__complexT_double_t_t swig_types[116]
#define SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t swig_types[117]
#define SWIGTYPE_p_kfr__univectorT_short_t swig_types[118]
#define SWIGTYPE_p_kfr__univectorT_signed_char_t swig_types[119]
#define SWIGTYPE_p_kfr__univectorT_u64_t swig_types[120]
#define SWIGTYPE_p_kfr__univectorT_unsigned_char_t swig_types[121]
#define SWIGTYPE_p_kfr__univectorT_unsigned_int_t swig_types[122]
#define SWIGTYPE_p_kfr__univectorT_unsigned_short_t swig_types[123]
#define SWIGTYPE_p_kfr__window_symmetry swig_types[124]
#define SWIGTYPE_p_short swig_types[125]
#define SWIGTYPE_p_signed_char swig_types[126]
#define SWIGTYPE_p_size_t swig_types[127]
#define SWIGTYPE_p_size_type swig_types[128]
#define SWIGTYPE_p_std__string swig_types[129]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[130]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_int64_t_t swig_types[132]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t swig_types[136]
#define SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t swig_types[137]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[138]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[139]
#define SWIGTYPE_p_std__vectorT_u64_t swig_types[140]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[141]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[142]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[143]
#define SWIGTYPE_p_u64 swig_types[144]
#define SWIGTYPE_p_unsigned_char swig_types[145]
#define SWIGTYPE_p_unsigned_int swig_types[146]
#define SWIGTYPE_p_unsigned_short swig_types[147]
#define SWIGTYPE_p_value_type swig_types[148]
static swig_type_info *swig_types[150];
static swig_module_info swig_module = {swig_types, 149, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "kfr"
#define SWIG_init      luaopen_kfr
#define SWIG_init_user luaopen_kfr_user

#define SWIG_LUACODE   luaopen_kfr_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "KFR.h"

using namespace kfr;
using namespace DSP;


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN float std_vector_Sl_f32_Sg____getitem__(std::vector< f32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_f32_Sg____setitem__(std::vector< f32 > *self,unsigned int idx,float val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN double std_vector_Sl_f64_Sg____getitem__(std::vector< f64 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_f64_Sg____setitem__(std::vector< f64 > *self,unsigned int idx,double val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN signed char std_vector_Sl_i8_Sg____getitem__(std::vector< i8 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i8_Sg____setitem__(std::vector< i8 > *self,unsigned int idx,signed char val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned char std_vector_Sl_u8_Sg____getitem__(std::vector< u8 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_u8_Sg____setitem__(std::vector< u8 > *self,unsigned int idx,unsigned char val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN short std_vector_Sl_i16_Sg____getitem__(std::vector< i16 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i16_Sg____setitem__(std::vector< i16 > *self,unsigned int idx,short val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned short std_vector_Sl_u16_Sg____getitem__(std::vector< u16 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_u16_Sg____setitem__(std::vector< u16 > *self,unsigned int idx,unsigned short val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_i32_Sg____getitem__(std::vector< i32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i32_Sg____setitem__(std::vector< i32 > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned int std_vector_Sl_u32_Sg____getitem__(std::vector< u32 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_u32_Sg____setitem__(std::vector< u32 > *self,unsigned int idx,unsigned int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int64_t std_vector_Sl_i64_Sg____getitem__(std::vector< i64 > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_i64_Sg____setitem__(std::vector< i64 > *self,unsigned int idx,int64_t val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_dB_to_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_string",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_string",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dB_to_string",2,"double");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::dB_to_string(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_string",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = DSP::dB_to_string(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_string(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_dB_to_string__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dB_to_string__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dB_to_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::dB_to_string(double const,double)\n"
    "    DSP::dB_to_string(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_dB_to_utf8string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_utf8string",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_utf8string",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dB_to_utf8string",2,"double");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::dB_to_utf8string(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_utf8string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_utf8string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_utf8string",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = DSP::dB_to_utf8string(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_utf8string(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_dB_to_utf8string__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dB_to_utf8string__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dB_to_utf8string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::dB_to_utf8string(double const,double)\n"
    "    DSP::dB_to_utf8string(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",0,0)
  result = (std::vector< f32 > *)new std::vector< f32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< f32 > *)new std::vector< f32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = 0 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"std::vector< f32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< f32 > *)new std::vector< f32 >((std::vector< f32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::vector",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (std::vector< f32 > *)new std::vector< f32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f32 >::vector()\n"
    "    std::vector< f32 >::vector(unsigned int)\n"
    "    std::vector< f32 >::vector(std::vector< f32 > const &)\n"
    "    std::vector< f32 >::vector(unsigned int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::size",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< f32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::max_size",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< f32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< f32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::empty",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< f32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::clear",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::vector< f32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::push_back",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::push_back",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::pop_back",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< f32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::front",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< f32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< f32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::back",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< f32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< f32 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::__getitem__",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (float)std_vector_Sl_f32_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< f32 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::__setitem__",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f32 >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  try {
    std_vector_Sl_f32_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< f32 > *arg1 = (std::vector< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "size", _wrap_float_vector_size},
    { "max_size", _wrap_float_vector_max_size},
    { "empty", _wrap_float_vector_empty},
    { "clear", _wrap_float_vector_clear},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",0,0)
  result = (std::vector< f64 > *)new std::vector< f64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< f64 > *)new std::vector< f64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = 0 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"std::vector< f64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< f64 > *)new std::vector< f64 >((std::vector< f64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::vector",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (std::vector< f64 > *)new std::vector< f64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f64 >::vector()\n"
    "    std::vector< f64 >::vector(unsigned int)\n"
    "    std::vector< f64 >::vector(std::vector< f64 > const &)\n"
    "    std::vector< f64 >::vector(unsigned int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::size",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< f64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< f64 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::max_size",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< f64 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< f64 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::empty",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< f64 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::clear",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::vector< f64 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::push_back",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::push_back",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::pop_back",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< f64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::front",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< f64 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< f64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::back",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< f64 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< f64 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::__getitem__",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (double)std_vector_Sl_f64_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< f64 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::__setitem__",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f64 >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  try {
    std_vector_Sl_f64_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< f64 > *arg1 = (std::vector< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "size", _wrap_double_vector_size},
    { "max_size", _wrap_double_vector_max_size},
    { "empty", _wrap_double_vector_empty},
    { "clear", _wrap_double_vector_clear},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_int8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",0,0)
  result = (std::vector< i8 > *)new std::vector< i8 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i8 > *)new std::vector< i8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = 0 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"std::vector< i8 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_int8_vector",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (std::vector< i8 > *)new std::vector< i8 >((std::vector< i8 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  signed char arg2 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::vector",2,"signed char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (signed char)lua_tonumber(L, 2);
  result = (std::vector< i8 > *)new std::vector< i8 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int8_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i8 >::vector()\n"
    "    std::vector< i8 >::vector(unsigned int)\n"
    "    std::vector< i8 >::vector(std::vector< i8 > const &)\n"
    "    std::vector< i8 >::vector(unsigned int,signed char)\n");
  lua_error(L);return 0;
}


static int _wrap_int8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::size",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (unsigned int)((std::vector< i8 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i8 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::max_size",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_max_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (unsigned int)((std::vector< i8 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i8 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::empty",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_empty",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (bool)((std::vector< i8 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::clear",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_clear",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("std::vector< i8 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::push_back",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::push_back",2,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_push_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  arg2 = (signed char)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::pop_back",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< i8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::front",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_front",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char)((std::vector< i8 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< i8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::back",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char)((std::vector< i8 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int arg2 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< i8 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::__getitem__",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector___getitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (signed char)std_vector_Sl_i8_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  unsigned int arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("std::vector< i8 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::__setitem__",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i8 >::__setitem__",3,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector___setitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (signed char)lua_tonumber(L, 3);
  try {
    std_vector_Sl_i8_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int8_vector(void *obj) {
std::vector< i8 > *arg1 = (std::vector< i8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int8_vector_methods[]= {
    { "size", _wrap_int8_vector_size},
    { "max_size", _wrap_int8_vector_max_size},
    { "empty", _wrap_int8_vector_empty},
    { "clear", _wrap_int8_vector_clear},
    { "push_back", _wrap_int8_vector_push_back},
    { "pop_back", _wrap_int8_vector_pop_back},
    { "front", _wrap_int8_vector_front},
    { "back", _wrap_int8_vector_back},
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int8_vector_meta[] = {
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int8_vector_Sf_SwigStatic = {
    "int8_vector",
    swig_int8_vector_Sf_SwigStatic_methods,
    swig_int8_vector_Sf_SwigStatic_attributes,
    swig_int8_vector_Sf_SwigStatic_constants,
    swig_int8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int8_vector_bases[] = {0};
static const char *swig_int8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int8_vector = { "int8_vector", "int8_vector", &SWIGTYPE_p_std__vectorT_signed_char_t,_proxy__wrap_new_int8_vector, swig_delete_int8_vector, swig_int8_vector_methods, swig_int8_vector_attributes, &swig_int8_vector_Sf_SwigStatic, swig_int8_vector_meta, swig_int8_vector_bases, swig_int8_vector_base_names };

static int _wrap_new_uint8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",0,0)
  result = (std::vector< u8 > *)new std::vector< u8 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< u8 > *)new std::vector< u8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = 0 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"std::vector< u8 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_uint8_vector",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (std::vector< u8 > *)new std::vector< u8 >((std::vector< u8 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned char arg2 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::vector",2,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  result = (std::vector< u8 > *)new std::vector< u8 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint8_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u8 >::vector()\n"
    "    std::vector< u8 >::vector(unsigned int)\n"
    "    std::vector< u8 >::vector(std::vector< u8 > const &)\n"
    "    std::vector< u8 >::vector(unsigned int,unsigned char)\n");
  lua_error(L);return 0;
}


static int _wrap_uint8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::size",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned int)((std::vector< u8 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u8 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::max_size",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned int)((std::vector< u8 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u8 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::empty",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (bool)((std::vector< u8 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::clear",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("std::vector< u8 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::push_back",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::push_back",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::pop_back",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< u8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::front",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char)((std::vector< u8 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< u8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::back",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char)((std::vector< u8 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< u8 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::__getitem__",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned char)std_vector_Sl_u8_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned int arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("std::vector< u8 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::__setitem__",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u8 >::__setitem__",3,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned char)lua_tonumber(L, 3);
  try {
    std_vector_Sl_u8_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint8_vector(void *obj) {
std::vector< u8 > *arg1 = (std::vector< u8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint8_vector_methods[]= {
    { "size", _wrap_uint8_vector_size},
    { "max_size", _wrap_uint8_vector_max_size},
    { "empty", _wrap_uint8_vector_empty},
    { "clear", _wrap_uint8_vector_clear},
    { "push_back", _wrap_uint8_vector_push_back},
    { "pop_back", _wrap_uint8_vector_pop_back},
    { "front", _wrap_uint8_vector_front},
    { "back", _wrap_uint8_vector_back},
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint8_vector_meta[] = {
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint8_vector_Sf_SwigStatic = {
    "uint8_vector",
    swig_uint8_vector_Sf_SwigStatic_methods,
    swig_uint8_vector_Sf_SwigStatic_attributes,
    swig_uint8_vector_Sf_SwigStatic_constants,
    swig_uint8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint8_vector_bases[] = {0};
static const char *swig_uint8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint8_vector = { "uint8_vector", "uint8_vector", &SWIGTYPE_p_std__vectorT_unsigned_char_t,_proxy__wrap_new_uint8_vector, swig_delete_uint8_vector, swig_uint8_vector_methods, swig_uint8_vector_attributes, &swig_uint8_vector_Sf_SwigStatic, swig_uint8_vector_meta, swig_uint8_vector_bases, swig_uint8_vector_base_names };

static int _wrap_new_int16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",0,0)
  result = (std::vector< i16 > *)new std::vector< i16 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i16 > *)new std::vector< i16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = 0 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"std::vector< i16 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_int16_vector",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (std::vector< i16 > *)new std::vector< i16 >((std::vector< i16 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  short arg2 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::vector",2,"short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (short)lua_tonumber(L, 2);
  result = (std::vector< i16 > *)new std::vector< i16 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int16_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i16 >::vector()\n"
    "    std::vector< i16 >::vector(unsigned int)\n"
    "    std::vector< i16 >::vector(std::vector< i16 > const &)\n"
    "    std::vector< i16 >::vector(unsigned int,short)\n");
  lua_error(L);return 0;
}


static int _wrap_int16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::size",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (unsigned int)((std::vector< i16 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i16 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::max_size",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_max_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (unsigned int)((std::vector< i16 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i16 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::empty",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_empty",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (bool)((std::vector< i16 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::clear",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_clear",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("std::vector< i16 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::push_back",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::push_back",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_push_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::pop_back",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::vector< i16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::front",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_front",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short)((std::vector< i16 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::vector< i16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::back",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short)((std::vector< i16 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int arg2 ;
  short result;
  
  SWIG_check_num_args("std::vector< i16 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::__getitem__",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector___getitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (short)std_vector_Sl_i16_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  unsigned int arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("std::vector< i16 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::__setitem__",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i16 >::__setitem__",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector___setitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  try {
    std_vector_Sl_i16_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int16_vector(void *obj) {
std::vector< i16 > *arg1 = (std::vector< i16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int16_vector_methods[]= {
    { "size", _wrap_int16_vector_size},
    { "max_size", _wrap_int16_vector_max_size},
    { "empty", _wrap_int16_vector_empty},
    { "clear", _wrap_int16_vector_clear},
    { "push_back", _wrap_int16_vector_push_back},
    { "pop_back", _wrap_int16_vector_pop_back},
    { "front", _wrap_int16_vector_front},
    { "back", _wrap_int16_vector_back},
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int16_vector_meta[] = {
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int16_vector_Sf_SwigStatic = {
    "int16_vector",
    swig_int16_vector_Sf_SwigStatic_methods,
    swig_int16_vector_Sf_SwigStatic_attributes,
    swig_int16_vector_Sf_SwigStatic_constants,
    swig_int16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int16_vector_bases[] = {0};
static const char *swig_int16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int16_vector = { "int16_vector", "int16_vector", &SWIGTYPE_p_std__vectorT_short_t,_proxy__wrap_new_int16_vector, swig_delete_int16_vector, swig_int16_vector_methods, swig_int16_vector_attributes, &swig_int16_vector_Sf_SwigStatic, swig_int16_vector_meta, swig_int16_vector_bases, swig_int16_vector_base_names };

static int _wrap_new_uint16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",0,0)
  result = (std::vector< u16 > *)new std::vector< u16 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< u16 > *)new std::vector< u16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = 0 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"std::vector< u16 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_uint16_vector",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (std::vector< u16 > *)new std::vector< u16 >((std::vector< u16 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned short arg2 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::vector",2,"unsigned short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (std::vector< u16 > *)new std::vector< u16 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint16_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u16 >::vector()\n"
    "    std::vector< u16 >::vector(unsigned int)\n"
    "    std::vector< u16 >::vector(std::vector< u16 > const &)\n"
    "    std::vector< u16 >::vector(unsigned int,unsigned short)\n");
  lua_error(L);return 0;
}


static int _wrap_uint16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::size",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned int)((std::vector< u16 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u16 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::max_size",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned int)((std::vector< u16 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u16 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::empty",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (bool)((std::vector< u16 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::clear",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("std::vector< u16 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::push_back",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::push_back",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::pop_back",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< u16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::front",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short)((std::vector< u16 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< u16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::back",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short)((std::vector< u16 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< u16 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::__getitem__",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned short)std_vector_Sl_u16_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned int arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("std::vector< u16 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::__setitem__",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u16 >::__setitem__",3,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned short)lua_tonumber(L, 3);
  try {
    std_vector_Sl_u16_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint16_vector(void *obj) {
std::vector< u16 > *arg1 = (std::vector< u16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint16_vector_methods[]= {
    { "size", _wrap_uint16_vector_size},
    { "max_size", _wrap_uint16_vector_max_size},
    { "empty", _wrap_uint16_vector_empty},
    { "clear", _wrap_uint16_vector_clear},
    { "push_back", _wrap_uint16_vector_push_back},
    { "pop_back", _wrap_uint16_vector_pop_back},
    { "front", _wrap_uint16_vector_front},
    { "back", _wrap_uint16_vector_back},
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint16_vector_meta[] = {
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint16_vector_Sf_SwigStatic = {
    "uint16_vector",
    swig_uint16_vector_Sf_SwigStatic_methods,
    swig_uint16_vector_Sf_SwigStatic_attributes,
    swig_uint16_vector_Sf_SwigStatic_constants,
    swig_uint16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint16_vector_bases[] = {0};
static const char *swig_uint16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint16_vector = { "uint16_vector", "uint16_vector", &SWIGTYPE_p_std__vectorT_unsigned_short_t,_proxy__wrap_new_uint16_vector, swig_delete_uint16_vector, swig_uint16_vector_methods, swig_uint16_vector_attributes, &swig_uint16_vector_Sf_SwigStatic, swig_uint16_vector_meta, swig_uint16_vector_bases, swig_uint16_vector_base_names };

static int _wrap_new_int32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",0,0)
  result = (std::vector< i32 > *)new std::vector< i32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i32 > *)new std::vector< i32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = 0 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"std::vector< i32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_int32_vector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< i32 > *)new std::vector< i32 >((std::vector< i32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int arg2 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (std::vector< i32 > *)new std::vector< i32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int32_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i32 >::vector()\n"
    "    std::vector< i32 >::vector(unsigned int)\n"
    "    std::vector< i32 >::vector(std::vector< i32 > const &)\n"
    "    std::vector< i32 >::vector(unsigned int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_int32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::size",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< i32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::max_size",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< i32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::empty",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< i32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::clear",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("std::vector< i32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::push_back",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::push_back",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::pop_back",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< i32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::front",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< i32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< i32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::back",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< i32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< i32 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::__getitem__",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (int)std_vector_Sl_i32_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< i32 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::__setitem__",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i32 >::__setitem__",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_i32_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int32_vector(void *obj) {
std::vector< i32 > *arg1 = (std::vector< i32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int32_vector_methods[]= {
    { "size", _wrap_int32_vector_size},
    { "max_size", _wrap_int32_vector_max_size},
    { "empty", _wrap_int32_vector_empty},
    { "clear", _wrap_int32_vector_clear},
    { "push_back", _wrap_int32_vector_push_back},
    { "pop_back", _wrap_int32_vector_pop_back},
    { "front", _wrap_int32_vector_front},
    { "back", _wrap_int32_vector_back},
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int32_vector_meta[] = {
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int32_vector_Sf_SwigStatic = {
    "int32_vector",
    swig_int32_vector_Sf_SwigStatic_methods,
    swig_int32_vector_Sf_SwigStatic_attributes,
    swig_int32_vector_Sf_SwigStatic_constants,
    swig_int32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int32_vector_bases[] = {0};
static const char *swig_int32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int32_vector = { "int32_vector", "int32_vector", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_int32_vector, swig_delete_int32_vector, swig_int32_vector_methods, swig_int32_vector_attributes, &swig_int32_vector_Sf_SwigStatic, swig_int32_vector_meta, swig_int32_vector_bases, swig_int32_vector_base_names };

static int _wrap_new_uint32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",0,0)
  result = (std::vector< u32 > *)new std::vector< u32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< u32 > *)new std::vector< u32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = 0 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"std::vector< u32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_uint32_vector",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (std::vector< u32 > *)new std::vector< u32 >((std::vector< u32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::vector",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (std::vector< u32 > *)new std::vector< u32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint32_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u32 >::vector()\n"
    "    std::vector< u32 >::vector(unsigned int)\n"
    "    std::vector< u32 >::vector(std::vector< u32 > const &)\n"
    "    std::vector< u32 >::vector(unsigned int,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_uint32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::size",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::max_size",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::empty",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (bool)((std::vector< u32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::clear",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("std::vector< u32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::push_back",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::push_back",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::pop_back",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::front",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::back",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< u32 > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::__getitem__",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned int)std_vector_Sl_u32_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("std::vector< u32 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::__setitem__",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u32 >::__setitem__",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_u32_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint32_vector(void *obj) {
std::vector< u32 > *arg1 = (std::vector< u32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint32_vector_methods[]= {
    { "size", _wrap_uint32_vector_size},
    { "max_size", _wrap_uint32_vector_max_size},
    { "empty", _wrap_uint32_vector_empty},
    { "clear", _wrap_uint32_vector_clear},
    { "push_back", _wrap_uint32_vector_push_back},
    { "pop_back", _wrap_uint32_vector_pop_back},
    { "front", _wrap_uint32_vector_front},
    { "back", _wrap_uint32_vector_back},
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint32_vector_meta[] = {
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint32_vector_Sf_SwigStatic = {
    "uint32_vector",
    swig_uint32_vector_Sf_SwigStatic_methods,
    swig_uint32_vector_Sf_SwigStatic_attributes,
    swig_uint32_vector_Sf_SwigStatic_constants,
    swig_uint32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint32_vector_bases[] = {0};
static const char *swig_uint32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint32_vector = { "uint32_vector", "uint32_vector", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_proxy__wrap_new_uint32_vector, swig_delete_uint32_vector, swig_uint32_vector_methods, swig_uint32_vector_attributes, &swig_uint32_vector_Sf_SwigStatic, swig_uint32_vector_meta, swig_uint32_vector_bases, swig_uint32_vector_base_names };

static int _wrap_new_int64_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",0,0)
  result = (std::vector< i64 > *)new std::vector< i64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< i64 > *)new std::vector< i64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = 0 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"std::vector< i64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("new_int64_vector",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  result = (std::vector< i64 > *)new std::vector< i64 >((std::vector< i64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< i64 >::vector",2,"int64_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("new_int64_vector",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = (std::vector< i64 > *)new std::vector< i64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int64_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_int64_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int64_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i64 >::vector()\n"
    "    std::vector< i64 >::vector(unsigned int)\n"
    "    std::vector< i64 >::vector(std::vector< i64 > const &)\n"
    "    std::vector< i64 >::vector(unsigned int,int64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_int64_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::size",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_size",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  result = (unsigned int)((std::vector< i64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< i64 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::max_size",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_max_size",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  result = (unsigned int)((std::vector< i64 > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i64 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::empty",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_empty",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  result = (bool)((std::vector< i64 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::clear",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_clear",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("std::vector< i64 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::push_back",1,"std::vector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< i64 >::push_back",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_push_back",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("int64_vector_push_back",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::pop_back",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_pop_back",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::vector< i64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::front",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_front",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  result = ((std::vector< i64 > const *)arg1)->front();
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::vector< i64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::back",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector_back",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  result = ((std::vector< i64 > const *)arg1)->back();
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("std::vector< i64 >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::__getitem__",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector___getitem",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_i64_Sg____getitem__(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  unsigned int arg2 ;
  int64_t arg3 ;
  int64_t *argp3 ;
  
  SWIG_check_num_args("std::vector< i64 >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::__setitem__",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< i64 >::__setitem__",3,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("int64_vector___setitem",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("int64_vector___setitem",3,SWIGTYPE_p_int64_t);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_i64_Sg____setitem__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int64_vector(void *obj) {
std::vector< i64 > *arg1 = (std::vector< i64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int64_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int64_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int64_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int64_vector_methods[]= {
    { "size", _wrap_int64_vector_size},
    { "max_size", _wrap_int64_vector_max_size},
    { "empty", _wrap_int64_vector_empty},
    { "clear", _wrap_int64_vector_clear},
    { "push_back", _wrap_int64_vector_push_back},
    { "pop_back", _wrap_int64_vector_pop_back},
    { "front", _wrap_int64_vector_front},
    { "back", _wrap_int64_vector_back},
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int64_vector_meta[] = {
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int64_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int64_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int64_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int64_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int64_vector_Sf_SwigStatic = {
    "int64_vector",
    swig_int64_vector_Sf_SwigStatic_methods,
    swig_int64_vector_Sf_SwigStatic_attributes,
    swig_int64_vector_Sf_SwigStatic_constants,
    swig_int64_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int64_vector_bases[] = {0};
static const char *swig_int64_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int64_vector = { "int64_vector", "int64_vector", &SWIGTYPE_p_std__vectorT_int64_t_t,_proxy__wrap_new_int64_vector, swig_delete_int64_vector, swig_int64_vector_methods, swig_int64_vector_attributes, &swig_int64_vector_Sf_SwigStatic, swig_int64_vector_meta, swig_int64_vector_bases, swig_int64_vector_base_names };

static int _wrap_FloatScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::val",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::val",1,"DSP::Scalar< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  DSP::Scalar< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::Scalar",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< f32 > *)new DSP::Scalar< f32 >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::Scalar",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("new_FloatScalar",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (DSP::Scalar< f32 > *)new DSP::Scalar< f32 >((DSP::Scalar< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::Scalar(float const &)\n"
    "    DSP::Scalar< f32 >::Scalar(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator +",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator +",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator -",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator -",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator *",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator *",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator /",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator /",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator +",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((float const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator -",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___sub",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((float const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::operator -(DSP::Scalar< float > const &)\n"
    "    DSP::Scalar< f32 >::operator -(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator *",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((float const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator /",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___div",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((float const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::operator /(DSP::Scalar< float > const &)\n"
    "    DSP::Scalar< f32 >::operator /(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator +",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator +",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___add",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::operator +(DSP::Scalar< float > const &)\n"
    "    DSP::Scalar< f32 >::operator +(float const &)\n"
    "    DSP::Scalar< f32 >::operator +(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::operator *",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::operator *",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatScalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::operator *(DSP::Scalar< float > const &)\n"
    "    DSP::Scalar< f32 >::operator *(float const &)\n"
    "    DSP::Scalar< f32 >::operator *(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::aplus",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::aplus",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::aminus",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::aminus",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::atimes",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::atimes",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::adiv",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::adiv",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::aplus",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::aplus",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  (arg1)->aplus((DSP::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::aplus(float const &)\n"
    "    DSP::Scalar< f32 >::aplus(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::aminus",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::aminus",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  (arg1)->aminus((DSP::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::aminus(float const &)\n"
    "    DSP::Scalar< f32 >::aminus(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::atimes",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::atimes",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  (arg1)->atimes((DSP::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::atimes(float const &)\n"
    "    DSP::Scalar< f32 >::atimes(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::adiv",1,"DSP::Scalar< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::adiv",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  (arg1)->adiv((DSP::Scalar< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f32 >::adiv(float const &)\n"
    "    DSP::Scalar< f32 >::adiv(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float result;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::get_value",1,"DSP::Scalar< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (float)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::set_value",1,"DSP::Scalar< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f32 >::set_value",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f32 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f32 >::print",1,"DSP::Scalar< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatScalar_print",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatScalar(void *obj) {
DSP::Scalar< f32 > *arg1 = (DSP::Scalar< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatScalar_attributes[] = {
    { "val", _wrap_FloatScalar_val_get, _wrap_FloatScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_FloatScalar_methods[]= {
    { "__sub", _wrap_FloatScalar___sub},
    { "__div", _wrap_FloatScalar___div},
    { "__add", _wrap_FloatScalar___add},
    { "__mul", _wrap_FloatScalar___mul},
    { "aplus", _wrap_FloatScalar_aplus},
    { "aminus", _wrap_FloatScalar_aminus},
    { "atimes", _wrap_FloatScalar_atimes},
    { "adiv", _wrap_FloatScalar_adiv},
    { "get_value", _wrap_FloatScalar_get_value},
    { "set_value", _wrap_FloatScalar_set_value},
    { "print", _wrap_FloatScalar_print},
    {0,0}
};
static swig_lua_method swig_FloatScalar_meta[] = {
    { "__sub", _wrap_FloatScalar___sub},
    { "__div", _wrap_FloatScalar___div},
    { "__add", _wrap_FloatScalar___add},
    { "__mul", _wrap_FloatScalar___mul},
    {0,0}
};

static swig_lua_attribute swig_FloatScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatScalar_Sf_SwigStatic = {
    "FloatScalar",
    swig_FloatScalar_Sf_SwigStatic_methods,
    swig_FloatScalar_Sf_SwigStatic_attributes,
    swig_FloatScalar_Sf_SwigStatic_constants,
    swig_FloatScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatScalar_bases[] = {0};
static const char *swig_FloatScalar_base_names[] = {0};
static swig_lua_class _wrap_class_FloatScalar = { "FloatScalar", "FloatScalar", &SWIGTYPE_p_DSP__ScalarT_float_t,_proxy__wrap_new_FloatScalar, swig_delete_FloatScalar, swig_FloatScalar_methods, swig_FloatScalar_attributes, &swig_FloatScalar_Sf_SwigStatic, swig_FloatScalar_meta, swig_FloatScalar_bases, swig_FloatScalar_base_names };

static int _wrap_DoubleScalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::val",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::val",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::val",1,"DSP::Scalar< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (double) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleScalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  DSP::Scalar< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::Scalar",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< f64 > *)new DSP::Scalar< f64 >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleScalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::Scalar",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("new_DoubleScalar",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (DSP::Scalar< f64 > *)new DSP::Scalar< f64 >((DSP::Scalar< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleScalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleScalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleScalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleScalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::Scalar(double const &)\n"
    "    DSP::Scalar< f64 >::Scalar(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator +",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator +",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator -",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator -",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator *",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator *",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator /",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator /",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator +",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator +",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((double const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator -",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator -",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___sub",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((double const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::operator -(DSP::Scalar< double > const &)\n"
    "    DSP::Scalar< f64 >::operator -(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator *",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator *",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((double const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator /",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator /",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___div",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((double const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::operator /(DSP::Scalar< double > const &)\n"
    "    DSP::Scalar< f64 >::operator /(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator +",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator +",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___add",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::operator +(DSP::Scalar< double > const &)\n"
    "    DSP::Scalar< f64 >::operator +(double const &)\n"
    "    DSP::Scalar< f64 >::operator +(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::operator *",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::operator *",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::operator *(DSP::Scalar< double > const &)\n"
    "    DSP::Scalar< f64 >::operator *(double const &)\n"
    "    DSP::Scalar< f64 >::operator *(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::aplus",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::aplus",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::aminus",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::aminus",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::atimes",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::atimes",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::adiv",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::adiv",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::aplus",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::aplus",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  (arg1)->aplus((DSP::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::aplus(double const &)\n"
    "    DSP::Scalar< f64 >::aplus(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::aminus",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::aminus",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  (arg1)->aminus((DSP::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::aminus(double const &)\n"
    "    DSP::Scalar< f64 >::aminus(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::atimes",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::atimes",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  (arg1)->atimes((DSP::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::atimes(double const &)\n"
    "    DSP::Scalar< f64 >::atimes(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::adiv",1,"DSP::Scalar< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::adiv",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  (arg1)->adiv((DSP::Scalar< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleScalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleScalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleScalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< f64 >::adiv(double const &)\n"
    "    DSP::Scalar< f64 >::adiv(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleScalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double result;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::get_value",1,"DSP::Scalar< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (double)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::set_value",1,"DSP::Scalar< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< f64 >::set_value",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleScalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< f64 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< f64 >::print",1,"DSP::Scalar< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleScalar_print",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleScalar(void *obj) {
DSP::Scalar< f64 > *arg1 = (DSP::Scalar< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleScalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleScalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleScalar_attributes[] = {
    { "val", _wrap_DoubleScalar_val_get, _wrap_DoubleScalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleScalar_methods[]= {
    { "__sub", _wrap_DoubleScalar___sub},
    { "__div", _wrap_DoubleScalar___div},
    { "__add", _wrap_DoubleScalar___add},
    { "__mul", _wrap_DoubleScalar___mul},
    { "aplus", _wrap_DoubleScalar_aplus},
    { "aminus", _wrap_DoubleScalar_aminus},
    { "atimes", _wrap_DoubleScalar_atimes},
    { "adiv", _wrap_DoubleScalar_adiv},
    { "get_value", _wrap_DoubleScalar_get_value},
    { "set_value", _wrap_DoubleScalar_set_value},
    { "print", _wrap_DoubleScalar_print},
    {0,0}
};
static swig_lua_method swig_DoubleScalar_meta[] = {
    { "__sub", _wrap_DoubleScalar___sub},
    { "__div", _wrap_DoubleScalar___div},
    { "__add", _wrap_DoubleScalar___add},
    { "__mul", _wrap_DoubleScalar___mul},
    {0,0}
};

static swig_lua_attribute swig_DoubleScalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleScalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleScalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleScalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleScalar_Sf_SwigStatic = {
    "DoubleScalar",
    swig_DoubleScalar_Sf_SwigStatic_methods,
    swig_DoubleScalar_Sf_SwigStatic_attributes,
    swig_DoubleScalar_Sf_SwigStatic_constants,
    swig_DoubleScalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleScalar_bases[] = {0};
static const char *swig_DoubleScalar_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleScalar = { "DoubleScalar", "DoubleScalar", &SWIGTYPE_p_DSP__ScalarT_double_t,_proxy__wrap_new_DoubleScalar, swig_delete_DoubleScalar, swig_DoubleScalar_methods, swig_DoubleScalar_attributes, &swig_DoubleScalar_Sf_SwigStatic, swig_DoubleScalar_meta, swig_DoubleScalar_bases, swig_DoubleScalar_base_names };

static int _wrap_Int8Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::val",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::val",2,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  arg2 = (signed char)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::val",1,"DSP::Scalar< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (signed char) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  signed char *arg1 = 0 ;
  signed char temp1 ;
  DSP::Scalar< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::Scalar",1,"signed char const &");
  temp1=(signed char)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< i8 > *)new DSP::Scalar< i8 >((signed char const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< signed char > *arg1 = 0 ;
  DSP::Scalar< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::Scalar",1,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Scalar",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (DSP::Scalar< i8 > *)new DSP::Scalar< i8 >((DSP::Scalar< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::Scalar(signed char const &)\n"
    "    DSP::Scalar< i8 >::Scalar(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator +",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator +",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator -",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator -",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator *",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator *",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator /",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator /",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator +",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator +",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((signed char const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator -",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator -",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((signed char const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::operator -(DSP::Scalar< signed char > const &)\n"
    "    DSP::Scalar< i8 >::operator -(signed char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator *",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator *",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((signed char const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  SwigValueWrapper< DSP::Scalar< signed char > > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator /",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator /",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((signed char const &)*arg2);
  {
    DSP::Scalar< signed char > * resultptr = new DSP::Scalar< signed char >((const DSP::Scalar< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::operator /(DSP::Scalar< signed char > const &)\n"
    "    DSP::Scalar< i8 >::operator /(signed char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::UniVector< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator +",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator +",2,"DSP::UniVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::operator +(DSP::Scalar< signed char > const &)\n"
    "    DSP::Scalar< i8 >::operator +(signed char const &)\n"
    "    DSP::Scalar< i8 >::operator +(DSP::UniVector< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::UniVector< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::operator *",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::operator *",2,"DSP::UniVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::operator *(DSP::Scalar< signed char > const &)\n"
    "    DSP::Scalar< i8 >::operator *(signed char const &)\n"
    "    DSP::Scalar< i8 >::operator *(DSP::UniVector< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::aplus",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::aplus",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::aminus",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::aminus",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::atimes",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::atimes",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::adiv",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::adiv",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::aplus",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::aplus",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  (arg1)->aplus((DSP::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::aplus(signed char const &)\n"
    "    DSP::Scalar< i8 >::aplus(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::aminus",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::aminus",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  (arg1)->aminus((DSP::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::aminus(signed char const &)\n"
    "    DSP::Scalar< i8 >::aminus(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::atimes",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::atimes",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  (arg1)->atimes((DSP::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::atimes(signed char const &)\n"
    "    DSP::Scalar< i8 >::atimes(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::adiv",1,"DSP::Scalar< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::adiv",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  (arg1)->adiv((DSP::Scalar< signed char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i8 >::adiv(signed char const &)\n"
    "    DSP::Scalar< i8 >::adiv(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::get_value",1,"DSP::Scalar< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (signed char)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::set_value",1,"DSP::Scalar< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i8 >::set_value",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i8 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i8 >::print",1,"DSP::Scalar< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Scalar(void *obj) {
DSP::Scalar< i8 > *arg1 = (DSP::Scalar< i8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Scalar_attributes[] = {
    { "val", _wrap_Int8Scalar_val_get, _wrap_Int8Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Scalar_methods[]= {
    { "__sub", _wrap_Int8Scalar___sub},
    { "__div", _wrap_Int8Scalar___div},
    { "__add", _wrap_Int8Scalar___add},
    { "__mul", _wrap_Int8Scalar___mul},
    { "aplus", _wrap_Int8Scalar_aplus},
    { "aminus", _wrap_Int8Scalar_aminus},
    { "atimes", _wrap_Int8Scalar_atimes},
    { "adiv", _wrap_Int8Scalar_adiv},
    { "get_value", _wrap_Int8Scalar_get_value},
    { "set_value", _wrap_Int8Scalar_set_value},
    { "print", _wrap_Int8Scalar_print},
    {0,0}
};
static swig_lua_method swig_Int8Scalar_meta[] = {
    { "__sub", _wrap_Int8Scalar___sub},
    { "__div", _wrap_Int8Scalar___div},
    { "__add", _wrap_Int8Scalar___add},
    { "__mul", _wrap_Int8Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_Int8Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Scalar_Sf_SwigStatic = {
    "Int8Scalar",
    swig_Int8Scalar_Sf_SwigStatic_methods,
    swig_Int8Scalar_Sf_SwigStatic_attributes,
    swig_Int8Scalar_Sf_SwigStatic_constants,
    swig_Int8Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Scalar_bases[] = {0};
static const char *swig_Int8Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Scalar = { "Int8Scalar", "Int8Scalar", &SWIGTYPE_p_DSP__ScalarT_signed_char_t,_proxy__wrap_new_Int8Scalar, swig_delete_Int8Scalar, swig_Int8Scalar_methods, swig_Int8Scalar_attributes, &swig_Int8Scalar_Sf_SwigStatic, swig_Int8Scalar_meta, swig_Int8Scalar_bases, swig_Int8Scalar_base_names };

static int _wrap_UInt8Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::val",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::val",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::val",1,"DSP::Scalar< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (unsigned char) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  DSP::Scalar< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::Scalar",1,"unsigned char const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  temp1=(unsigned char)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< u8 > *)new DSP::Scalar< u8 >((unsigned char const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< unsigned char > *arg1 = 0 ;
  DSP::Scalar< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::Scalar",1,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Scalar",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (DSP::Scalar< u8 > *)new DSP::Scalar< u8 >((DSP::Scalar< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::Scalar(unsigned char const &)\n"
    "    DSP::Scalar< u8 >::Scalar(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator +",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator +",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator -",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator -",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator *",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator *",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator /",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator /",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator +",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator +",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned char const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator -",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator -",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned char const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::operator -(DSP::Scalar< unsigned char > const &)\n"
    "    DSP::Scalar< u8 >::operator -(unsigned char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator *",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator *",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned char const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned char > > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator /",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator /",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned char const &)*arg2);
  {
    DSP::Scalar< unsigned char > * resultptr = new DSP::Scalar< unsigned char >((const DSP::Scalar< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::operator /(DSP::Scalar< unsigned char > const &)\n"
    "    DSP::Scalar< u8 >::operator /(unsigned char const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::UniVector< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator +",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator +",2,"DSP::UniVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::operator +(DSP::Scalar< unsigned char > const &)\n"
    "    DSP::Scalar< u8 >::operator +(unsigned char const &)\n"
    "    DSP::Scalar< u8 >::operator +(DSP::UniVector< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::UniVector< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::operator *",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::operator *",2,"DSP::UniVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::operator *(DSP::Scalar< unsigned char > const &)\n"
    "    DSP::Scalar< u8 >::operator *(unsigned char const &)\n"
    "    DSP::Scalar< u8 >::operator *(DSP::UniVector< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::aplus",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::aplus",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::aminus",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::aminus",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::atimes",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::atimes",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::adiv",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::adiv",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::aplus",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::aplus",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  (arg1)->aplus((DSP::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::aplus(unsigned char const &)\n"
    "    DSP::Scalar< u8 >::aplus(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::aminus",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::aminus",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  (arg1)->aminus((DSP::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::aminus(unsigned char const &)\n"
    "    DSP::Scalar< u8 >::aminus(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::atimes",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::atimes",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  (arg1)->atimes((DSP::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::atimes(unsigned char const &)\n"
    "    DSP::Scalar< u8 >::atimes(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::adiv",1,"DSP::Scalar< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::adiv",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  (arg1)->adiv((DSP::Scalar< unsigned char > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u8 >::adiv(unsigned char const &)\n"
    "    DSP::Scalar< u8 >::adiv(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::get_value",1,"DSP::Scalar< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (unsigned char)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::set_value",1,"DSP::Scalar< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u8 >::set_value",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u8 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u8 >::print",1,"DSP::Scalar< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8Scalar(void *obj) {
DSP::Scalar< u8 > *arg1 = (DSP::Scalar< u8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Scalar_attributes[] = {
    { "val", _wrap_UInt8Scalar_val_get, _wrap_UInt8Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Scalar_methods[]= {
    { "__sub", _wrap_UInt8Scalar___sub},
    { "__div", _wrap_UInt8Scalar___div},
    { "__add", _wrap_UInt8Scalar___add},
    { "__mul", _wrap_UInt8Scalar___mul},
    { "aplus", _wrap_UInt8Scalar_aplus},
    { "aminus", _wrap_UInt8Scalar_aminus},
    { "atimes", _wrap_UInt8Scalar_atimes},
    { "adiv", _wrap_UInt8Scalar_adiv},
    { "get_value", _wrap_UInt8Scalar_get_value},
    { "set_value", _wrap_UInt8Scalar_set_value},
    { "print", _wrap_UInt8Scalar_print},
    {0,0}
};
static swig_lua_method swig_UInt8Scalar_meta[] = {
    { "__sub", _wrap_UInt8Scalar___sub},
    { "__div", _wrap_UInt8Scalar___div},
    { "__add", _wrap_UInt8Scalar___add},
    { "__mul", _wrap_UInt8Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_UInt8Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Scalar_Sf_SwigStatic = {
    "UInt8Scalar",
    swig_UInt8Scalar_Sf_SwigStatic_methods,
    swig_UInt8Scalar_Sf_SwigStatic_attributes,
    swig_UInt8Scalar_Sf_SwigStatic_constants,
    swig_UInt8Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Scalar_bases[] = {0};
static const char *swig_UInt8Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8Scalar = { "UInt8Scalar", "UInt8Scalar", &SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,_proxy__wrap_new_UInt8Scalar, swig_delete_UInt8Scalar, swig_UInt8Scalar_methods, swig_UInt8Scalar_attributes, &swig_UInt8Scalar_Sf_SwigStatic, swig_UInt8Scalar_meta, swig_UInt8Scalar_bases, swig_UInt8Scalar_base_names };

static int _wrap_Int16Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::val",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::val",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::val",1,"DSP::Scalar< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (short) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  short *arg1 = 0 ;
  short temp1 ;
  DSP::Scalar< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::Scalar",1,"short const &");
  temp1=(short)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< i16 > *)new DSP::Scalar< i16 >((short const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< short > *arg1 = 0 ;
  DSP::Scalar< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::Scalar",1,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("new_Int16Scalar",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (DSP::Scalar< i16 > *)new DSP::Scalar< i16 >((DSP::Scalar< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::Scalar(short const &)\n"
    "    DSP::Scalar< i16 >::Scalar(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator +",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator +",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< short > const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator -",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator -",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< short > const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator *",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator *",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< short > const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator /",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator /",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< short > const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator +",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator +",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((short const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator -",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator -",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((short const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::operator -(DSP::Scalar< short > const &)\n"
    "    DSP::Scalar< i16 >::operator -(short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator *",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator *",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((short const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  SwigValueWrapper< DSP::Scalar< short > > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator /",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator /",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((short const &)*arg2);
  {
    DSP::Scalar< short > * resultptr = new DSP::Scalar< short >((const DSP::Scalar< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::operator /(DSP::Scalar< short > const &)\n"
    "    DSP::Scalar< i16 >::operator /(short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::UniVector< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator +",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator +",2,"DSP::UniVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::operator +(DSP::Scalar< short > const &)\n"
    "    DSP::Scalar< i16 >::operator +(short const &)\n"
    "    DSP::Scalar< i16 >::operator +(DSP::UniVector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::UniVector< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::operator *",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::operator *",2,"DSP::UniVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::operator *(DSP::Scalar< short > const &)\n"
    "    DSP::Scalar< i16 >::operator *(short const &)\n"
    "    DSP::Scalar< i16 >::operator *(DSP::UniVector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::aplus",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::aplus",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::aminus",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::aminus",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::atimes",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::atimes",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::adiv",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::adiv",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::aplus",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::aplus",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  (arg1)->aplus((DSP::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::aplus(short const &)\n"
    "    DSP::Scalar< i16 >::aplus(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::aminus",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::aminus",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  (arg1)->aminus((DSP::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::aminus(short const &)\n"
    "    DSP::Scalar< i16 >::aminus(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::atimes",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::atimes",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  (arg1)->atimes((DSP::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::atimes(short const &)\n"
    "    DSP::Scalar< i16 >::atimes(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::adiv",1,"DSP::Scalar< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::adiv",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  (arg1)->adiv((DSP::Scalar< short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i16 >::adiv(short const &)\n"
    "    DSP::Scalar< i16 >::adiv(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short result;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::get_value",1,"DSP::Scalar< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (short)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::set_value",1,"DSP::Scalar< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i16 >::set_value",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i16 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i16 >::print",1,"DSP::Scalar< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Scalar(void *obj) {
DSP::Scalar< i16 > *arg1 = (DSP::Scalar< i16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Scalar_attributes[] = {
    { "val", _wrap_Int16Scalar_val_get, _wrap_Int16Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Scalar_methods[]= {
    { "__sub", _wrap_Int16Scalar___sub},
    { "__div", _wrap_Int16Scalar___div},
    { "__add", _wrap_Int16Scalar___add},
    { "__mul", _wrap_Int16Scalar___mul},
    { "aplus", _wrap_Int16Scalar_aplus},
    { "aminus", _wrap_Int16Scalar_aminus},
    { "atimes", _wrap_Int16Scalar_atimes},
    { "adiv", _wrap_Int16Scalar_adiv},
    { "get_value", _wrap_Int16Scalar_get_value},
    { "set_value", _wrap_Int16Scalar_set_value},
    { "print", _wrap_Int16Scalar_print},
    {0,0}
};
static swig_lua_method swig_Int16Scalar_meta[] = {
    { "__sub", _wrap_Int16Scalar___sub},
    { "__div", _wrap_Int16Scalar___div},
    { "__add", _wrap_Int16Scalar___add},
    { "__mul", _wrap_Int16Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_Int16Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Scalar_Sf_SwigStatic = {
    "Int16Scalar",
    swig_Int16Scalar_Sf_SwigStatic_methods,
    swig_Int16Scalar_Sf_SwigStatic_attributes,
    swig_Int16Scalar_Sf_SwigStatic_constants,
    swig_Int16Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Scalar_bases[] = {0};
static const char *swig_Int16Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Scalar = { "Int16Scalar", "Int16Scalar", &SWIGTYPE_p_DSP__ScalarT_short_t,_proxy__wrap_new_Int16Scalar, swig_delete_Int16Scalar, swig_Int16Scalar_methods, swig_Int16Scalar_attributes, &swig_Int16Scalar_Sf_SwigStatic, swig_Int16Scalar_meta, swig_Int16Scalar_bases, swig_Int16Scalar_base_names };

static int _wrap_UInt16Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::val",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::val",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::val",1,"DSP::Scalar< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (unsigned short) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned short *arg1 = 0 ;
  unsigned short temp1 ;
  DSP::Scalar< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::Scalar",1,"unsigned short const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  temp1=(unsigned short)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< u16 > *)new DSP::Scalar< u16 >((unsigned short const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< unsigned short > *arg1 = 0 ;
  DSP::Scalar< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::Scalar",1,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Scalar",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (DSP::Scalar< u16 > *)new DSP::Scalar< u16 >((DSP::Scalar< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::Scalar(unsigned short const &)\n"
    "    DSP::Scalar< u16 >::Scalar(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator +",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator +",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator -",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator -",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator *",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator *",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator /",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator /",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator +",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator +",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned short const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator -",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator -",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned short const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::operator -(DSP::Scalar< unsigned short > const &)\n"
    "    DSP::Scalar< u16 >::operator -(unsigned short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator *",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator *",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned short const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned short > > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator /",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator /",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned short const &)*arg2);
  {
    DSP::Scalar< unsigned short > * resultptr = new DSP::Scalar< unsigned short >((const DSP::Scalar< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::operator /(DSP::Scalar< unsigned short > const &)\n"
    "    DSP::Scalar< u16 >::operator /(unsigned short const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::UniVector< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator +",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator +",2,"DSP::UniVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::operator +(DSP::Scalar< unsigned short > const &)\n"
    "    DSP::Scalar< u16 >::operator +(unsigned short const &)\n"
    "    DSP::Scalar< u16 >::operator +(DSP::UniVector< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::UniVector< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::operator *",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::operator *",2,"DSP::UniVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::operator *(DSP::Scalar< unsigned short > const &)\n"
    "    DSP::Scalar< u16 >::operator *(unsigned short const &)\n"
    "    DSP::Scalar< u16 >::operator *(DSP::UniVector< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::aplus",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::aplus",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::aminus",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::aminus",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::atimes",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::atimes",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::adiv",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::adiv",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::aplus",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::aplus",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  (arg1)->aplus((DSP::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::aplus(unsigned short const &)\n"
    "    DSP::Scalar< u16 >::aplus(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::aminus",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::aminus",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  (arg1)->aminus((DSP::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::aminus(unsigned short const &)\n"
    "    DSP::Scalar< u16 >::aminus(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::atimes",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::atimes",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  (arg1)->atimes((DSP::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::atimes(unsigned short const &)\n"
    "    DSP::Scalar< u16 >::atimes(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::adiv",1,"DSP::Scalar< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::adiv",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  (arg1)->adiv((DSP::Scalar< unsigned short > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u16 >::adiv(unsigned short const &)\n"
    "    DSP::Scalar< u16 >::adiv(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::get_value",1,"DSP::Scalar< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::set_value",1,"DSP::Scalar< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u16 >::set_value",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u16 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u16 >::print",1,"DSP::Scalar< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Scalar(void *obj) {
DSP::Scalar< u16 > *arg1 = (DSP::Scalar< u16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Scalar_attributes[] = {
    { "val", _wrap_UInt16Scalar_val_get, _wrap_UInt16Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Scalar_methods[]= {
    { "__sub", _wrap_UInt16Scalar___sub},
    { "__div", _wrap_UInt16Scalar___div},
    { "__add", _wrap_UInt16Scalar___add},
    { "__mul", _wrap_UInt16Scalar___mul},
    { "aplus", _wrap_UInt16Scalar_aplus},
    { "aminus", _wrap_UInt16Scalar_aminus},
    { "atimes", _wrap_UInt16Scalar_atimes},
    { "adiv", _wrap_UInt16Scalar_adiv},
    { "get_value", _wrap_UInt16Scalar_get_value},
    { "set_value", _wrap_UInt16Scalar_set_value},
    { "print", _wrap_UInt16Scalar_print},
    {0,0}
};
static swig_lua_method swig_UInt16Scalar_meta[] = {
    { "__sub", _wrap_UInt16Scalar___sub},
    { "__div", _wrap_UInt16Scalar___div},
    { "__add", _wrap_UInt16Scalar___add},
    { "__mul", _wrap_UInt16Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_UInt16Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Scalar_Sf_SwigStatic = {
    "UInt16Scalar",
    swig_UInt16Scalar_Sf_SwigStatic_methods,
    swig_UInt16Scalar_Sf_SwigStatic_attributes,
    swig_UInt16Scalar_Sf_SwigStatic_constants,
    swig_UInt16Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Scalar_bases[] = {0};
static const char *swig_UInt16Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Scalar = { "UInt16Scalar", "UInt16Scalar", &SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,_proxy__wrap_new_UInt16Scalar, swig_delete_UInt16Scalar, swig_UInt16Scalar_methods, swig_UInt16Scalar_attributes, &swig_UInt16Scalar_Sf_SwigStatic, swig_UInt16Scalar_meta, swig_UInt16Scalar_bases, swig_UInt16Scalar_base_names };

static int _wrap_Int32Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::val",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::val",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::val",1,"DSP::Scalar< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (int) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = 0 ;
  int temp1 ;
  DSP::Scalar< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::Scalar",1,"int const &");
  temp1=(int)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< i32 > *)new DSP::Scalar< i32 >((int const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< int > *arg1 = 0 ;
  DSP::Scalar< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::Scalar",1,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("new_Int32Scalar",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (DSP::Scalar< i32 > *)new DSP::Scalar< i32 >((DSP::Scalar< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::Scalar(int const &)\n"
    "    DSP::Scalar< i32 >::Scalar(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator +",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator +",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< int > const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator -",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator -",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< int > const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator *",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator *",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< int > const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator /",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator /",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< int > const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator +",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator +",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((int const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator -",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator -",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((int const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::operator -(DSP::Scalar< int > const &)\n"
    "    DSP::Scalar< i32 >::operator -(int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator *",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator *",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((int const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  SwigValueWrapper< DSP::Scalar< int > > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator /",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator /",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((int const &)*arg2);
  {
    DSP::Scalar< int > * resultptr = new DSP::Scalar< int >((const DSP::Scalar< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::operator /(DSP::Scalar< int > const &)\n"
    "    DSP::Scalar< i32 >::operator /(int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator +",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator +",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::operator +(DSP::Scalar< int > const &)\n"
    "    DSP::Scalar< i32 >::operator +(int const &)\n"
    "    DSP::Scalar< i32 >::operator +(DSP::UniVector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::operator *",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::operator *",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::operator *(DSP::Scalar< int > const &)\n"
    "    DSP::Scalar< i32 >::operator *(int const &)\n"
    "    DSP::Scalar< i32 >::operator *(DSP::UniVector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::aplus",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::aplus",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::aminus",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::aminus",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::atimes",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::atimes",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::adiv",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::adiv",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::aplus",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::aplus",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  (arg1)->aplus((DSP::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::aplus(int const &)\n"
    "    DSP::Scalar< i32 >::aplus(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::aminus",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::aminus",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  (arg1)->aminus((DSP::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::aminus(int const &)\n"
    "    DSP::Scalar< i32 >::aminus(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::atimes",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::atimes",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  (arg1)->atimes((DSP::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::atimes(int const &)\n"
    "    DSP::Scalar< i32 >::atimes(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::adiv",1,"DSP::Scalar< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::adiv",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  (arg1)->adiv((DSP::Scalar< int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i32 >::adiv(int const &)\n"
    "    DSP::Scalar< i32 >::adiv(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::get_value",1,"DSP::Scalar< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (int)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::set_value",1,"DSP::Scalar< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< i32 >::set_value",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i32 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i32 >::print",1,"DSP::Scalar< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Scalar(void *obj) {
DSP::Scalar< i32 > *arg1 = (DSP::Scalar< i32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Scalar_attributes[] = {
    { "val", _wrap_Int32Scalar_val_get, _wrap_Int32Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Scalar_methods[]= {
    { "__sub", _wrap_Int32Scalar___sub},
    { "__div", _wrap_Int32Scalar___div},
    { "__add", _wrap_Int32Scalar___add},
    { "__mul", _wrap_Int32Scalar___mul},
    { "aplus", _wrap_Int32Scalar_aplus},
    { "aminus", _wrap_Int32Scalar_aminus},
    { "atimes", _wrap_Int32Scalar_atimes},
    { "adiv", _wrap_Int32Scalar_adiv},
    { "get_value", _wrap_Int32Scalar_get_value},
    { "set_value", _wrap_Int32Scalar_set_value},
    { "print", _wrap_Int32Scalar_print},
    {0,0}
};
static swig_lua_method swig_Int32Scalar_meta[] = {
    { "__sub", _wrap_Int32Scalar___sub},
    { "__div", _wrap_Int32Scalar___div},
    { "__add", _wrap_Int32Scalar___add},
    { "__mul", _wrap_Int32Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_Int32Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Scalar_Sf_SwigStatic = {
    "Int32Scalar",
    swig_Int32Scalar_Sf_SwigStatic_methods,
    swig_Int32Scalar_Sf_SwigStatic_attributes,
    swig_Int32Scalar_Sf_SwigStatic_constants,
    swig_Int32Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Scalar_bases[] = {0};
static const char *swig_Int32Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Scalar = { "Int32Scalar", "Int32Scalar", &SWIGTYPE_p_DSP__ScalarT_int_t,_proxy__wrap_new_Int32Scalar, swig_delete_Int32Scalar, swig_Int32Scalar_methods, swig_Int32Scalar_attributes, &swig_Int32Scalar_Sf_SwigStatic, swig_Int32Scalar_meta, swig_Int32Scalar_bases, swig_Int32Scalar_base_names };

static int _wrap_UInt32Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::val",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::val",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::val",1,"DSP::Scalar< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (unsigned int) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  DSP::Scalar< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::Scalar",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::Scalar",1,"unsigned int const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  temp1=(unsigned int)lua_tonumber(L,1); arg1=&temp1;
  result = (DSP::Scalar< u32 > *)new DSP::Scalar< u32 >((unsigned int const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< unsigned int > *arg1 = 0 ;
  DSP::Scalar< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::Scalar",1,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Scalar",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (DSP::Scalar< u32 > *)new DSP::Scalar< u32 >((DSP::Scalar< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Scalar__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Scalar__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::Scalar(unsigned int const &)\n"
    "    DSP::Scalar< u32 >::Scalar(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator +",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator +",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator -",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator -",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator *",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator *",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator /",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator /",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator +",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator +",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned int const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator -",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator -",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned int const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::operator -(DSP::Scalar< unsigned int > const &)\n"
    "    DSP::Scalar< u32 >::operator -(unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator *",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator *",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned int const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  SwigValueWrapper< DSP::Scalar< unsigned int > > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator /",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator /",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned int const &)*arg2);
  {
    DSP::Scalar< unsigned int > * resultptr = new DSP::Scalar< unsigned int >((const DSP::Scalar< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::operator /(DSP::Scalar< unsigned int > const &)\n"
    "    DSP::Scalar< u32 >::operator /(unsigned int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::UniVector< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator +",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator +",2,"DSP::UniVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::operator +(DSP::Scalar< unsigned int > const &)\n"
    "    DSP::Scalar< u32 >::operator +(unsigned int const &)\n"
    "    DSP::Scalar< u32 >::operator +(DSP::UniVector< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::UniVector< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::operator *",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::operator *",2,"DSP::UniVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::operator *(DSP::Scalar< unsigned int > const &)\n"
    "    DSP::Scalar< u32 >::operator *(unsigned int const &)\n"
    "    DSP::Scalar< u32 >::operator *(DSP::UniVector< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::aplus",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::aplus",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aplus((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::aminus",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::aminus",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->aminus((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::atimes",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::atimes",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->atimes((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::adiv",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::adiv",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->adiv((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::aplus",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::aplus",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  (arg1)->aplus((DSP::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_aplus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_aplus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::aplus(unsigned int const &)\n"
    "    DSP::Scalar< u32 >::aplus(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::aminus",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::aminus",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  (arg1)->aminus((DSP::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_aminus__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_aminus__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::aminus(unsigned int const &)\n"
    "    DSP::Scalar< u32 >::aminus(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::atimes",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::atimes",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  (arg1)->atimes((DSP::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_atimes__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_atimes__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::atimes(unsigned int const &)\n"
    "    DSP::Scalar< u32 >::atimes(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::adiv",1,"DSP::Scalar< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::adiv",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  (arg1)->adiv((DSP::Scalar< unsigned int > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Scalar_adiv__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Scalar_adiv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u32 >::adiv(unsigned int const &)\n"
    "    DSP::Scalar< u32 >::adiv(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::get_value",1,"DSP::Scalar< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->get_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::set_value",1,"DSP::Scalar< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Scalar< u32 >::set_value",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->set_value((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u32 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u32 >::print",1,"DSP::Scalar< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Scalar(void *obj) {
DSP::Scalar< u32 > *arg1 = (DSP::Scalar< u32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Scalar_attributes[] = {
    { "val", _wrap_UInt32Scalar_val_get, _wrap_UInt32Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Scalar_methods[]= {
    { "__sub", _wrap_UInt32Scalar___sub},
    { "__div", _wrap_UInt32Scalar___div},
    { "__add", _wrap_UInt32Scalar___add},
    { "__mul", _wrap_UInt32Scalar___mul},
    { "aplus", _wrap_UInt32Scalar_aplus},
    { "aminus", _wrap_UInt32Scalar_aminus},
    { "atimes", _wrap_UInt32Scalar_atimes},
    { "adiv", _wrap_UInt32Scalar_adiv},
    { "get_value", _wrap_UInt32Scalar_get_value},
    { "set_value", _wrap_UInt32Scalar_set_value},
    { "print", _wrap_UInt32Scalar_print},
    {0,0}
};
static swig_lua_method swig_UInt32Scalar_meta[] = {
    { "__sub", _wrap_UInt32Scalar___sub},
    { "__div", _wrap_UInt32Scalar___div},
    { "__add", _wrap_UInt32Scalar___add},
    { "__mul", _wrap_UInt32Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_UInt32Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Scalar_Sf_SwigStatic = {
    "UInt32Scalar",
    swig_UInt32Scalar_Sf_SwigStatic_methods,
    swig_UInt32Scalar_Sf_SwigStatic_attributes,
    swig_UInt32Scalar_Sf_SwigStatic_constants,
    swig_UInt32Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Scalar_bases[] = {0};
static const char *swig_UInt32Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Scalar = { "UInt32Scalar", "UInt32Scalar", &SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,_proxy__wrap_new_UInt32Scalar, swig_delete_UInt32Scalar, swig_UInt32Scalar_methods, swig_UInt32Scalar_attributes, &swig_UInt32Scalar_Sf_SwigStatic, swig_UInt32Scalar_meta, swig_UInt32Scalar_bases, swig_UInt32Scalar_base_names };

static int _wrap_Int64Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::val",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::val",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar_val_set",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::val",1,"DSP::Scalar< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result =  ((arg1)->val);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int64_t *arg1 = 0 ;
  DSP::Scalar< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::Scalar",1,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("new_Int64Scalar",1,SWIGTYPE_p_int64_t);
  }
  
  result = (DSP::Scalar< i64 > *)new DSP::Scalar< i64 >((int64_t const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< int64_t > *arg1 = 0 ;
  DSP::Scalar< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::Scalar",1,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("new_Int64Scalar",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (DSP::Scalar< i64 > *)new DSP::Scalar< i64 >((DSP::Scalar< int64_t > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Scalar__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Scalar__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::Scalar(int64_t const &)\n"
    "    DSP::Scalar< i64 >::Scalar(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator +",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator +",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator -",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator -",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator *",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator *",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator /",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator /",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator +",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator +",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar___add",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator +((int64_t const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator -",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator -",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar___sub",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator -((int64_t const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::operator -(DSP::Scalar< int64_t > const &)\n"
    "    DSP::Scalar< i64 >::operator -(int64_t const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator *",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator *",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar___mul",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator *((int64_t const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< int64_t > > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator /",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator /",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar___div",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator /((int64_t const &)*arg2);
  {
    DSP::Scalar< int64_t > * resultptr = new DSP::Scalar< int64_t >((const DSP::Scalar< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::operator /(DSP::Scalar< int64_t > const &)\n"
    "    DSP::Scalar< i64 >::operator /(int64_t const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator +",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator +",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::operator +(DSP::Scalar< int64_t > const &)\n"
    "    DSP::Scalar< i64 >::operator +(int64_t const &)\n"
    "    DSP::Scalar< i64 >::operator +(DSP::UniVector< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::operator *",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::operator *",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::operator *(DSP::Scalar< int64_t > const &)\n"
    "    DSP::Scalar< i64 >::operator *(int64_t const &)\n"
    "    DSP::Scalar< i64 >::operator *(DSP::UniVector< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::aplus",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::aplus",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar_aplus",2,SWIGTYPE_p_int64_t);
  }
  
  (arg1)->aplus((int64_t const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::aminus",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::aminus",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar_aminus",2,SWIGTYPE_p_int64_t);
  }
  
  (arg1)->aminus((int64_t const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::atimes",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::atimes",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar_atimes",2,SWIGTYPE_p_int64_t);
  }
  
  (arg1)->atimes((int64_t const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::adiv",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::adiv",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar_adiv",2,SWIGTYPE_p_int64_t);
  }
  
  (arg1)->adiv((int64_t const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::aplus",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::aplus",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  (arg1)->aplus((DSP::Scalar< int64_t > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_aplus__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_aplus__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::aplus(int64_t const &)\n"
    "    DSP::Scalar< i64 >::aplus(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::aminus",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::aminus",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  (arg1)->aminus((DSP::Scalar< int64_t > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_aminus__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_aminus__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::aminus(int64_t const &)\n"
    "    DSP::Scalar< i64 >::aminus(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::atimes",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::atimes",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  (arg1)->atimes((DSP::Scalar< int64_t > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_atimes__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_atimes__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::atimes(int64_t const &)\n"
    "    DSP::Scalar< i64 >::atimes(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::adiv",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::adiv",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  (arg1)->adiv((DSP::Scalar< int64_t > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_adiv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Scalar_adiv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< i64 >::adiv(int64_t const &)\n"
    "    DSP::Scalar< i64 >::adiv(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::get_value",1,"DSP::Scalar< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->get_value();
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::set_value",1,"DSP::Scalar< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< i64 >::set_value",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Scalar_set_value",2,SWIGTYPE_p_int64_t);
  }
  
  (arg1)->set_value((int64_t const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< i64 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< i64 >::print",1,"DSP::Scalar< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Scalar(void *obj) {
DSP::Scalar< i64 > *arg1 = (DSP::Scalar< i64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Scalar_attributes[] = {
    { "val", _wrap_Int64Scalar_val_get, _wrap_Int64Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Scalar_methods[]= {
    { "__sub", _wrap_Int64Scalar___sub},
    { "__div", _wrap_Int64Scalar___div},
    { "__add", _wrap_Int64Scalar___add},
    { "__mul", _wrap_Int64Scalar___mul},
    { "aplus", _wrap_Int64Scalar_aplus},
    { "aminus", _wrap_Int64Scalar_aminus},
    { "atimes", _wrap_Int64Scalar_atimes},
    { "adiv", _wrap_Int64Scalar_adiv},
    { "get_value", _wrap_Int64Scalar_get_value},
    { "set_value", _wrap_Int64Scalar_set_value},
    { "print", _wrap_Int64Scalar_print},
    {0,0}
};
static swig_lua_method swig_Int64Scalar_meta[] = {
    { "__sub", _wrap_Int64Scalar___sub},
    { "__div", _wrap_Int64Scalar___div},
    { "__add", _wrap_Int64Scalar___add},
    { "__mul", _wrap_Int64Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_Int64Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Scalar_Sf_SwigStatic = {
    "Int64Scalar",
    swig_Int64Scalar_Sf_SwigStatic_methods,
    swig_Int64Scalar_Sf_SwigStatic_attributes,
    swig_Int64Scalar_Sf_SwigStatic_constants,
    swig_Int64Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Scalar_bases[] = {0};
static const char *swig_Int64Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Scalar = { "Int64Scalar", "Int64Scalar", &SWIGTYPE_p_DSP__ScalarT_int64_t_t,_proxy__wrap_new_Int64Scalar, swig_delete_Int64Scalar, swig_Int64Scalar_methods, swig_Int64Scalar_attributes, &swig_Int64Scalar_Sf_SwigStatic, swig_Int64Scalar_meta, swig_Int64Scalar_bases, swig_Int64Scalar_base_names };

static int _wrap_UInt64Scalar_val_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 arg2 ;
  u64 *argp2 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::val",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::val",2,"u64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_val_set",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar_val_set",2,SWIGTYPE_p_u64);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_val_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::val",1,"DSP::Scalar< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_val_get",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result =  ((arg1)->val);
  {
    u64 * resultptr = new u64((const u64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_u64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Scalar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  u64 *arg1 = 0 ;
  DSP::Scalar< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::Scalar",1,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("new_UInt64Scalar",1,SWIGTYPE_p_u64);
  }
  
  result = (DSP::Scalar< u64 > *)new DSP::Scalar< u64 >((u64 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Scalar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = 0 ;
  DSP::Scalar< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::Scalar",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::Scalar",1,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("new_UInt64Scalar",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (DSP::Scalar< u64 > *)new DSP::Scalar< u64 >((DSP::Scalar< u64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Scalar(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Scalar__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Scalar__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64Scalar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::Scalar(u64 const &)\n"
    "    DSP::Scalar< u64 >::Scalar(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator +",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator +",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___add",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator -",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator -",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___sub",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator *",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator *",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___mul",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator /",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator /",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___div",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator +",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator +",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar___add",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator +((u64 const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator -",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator -",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___sub",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar___sub",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator -((u64 const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::operator -(DSP::Scalar< u64 > const &)\n"
    "    DSP::Scalar< u64 >::operator -(u64 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator *",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator *",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar___mul",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator *((u64 const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< u64 > > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator /",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator /",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___div",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar___div",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator /((u64 const &)*arg2);
  {
    DSP::Scalar< u64 > * resultptr = new DSP::Scalar< u64 >((const DSP::Scalar< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::operator /(DSP::Scalar< u64 > const &)\n"
    "    DSP::Scalar< u64 >::operator /(u64 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::UniVector< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator +",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator +",2,"DSP::UniVector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___add",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___add",2,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::operator +(DSP::Scalar< u64 > const &)\n"
    "    DSP::Scalar< u64 >::operator +(u64 const &)\n"
    "    DSP::Scalar< u64 >::operator +(DSP::UniVector< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::UniVector< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::operator *",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::operator *",2,"DSP::UniVector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___mul",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar___mul",2,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::operator *(DSP::Scalar< u64 > const &)\n"
    "    DSP::Scalar< u64 >::operator *(u64 const &)\n"
    "    DSP::Scalar< u64 >::operator *(DSP::UniVector< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar_aplus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::aplus",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::aplus",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar_aplus",2,SWIGTYPE_p_u64);
  }
  
  (arg1)->aplus((u64 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_aminus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::aminus",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::aminus",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar_aminus",2,SWIGTYPE_p_u64);
  }
  
  (arg1)->aminus((u64 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_atimes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::atimes",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::atimes",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar_atimes",2,SWIGTYPE_p_u64);
  }
  
  (arg1)->atimes((u64 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_adiv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::adiv",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::adiv",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar_adiv",2,SWIGTYPE_p_u64);
  }
  
  (arg1)->adiv((u64 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_aplus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::aplus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::aplus",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::aplus",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_aplus",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_aplus",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  (arg1)->aplus((DSP::Scalar< u64 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_aplus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_aplus__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_aplus__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar_aplus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::aplus(u64 const &)\n"
    "    DSP::Scalar< u64 >::aplus(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar_aminus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::aminus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::aminus",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::aminus",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_aminus",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_aminus",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  (arg1)->aminus((DSP::Scalar< u64 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_aminus(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_aminus__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_aminus__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar_aminus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::aminus(u64 const &)\n"
    "    DSP::Scalar< u64 >::aminus(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar_atimes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::atimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::atimes",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::atimes",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_atimes",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_atimes",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  (arg1)->atimes((DSP::Scalar< u64 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_atimes(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_atimes__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_atimes__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar_atimes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::atimes(u64 const &)\n"
    "    DSP::Scalar< u64 >::atimes(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar_adiv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::adiv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::adiv",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::adiv",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_adiv",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_adiv",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  (arg1)->adiv((DSP::Scalar< u64 > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_adiv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_adiv__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Scalar_adiv__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Scalar_adiv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Scalar< u64 >::adiv(u64 const &)\n"
    "    DSP::Scalar< u64 >::adiv(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Scalar_get_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 result;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::get_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::get_value",1,"DSP::Scalar< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_get_value",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->get_value();
  {
    u64 * resultptr = new u64((const u64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_u64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_set_value(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::set_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::set_value",1,"DSP::Scalar< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Scalar< u64 >::set_value",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_set_value",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Scalar_set_value",2,SWIGTYPE_p_u64);
  }
  
  (arg1)->set_value((u64 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Scalar_print(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) 0 ;
  
  SWIG_check_num_args("DSP::Scalar< u64 >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Scalar< u64 >::print",1,"DSP::Scalar< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Scalar_print",1,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Scalar(void *obj) {
DSP::Scalar< u64 > *arg1 = (DSP::Scalar< u64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Scalar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Scalar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Scalar_attributes[] = {
    { "val", _wrap_UInt64Scalar_val_get, _wrap_UInt64Scalar_val_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Scalar_methods[]= {
    { "__sub", _wrap_UInt64Scalar___sub},
    { "__div", _wrap_UInt64Scalar___div},
    { "__add", _wrap_UInt64Scalar___add},
    { "__mul", _wrap_UInt64Scalar___mul},
    { "aplus", _wrap_UInt64Scalar_aplus},
    { "aminus", _wrap_UInt64Scalar_aminus},
    { "atimes", _wrap_UInt64Scalar_atimes},
    { "adiv", _wrap_UInt64Scalar_adiv},
    { "get_value", _wrap_UInt64Scalar_get_value},
    { "set_value", _wrap_UInt64Scalar_set_value},
    { "print", _wrap_UInt64Scalar_print},
    {0,0}
};
static swig_lua_method swig_UInt64Scalar_meta[] = {
    { "__sub", _wrap_UInt64Scalar___sub},
    { "__div", _wrap_UInt64Scalar___div},
    { "__add", _wrap_UInt64Scalar___add},
    { "__mul", _wrap_UInt64Scalar___mul},
    {0,0}
};

static swig_lua_attribute swig_UInt64Scalar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Scalar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Scalar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Scalar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Scalar_Sf_SwigStatic = {
    "UInt64Scalar",
    swig_UInt64Scalar_Sf_SwigStatic_methods,
    swig_UInt64Scalar_Sf_SwigStatic_attributes,
    swig_UInt64Scalar_Sf_SwigStatic_constants,
    swig_UInt64Scalar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Scalar_bases[] = {0};
static const char *swig_UInt64Scalar_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Scalar = { "UInt64Scalar", "UInt64Scalar", &SWIGTYPE_p_DSP__ScalarT_u64_t,_proxy__wrap_new_UInt64Scalar, swig_delete_UInt64Scalar, swig_UInt64Scalar_methods, swig_UInt64Scalar_attributes, &swig_UInt64Scalar_Sf_SwigStatic, swig_UInt64Scalar_meta, swig_UInt64Scalar_bases, swig_UInt64Scalar_base_names };

static int _wrap_FloatComplex_c_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  kfr::complex< float > arg2 ;
  kfr::complex< float > *argp2 ;
  
  SWIG_check_num_args("DSP::Complex< float >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::c",1,"DSP::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< float >::c",2,"kfr::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_c_set",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_c_set",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_c_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  kfr::complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::c",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_c_get",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result =  ((arg1)->c);
  {
    kfr::complex< float > * resultptr = new kfr::complex< float >((const kfr::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Complex< float >::Complex",0,0)
  result = (DSP::Complex< float > *)new DSP::Complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  DSP::Complex< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Complex< float >::Complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Complex< float >::Complex",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Complex< float >::Complex",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (DSP::Complex< float > *)new DSP::Complex< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = 0 ;
  DSP::Complex< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Complex< float >::Complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Complex< float >::Complex",1,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("new_FloatComplex",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (DSP::Complex< float > *)new DSP::Complex< float >((kfr::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatComplex__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplex__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatComplex__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatComplex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< float >::Complex()\n"
    "    DSP::Complex< float >::Complex(float const,float const)\n"
    "    DSP::Complex< float >::Complex(kfr::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplex___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > *arg2 = 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::operator +",1,"DSP::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< float >::operator +",2,"DSP::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___add",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___add",2,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->operator +((DSP::Complex< float > const &)*arg2);
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex___sub(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > *arg2 = 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::operator -",1,"DSP::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< float >::operator -",2,"DSP::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___sub",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___sub",2,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->operator -((DSP::Complex< float > const &)*arg2);
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > *arg2 = 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::operator *",1,"DSP::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< float >::operator *",2,"DSP::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___mul",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___mul",2,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->operator *((DSP::Complex< float > const &)*arg2);
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex___div(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > *arg2 = 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::operator /",1,"DSP::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< float >::operator /",2,"DSP::Complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___div",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___div",2,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->operator /((DSP::Complex< float > const &)*arg2);
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_cabs(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::cabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::cabs",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_cabs",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->cabs();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_carg(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::carg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::carg",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_carg",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->carg();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_cartesian(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::cartesian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::cartesian",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_cartesian",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->cartesian();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_conj(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::conj",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_conj",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->conj();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_ccos(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::ccos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::ccos",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_ccos",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->ccos();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_csin(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::csin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::csin",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_csin",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->csin();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_ccosh(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::ccosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::ccosh",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_ccosh",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->ccosh();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_csinh(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::csinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::csinh",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_csinh",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->csinh();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_cexp(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::cexp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::cexp",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_cexp",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->cexp();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_cexp10(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::cexp10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::cexp10",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_cexp10",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->cexp10();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_cexp2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::cexp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::cexp2",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_cexp2",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->cexp2();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_clog(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::clog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::clog",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_clog",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->clog();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_clog10(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::clog10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::clog10",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_clog10",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->clog10();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_clog2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::clog2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::clog2",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_clog2",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->clog2();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_csqr(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::csqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::csqr",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_csqr",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->csqr();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_csqrt(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::csqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::csqrt",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_csqrt",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->csqrt();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_polar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::Complex< float >::polar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::polar",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_polar",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (arg1)->polar();
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::UniComplex< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniComplex< float > > result;
  
  SWIG_check_num_args("DSP::Complex< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::operator +",1,"DSP::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< float >::operator +",2,"DSP::UniComplex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___add",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___add",2,SWIGTYPE_p_DSP__UniComplexT_float_t);
  }
  
  result = (arg1)->operator +((DSP::UniComplex< float > const &)*arg2);
  {
    DSP::UniComplex< float > * resultptr = new DSP::UniComplex< float >((const DSP::UniComplex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplex___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniComplexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplex___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplex___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< float >::operator +(DSP::Complex< float > const &)\n"
    "    DSP::Complex< float >::operator +(DSP::UniComplex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplex___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  DSP::UniComplex< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniComplex< float > > result;
  
  SWIG_check_num_args("DSP::Complex< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::operator *",1,"DSP::Complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< float >::operator *",2,"DSP::UniComplex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___mul",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex___mul",2,SWIGTYPE_p_DSP__UniComplexT_float_t);
  }
  
  result = (arg1)->operator *((DSP::UniComplex< float > const &)*arg2);
  {
    DSP::UniComplex< float > * resultptr = new DSP::UniComplex< float >((const DSP::UniComplex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplex___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniComplexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplex___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplex___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< float >::operator *(DSP::Complex< float > const &)\n"
    "    DSP::Complex< float >::operator *(DSP::UniComplex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("DSP::Complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::imag",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_imag",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (float)(arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("DSP::Complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::real",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_real",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (float)(arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DSP::Complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::imag",1,"DSP::Complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Complex< float >::imag",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_imag",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< float >::imag()\n"
    "    DSP::Complex< float >::imag(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DSP::Complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::real",1,"DSP::Complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Complex< float >::real",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_real",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< float >::real()\n"
    "    DSP::Complex< float >::real(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplex_isreal(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< float > *arg1 = (DSP::Complex< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::Complex< float >::isreal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< float >::isreal",1,"DSP::Complex< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_float_t,0))){
    SWIG_fail_ptr("FloatComplex_isreal",1,SWIGTYPE_p_DSP__ComplexT_float_t);
  }
  
  result = (bool)(arg1)->isreal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatComplex(void *obj) {
DSP::Complex< float > *arg1 = (DSP::Complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatComplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatComplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatComplex_attributes[] = {
    { "c", _wrap_FloatComplex_c_get, _wrap_FloatComplex_c_set },
    {0,0,0}
};
static swig_lua_method swig_FloatComplex_methods[]= {
    { "__sub", _wrap_FloatComplex___sub},
    { "__div", _wrap_FloatComplex___div},
    { "cabs", _wrap_FloatComplex_cabs},
    { "carg", _wrap_FloatComplex_carg},
    { "cartesian", _wrap_FloatComplex_cartesian},
    { "conj", _wrap_FloatComplex_conj},
    { "ccos", _wrap_FloatComplex_ccos},
    { "csin", _wrap_FloatComplex_csin},
    { "ccosh", _wrap_FloatComplex_ccosh},
    { "csinh", _wrap_FloatComplex_csinh},
    { "cexp", _wrap_FloatComplex_cexp},
    { "cexp10", _wrap_FloatComplex_cexp10},
    { "cexp2", _wrap_FloatComplex_cexp2},
    { "clog", _wrap_FloatComplex_clog},
    { "clog10", _wrap_FloatComplex_clog10},
    { "clog2", _wrap_FloatComplex_clog2},
    { "csqr", _wrap_FloatComplex_csqr},
    { "csqrt", _wrap_FloatComplex_csqrt},
    { "polar", _wrap_FloatComplex_polar},
    { "__add", _wrap_FloatComplex___add},
    { "__mul", _wrap_FloatComplex___mul},
    { "imag", _wrap_FloatComplex_imag},
    { "real", _wrap_FloatComplex_real},
    { "isreal", _wrap_FloatComplex_isreal},
    {0,0}
};
static swig_lua_method swig_FloatComplex_meta[] = {
    { "__sub", _wrap_FloatComplex___sub},
    { "__div", _wrap_FloatComplex___div},
    { "__add", _wrap_FloatComplex___add},
    { "__mul", _wrap_FloatComplex___mul},
    {0,0}
};

static swig_lua_attribute swig_FloatComplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatComplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatComplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatComplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatComplex_Sf_SwigStatic = {
    "FloatComplex",
    swig_FloatComplex_Sf_SwigStatic_methods,
    swig_FloatComplex_Sf_SwigStatic_attributes,
    swig_FloatComplex_Sf_SwigStatic_constants,
    swig_FloatComplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatComplex_bases[] = {0};
static const char *swig_FloatComplex_base_names[] = {0};
static swig_lua_class _wrap_class_FloatComplex = { "FloatComplex", "FloatComplex", &SWIGTYPE_p_DSP__ComplexT_float_t,_proxy__wrap_new_FloatComplex, swig_delete_FloatComplex, swig_FloatComplex_methods, swig_FloatComplex_attributes, &swig_FloatComplex_Sf_SwigStatic, swig_FloatComplex_meta, swig_FloatComplex_bases, swig_FloatComplex_base_names };

static int _wrap_DoubleComplex_c_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  kfr::complex< double > arg2 ;
  kfr::complex< double > *argp2 ;
  
  SWIG_check_num_args("DSP::Complex< double >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::c",1,"DSP::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< double >::c",2,"kfr::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_c_set",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_c_set",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_c_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  kfr::complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::c",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_c_get",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result =  ((arg1)->c);
  {
    kfr::complex< double > * resultptr = new kfr::complex< double >((const kfr::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Complex< double >::Complex",0,0)
  result = (DSP::Complex< double > *)new DSP::Complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  DSP::Complex< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Complex< double >::Complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Complex< double >::Complex",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Complex< double >::Complex",2,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = (DSP::Complex< double > *)new DSP::Complex< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = 0 ;
  DSP::Complex< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Complex< double >::Complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Complex< double >::Complex",1,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("new_DoubleComplex",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (DSP::Complex< double > *)new DSP::Complex< double >((kfr::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleComplex__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleComplex__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleComplex__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleComplex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< double >::Complex()\n"
    "    DSP::Complex< double >::Complex(double const,double const)\n"
    "    DSP::Complex< double >::Complex(kfr::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplex___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > *arg2 = 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::operator +",1,"DSP::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< double >::operator +",2,"DSP::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___add",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___add",2,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->operator +((DSP::Complex< double > const &)*arg2);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex___sub(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > *arg2 = 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::operator -",1,"DSP::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< double >::operator -",2,"DSP::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___sub",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___sub",2,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->operator -((DSP::Complex< double > const &)*arg2);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > *arg2 = 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::operator *",1,"DSP::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< double >::operator *",2,"DSP::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___mul",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___mul",2,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->operator *((DSP::Complex< double > const &)*arg2);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex___div(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > *arg2 = 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::operator /",1,"DSP::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< double >::operator /",2,"DSP::Complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___div",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___div",2,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->operator /((DSP::Complex< double > const &)*arg2);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_cabs(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::cabs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::cabs",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_cabs",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->cabs();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_carg(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::carg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::carg",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_carg",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->carg();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_cartesian(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::cartesian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::cartesian",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_cartesian",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->cartesian();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_conj(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::conj",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_conj",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->conj();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_ccos(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::ccos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::ccos",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_ccos",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->ccos();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_csin(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::csin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::csin",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_csin",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->csin();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_ccosh(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::ccosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::ccosh",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_ccosh",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->ccosh();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_csinh(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::csinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::csinh",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_csinh",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->csinh();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_cexp(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::cexp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::cexp",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_cexp",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->cexp();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_cexp10(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::cexp10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::cexp10",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_cexp10",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->cexp10();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_cexp2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::cexp2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::cexp2",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_cexp2",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->cexp2();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_clog(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::clog",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::clog",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_clog",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->clog();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_clog10(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::clog10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::clog10",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_clog10",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->clog10();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_clog2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::clog2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::clog2",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_clog2",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->clog2();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_csqr(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::csqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::csqr",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_csqr",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->csqr();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_csqrt(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::csqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::csqrt",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_csqrt",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->csqrt();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_polar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::Complex< double >::polar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::polar",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_polar",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (arg1)->polar();
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::UniComplex< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniComplex< double > > result;
  
  SWIG_check_num_args("DSP::Complex< double >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::operator +",1,"DSP::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< double >::operator +",2,"DSP::UniComplex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___add",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___add",2,SWIGTYPE_p_DSP__UniComplexT_double_t);
  }
  
  result = (arg1)->operator +((DSP::UniComplex< double > const &)*arg2);
  {
    DSP::UniComplex< double > * resultptr = new DSP::UniComplex< double >((const DSP::UniComplex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplex___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniComplexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplex___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplex___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< double >::operator +(DSP::Complex< double > const &)\n"
    "    DSP::Complex< double >::operator +(DSP::UniComplex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplex___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  DSP::UniComplex< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniComplex< double > > result;
  
  SWIG_check_num_args("DSP::Complex< double >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::operator *",1,"DSP::Complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Complex< double >::operator *",2,"DSP::UniComplex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___mul",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex___mul",2,SWIGTYPE_p_DSP__UniComplexT_double_t);
  }
  
  result = (arg1)->operator *((DSP::UniComplex< double > const &)*arg2);
  {
    DSP::UniComplex< double > * resultptr = new DSP::UniComplex< double >((const DSP::UniComplex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplex___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniComplexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplex___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplex___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< double >::operator *(DSP::Complex< double > const &)\n"
    "    DSP::Complex< double >::operator *(DSP::UniComplex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("DSP::Complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::imag",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_imag",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (double)(arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("DSP::Complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::real",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_real",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (double)(arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::Complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::imag",1,"DSP::Complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Complex< double >::imag",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_imag",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleComplex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleComplex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< double >::imag()\n"
    "    DSP::Complex< double >::imag(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::Complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::real",1,"DSP::Complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Complex< double >::real",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_real",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleComplex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ComplexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleComplex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Complex< double >::real()\n"
    "    DSP::Complex< double >::real(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplex_isreal(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Complex< double > *arg1 = (DSP::Complex< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::Complex< double >::isreal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Complex< double >::isreal",1,"DSP::Complex< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ComplexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplex_isreal",1,SWIGTYPE_p_DSP__ComplexT_double_t);
  }
  
  result = (bool)(arg1)->isreal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleComplex(void *obj) {
DSP::Complex< double > *arg1 = (DSP::Complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleComplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleComplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleComplex_attributes[] = {
    { "c", _wrap_DoubleComplex_c_get, _wrap_DoubleComplex_c_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleComplex_methods[]= {
    { "__sub", _wrap_DoubleComplex___sub},
    { "__div", _wrap_DoubleComplex___div},
    { "cabs", _wrap_DoubleComplex_cabs},
    { "carg", _wrap_DoubleComplex_carg},
    { "cartesian", _wrap_DoubleComplex_cartesian},
    { "conj", _wrap_DoubleComplex_conj},
    { "ccos", _wrap_DoubleComplex_ccos},
    { "csin", _wrap_DoubleComplex_csin},
    { "ccosh", _wrap_DoubleComplex_ccosh},
    { "csinh", _wrap_DoubleComplex_csinh},
    { "cexp", _wrap_DoubleComplex_cexp},
    { "cexp10", _wrap_DoubleComplex_cexp10},
    { "cexp2", _wrap_DoubleComplex_cexp2},
    { "clog", _wrap_DoubleComplex_clog},
    { "clog10", _wrap_DoubleComplex_clog10},
    { "clog2", _wrap_DoubleComplex_clog2},
    { "csqr", _wrap_DoubleComplex_csqr},
    { "csqrt", _wrap_DoubleComplex_csqrt},
    { "polar", _wrap_DoubleComplex_polar},
    { "__add", _wrap_DoubleComplex___add},
    { "__mul", _wrap_DoubleComplex___mul},
    { "imag", _wrap_DoubleComplex_imag},
    { "real", _wrap_DoubleComplex_real},
    { "isreal", _wrap_DoubleComplex_isreal},
    {0,0}
};
static swig_lua_method swig_DoubleComplex_meta[] = {
    { "__sub", _wrap_DoubleComplex___sub},
    { "__div", _wrap_DoubleComplex___div},
    { "__add", _wrap_DoubleComplex___add},
    { "__mul", _wrap_DoubleComplex___mul},
    {0,0}
};

static swig_lua_attribute swig_DoubleComplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleComplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleComplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleComplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleComplex_Sf_SwigStatic = {
    "DoubleComplex",
    swig_DoubleComplex_Sf_SwigStatic_methods,
    swig_DoubleComplex_Sf_SwigStatic_attributes,
    swig_DoubleComplex_Sf_SwigStatic_constants,
    swig_DoubleComplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleComplex_bases[] = {0};
static const char *swig_DoubleComplex_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleComplex = { "DoubleComplex", "DoubleComplex", &SWIGTYPE_p_DSP__ComplexT_double_t,_proxy__wrap_new_DoubleComplex, swig_delete_DoubleComplex, swig_DoubleComplex_methods, swig_DoubleComplex_attributes, &swig_DoubleComplex_Sf_SwigStatic, swig_DoubleComplex_meta, swig_DoubleComplex_bases, swig_DoubleComplex_base_names };

static int _wrap_FloatVector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  kfr::univector< float > arg2 ;
  kfr::univector< float > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::vec",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::vec",2,"kfr::univector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_vec_set",2,SWIGTYPE_p_kfr__univectorT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  kfr::univector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::vec",1,"DSP::UniVector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< float > * resultptr = new kfr::univector< float >((const kfr::univector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::UniVector",0,0)
  result = (DSP::UniVector< f32 > *)new DSP::UniVector< f32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< f32 > *)new DSP::UniVector< f32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  DSP::UniVector< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::UniVector",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< f32 > *)new DSP::UniVector< f32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  DSP::UniVector< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::UniVector",1,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (DSP::UniVector< f32 > *)new DSP::UniVector< f32 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< float > *arg1 = 0 ;
  DSP::UniVector< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::UniVector",1,"kfr::univector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_kfr__univectorT_float_t);
  }
  
  result = (DSP::UniVector< f32 > *)new DSP::UniVector< f32 >((kfr::univector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::UniVector",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (DSP::UniVector< f32 > *)new DSP::UniVector< f32 >((DSP::UniVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f32 >::UniVector()\n"
    "    DSP::UniVector< f32 >::UniVector(size_t)\n"
    "    DSP::UniVector< f32 >::UniVector(float *,size_t)\n"
    "    DSP::UniVector< f32 >::UniVector(std::vector< float > &)\n"
    "    DSP::UniVector< f32 >::UniVector(kfr::univector< float > const &)\n"
    "    DSP::UniVector< f32 >::UniVector(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::size",1,"DSP::UniVector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_size",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = ((DSP::UniVector< f32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::resize",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_resize",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::__getitem",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::__setitem",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< f32 >::__setitem",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::fill",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_fill",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::scalar",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< f32 >::scalar",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(float const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::at",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_at",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::front",1,"DSP::UniVector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_front",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::back",1,"DSP::UniVector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_back",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::data",1,"DSP::UniVector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_data",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator +",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator +",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___add",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___add",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator -",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator -",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___sub",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator *",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator *",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___mul",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator /",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator /",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___div",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___div",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator +",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator +",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___add",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator -",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator -",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator *",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator /",1,"DSP::UniVector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___div",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator +",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator +",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___add",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatVector___add",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f32 >::operator +(DSP::UniVector< float > const &)\n"
    "    DSP::UniVector< f32 >::operator +(float const &)\n"
    "    DSP::UniVector< f32 >::operator +(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator -",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator -",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatVector___sub",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f32 >::operator -(DSP::UniVector< float > const &)\n"
    "    DSP::UniVector< f32 >::operator -(float const &)\n"
    "    DSP::UniVector< f32 >::operator -(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator *",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator *",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatVector___mul",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f32 >::operator *(DSP::UniVector< float > const &)\n"
    "    DSP::UniVector< f32 >::operator *(float const &)\n"
    "    DSP::UniVector< f32 >::operator *(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::operator /",1,"DSP::UniVector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f32 >::operator /",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___div",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("FloatVector___div",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatVector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f32 >::operator /(DSP::UniVector< float > const &)\n"
    "    DSP::UniVector< f32 >::operator /(float const &)\n"
    "    DSP::UniVector< f32 >::operator /(DSP::Scalar< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f32 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f32 >::println",1,"DSP::UniVector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_println",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatVector(void *obj) {
DSP::UniVector< f32 > *arg1 = (DSP::UniVector< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatVector_attributes[] = {
    { "vec", _wrap_FloatVector_vec_get, _wrap_FloatVector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_FloatVector_methods[]= {
    { "size", _wrap_FloatVector_size},
    { "resize", _wrap_FloatVector_resize},
    { "__getitem", _wrap_FloatVector___getitem},
    { "__setitem", _wrap_FloatVector___setitem},
    { "fill", _wrap_FloatVector_fill},
    { "scalar", _wrap_FloatVector_scalar},
    { "at", _wrap_FloatVector_at},
    { "front", _wrap_FloatVector_front},
    { "back", _wrap_FloatVector_back},
    { "data", _wrap_FloatVector_data},
    { "__add", _wrap_FloatVector___add},
    { "__sub", _wrap_FloatVector___sub},
    { "__mul", _wrap_FloatVector___mul},
    { "__div", _wrap_FloatVector___div},
    { "println", _wrap_FloatVector_println},
    {0,0}
};
static swig_lua_method swig_FloatVector_meta[] = {
    { "__getitem", _wrap_FloatVector___getitem},
    { "__setitem", _wrap_FloatVector___setitem},
    { "__add", _wrap_FloatVector___add},
    { "__sub", _wrap_FloatVector___sub},
    { "__mul", _wrap_FloatVector___mul},
    { "__div", _wrap_FloatVector___div},
    {0,0}
};

static swig_lua_attribute swig_FloatVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatVector_Sf_SwigStatic = {
    "FloatVector",
    swig_FloatVector_Sf_SwigStatic_methods,
    swig_FloatVector_Sf_SwigStatic_attributes,
    swig_FloatVector_Sf_SwigStatic_constants,
    swig_FloatVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatVector_bases[] = {0};
static const char *swig_FloatVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatVector = { "FloatVector", "FloatVector", &SWIGTYPE_p_DSP__UniVectorT_float_t,_proxy__wrap_new_FloatVector, swig_delete_FloatVector, swig_FloatVector_methods, swig_FloatVector_attributes, &swig_FloatVector_Sf_SwigStatic, swig_FloatVector_meta, swig_FloatVector_bases, swig_FloatVector_base_names };

static int _wrap_DoubleVector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  kfr::univector< double > arg2 ;
  kfr::univector< double > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::vec",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::vec",2,"kfr::univector< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_vec_set",2,SWIGTYPE_p_kfr__univectorT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  kfr::univector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::vec",1,"DSP::UniVector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< double > * resultptr = new kfr::univector< double >((const kfr::univector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::UniVector",0,0)
  result = (DSP::UniVector< f64 > *)new DSP::UniVector< f64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< f64 > *)new DSP::UniVector< f64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  DSP::UniVector< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::UniVector",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("new_DoubleVector",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< f64 > *)new DSP::UniVector< f64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  DSP::UniVector< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::UniVector",1,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (DSP::UniVector< f64 > *)new DSP::UniVector< f64 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< double > *arg1 = 0 ;
  DSP::UniVector< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::UniVector",1,"kfr::univector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector",1,SWIGTYPE_p_kfr__univectorT_double_t);
  }
  
  result = (DSP::UniVector< f64 > *)new DSP::UniVector< f64 >((kfr::univector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::UniVector",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (DSP::UniVector< f64 > *)new DSP::UniVector< f64 >((DSP::UniVector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f64 >::UniVector()\n"
    "    DSP::UniVector< f64 >::UniVector(size_t)\n"
    "    DSP::UniVector< f64 >::UniVector(double *,size_t)\n"
    "    DSP::UniVector< f64 >::UniVector(std::vector< double > &)\n"
    "    DSP::UniVector< f64 >::UniVector(kfr::univector< double > const &)\n"
    "    DSP::UniVector< f64 >::UniVector(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::size",1,"DSP::UniVector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_size",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = ((DSP::UniVector< f64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::resize",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_resize",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::__getitem",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::__setitem",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< f64 >::__setitem",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::fill",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_fill",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::scalar",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< f64 >::scalar",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(double const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::at",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_at",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::front",1,"DSP::UniVector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_front",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::back",1,"DSP::UniVector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_back",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::data",1,"DSP::UniVector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_data",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator +",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator +",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___add",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___add",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator -",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator -",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___sub",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator *",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator *",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___mul",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator /",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator /",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___div",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___div",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator +",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator +",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___add",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator -",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator -",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator *",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator *",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator /",1,"DSP::UniVector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator /",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___div",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator +",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator +",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___add",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___add",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f64 >::operator +(DSP::UniVector< double > const &)\n"
    "    DSP::UniVector< f64 >::operator +(double const &)\n"
    "    DSP::UniVector< f64 >::operator +(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator -",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator -",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___sub",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f64 >::operator -(DSP::UniVector< double > const &)\n"
    "    DSP::UniVector< f64 >::operator -(double const &)\n"
    "    DSP::UniVector< f64 >::operator -(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator *",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator *",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___mul",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f64 >::operator *(DSP::UniVector< double > const &)\n"
    "    DSP::UniVector< f64 >::operator *(double const &)\n"
    "    DSP::UniVector< f64 >::operator *(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::operator /",1,"DSP::UniVector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< f64 >::operator /",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___div",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("DoubleVector___div",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleVector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< f64 >::operator /(DSP::UniVector< double > const &)\n"
    "    DSP::UniVector< f64 >::operator /(double const &)\n"
    "    DSP::UniVector< f64 >::operator /(DSP::Scalar< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< f64 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< f64 >::println",1,"DSP::UniVector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector_println",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleVector(void *obj) {
DSP::UniVector< f64 > *arg1 = (DSP::UniVector< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleVector_attributes[] = {
    { "vec", _wrap_DoubleVector_vec_get, _wrap_DoubleVector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleVector_methods[]= {
    { "size", _wrap_DoubleVector_size},
    { "resize", _wrap_DoubleVector_resize},
    { "__getitem", _wrap_DoubleVector___getitem},
    { "__setitem", _wrap_DoubleVector___setitem},
    { "fill", _wrap_DoubleVector_fill},
    { "scalar", _wrap_DoubleVector_scalar},
    { "at", _wrap_DoubleVector_at},
    { "front", _wrap_DoubleVector_front},
    { "back", _wrap_DoubleVector_back},
    { "data", _wrap_DoubleVector_data},
    { "__add", _wrap_DoubleVector___add},
    { "__sub", _wrap_DoubleVector___sub},
    { "__mul", _wrap_DoubleVector___mul},
    { "__div", _wrap_DoubleVector___div},
    { "println", _wrap_DoubleVector_println},
    {0,0}
};
static swig_lua_method swig_DoubleVector_meta[] = {
    { "__getitem", _wrap_DoubleVector___getitem},
    { "__setitem", _wrap_DoubleVector___setitem},
    { "__add", _wrap_DoubleVector___add},
    { "__sub", _wrap_DoubleVector___sub},
    { "__mul", _wrap_DoubleVector___mul},
    { "__div", _wrap_DoubleVector___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleVector_Sf_SwigStatic = {
    "DoubleVector",
    swig_DoubleVector_Sf_SwigStatic_methods,
    swig_DoubleVector_Sf_SwigStatic_attributes,
    swig_DoubleVector_Sf_SwigStatic_constants,
    swig_DoubleVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleVector_bases[] = {0};
static const char *swig_DoubleVector_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleVector = { "DoubleVector", "DoubleVector", &SWIGTYPE_p_DSP__UniVectorT_double_t,_proxy__wrap_new_DoubleVector, swig_delete_DoubleVector, swig_DoubleVector_methods, swig_DoubleVector_attributes, &swig_DoubleVector_Sf_SwigStatic, swig_DoubleVector_meta, swig_DoubleVector_bases, swig_DoubleVector_base_names };

static int _wrap_ComplexVector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::univector< kfr::complex< float > > arg2 ;
  kfr::univector< kfr::complex< float > > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::vec",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::vec",2,"kfr::univector< kfr::complex< float > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector_vec_set",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::univector< kfr::complex< float > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::vec",1,"DSP::UniVector< kfr::complex< f32 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< kfr::complex< float > > * resultptr = new kfr::univector< kfr::complex< float > >((const kfr::univector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::UniVector",0,0)
  result = (DSP::UniVector< kfr::complex< f32 > > *)new DSP::UniVector< kfr::complex< f32 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< kfr::complex< f32 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< kfr::complex< f32 > > *)new DSP::UniVector< kfr::complex< f32 > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = (kfr::complex< float > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< kfr::complex< f32 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,"kfr::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("new_ComplexVector",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< kfr::complex< f32 > > *)new DSP::UniVector< kfr::complex< f32 > >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = 0 ;
  DSP::UniVector< kfr::complex< f32 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,"std::vector< kfr::complex< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_ComplexVector",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (DSP::UniVector< kfr::complex< f32 > > *)new DSP::UniVector< kfr::complex< f32 > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< float > > *arg1 = 0 ;
  DSP::UniVector< kfr::complex< f32 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,"kfr::univector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_ComplexVector",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t);
  }
  
  result = (DSP::UniVector< kfr::complex< f32 > > *)new DSP::UniVector< kfr::complex< f32 > >((kfr::univector< kfr::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< float > > *arg1 = 0 ;
  DSP::UniVector< kfr::complex< f32 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::UniVector",1,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_ComplexVector",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = (DSP::UniVector< kfr::complex< f32 > > *)new DSP::UniVector< kfr::complex< f32 > >((DSP::UniVector< kfr::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ComplexVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ComplexVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f32 > >::UniVector()\n"
    "    DSP::UniVector< kfr::complex< f32 > >::UniVector(size_t)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::UniVector(kfr::complex< float > *,size_t)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::UniVector(std::vector< kfr::complex< float > > &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::UniVector(kfr::univector< kfr::complex< float > > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::UniVector(DSP::UniVector< kfr::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexVector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::size",1,"DSP::UniVector< kfr::complex< f32 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_size",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  result = ((DSP::UniVector< kfr::complex< f32 > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::resize",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_resize",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::__getitem",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    kfr::complex< float > * resultptr = new kfr::complex< float >((const kfr::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::__setitem",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::__setitem",3,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexVector___setitem",3,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  (arg1)->__setitem(arg2,(kfr::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > arg2 ;
  kfr::complex< float > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::fill",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::fill",2,"kfr::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_fill",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexVector_fill",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > *arg3 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::scalar",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::scalar",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::scalar",3,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexVector_scalar",3,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (arg1)->scalar(arg2,(kfr::complex< float > const &)*arg3);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::at",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_at",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::front",1,"DSP::UniVector< kfr::complex< f32 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_front",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  result = (kfr::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::back",1,"DSP::UniVector< kfr::complex< f32 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_back",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  result = (kfr::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::data",1,"DSP::UniVector< kfr::complex< f32 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_data",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  result = (kfr::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::UniVector< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator +",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator +",2,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___add",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___add",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::UniVector< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator -",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator -",2,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::UniVector< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator *",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator *",2,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::UniVector< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator /",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator /",2,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___div",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___div",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator +",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator +",2,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___add",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexVector___add",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (arg1)->operator +((kfr::complex< float > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator -",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator -",2,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (arg1)->operator -((kfr::complex< float > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator *",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator *",2,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (arg1)->operator *((kfr::complex< float > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  kfr::complex< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator /",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator /",2,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___div",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("ComplexVector___div",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (arg1)->operator /((kfr::complex< float > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::Scalar< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator +",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator +",2,"DSP::Scalar< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___add",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___add",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator +(DSP::UniVector< kfr::complex< float > > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator +(kfr::complex< float > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator +(DSP::Scalar< kfr::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexVector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::Scalar< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator -",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator -",2,"DSP::Scalar< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator -(DSP::UniVector< kfr::complex< float > > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator -(kfr::complex< float > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator -(DSP::Scalar< kfr::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::Scalar< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator *",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator *",2,"DSP::Scalar< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator *(DSP::UniVector< kfr::complex< float > > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator *(kfr::complex< float > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator *(DSP::Scalar< kfr::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexVector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  DSP::Scalar< kfr::complex< float > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator /",1,"DSP::UniVector< kfr::complex< f32 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::operator /",2,"DSP::Scalar< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector___div",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("ComplexVector___div",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< kfr::complex< float > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexVector___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator /(DSP::UniVector< kfr::complex< float > > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator /(kfr::complex< float > const &)\n"
    "    DSP::UniVector< kfr::complex< f32 > >::operator /(DSP::Scalar< kfr::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexVector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f32 > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f32 > >::println",1,"DSP::UniVector< kfr::complex< f32 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,0))){
    SWIG_fail_ptr("ComplexVector_println",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexVector(void *obj) {
DSP::UniVector< kfr::complex< f32 > > *arg1 = (DSP::UniVector< kfr::complex< f32 > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexVector_attributes[] = {
    { "vec", _wrap_ComplexVector_vec_get, _wrap_ComplexVector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_ComplexVector_methods[]= {
    { "size", _wrap_ComplexVector_size},
    { "resize", _wrap_ComplexVector_resize},
    { "__getitem", _wrap_ComplexVector___getitem},
    { "__setitem", _wrap_ComplexVector___setitem},
    { "fill", _wrap_ComplexVector_fill},
    { "scalar", _wrap_ComplexVector_scalar},
    { "at", _wrap_ComplexVector_at},
    { "front", _wrap_ComplexVector_front},
    { "back", _wrap_ComplexVector_back},
    { "data", _wrap_ComplexVector_data},
    { "__add", _wrap_ComplexVector___add},
    { "__sub", _wrap_ComplexVector___sub},
    { "__mul", _wrap_ComplexVector___mul},
    { "__div", _wrap_ComplexVector___div},
    { "println", _wrap_ComplexVector_println},
    {0,0}
};
static swig_lua_method swig_ComplexVector_meta[] = {
    { "__getitem", _wrap_ComplexVector___getitem},
    { "__setitem", _wrap_ComplexVector___setitem},
    { "__add", _wrap_ComplexVector___add},
    { "__sub", _wrap_ComplexVector___sub},
    { "__mul", _wrap_ComplexVector___mul},
    { "__div", _wrap_ComplexVector___div},
    {0,0}
};

static swig_lua_attribute swig_ComplexVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexVector_Sf_SwigStatic = {
    "ComplexVector",
    swig_ComplexVector_Sf_SwigStatic_methods,
    swig_ComplexVector_Sf_SwigStatic_attributes,
    swig_ComplexVector_Sf_SwigStatic_constants,
    swig_ComplexVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexVector_bases[] = {0};
static const char *swig_ComplexVector_base_names[] = {0};
static swig_lua_class _wrap_class_ComplexVector = { "ComplexVector", "ComplexVector", &SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f32_t_t,_proxy__wrap_new_ComplexVector, swig_delete_ComplexVector, swig_ComplexVector_methods, swig_ComplexVector_attributes, &swig_ComplexVector_Sf_SwigStatic, swig_ComplexVector_meta, swig_ComplexVector_bases, swig_ComplexVector_base_names };

static int _wrap_DoubleComplexVector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::univector< kfr::complex< double > > arg2 ;
  kfr::univector< kfr::complex< double > > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::vec",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::vec",2,"kfr::univector< kfr::complex< double > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_vec_set",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_double_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::univector< kfr::complex< double > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::vec",1,"DSP::UniVector< kfr::complex< f64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< kfr::complex< double > > * resultptr = new kfr::univector< kfr::complex< double > >((const kfr::univector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplexVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::UniVector",0,0)
  result = (DSP::UniVector< kfr::complex< f64 > > *)new DSP::UniVector< kfr::complex< f64 > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplexVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< kfr::complex< f64 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< kfr::complex< f64 > > *)new DSP::UniVector< kfr::complex< f64 > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplexVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = (kfr::complex< double > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< kfr::complex< f64 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,"kfr::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("new_DoubleComplexVector",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< kfr::complex< f64 > > *)new DSP::UniVector< kfr::complex< f64 > >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplexVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = 0 ;
  DSP::UniVector< kfr::complex< f64 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,"std::vector< kfr::complex< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_DoubleComplexVector",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (DSP::UniVector< kfr::complex< f64 > > *)new DSP::UniVector< kfr::complex< f64 > >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplexVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< double > > *arg1 = 0 ;
  DSP::UniVector< kfr::complex< f64 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,"kfr::univector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_DoubleComplexVector",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_double_t_t);
  }
  
  result = (DSP::UniVector< kfr::complex< f64 > > *)new DSP::UniVector< kfr::complex< f64 > >((kfr::univector< kfr::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplexVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< double > > *arg1 = 0 ;
  DSP::UniVector< kfr::complex< f64 > > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::UniVector",1,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_DoubleComplexVector",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = (DSP::UniVector< kfr::complex< f64 > > *)new DSP::UniVector< kfr::complex< f64 > >((DSP::UniVector< kfr::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleComplexVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleComplexVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleComplexVector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleComplexVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleComplexVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleComplexVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleComplexVector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleComplexVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f64 > >::UniVector()\n"
    "    DSP::UniVector< kfr::complex< f64 > >::UniVector(size_t)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::UniVector(kfr::complex< double > *,size_t)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::UniVector(std::vector< kfr::complex< double > > &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::UniVector(kfr::univector< kfr::complex< double > > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::UniVector(DSP::UniVector< kfr::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplexVector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::size",1,"DSP::UniVector< kfr::complex< f64 > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_size",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  result = ((DSP::UniVector< kfr::complex< f64 > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::resize",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_resize",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::__getitem",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    kfr::complex< double > * resultptr = new kfr::complex< double >((const kfr::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::__setitem",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::__setitem",3,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___setitem",3,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  (arg1)->__setitem(arg2,(kfr::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > arg2 ;
  kfr::complex< double > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::fill",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::fill",2,"kfr::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_fill",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_fill",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > *arg3 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::scalar",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::scalar",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::scalar",3,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_scalar",3,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (arg1)->scalar(arg2,(kfr::complex< double > const &)*arg3);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::at",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_at",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::front",1,"DSP::UniVector< kfr::complex< f64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_front",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  result = (kfr::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::back",1,"DSP::UniVector< kfr::complex< f64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_back",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  result = (kfr::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::data",1,"DSP::UniVector< kfr::complex< f64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_data",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  result = (kfr::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::UniVector< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator +",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator +",2,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___add",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___add",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::UniVector< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator -",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator -",2,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___sub",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::UniVector< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator *",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator *",2,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___mul",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::UniVector< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator /",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator /",2,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___div",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___div",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator +",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator +",2,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___add",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___add",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (arg1)->operator +((kfr::complex< double > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator -",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator -",2,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___sub",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (arg1)->operator -((kfr::complex< double > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator *",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator *",2,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___mul",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (arg1)->operator *((kfr::complex< double > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  kfr::complex< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator /",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator /",2,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___div",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___div",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (arg1)->operator /((kfr::complex< double > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::Scalar< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator +",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator +",2,"DSP::Scalar< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___add",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___add",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplexVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator +(DSP::UniVector< kfr::complex< double > > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator +(kfr::complex< double > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator +(DSP::Scalar< kfr::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplexVector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::Scalar< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator -",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator -",2,"DSP::Scalar< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___sub",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___sub",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplexVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator -(DSP::UniVector< kfr::complex< double > > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator -(kfr::complex< double > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator -(DSP::Scalar< kfr::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplexVector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::Scalar< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator *",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator *",2,"DSP::Scalar< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___mul",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___mul",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplexVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator *(DSP::UniVector< kfr::complex< double > > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator *(kfr::complex< double > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator *(DSP::Scalar< kfr::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplexVector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  DSP::Scalar< kfr::complex< double > > *arg2 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator /",1,"DSP::UniVector< kfr::complex< f64 > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::operator /",2,"DSP::Scalar< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___div",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector___div",2,SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< kfr::complex< double > > const &)*arg2);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleComplexVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleComplexVector___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleComplexVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator /(DSP::UniVector< kfr::complex< double > > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator /(kfr::complex< double > const &)\n"
    "    DSP::UniVector< kfr::complex< f64 > >::operator /(DSP::Scalar< kfr::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleComplexVector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< kfr::complex< f64 > >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< kfr::complex< f64 > >::println",1,"DSP::UniVector< kfr::complex< f64 > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,0))){
    SWIG_fail_ptr("DoubleComplexVector_println",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleComplexVector(void *obj) {
DSP::UniVector< kfr::complex< f64 > > *arg1 = (DSP::UniVector< kfr::complex< f64 > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleComplexVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleComplexVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleComplexVector_attributes[] = {
    { "vec", _wrap_DoubleComplexVector_vec_get, _wrap_DoubleComplexVector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleComplexVector_methods[]= {
    { "size", _wrap_DoubleComplexVector_size},
    { "resize", _wrap_DoubleComplexVector_resize},
    { "__getitem", _wrap_DoubleComplexVector___getitem},
    { "__setitem", _wrap_DoubleComplexVector___setitem},
    { "fill", _wrap_DoubleComplexVector_fill},
    { "scalar", _wrap_DoubleComplexVector_scalar},
    { "at", _wrap_DoubleComplexVector_at},
    { "front", _wrap_DoubleComplexVector_front},
    { "back", _wrap_DoubleComplexVector_back},
    { "data", _wrap_DoubleComplexVector_data},
    { "__add", _wrap_DoubleComplexVector___add},
    { "__sub", _wrap_DoubleComplexVector___sub},
    { "__mul", _wrap_DoubleComplexVector___mul},
    { "__div", _wrap_DoubleComplexVector___div},
    { "println", _wrap_DoubleComplexVector_println},
    {0,0}
};
static swig_lua_method swig_DoubleComplexVector_meta[] = {
    { "__getitem", _wrap_DoubleComplexVector___getitem},
    { "__setitem", _wrap_DoubleComplexVector___setitem},
    { "__add", _wrap_DoubleComplexVector___add},
    { "__sub", _wrap_DoubleComplexVector___sub},
    { "__mul", _wrap_DoubleComplexVector___mul},
    { "__div", _wrap_DoubleComplexVector___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleComplexVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleComplexVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleComplexVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleComplexVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleComplexVector_Sf_SwigStatic = {
    "DoubleComplexVector",
    swig_DoubleComplexVector_Sf_SwigStatic_methods,
    swig_DoubleComplexVector_Sf_SwigStatic_attributes,
    swig_DoubleComplexVector_Sf_SwigStatic_constants,
    swig_DoubleComplexVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleComplexVector_bases[] = {0};
static const char *swig_DoubleComplexVector_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleComplexVector = { "DoubleComplexVector", "DoubleComplexVector", &SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_f64_t_t,_proxy__wrap_new_DoubleComplexVector, swig_delete_DoubleComplexVector, swig_DoubleComplexVector_methods, swig_DoubleComplexVector_attributes, &swig_DoubleComplexVector_Sf_SwigStatic, swig_DoubleComplexVector_meta, swig_DoubleComplexVector_bases, swig_DoubleComplexVector_base_names };

static int _wrap_Int8Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  kfr::univector< signed char > arg2 ;
  kfr::univector< signed char > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::vec",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::vec",2,"kfr::univector< signed char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_signed_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  kfr::univector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::vec",1,"DSP::UniVector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< signed char > * resultptr = new kfr::univector< signed char >((const kfr::univector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::UniVector",0,0)
  result = (DSP::UniVector< i8 > *)new DSP::UniVector< i8 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< i8 > *)new DSP::UniVector< i8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  signed char *arg1 = (signed char *) 0 ;
  size_t arg2 ;
  DSP::UniVector< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::UniVector",1,"signed char *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("new_Int8Vector",1,SWIGTYPE_p_signed_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< i8 > *)new DSP::UniVector< i8 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = 0 ;
  DSP::UniVector< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::UniVector",1,"std::vector< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Vector",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (DSP::UniVector< i8 > *)new DSP::UniVector< i8 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< signed char > *arg1 = 0 ;
  DSP::UniVector< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::UniVector",1,"kfr::univector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Vector",1,SWIGTYPE_p_kfr__univectorT_signed_char_t);
  }
  
  result = (DSP::UniVector< i8 > *)new DSP::UniVector< i8 >((kfr::univector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< signed char > *arg1 = 0 ;
  DSP::UniVector< i8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::UniVector",1,"DSP::UniVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_Int8Vector",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (DSP::UniVector< i8 > *)new DSP::UniVector< i8 >((DSP::UniVector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int8Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int8Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int8Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int8Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int8Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i8 >::UniVector()\n"
    "    DSP::UniVector< i8 >::UniVector(size_t)\n"
    "    DSP::UniVector< i8 >::UniVector(signed char *,size_t)\n"
    "    DSP::UniVector< i8 >::UniVector(std::vector< signed char > &)\n"
    "    DSP::UniVector< i8 >::UniVector(kfr::univector< signed char > const &)\n"
    "    DSP::UniVector< i8 >::UniVector(DSP::UniVector< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::size",1,"DSP::UniVector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = ((DSP::UniVector< i8 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::resize",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::__getitem",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::__setitem",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< i8 >::__setitem",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(signed char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::fill",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::fill",2,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  arg2 = (signed char)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::scalar",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< i8 >::scalar",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(signed char const &)*arg3);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  size_t arg2 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::at",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::front",1,"DSP::UniVector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::back",1,"DSP::UniVector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::data",1,"DSP::UniVector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (signed char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::UniVector< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator +",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator +",2,"DSP::UniVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::UniVector< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator -",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator -",2,"DSP::UniVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::UniVector< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator *",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator *",2,"DSP::UniVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::UniVector< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator /",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator /",2,"DSP::UniVector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator +",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator +",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((signed char const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator -",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator -",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((signed char const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator *",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator *",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((signed char const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator /",1,"DSP::UniVector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator /",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((signed char const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator +",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator +",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___add",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i8 >::operator +(DSP::UniVector< signed char > const &)\n"
    "    DSP::UniVector< i8 >::operator +(signed char const &)\n"
    "    DSP::UniVector< i8 >::operator +(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator -",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator -",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i8 >::operator -(DSP::UniVector< signed char > const &)\n"
    "    DSP::UniVector< i8 >::operator -(signed char const &)\n"
    "    DSP::UniVector< i8 >::operator -(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator *",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator *",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i8 >::operator *(DSP::UniVector< signed char > const &)\n"
    "    DSP::UniVector< i8 >::operator *(signed char const &)\n"
    "    DSP::UniVector< i8 >::operator *(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  DSP::Scalar< signed char > *arg2 = 0 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::operator /",1,"DSP::UniVector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i8 >::operator /",2,"DSP::Scalar< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector___div",2,SWIGTYPE_p_DSP__ScalarT_signed_char_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< signed char > const &)*arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int8Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_signed_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int8Vector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int8Vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int8Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i8 >::operator /(DSP::UniVector< signed char > const &)\n"
    "    DSP::UniVector< i8 >::operator /(signed char const &)\n"
    "    DSP::UniVector< i8 >::operator /(DSP::Scalar< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int8Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i8 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i8 >::println",1,"DSP::UniVector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,0))){
    SWIG_fail_ptr("Int8Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_signed_char_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int8Vector(void *obj) {
DSP::UniVector< i8 > *arg1 = (DSP::UniVector< i8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int8Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int8Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int8Vector_attributes[] = {
    { "vec", _wrap_Int8Vector_vec_get, _wrap_Int8Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_Int8Vector_methods[]= {
    { "size", _wrap_Int8Vector_size},
    { "resize", _wrap_Int8Vector_resize},
    { "__getitem", _wrap_Int8Vector___getitem},
    { "__setitem", _wrap_Int8Vector___setitem},
    { "fill", _wrap_Int8Vector_fill},
    { "scalar", _wrap_Int8Vector_scalar},
    { "at", _wrap_Int8Vector_at},
    { "front", _wrap_Int8Vector_front},
    { "back", _wrap_Int8Vector_back},
    { "data", _wrap_Int8Vector_data},
    { "__add", _wrap_Int8Vector___add},
    { "__sub", _wrap_Int8Vector___sub},
    { "__mul", _wrap_Int8Vector___mul},
    { "__div", _wrap_Int8Vector___div},
    { "println", _wrap_Int8Vector_println},
    {0,0}
};
static swig_lua_method swig_Int8Vector_meta[] = {
    { "__getitem", _wrap_Int8Vector___getitem},
    { "__setitem", _wrap_Int8Vector___setitem},
    { "__add", _wrap_Int8Vector___add},
    { "__sub", _wrap_Int8Vector___sub},
    { "__mul", _wrap_Int8Vector___mul},
    { "__div", _wrap_Int8Vector___div},
    {0,0}
};

static swig_lua_attribute swig_Int8Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int8Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int8Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int8Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int8Vector_Sf_SwigStatic = {
    "Int8Vector",
    swig_Int8Vector_Sf_SwigStatic_methods,
    swig_Int8Vector_Sf_SwigStatic_attributes,
    swig_Int8Vector_Sf_SwigStatic_constants,
    swig_Int8Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int8Vector_bases[] = {0};
static const char *swig_Int8Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int8Vector = { "Int8Vector", "Int8Vector", &SWIGTYPE_p_DSP__UniVectorT_signed_char_t,_proxy__wrap_new_Int8Vector, swig_delete_Int8Vector, swig_Int8Vector_methods, swig_Int8Vector_attributes, &swig_Int8Vector_Sf_SwigStatic, swig_Int8Vector_meta, swig_Int8Vector_bases, swig_Int8Vector_base_names };

static int _wrap_UInt8Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  kfr::univector< unsigned char > arg2 ;
  kfr::univector< unsigned char > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::vec",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::vec",2,"kfr::univector< unsigned char >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  kfr::univector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::vec",1,"DSP::UniVector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< unsigned char > * resultptr = new kfr::univector< unsigned char >((const kfr::univector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::UniVector",0,0)
  result = (DSP::UniVector< u8 > *)new DSP::UniVector< u8 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< u8 > *)new DSP::UniVector< u8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char *arg1 = (unsigned char *) 0 ;
  size_t arg2 ;
  DSP::UniVector< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::UniVector",1,"unsigned char *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("new_UInt8Vector",1,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< u8 > *)new DSP::UniVector< u8 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = 0 ;
  DSP::UniVector< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::UniVector",1,"std::vector< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Vector",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (DSP::UniVector< u8 > *)new DSP::UniVector< u8 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< unsigned char > *arg1 = 0 ;
  DSP::UniVector< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::UniVector",1,"kfr::univector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Vector",1,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  
  result = (DSP::UniVector< u8 > *)new DSP::UniVector< u8 >((kfr::univector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< unsigned char > *arg1 = 0 ;
  DSP::UniVector< u8 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::UniVector",1,"DSP::UniVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_UInt8Vector",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (DSP::UniVector< u8 > *)new DSP::UniVector< u8 >((DSP::UniVector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt8Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt8Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt8Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt8Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt8Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u8 >::UniVector()\n"
    "    DSP::UniVector< u8 >::UniVector(size_t)\n"
    "    DSP::UniVector< u8 >::UniVector(unsigned char *,size_t)\n"
    "    DSP::UniVector< u8 >::UniVector(std::vector< unsigned char > &)\n"
    "    DSP::UniVector< u8 >::UniVector(kfr::univector< unsigned char > const &)\n"
    "    DSP::UniVector< u8 >::UniVector(DSP::UniVector< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::size",1,"DSP::UniVector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = ((DSP::UniVector< u8 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::resize",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::__getitem",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::__setitem",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< u8 >::__setitem",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(unsigned char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::fill",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::fill",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::scalar",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< u8 >::scalar",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(unsigned char const &)*arg3);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::at",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::front",1,"DSP::UniVector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::back",1,"DSP::UniVector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::data",1,"DSP::UniVector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (unsigned char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::UniVector< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator +",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator +",2,"DSP::UniVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::UniVector< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator -",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator -",2,"DSP::UniVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::UniVector< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator *",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator *",2,"DSP::UniVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::UniVector< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator /",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator /",2,"DSP::UniVector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator +",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator +",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned char const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator -",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator -",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned char const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator *",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator *",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned char const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator /",1,"DSP::UniVector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator /",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned char const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator +",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator +",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___add",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u8 >::operator +(DSP::UniVector< unsigned char > const &)\n"
    "    DSP::UniVector< u8 >::operator +(unsigned char const &)\n"
    "    DSP::UniVector< u8 >::operator +(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator -",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator -",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u8 >::operator -(DSP::UniVector< unsigned char > const &)\n"
    "    DSP::UniVector< u8 >::operator -(unsigned char const &)\n"
    "    DSP::UniVector< u8 >::operator -(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator *",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator *",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u8 >::operator *(DSP::UniVector< unsigned char > const &)\n"
    "    DSP::UniVector< u8 >::operator *(unsigned char const &)\n"
    "    DSP::UniVector< u8 >::operator *(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  DSP::Scalar< unsigned char > *arg2 = 0 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::operator /",1,"DSP::UniVector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u8 >::operator /",2,"DSP::Scalar< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector___div",2,SWIGTYPE_p_DSP__ScalarT_unsigned_char_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< unsigned char > const &)*arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt8Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt8Vector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt8Vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt8Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u8 >::operator /(DSP::UniVector< unsigned char > const &)\n"
    "    DSP::UniVector< u8 >::operator /(unsigned char const &)\n"
    "    DSP::UniVector< u8 >::operator /(DSP::Scalar< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt8Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u8 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u8 >::println",1,"DSP::UniVector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("UInt8Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt8Vector(void *obj) {
DSP::UniVector< u8 > *arg1 = (DSP::UniVector< u8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt8Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt8Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt8Vector_attributes[] = {
    { "vec", _wrap_UInt8Vector_vec_get, _wrap_UInt8Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_UInt8Vector_methods[]= {
    { "size", _wrap_UInt8Vector_size},
    { "resize", _wrap_UInt8Vector_resize},
    { "__getitem", _wrap_UInt8Vector___getitem},
    { "__setitem", _wrap_UInt8Vector___setitem},
    { "fill", _wrap_UInt8Vector_fill},
    { "scalar", _wrap_UInt8Vector_scalar},
    { "at", _wrap_UInt8Vector_at},
    { "front", _wrap_UInt8Vector_front},
    { "back", _wrap_UInt8Vector_back},
    { "data", _wrap_UInt8Vector_data},
    { "__add", _wrap_UInt8Vector___add},
    { "__sub", _wrap_UInt8Vector___sub},
    { "__mul", _wrap_UInt8Vector___mul},
    { "__div", _wrap_UInt8Vector___div},
    { "println", _wrap_UInt8Vector_println},
    {0,0}
};
static swig_lua_method swig_UInt8Vector_meta[] = {
    { "__getitem", _wrap_UInt8Vector___getitem},
    { "__setitem", _wrap_UInt8Vector___setitem},
    { "__add", _wrap_UInt8Vector___add},
    { "__sub", _wrap_UInt8Vector___sub},
    { "__mul", _wrap_UInt8Vector___mul},
    { "__div", _wrap_UInt8Vector___div},
    {0,0}
};

static swig_lua_attribute swig_UInt8Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt8Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt8Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt8Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt8Vector_Sf_SwigStatic = {
    "UInt8Vector",
    swig_UInt8Vector_Sf_SwigStatic_methods,
    swig_UInt8Vector_Sf_SwigStatic_attributes,
    swig_UInt8Vector_Sf_SwigStatic_constants,
    swig_UInt8Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt8Vector_bases[] = {0};
static const char *swig_UInt8Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt8Vector = { "UInt8Vector", "UInt8Vector", &SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,_proxy__wrap_new_UInt8Vector, swig_delete_UInt8Vector, swig_UInt8Vector_methods, swig_UInt8Vector_attributes, &swig_UInt8Vector_Sf_SwigStatic, swig_UInt8Vector_meta, swig_UInt8Vector_bases, swig_UInt8Vector_base_names };

static int _wrap_Int16Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  kfr::univector< short > arg2 ;
  kfr::univector< short > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::vec",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::vec",2,"kfr::univector< short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  kfr::univector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::vec",1,"DSP::UniVector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< short > * resultptr = new kfr::univector< short >((const kfr::univector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::UniVector",0,0)
  result = (DSP::UniVector< i16 > *)new DSP::UniVector< i16 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< i16 > *)new DSP::UniVector< i16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  short *arg1 = (short *) 0 ;
  size_t arg2 ;
  DSP::UniVector< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::UniVector",1,"short *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("new_Int16Vector",1,SWIGTYPE_p_short);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< i16 > *)new DSP::UniVector< i16 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = 0 ;
  DSP::UniVector< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::UniVector",1,"std::vector< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_Int16Vector",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (DSP::UniVector< i16 > *)new DSP::UniVector< i16 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< short > *arg1 = 0 ;
  DSP::UniVector< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::UniVector",1,"kfr::univector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_short_t,0))){
    SWIG_fail_ptr("new_Int16Vector",1,SWIGTYPE_p_kfr__univectorT_short_t);
  }
  
  result = (DSP::UniVector< i16 > *)new DSP::UniVector< i16 >((kfr::univector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< short > *arg1 = 0 ;
  DSP::UniVector< i16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::UniVector",1,"DSP::UniVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("new_Int16Vector",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (DSP::UniVector< i16 > *)new DSP::UniVector< i16 >((DSP::UniVector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int16Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int16Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int16Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_short, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int16Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int16Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i16 >::UniVector()\n"
    "    DSP::UniVector< i16 >::UniVector(size_t)\n"
    "    DSP::UniVector< i16 >::UniVector(short *,size_t)\n"
    "    DSP::UniVector< i16 >::UniVector(std::vector< short > &)\n"
    "    DSP::UniVector< i16 >::UniVector(kfr::univector< short > const &)\n"
    "    DSP::UniVector< i16 >::UniVector(DSP::UniVector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::size",1,"DSP::UniVector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = ((DSP::UniVector< i16 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::resize",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::__getitem",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::__setitem",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< i16 >::__setitem",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::fill",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::fill",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::scalar",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< i16 >::scalar",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(short const &)*arg3);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::at",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::front",1,"DSP::UniVector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::back",1,"DSP::UniVector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::data",1,"DSP::UniVector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::UniVector< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator +",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator +",2,"DSP::UniVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::UniVector< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator -",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator -",2,"DSP::UniVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::UniVector< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator *",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator *",2,"DSP::UniVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::UniVector< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator /",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator /",2,"DSP::UniVector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator +",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator +",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((short const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator -",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator -",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((short const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator *",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator *",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((short const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator /",1,"DSP::UniVector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator /",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((short const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator +",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator +",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___add",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i16 >::operator +(DSP::UniVector< short > const &)\n"
    "    DSP::UniVector< i16 >::operator +(short const &)\n"
    "    DSP::UniVector< i16 >::operator +(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator -",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator -",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i16 >::operator -(DSP::UniVector< short > const &)\n"
    "    DSP::UniVector< i16 >::operator -(short const &)\n"
    "    DSP::UniVector< i16 >::operator -(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator *",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator *",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i16 >::operator *(DSP::UniVector< short > const &)\n"
    "    DSP::UniVector< i16 >::operator *(short const &)\n"
    "    DSP::UniVector< i16 >::operator *(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  DSP::Scalar< short > *arg2 = 0 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::operator /",1,"DSP::UniVector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i16 >::operator /",2,"DSP::Scalar< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_short_t,0))){
    SWIG_fail_ptr("Int16Vector___div",2,SWIGTYPE_p_DSP__ScalarT_short_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< short > const &)*arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int16Vector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int16Vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int16Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i16 >::operator /(DSP::UniVector< short > const &)\n"
    "    DSP::UniVector< i16 >::operator /(short const &)\n"
    "    DSP::UniVector< i16 >::operator /(DSP::Scalar< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int16Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i16 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i16 >::println",1,"DSP::UniVector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_short_t,0))){
    SWIG_fail_ptr("Int16Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_short_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int16Vector(void *obj) {
DSP::UniVector< i16 > *arg1 = (DSP::UniVector< i16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int16Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int16Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int16Vector_attributes[] = {
    { "vec", _wrap_Int16Vector_vec_get, _wrap_Int16Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_Int16Vector_methods[]= {
    { "size", _wrap_Int16Vector_size},
    { "resize", _wrap_Int16Vector_resize},
    { "__getitem", _wrap_Int16Vector___getitem},
    { "__setitem", _wrap_Int16Vector___setitem},
    { "fill", _wrap_Int16Vector_fill},
    { "scalar", _wrap_Int16Vector_scalar},
    { "at", _wrap_Int16Vector_at},
    { "front", _wrap_Int16Vector_front},
    { "back", _wrap_Int16Vector_back},
    { "data", _wrap_Int16Vector_data},
    { "__add", _wrap_Int16Vector___add},
    { "__sub", _wrap_Int16Vector___sub},
    { "__mul", _wrap_Int16Vector___mul},
    { "__div", _wrap_Int16Vector___div},
    { "println", _wrap_Int16Vector_println},
    {0,0}
};
static swig_lua_method swig_Int16Vector_meta[] = {
    { "__getitem", _wrap_Int16Vector___getitem},
    { "__setitem", _wrap_Int16Vector___setitem},
    { "__add", _wrap_Int16Vector___add},
    { "__sub", _wrap_Int16Vector___sub},
    { "__mul", _wrap_Int16Vector___mul},
    { "__div", _wrap_Int16Vector___div},
    {0,0}
};

static swig_lua_attribute swig_Int16Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int16Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int16Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int16Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int16Vector_Sf_SwigStatic = {
    "Int16Vector",
    swig_Int16Vector_Sf_SwigStatic_methods,
    swig_Int16Vector_Sf_SwigStatic_attributes,
    swig_Int16Vector_Sf_SwigStatic_constants,
    swig_Int16Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int16Vector_bases[] = {0};
static const char *swig_Int16Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int16Vector = { "Int16Vector", "Int16Vector", &SWIGTYPE_p_DSP__UniVectorT_short_t,_proxy__wrap_new_Int16Vector, swig_delete_Int16Vector, swig_Int16Vector_methods, swig_Int16Vector_attributes, &swig_Int16Vector_Sf_SwigStatic, swig_Int16Vector_meta, swig_Int16Vector_bases, swig_Int16Vector_base_names };

static int _wrap_UInt16Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  kfr::univector< unsigned short > arg2 ;
  kfr::univector< unsigned short > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::vec",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::vec",2,"kfr::univector< unsigned short >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_unsigned_short_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  kfr::univector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::vec",1,"DSP::UniVector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< unsigned short > * resultptr = new kfr::univector< unsigned short >((const kfr::univector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::UniVector",0,0)
  result = (DSP::UniVector< u16 > *)new DSP::UniVector< u16 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< u16 > *)new DSP::UniVector< u16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned short *arg1 = (unsigned short *) 0 ;
  size_t arg2 ;
  DSP::UniVector< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::UniVector",1,"unsigned short *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("new_UInt16Vector",1,SWIGTYPE_p_unsigned_short);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< u16 > *)new DSP::UniVector< u16 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = 0 ;
  DSP::UniVector< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::UniVector",1,"std::vector< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Vector",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (DSP::UniVector< u16 > *)new DSP::UniVector< u16 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< unsigned short > *arg1 = 0 ;
  DSP::UniVector< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::UniVector",1,"kfr::univector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Vector",1,SWIGTYPE_p_kfr__univectorT_unsigned_short_t);
  }
  
  result = (DSP::UniVector< u16 > *)new DSP::UniVector< u16 >((kfr::univector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< unsigned short > *arg1 = 0 ;
  DSP::UniVector< u16 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::UniVector",1,"DSP::UniVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_UInt16Vector",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (DSP::UniVector< u16 > *)new DSP::UniVector< u16 >((DSP::UniVector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt16Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt16Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt16Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt16Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt16Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u16 >::UniVector()\n"
    "    DSP::UniVector< u16 >::UniVector(size_t)\n"
    "    DSP::UniVector< u16 >::UniVector(unsigned short *,size_t)\n"
    "    DSP::UniVector< u16 >::UniVector(std::vector< unsigned short > &)\n"
    "    DSP::UniVector< u16 >::UniVector(kfr::univector< unsigned short > const &)\n"
    "    DSP::UniVector< u16 >::UniVector(DSP::UniVector< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::size",1,"DSP::UniVector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = ((DSP::UniVector< u16 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::resize",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::__getitem",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::__setitem",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< u16 >::__setitem",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(unsigned short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::fill",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::fill",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::scalar",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< u16 >::scalar",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(unsigned short const &)*arg3);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::at",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::front",1,"DSP::UniVector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::back",1,"DSP::UniVector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::data",1,"DSP::UniVector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (unsigned short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::UniVector< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator +",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator +",2,"DSP::UniVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::UniVector< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator -",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator -",2,"DSP::UniVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::UniVector< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator *",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator *",2,"DSP::UniVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::UniVector< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator /",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator /",2,"DSP::UniVector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator +",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator +",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned short const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator -",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator -",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned short const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator *",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator *",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned short const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator /",1,"DSP::UniVector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator /",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned short const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator +",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator +",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___add",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u16 >::operator +(DSP::UniVector< unsigned short > const &)\n"
    "    DSP::UniVector< u16 >::operator +(unsigned short const &)\n"
    "    DSP::UniVector< u16 >::operator +(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator -",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator -",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u16 >::operator -(DSP::UniVector< unsigned short > const &)\n"
    "    DSP::UniVector< u16 >::operator -(unsigned short const &)\n"
    "    DSP::UniVector< u16 >::operator -(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator *",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator *",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u16 >::operator *(DSP::UniVector< unsigned short > const &)\n"
    "    DSP::UniVector< u16 >::operator *(unsigned short const &)\n"
    "    DSP::UniVector< u16 >::operator *(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  DSP::Scalar< unsigned short > *arg2 = 0 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::operator /",1,"DSP::UniVector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u16 >::operator /",2,"DSP::Scalar< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector___div",2,SWIGTYPE_p_DSP__ScalarT_unsigned_short_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< unsigned short > const &)*arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt16Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt16Vector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt16Vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt16Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u16 >::operator /(DSP::UniVector< unsigned short > const &)\n"
    "    DSP::UniVector< u16 >::operator /(unsigned short const &)\n"
    "    DSP::UniVector< u16 >::operator /(DSP::Scalar< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt16Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u16 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u16 >::println",1,"DSP::UniVector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("UInt16Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt16Vector(void *obj) {
DSP::UniVector< u16 > *arg1 = (DSP::UniVector< u16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt16Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt16Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt16Vector_attributes[] = {
    { "vec", _wrap_UInt16Vector_vec_get, _wrap_UInt16Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_UInt16Vector_methods[]= {
    { "size", _wrap_UInt16Vector_size},
    { "resize", _wrap_UInt16Vector_resize},
    { "__getitem", _wrap_UInt16Vector___getitem},
    { "__setitem", _wrap_UInt16Vector___setitem},
    { "fill", _wrap_UInt16Vector_fill},
    { "scalar", _wrap_UInt16Vector_scalar},
    { "at", _wrap_UInt16Vector_at},
    { "front", _wrap_UInt16Vector_front},
    { "back", _wrap_UInt16Vector_back},
    { "data", _wrap_UInt16Vector_data},
    { "__add", _wrap_UInt16Vector___add},
    { "__sub", _wrap_UInt16Vector___sub},
    { "__mul", _wrap_UInt16Vector___mul},
    { "__div", _wrap_UInt16Vector___div},
    { "println", _wrap_UInt16Vector_println},
    {0,0}
};
static swig_lua_method swig_UInt16Vector_meta[] = {
    { "__getitem", _wrap_UInt16Vector___getitem},
    { "__setitem", _wrap_UInt16Vector___setitem},
    { "__add", _wrap_UInt16Vector___add},
    { "__sub", _wrap_UInt16Vector___sub},
    { "__mul", _wrap_UInt16Vector___mul},
    { "__div", _wrap_UInt16Vector___div},
    {0,0}
};

static swig_lua_attribute swig_UInt16Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt16Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt16Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt16Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt16Vector_Sf_SwigStatic = {
    "UInt16Vector",
    swig_UInt16Vector_Sf_SwigStatic_methods,
    swig_UInt16Vector_Sf_SwigStatic_attributes,
    swig_UInt16Vector_Sf_SwigStatic_constants,
    swig_UInt16Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt16Vector_bases[] = {0};
static const char *swig_UInt16Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt16Vector = { "UInt16Vector", "UInt16Vector", &SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,_proxy__wrap_new_UInt16Vector, swig_delete_UInt16Vector, swig_UInt16Vector_methods, swig_UInt16Vector_attributes, &swig_UInt16Vector_Sf_SwigStatic, swig_UInt16Vector_meta, swig_UInt16Vector_bases, swig_UInt16Vector_base_names };

static int _wrap_Int32Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  kfr::univector< int > arg2 ;
  kfr::univector< int > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::vec",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::vec",2,"kfr::univector< int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  kfr::univector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::vec",1,"DSP::UniVector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< int > * resultptr = new kfr::univector< int >((const kfr::univector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::UniVector",0,0)
  result = (DSP::UniVector< i32 > *)new DSP::UniVector< i32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< i32 > *)new DSP::UniVector< i32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  size_t arg2 ;
  DSP::UniVector< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::UniVector",1,"int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_Int32Vector",1,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< i32 > *)new DSP::UniVector< i32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  DSP::UniVector< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::UniVector",1,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_Int32Vector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (DSP::UniVector< i32 > *)new DSP::UniVector< i32 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< int > *arg1 = 0 ;
  DSP::UniVector< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::UniVector",1,"kfr::univector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_int_t,0))){
    SWIG_fail_ptr("new_Int32Vector",1,SWIGTYPE_p_kfr__univectorT_int_t);
  }
  
  result = (DSP::UniVector< i32 > *)new DSP::UniVector< i32 >((kfr::univector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int > *arg1 = 0 ;
  DSP::UniVector< i32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::UniVector",1,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("new_Int32Vector",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (DSP::UniVector< i32 > *)new DSP::UniVector< i32 >((DSP::UniVector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int32Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int32Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int32Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int32Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int32Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i32 >::UniVector()\n"
    "    DSP::UniVector< i32 >::UniVector(size_t)\n"
    "    DSP::UniVector< i32 >::UniVector(int *,size_t)\n"
    "    DSP::UniVector< i32 >::UniVector(std::vector< int > &)\n"
    "    DSP::UniVector< i32 >::UniVector(kfr::univector< int > const &)\n"
    "    DSP::UniVector< i32 >::UniVector(DSP::UniVector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::size",1,"DSP::UniVector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = ((DSP::UniVector< i32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::resize",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::__getitem",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::__setitem",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< i32 >::__setitem",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::fill",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::fill",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::scalar",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< i32 >::scalar",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(int const &)*arg3);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::at",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::front",1,"DSP::UniVector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::back",1,"DSP::UniVector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::data",1,"DSP::UniVector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator +",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator +",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator -",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator -",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator *",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator *",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator /",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator /",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator +",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator +",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((int const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator -",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator -",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((int const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator *",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator *",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((int const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator /",1,"DSP::UniVector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator /",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((int const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator +",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator +",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___add",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i32 >::operator +(DSP::UniVector< int > const &)\n"
    "    DSP::UniVector< i32 >::operator +(int const &)\n"
    "    DSP::UniVector< i32 >::operator +(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator -",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator -",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i32 >::operator -(DSP::UniVector< int > const &)\n"
    "    DSP::UniVector< i32 >::operator -(int const &)\n"
    "    DSP::UniVector< i32 >::operator -(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator *",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator *",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i32 >::operator *(DSP::UniVector< int > const &)\n"
    "    DSP::UniVector< i32 >::operator *(int const &)\n"
    "    DSP::UniVector< i32 >::operator *(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  DSP::Scalar< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::operator /",1,"DSP::UniVector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i32 >::operator /",2,"DSP::Scalar< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int_t,0))){
    SWIG_fail_ptr("Int32Vector___div",2,SWIGTYPE_p_DSP__ScalarT_int_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int32Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int32Vector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Int32Vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int32Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i32 >::operator /(DSP::UniVector< int > const &)\n"
    "    DSP::UniVector< i32 >::operator /(int const &)\n"
    "    DSP::UniVector< i32 >::operator /(DSP::Scalar< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int32Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i32 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i32 >::println",1,"DSP::UniVector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("Int32Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int32Vector(void *obj) {
DSP::UniVector< i32 > *arg1 = (DSP::UniVector< i32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int32Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int32Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int32Vector_attributes[] = {
    { "vec", _wrap_Int32Vector_vec_get, _wrap_Int32Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_Int32Vector_methods[]= {
    { "size", _wrap_Int32Vector_size},
    { "resize", _wrap_Int32Vector_resize},
    { "__getitem", _wrap_Int32Vector___getitem},
    { "__setitem", _wrap_Int32Vector___setitem},
    { "fill", _wrap_Int32Vector_fill},
    { "scalar", _wrap_Int32Vector_scalar},
    { "at", _wrap_Int32Vector_at},
    { "front", _wrap_Int32Vector_front},
    { "back", _wrap_Int32Vector_back},
    { "data", _wrap_Int32Vector_data},
    { "__add", _wrap_Int32Vector___add},
    { "__sub", _wrap_Int32Vector___sub},
    { "__mul", _wrap_Int32Vector___mul},
    { "__div", _wrap_Int32Vector___div},
    { "println", _wrap_Int32Vector_println},
    {0,0}
};
static swig_lua_method swig_Int32Vector_meta[] = {
    { "__getitem", _wrap_Int32Vector___getitem},
    { "__setitem", _wrap_Int32Vector___setitem},
    { "__add", _wrap_Int32Vector___add},
    { "__sub", _wrap_Int32Vector___sub},
    { "__mul", _wrap_Int32Vector___mul},
    { "__div", _wrap_Int32Vector___div},
    {0,0}
};

static swig_lua_attribute swig_Int32Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int32Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int32Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int32Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int32Vector_Sf_SwigStatic = {
    "Int32Vector",
    swig_Int32Vector_Sf_SwigStatic_methods,
    swig_Int32Vector_Sf_SwigStatic_attributes,
    swig_Int32Vector_Sf_SwigStatic_constants,
    swig_Int32Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int32Vector_bases[] = {0};
static const char *swig_Int32Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int32Vector = { "Int32Vector", "Int32Vector", &SWIGTYPE_p_DSP__UniVectorT_int_t,_proxy__wrap_new_Int32Vector, swig_delete_Int32Vector, swig_Int32Vector_methods, swig_Int32Vector_attributes, &swig_Int32Vector_Sf_SwigStatic, swig_Int32Vector_meta, swig_Int32Vector_bases, swig_Int32Vector_base_names };

static int _wrap_UInt32Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  kfr::univector< unsigned int > arg2 ;
  kfr::univector< unsigned int > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::vec",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::vec",2,"kfr::univector< unsigned int >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_unsigned_int_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  kfr::univector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::vec",1,"DSP::UniVector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< unsigned int > * resultptr = new kfr::univector< unsigned int >((const kfr::univector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::UniVector",0,0)
  result = (DSP::UniVector< u32 > *)new DSP::UniVector< u32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< u32 > *)new DSP::UniVector< u32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int *arg1 = (unsigned int *) 0 ;
  size_t arg2 ;
  DSP::UniVector< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::UniVector",1,"unsigned int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("new_UInt32Vector",1,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< u32 > *)new DSP::UniVector< u32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  DSP::UniVector< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::UniVector",1,"std::vector< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vector",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (DSP::UniVector< u32 > *)new DSP::UniVector< u32 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< unsigned int > *arg1 = 0 ;
  DSP::UniVector< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::UniVector",1,"kfr::univector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vector",1,SWIGTYPE_p_kfr__univectorT_unsigned_int_t);
  }
  
  result = (DSP::UniVector< u32 > *)new DSP::UniVector< u32 >((kfr::univector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< unsigned int > *arg1 = 0 ;
  DSP::UniVector< u32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::UniVector",1,"DSP::UniVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_UInt32Vector",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (DSP::UniVector< u32 > *)new DSP::UniVector< u32 >((DSP::UniVector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt32Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt32Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt32Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt32Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt32Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u32 >::UniVector()\n"
    "    DSP::UniVector< u32 >::UniVector(size_t)\n"
    "    DSP::UniVector< u32 >::UniVector(unsigned int *,size_t)\n"
    "    DSP::UniVector< u32 >::UniVector(std::vector< unsigned int > &)\n"
    "    DSP::UniVector< u32 >::UniVector(kfr::univector< unsigned int > const &)\n"
    "    DSP::UniVector< u32 >::UniVector(DSP::UniVector< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::size",1,"DSP::UniVector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = ((DSP::UniVector< u32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::resize",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::__getitem",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->__getitem(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::__setitem",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< u32 >::__setitem",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->__setitem(arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::fill",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::fill",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::scalar",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::scalar",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector< u32 >::scalar",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  result = (arg1)->scalar(arg2,(unsigned int const &)*arg3);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::at",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::front",1,"DSP::UniVector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::back",1,"DSP::UniVector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::data",1,"DSP::UniVector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (unsigned int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::UniVector< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator +",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator +",2,"DSP::UniVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::UniVector< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator -",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator -",2,"DSP::UniVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::UniVector< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator *",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator *",2,"DSP::UniVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::UniVector< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator /",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator /",2,"DSP::UniVector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator +",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator +",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator +((unsigned int const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator -",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator -",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator -((unsigned int const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator *",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator *",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator *((unsigned int const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator /",1,"DSP::UniVector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator /",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->operator /((unsigned int const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator +",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator +",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___add",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u32 >::operator +(DSP::UniVector< unsigned int > const &)\n"
    "    DSP::UniVector< u32 >::operator +(unsigned int const &)\n"
    "    DSP::UniVector< u32 >::operator +(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator -",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator -",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___sub__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u32 >::operator -(DSP::UniVector< unsigned int > const &)\n"
    "    DSP::UniVector< u32 >::operator -(unsigned int const &)\n"
    "    DSP::UniVector< u32 >::operator -(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator *",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator *",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u32 >::operator *(DSP::UniVector< unsigned int > const &)\n"
    "    DSP::UniVector< u32 >::operator *(unsigned int const &)\n"
    "    DSP::UniVector< u32 >::operator *(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  DSP::Scalar< unsigned int > *arg2 = 0 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::operator /",1,"DSP::UniVector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u32 >::operator /",2,"DSP::Scalar< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector___div",2,SWIGTYPE_p_DSP__ScalarT_unsigned_int_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< unsigned int > const &)*arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt32Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt32Vector___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UInt32Vector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt32Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u32 >::operator /(DSP::UniVector< unsigned int > const &)\n"
    "    DSP::UniVector< u32 >::operator /(unsigned int const &)\n"
    "    DSP::UniVector< u32 >::operator /(DSP::Scalar< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt32Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u32 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u32 >::println",1,"DSP::UniVector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("UInt32Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt32Vector(void *obj) {
DSP::UniVector< u32 > *arg1 = (DSP::UniVector< u32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt32Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt32Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt32Vector_attributes[] = {
    { "vec", _wrap_UInt32Vector_vec_get, _wrap_UInt32Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_UInt32Vector_methods[]= {
    { "size", _wrap_UInt32Vector_size},
    { "resize", _wrap_UInt32Vector_resize},
    { "__getitem", _wrap_UInt32Vector___getitem},
    { "__setitem", _wrap_UInt32Vector___setitem},
    { "fill", _wrap_UInt32Vector_fill},
    { "scalar", _wrap_UInt32Vector_scalar},
    { "at", _wrap_UInt32Vector_at},
    { "front", _wrap_UInt32Vector_front},
    { "back", _wrap_UInt32Vector_back},
    { "data", _wrap_UInt32Vector_data},
    { "__add", _wrap_UInt32Vector___add},
    { "__sub", _wrap_UInt32Vector___sub},
    { "__mul", _wrap_UInt32Vector___mul},
    { "__div", _wrap_UInt32Vector___div},
    { "println", _wrap_UInt32Vector_println},
    {0,0}
};
static swig_lua_method swig_UInt32Vector_meta[] = {
    { "__getitem", _wrap_UInt32Vector___getitem},
    { "__setitem", _wrap_UInt32Vector___setitem},
    { "__add", _wrap_UInt32Vector___add},
    { "__sub", _wrap_UInt32Vector___sub},
    { "__mul", _wrap_UInt32Vector___mul},
    { "__div", _wrap_UInt32Vector___div},
    {0,0}
};

static swig_lua_attribute swig_UInt32Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt32Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt32Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt32Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt32Vector_Sf_SwigStatic = {
    "UInt32Vector",
    swig_UInt32Vector_Sf_SwigStatic_methods,
    swig_UInt32Vector_Sf_SwigStatic_attributes,
    swig_UInt32Vector_Sf_SwigStatic_constants,
    swig_UInt32Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt32Vector_bases[] = {0};
static const char *swig_UInt32Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt32Vector = { "UInt32Vector", "UInt32Vector", &SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,_proxy__wrap_new_UInt32Vector, swig_delete_UInt32Vector, swig_UInt32Vector_methods, swig_UInt32Vector_attributes, &swig_UInt32Vector_Sf_SwigStatic, swig_UInt32Vector_meta, swig_UInt32Vector_bases, swig_UInt32Vector_base_names };

static int _wrap_Int64Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  kfr::univector< int64_t > arg2 ;
  kfr::univector< int64_t > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::vec",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::vec",2,"kfr::univector< int64_t >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_int64_t_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  kfr::univector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::vec",1,"DSP::UniVector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< int64_t > * resultptr = new kfr::univector< int64_t >((const kfr::univector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::UniVector",0,0)
  result = (DSP::UniVector< i64 > *)new DSP::UniVector< i64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< i64 > *)new DSP::UniVector< i64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int64_t *arg1 = (int64_t *) 0 ;
  size_t arg2 ;
  DSP::UniVector< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::UniVector",1,"int64_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("new_Int64Vector",1,SWIGTYPE_p_int64_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< i64 > *)new DSP::UniVector< i64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int64_t > *arg1 = 0 ;
  DSP::UniVector< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::UniVector",1,"std::vector< int64_t > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int64_t_t,0))){
    SWIG_fail_ptr("new_Int64Vector",1,SWIGTYPE_p_std__vectorT_int64_t_t);
  }
  
  result = (DSP::UniVector< i64 > *)new DSP::UniVector< i64 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< int64_t > *arg1 = 0 ;
  DSP::UniVector< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::UniVector",1,"kfr::univector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_int64_t_t,0))){
    SWIG_fail_ptr("new_Int64Vector",1,SWIGTYPE_p_kfr__univectorT_int64_t_t);
  }
  
  result = (DSP::UniVector< i64 > *)new DSP::UniVector< i64 >((kfr::univector< int64_t > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int64_t > *arg1 = 0 ;
  DSP::UniVector< i64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::UniVector",1,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("new_Int64Vector",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (DSP::UniVector< i64 > *)new DSP::UniVector< i64 >((DSP::UniVector< int64_t > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Int64Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Int64Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Int64Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Int64Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Int64Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i64 >::UniVector()\n"
    "    DSP::UniVector< i64 >::UniVector(size_t)\n"
    "    DSP::UniVector< i64 >::UniVector(int64_t *,size_t)\n"
    "    DSP::UniVector< i64 >::UniVector(std::vector< int64_t > &)\n"
    "    DSP::UniVector< i64 >::UniVector(kfr::univector< int64_t > const &)\n"
    "    DSP::UniVector< i64 >::UniVector(DSP::UniVector< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::size",1,"DSP::UniVector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = ((DSP::UniVector< i64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::resize",1,"DSP::UniVector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  size_t arg2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::__getitem",1,"DSP::UniVector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  size_t arg2 ;
  int64_t *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::__setitem",1,"DSP::UniVector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< i64 >::__setitem",3,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Vector___setitem",3,SWIGTYPE_p_int64_t);
  }
  
  (arg1)->__setitem(arg2,(int64_t const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::fill",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::fill",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Vector_fill",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  size_t arg2 ;
  int64_t *arg3 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::scalar",1,"DSP::UniVector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::scalar",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< i64 >::scalar",3,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Vector_scalar",3,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->scalar(arg2,(int64_t const &)*arg3);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  size_t arg2 ;
  int64_t *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::at",1,"DSP::UniVector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int64_t *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::front",1,"DSP::UniVector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (int64_t *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::back",1,"DSP::UniVector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (int64_t *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::data",1,"DSP::UniVector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (int64_t *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int64_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator +",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator +",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator -",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator -",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator *",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator *",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator /",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator /",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator +",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator +",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Vector___add",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator +((int64_t const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator -",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator -",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Vector___sub",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator -((int64_t const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator *",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator *",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Vector___mul",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator *((int64_t const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  int64_t *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator /",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator /",2,"int64_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("Int64Vector___div",2,SWIGTYPE_p_int64_t);
  }
  
  result = (arg1)->operator /((int64_t const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator +",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator +",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___add",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i64 >::operator +(DSP::UniVector< int64_t > const &)\n"
    "    DSP::UniVector< i64 >::operator +(int64_t const &)\n"
    "    DSP::UniVector< i64 >::operator +(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator -",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator -",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i64 >::operator -(DSP::UniVector< int64_t > const &)\n"
    "    DSP::UniVector< i64 >::operator -(int64_t const &)\n"
    "    DSP::UniVector< i64 >::operator -(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator *",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator *",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i64 >::operator *(DSP::UniVector< int64_t > const &)\n"
    "    DSP::UniVector< i64 >::operator *(int64_t const &)\n"
    "    DSP::UniVector< i64 >::operator *(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  DSP::Scalar< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::operator /",1,"DSP::UniVector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< i64 >::operator /",2,"DSP::Scalar< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector___div",2,SWIGTYPE_p_DSP__ScalarT_int64_t_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int64Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_int64_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_int64_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Int64Vector___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Int64Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< i64 >::operator /(DSP::UniVector< int64_t > const &)\n"
    "    DSP::UniVector< i64 >::operator /(int64_t const &)\n"
    "    DSP::UniVector< i64 >::operator /(DSP::Scalar< int64_t > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Int64Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< i64 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< i64 >::println",1,"DSP::UniVector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("Int64Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Int64Vector(void *obj) {
DSP::UniVector< i64 > *arg1 = (DSP::UniVector< i64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Int64Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Int64Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Int64Vector_attributes[] = {
    { "vec", _wrap_Int64Vector_vec_get, _wrap_Int64Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_Int64Vector_methods[]= {
    { "size", _wrap_Int64Vector_size},
    { "resize", _wrap_Int64Vector_resize},
    { "__getitem", _wrap_Int64Vector___getitem},
    { "__setitem", _wrap_Int64Vector___setitem},
    { "fill", _wrap_Int64Vector_fill},
    { "scalar", _wrap_Int64Vector_scalar},
    { "at", _wrap_Int64Vector_at},
    { "front", _wrap_Int64Vector_front},
    { "back", _wrap_Int64Vector_back},
    { "data", _wrap_Int64Vector_data},
    { "__add", _wrap_Int64Vector___add},
    { "__sub", _wrap_Int64Vector___sub},
    { "__mul", _wrap_Int64Vector___mul},
    { "__div", _wrap_Int64Vector___div},
    { "println", _wrap_Int64Vector_println},
    {0,0}
};
static swig_lua_method swig_Int64Vector_meta[] = {
    { "__getitem", _wrap_Int64Vector___getitem},
    { "__setitem", _wrap_Int64Vector___setitem},
    { "__add", _wrap_Int64Vector___add},
    { "__sub", _wrap_Int64Vector___sub},
    { "__mul", _wrap_Int64Vector___mul},
    { "__div", _wrap_Int64Vector___div},
    {0,0}
};

static swig_lua_attribute swig_Int64Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Int64Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Int64Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Int64Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Int64Vector_Sf_SwigStatic = {
    "Int64Vector",
    swig_Int64Vector_Sf_SwigStatic_methods,
    swig_Int64Vector_Sf_SwigStatic_attributes,
    swig_Int64Vector_Sf_SwigStatic_constants,
    swig_Int64Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Int64Vector_bases[] = {0};
static const char *swig_Int64Vector_base_names[] = {0};
static swig_lua_class _wrap_class_Int64Vector = { "Int64Vector", "Int64Vector", &SWIGTYPE_p_DSP__UniVectorT_int64_t_t,_proxy__wrap_new_Int64Vector, swig_delete_Int64Vector, swig_Int64Vector_methods, swig_Int64Vector_attributes, &swig_Int64Vector_Sf_SwigStatic, swig_Int64Vector_meta, swig_Int64Vector_bases, swig_Int64Vector_base_names };

static int _wrap_UInt64Vector_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  kfr::univector< u64 > arg2 ;
  kfr::univector< u64 > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::vec",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::vec",2,"kfr::univector< u64 >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_vec_set",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_vec_set",2,SWIGTYPE_p_kfr__univectorT_u64_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  kfr::univector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::vec",1,"DSP::UniVector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_vec_get",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector< u64 > * resultptr = new kfr::univector< u64 >((const kfr::univector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::UniVector",0,0)
  result = (DSP::UniVector< u64 > *)new DSP::UniVector< u64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::UniVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::UniVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector< u64 > *)new DSP::UniVector< u64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  u64 *arg1 = (u64 *) 0 ;
  size_t arg2 ;
  DSP::UniVector< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::UniVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::UniVector",1,"u64 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::UniVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("new_UInt64Vector",1,SWIGTYPE_p_u64);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector< u64 > *)new DSP::UniVector< u64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = 0 ;
  DSP::UniVector< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::UniVector",1,"std::vector< u64 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_u64_t,0))){
    SWIG_fail_ptr("new_UInt64Vector",1,SWIGTYPE_p_std__vectorT_u64_t);
  }
  
  result = (DSP::UniVector< u64 > *)new DSP::UniVector< u64 >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< u64 > *arg1 = 0 ;
  DSP::UniVector< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::UniVector",1,"kfr::univector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_u64_t,0))){
    SWIG_fail_ptr("new_UInt64Vector",1,SWIGTYPE_p_kfr__univectorT_u64_t);
  }
  
  result = (DSP::UniVector< u64 > *)new DSP::UniVector< u64 >((kfr::univector< u64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = 0 ;
  DSP::UniVector< u64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::UniVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::UniVector",1,"DSP::UniVector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("new_UInt64Vector",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (DSP::UniVector< u64 > *)new DSP::UniVector< u64 >((DSP::UniVector< u64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UInt64Vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UInt64Vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_u64_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_u64_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UInt64Vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_u64, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_UInt64Vector__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UInt64Vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u64 >::UniVector()\n"
    "    DSP::UniVector< u64 >::UniVector(size_t)\n"
    "    DSP::UniVector< u64 >::UniVector(u64 *,size_t)\n"
    "    DSP::UniVector< u64 >::UniVector(std::vector< u64 > &)\n"
    "    DSP::UniVector< u64 >::UniVector(kfr::univector< u64 > const &)\n"
    "    DSP::UniVector< u64 >::UniVector(DSP::UniVector< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::size",1,"DSP::UniVector< u64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_size",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = ((DSP::UniVector< u64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::resize",1,"DSP::UniVector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_resize",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  size_t arg2 ;
  u64 result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::__getitem",1,"DSP::UniVector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___getitem",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    u64 * resultptr = new u64((const u64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_u64,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  size_t arg2 ;
  u64 *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::__setitem",1,"DSP::UniVector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< u64 >::__setitem",3,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___setitem",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Vector___setitem",3,SWIGTYPE_p_u64);
  }
  
  (arg1)->__setitem(arg2,(u64 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_fill(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 arg2 ;
  u64 *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::fill",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::fill",2,"u64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_fill",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Vector_fill",2,SWIGTYPE_p_u64);
  }
  arg2 = *argp2;
  
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_scalar(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  size_t arg2 ;
  u64 *arg3 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::scalar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::scalar",1,"DSP::UniVector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::scalar",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector< u64 >::scalar",3,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_scalar",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Vector_scalar",3,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->scalar(arg2,(u64 const &)*arg3);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_at(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  size_t arg2 ;
  u64 *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::at",1,"DSP::UniVector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_at",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (u64 *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_u64,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_front(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::front",1,"DSP::UniVector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_front",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (u64 *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_u64,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_back(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::back",1,"DSP::UniVector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_back",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (u64 *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_u64,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::data",1,"DSP::UniVector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_data",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (u64 *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_u64,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::UniVector< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator +",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator +",2,"DSP::UniVector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___add",2,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::UniVector< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator -",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator -",2,"DSP::UniVector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___sub",2,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::UniVector< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator *",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator *",2,"DSP::UniVector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___mul",2,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::UniVector< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator /",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator /",2,"DSP::UniVector< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___div",2,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator +",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator +",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Vector___add",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator +((u64 const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator -",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator -",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Vector___sub",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator -((u64 const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator *",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator *",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Vector___mul",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator *((u64 const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  u64 *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator /",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator /",2,"u64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_u64,0))){
    SWIG_fail_ptr("UInt64Vector___div",2,SWIGTYPE_p_u64);
  }
  
  result = (arg1)->operator /((u64 const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator +",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator +",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___add",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___add",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator +((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Vector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u64 >::operator +(DSP::UniVector< u64 > const &)\n"
    "    DSP::UniVector< u64 >::operator +(u64 const &)\n"
    "    DSP::UniVector< u64 >::operator +(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator -",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator -",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___sub",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___sub",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator -((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Vector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u64 >::operator -(DSP::UniVector< u64 > const &)\n"
    "    DSP::UniVector< u64 >::operator -(u64 const &)\n"
    "    DSP::UniVector< u64 >::operator -(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator *",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator *",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___mul",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___mul",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator *((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Vector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u64 >::operator *(DSP::UniVector< u64 > const &)\n"
    "    DSP::UniVector< u64 >::operator *(u64 const &)\n"
    "    DSP::UniVector< u64 >::operator *(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  DSP::Scalar< u64 > *arg2 = 0 ;
  DSP::UniVector< u64 > result;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::operator /",1,"DSP::UniVector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector< u64 >::operator /",2,"DSP::Scalar< u64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___div",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector___div",2,SWIGTYPE_p_DSP__ScalarT_u64_t);
  }
  
  result = (arg1)->operator /((DSP::Scalar< u64 > const &)*arg2);
  {
    DSP::UniVector< u64 > * resultptr = new DSP::UniVector< u64 >((const DSP::UniVector< u64 > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_u64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UInt64Vector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_u64, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_u64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_u64_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_UInt64Vector___div__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UInt64Vector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector< u64 >::operator /(DSP::UniVector< u64 > const &)\n"
    "    DSP::UniVector< u64 >::operator /(u64 const &)\n"
    "    DSP::UniVector< u64 >::operator /(DSP::Scalar< u64 > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_UInt64Vector_println(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) 0 ;
  
  SWIG_check_num_args("DSP::UniVector< u64 >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector< u64 >::println",1,"DSP::UniVector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_u64_t,0))){
    SWIG_fail_ptr("UInt64Vector_println",1,SWIGTYPE_p_DSP__UniVectorT_u64_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UInt64Vector(void *obj) {
DSP::UniVector< u64 > *arg1 = (DSP::UniVector< u64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_UInt64Vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UInt64Vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UInt64Vector_attributes[] = {
    { "vec", _wrap_UInt64Vector_vec_get, _wrap_UInt64Vector_vec_set },
    {0,0,0}
};
static swig_lua_method swig_UInt64Vector_methods[]= {
    { "size", _wrap_UInt64Vector_size},
    { "resize", _wrap_UInt64Vector_resize},
    { "__getitem", _wrap_UInt64Vector___getitem},
    { "__setitem", _wrap_UInt64Vector___setitem},
    { "fill", _wrap_UInt64Vector_fill},
    { "scalar", _wrap_UInt64Vector_scalar},
    { "at", _wrap_UInt64Vector_at},
    { "front", _wrap_UInt64Vector_front},
    { "back", _wrap_UInt64Vector_back},
    { "data", _wrap_UInt64Vector_data},
    { "__add", _wrap_UInt64Vector___add},
    { "__sub", _wrap_UInt64Vector___sub},
    { "__mul", _wrap_UInt64Vector___mul},
    { "__div", _wrap_UInt64Vector___div},
    { "println", _wrap_UInt64Vector_println},
    {0,0}
};
static swig_lua_method swig_UInt64Vector_meta[] = {
    { "__getitem", _wrap_UInt64Vector___getitem},
    { "__setitem", _wrap_UInt64Vector___setitem},
    { "__add", _wrap_UInt64Vector___add},
    { "__sub", _wrap_UInt64Vector___sub},
    { "__mul", _wrap_UInt64Vector___mul},
    { "__div", _wrap_UInt64Vector___div},
    {0,0}
};

static swig_lua_attribute swig_UInt64Vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UInt64Vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UInt64Vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UInt64Vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UInt64Vector_Sf_SwigStatic = {
    "UInt64Vector",
    swig_UInt64Vector_Sf_SwigStatic_methods,
    swig_UInt64Vector_Sf_SwigStatic_attributes,
    swig_UInt64Vector_Sf_SwigStatic_constants,
    swig_UInt64Vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UInt64Vector_bases[] = {0};
static const char *swig_UInt64Vector_base_names[] = {0};
static swig_lua_class _wrap_class_UInt64Vector = { "UInt64Vector", "UInt64Vector", &SWIGTYPE_p_DSP__UniVectorT_u64_t,_proxy__wrap_new_UInt64Vector, swig_delete_UInt64Vector, swig_UInt64Vector_methods, swig_UInt64Vector_attributes, &swig_UInt64Vector_Sf_SwigStatic, swig_UInt64Vector_meta, swig_UInt64Vector_bases, swig_UInt64Vector_base_names };

static int _wrap_FloatVector2D_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  kfr::univector2d< float > arg2 ;
  kfr::univector2d< float > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::vec",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::vec",2,"kfr::univector2d< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_vec_set",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univector2dT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_vec_set",2,SWIGTYPE_p_kfr__univector2dT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  kfr::univector2d< float > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::vec",1,"DSP::UniVector2D< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_vec_get",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector2d< float > * resultptr = new kfr::univector2d< float >((const kfr::univector2d< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univector2dT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::UniVector2D",0,0)
  result = (DSP::UniVector2D< f32 > *)new DSP::UniVector2D< f32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  DSP::UniVector2D< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::UniVector2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::UniVector2D",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::UniVector2D",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector2D< f32 > *)new DSP::UniVector2D< f32 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector2D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector2D< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::UniVector2D",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::UniVector2D",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector2D< f32 > *)new DSP::UniVector2D< f32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector2D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector2d< float > *arg1 = 0 ;
  DSP::UniVector2D< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::UniVector2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::UniVector2D",1,"kfr::univector2d< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univector2dT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector2D",1,SWIGTYPE_p_kfr__univector2dT_float_t);
  }
  
  result = (DSP::UniVector2D< f32 > *)new DSP::UniVector2D< f32 >((kfr::univector2d< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector2D__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< float > *arg1 = 0 ;
  DSP::UniVector2D< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::UniVector2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::UniVector2D",1,"DSP::UniVector2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector2D",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = (DSP::UniVector2D< f32 > *)new DSP::UniVector2D< f32 >((DSP::UniVector2D< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatVector2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatVector2D__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univector2dT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector2D__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatVector2D__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatVector2D__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatVector2D__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatVector2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector2D< f32 >::UniVector2D()\n"
    "    DSP::UniVector2D< f32 >::UniVector2D(size_t,size_t)\n"
    "    DSP::UniVector2D< f32 >::UniVector2D(size_t)\n"
    "    DSP::UniVector2D< f32 >::UniVector2D(kfr::univector2d< float > const &)\n"
    "    DSP::UniVector2D< f32 >::UniVector2D(DSP::UniVector2D< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector2D_size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::size",1,"DSP::UniVector2D< f32 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_size",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((DSP::UniVector2D< f32 > const *)arg1)->size(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::size",1,"DSP::UniVector2D< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_size",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = ((DSP::UniVector2D< f32 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatVector2D_size__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector2D_size__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector2D_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector2D< f32 >::size(size_t) const\n"
    "    DSP::UniVector2D< f32 >::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector2D_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::resize",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector2D< f32 >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_resize",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_num_channels(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::num_channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::num_channels",1,"DSP::UniVector2D< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_num_channels",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = (int)((DSP::UniVector2D< f32 > const *)arg1)->num_channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::fill",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::fill",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector2D< f32 >::fill",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_fill",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->fill(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::fill",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_fill",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_fill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector2D_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatVector2D_fill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatVector2D_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector2D< f32 >::fill(size_t,float)\n"
    "    DSP::UniVector2D< f32 >::fill(float)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatVector2D_get_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::get_channel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::get_channel",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::get_channel",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_get_channel",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_channel(arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D_set_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::set_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::set_channel",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::set_channel",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector2D< f32 >::set_channel",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_set_channel",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D_set_channel",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->set_channel(arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::__getitem",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___getitem",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::__setitem",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector2D< f32 >::__setitem",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___setitem",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___setitem",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->__setitem(arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D___add(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  DSP::UniVector2D< float > *arg2 = 0 ;
  DSP::UniVector2D< float > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator +",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator +",2,"DSP::UniVector2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___add",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___add",2,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector2D< float > const &)*arg2);
  {
    DSP::UniVector2D< float > * resultptr = new DSP::UniVector2D< float >((const DSP::UniVector2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D___sub(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  DSP::UniVector2D< float > *arg2 = 0 ;
  DSP::UniVector2D< float > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator -",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator -",2,"DSP::UniVector2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___sub",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___sub",2,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector2D< float > const &)*arg2);
  {
    DSP::UniVector2D< float > * resultptr = new DSP::UniVector2D< float >((const DSP::UniVector2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D___mul(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  DSP::UniVector2D< float > *arg2 = 0 ;
  DSP::UniVector2D< float > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator *",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator *",2,"DSP::UniVector2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___mul",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___mul",2,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector2D< float > const &)*arg2);
  {
    DSP::UniVector2D< float > * resultptr = new DSP::UniVector2D< float >((const DSP::UniVector2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatVector2D___div(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) 0 ;
  DSP::UniVector2D< float > *arg2 = 0 ;
  DSP::UniVector2D< float > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f32 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator /",1,"DSP::UniVector2D< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f32 >::operator /",2,"DSP::UniVector2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___div",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("FloatVector2D___div",2,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector2D< float > const &)*arg2);
  {
    DSP::UniVector2D< float > * resultptr = new DSP::UniVector2D< float >((const DSP::UniVector2D< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatVector2D(void *obj) {
DSP::UniVector2D< f32 > *arg1 = (DSP::UniVector2D< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatVector2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatVector2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatVector2D_attributes[] = {
    { "vec", _wrap_FloatVector2D_vec_get, _wrap_FloatVector2D_vec_set },
    {0,0,0}
};
static swig_lua_method swig_FloatVector2D_methods[]= {
    { "size", _wrap_FloatVector2D_size},
    { "resize", _wrap_FloatVector2D_resize},
    { "num_channels", _wrap_FloatVector2D_num_channels},
    { "fill", _wrap_FloatVector2D_fill},
    { "get_channel", _wrap_FloatVector2D_get_channel},
    { "set_channel", _wrap_FloatVector2D_set_channel},
    { "__getitem", _wrap_FloatVector2D___getitem},
    { "__setitem", _wrap_FloatVector2D___setitem},
    { "__add", _wrap_FloatVector2D___add},
    { "__sub", _wrap_FloatVector2D___sub},
    { "__mul", _wrap_FloatVector2D___mul},
    { "__div", _wrap_FloatVector2D___div},
    {0,0}
};
static swig_lua_method swig_FloatVector2D_meta[] = {
    { "__getitem", _wrap_FloatVector2D___getitem},
    { "__setitem", _wrap_FloatVector2D___setitem},
    { "__add", _wrap_FloatVector2D___add},
    { "__sub", _wrap_FloatVector2D___sub},
    { "__mul", _wrap_FloatVector2D___mul},
    { "__div", _wrap_FloatVector2D___div},
    {0,0}
};

static swig_lua_attribute swig_FloatVector2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatVector2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatVector2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatVector2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatVector2D_Sf_SwigStatic = {
    "FloatVector2D",
    swig_FloatVector2D_Sf_SwigStatic_methods,
    swig_FloatVector2D_Sf_SwigStatic_attributes,
    swig_FloatVector2D_Sf_SwigStatic_constants,
    swig_FloatVector2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatVector2D_bases[] = {0};
static const char *swig_FloatVector2D_base_names[] = {0};
static swig_lua_class _wrap_class_FloatVector2D = { "FloatVector2D", "FloatVector2D", &SWIGTYPE_p_DSP__UniVector2DT_float_t,_proxy__wrap_new_FloatVector2D, swig_delete_FloatVector2D, swig_FloatVector2D_methods, swig_FloatVector2D_attributes, &swig_FloatVector2D_Sf_SwigStatic, swig_FloatVector2D_meta, swig_FloatVector2D_bases, swig_FloatVector2D_base_names };

static int _wrap_DoubleVector2D_vec_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  kfr::univector2d< double > arg2 ;
  kfr::univector2d< double > *argp2 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::vec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::vec",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::vec",2,"kfr::univector2d< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_vec_set",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univector2dT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_vec_set",2,SWIGTYPE_p_kfr__univector2dT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->vec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_vec_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  kfr::univector2d< double > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::vec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::vec",1,"DSP::UniVector2D< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_vec_get",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result =  ((arg1)->vec);
  {
    kfr::univector2d< double > * resultptr = new kfr::univector2d< double >((const kfr::univector2d< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univector2dT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::UniVector2D",0,0)
  result = (DSP::UniVector2D< f64 > *)new DSP::UniVector2D< f64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  DSP::UniVector2D< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::UniVector2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::UniVector2D",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::UniVector2D",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::UniVector2D< f64 > *)new DSP::UniVector2D< f64 >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector2D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector2D< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::UniVector2D",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::UniVector2D",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::UniVector2D< f64 > *)new DSP::UniVector2D< f64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector2D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector2d< double > *arg1 = 0 ;
  DSP::UniVector2D< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::UniVector2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::UniVector2D",1,"kfr::univector2d< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univector2dT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector2D",1,SWIGTYPE_p_kfr__univector2dT_double_t);
  }
  
  result = (DSP::UniVector2D< f64 > *)new DSP::UniVector2D< f64 >((kfr::univector2d< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector2D__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< double > *arg1 = 0 ;
  DSP::UniVector2D< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::UniVector2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::UniVector2D",1,"DSP::UniVector2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("new_DoubleVector2D",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = (DSP::UniVector2D< f64 > *)new DSP::UniVector2D< f64 >((DSP::UniVector2D< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleVector2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleVector2D__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univector2dT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector2D__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector2D__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleVector2D__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleVector2D__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleVector2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector2D< f64 >::UniVector2D()\n"
    "    DSP::UniVector2D< f64 >::UniVector2D(size_t,size_t)\n"
    "    DSP::UniVector2D< f64 >::UniVector2D(size_t)\n"
    "    DSP::UniVector2D< f64 >::UniVector2D(kfr::univector2d< double > const &)\n"
    "    DSP::UniVector2D< f64 >::UniVector2D(DSP::UniVector2D< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector2D_size__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::size",1,"DSP::UniVector2D< f64 > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_size",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((DSP::UniVector2D< f64 > const *)arg1)->size(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_size__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::size",1,"DSP::UniVector2D< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_size",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = ((DSP::UniVector2D< f64 > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_size(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DoubleVector2D_size__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector2D_size__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector2D_size'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector2D< f64 >::size(size_t) const\n"
    "    DSP::UniVector2D< f64 >::size() const\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector2D_resize(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::resize",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector2D< f64 >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_resize",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_num_channels(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::num_channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::num_channels",1,"DSP::UniVector2D< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_num_channels",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = (int)((DSP::UniVector2D< f64 > const *)arg1)->num_channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::fill",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::fill",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::UniVector2D< f64 >::fill",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_fill",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->fill(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::fill",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_fill",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_fill(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector2D_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVector2DT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DoubleVector2D_fill__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleVector2D_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::UniVector2D< f64 >::fill(size_t,double)\n"
    "    DSP::UniVector2D< f64 >::fill(double)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleVector2D_get_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::get_channel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::get_channel",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::get_channel",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_get_channel",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_channel(arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D_set_channel(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::set_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::set_channel",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::set_channel",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector2D< f64 >::set_channel",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_set_channel",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D_set_channel",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->set_channel(arg2,(DSP::UniVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D___getitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::__getitem",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___getitem",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->__getitem(arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D___setitem(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  size_t arg2 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::__setitem",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::UniVector2D< f64 >::__setitem",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___setitem",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___setitem",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->__setitem(arg2,(DSP::UniVector< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D___add(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  DSP::UniVector2D< double > *arg2 = 0 ;
  DSP::UniVector2D< double > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator +",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator +",2,"DSP::UniVector2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___add",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___add",2,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = (arg1)->operator +((DSP::UniVector2D< double > const &)*arg2);
  {
    DSP::UniVector2D< double > * resultptr = new DSP::UniVector2D< double >((const DSP::UniVector2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D___sub(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  DSP::UniVector2D< double > *arg2 = 0 ;
  DSP::UniVector2D< double > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator -",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator -",2,"DSP::UniVector2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___sub",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___sub",2,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = (arg1)->operator -((DSP::UniVector2D< double > const &)*arg2);
  {
    DSP::UniVector2D< double > * resultptr = new DSP::UniVector2D< double >((const DSP::UniVector2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D___mul(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  DSP::UniVector2D< double > *arg2 = 0 ;
  DSP::UniVector2D< double > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator *",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator *",2,"DSP::UniVector2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___mul",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___mul",2,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = (arg1)->operator *((DSP::UniVector2D< double > const &)*arg2);
  {
    DSP::UniVector2D< double > * resultptr = new DSP::UniVector2D< double >((const DSP::UniVector2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleVector2D___div(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) 0 ;
  DSP::UniVector2D< double > *arg2 = 0 ;
  DSP::UniVector2D< double > result;
  
  SWIG_check_num_args("DSP::UniVector2D< f64 >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator /",1,"DSP::UniVector2D< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::UniVector2D< f64 >::operator /",2,"DSP::UniVector2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___div",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("DoubleVector2D___div",2,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = (arg1)->operator /((DSP::UniVector2D< double > const &)*arg2);
  {
    DSP::UniVector2D< double > * resultptr = new DSP::UniVector2D< double >((const DSP::UniVector2D< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVector2DT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleVector2D(void *obj) {
DSP::UniVector2D< f64 > *arg1 = (DSP::UniVector2D< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleVector2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleVector2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleVector2D_attributes[] = {
    { "vec", _wrap_DoubleVector2D_vec_get, _wrap_DoubleVector2D_vec_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleVector2D_methods[]= {
    { "size", _wrap_DoubleVector2D_size},
    { "resize", _wrap_DoubleVector2D_resize},
    { "num_channels", _wrap_DoubleVector2D_num_channels},
    { "fill", _wrap_DoubleVector2D_fill},
    { "get_channel", _wrap_DoubleVector2D_get_channel},
    { "set_channel", _wrap_DoubleVector2D_set_channel},
    { "__getitem", _wrap_DoubleVector2D___getitem},
    { "__setitem", _wrap_DoubleVector2D___setitem},
    { "__add", _wrap_DoubleVector2D___add},
    { "__sub", _wrap_DoubleVector2D___sub},
    { "__mul", _wrap_DoubleVector2D___mul},
    { "__div", _wrap_DoubleVector2D___div},
    {0,0}
};
static swig_lua_method swig_DoubleVector2D_meta[] = {
    { "__getitem", _wrap_DoubleVector2D___getitem},
    { "__setitem", _wrap_DoubleVector2D___setitem},
    { "__add", _wrap_DoubleVector2D___add},
    { "__sub", _wrap_DoubleVector2D___sub},
    { "__mul", _wrap_DoubleVector2D___mul},
    { "__div", _wrap_DoubleVector2D___div},
    {0,0}
};

static swig_lua_attribute swig_DoubleVector2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleVector2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleVector2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleVector2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleVector2D_Sf_SwigStatic = {
    "DoubleVector2D",
    swig_DoubleVector2D_Sf_SwigStatic_methods,
    swig_DoubleVector2D_Sf_SwigStatic_attributes,
    swig_DoubleVector2D_Sf_SwigStatic_constants,
    swig_DoubleVector2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleVector2D_bases[] = {0};
static const char *swig_DoubleVector2D_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleVector2D = { "DoubleVector2D", "DoubleVector2D", &SWIGTYPE_p_DSP__UniVector2DT_double_t,_proxy__wrap_new_DoubleVector2D, swig_delete_DoubleVector2D, swig_DoubleVector2D_methods, swig_DoubleVector2D_attributes, &swig_DoubleVector2D_Sf_SwigStatic, swig_DoubleVector2D_meta, swig_DoubleVector2D_bases, swig_DoubleVector2D_base_names };

static int _wrap_FloatBiquad_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  kfr::biquad_filter< float > *arg2 = (kfr::biquad_filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::filter",1,"DSP::Biquad< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::filter",2,"kfr::biquad_filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_filter_set",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_filterT_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatBiquad_filter_set",2,SWIGTYPE_p_kfr__biquad_filterT_float_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  kfr::biquad_filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::filter",1,"DSP::Biquad< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_filter_get",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  result = (kfr::biquad_filter< float > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_filterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  DSP::BiQuadParams< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::init",1,"DSP::Biquad< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::init",2,"DSP::BiQuadParams< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_init",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_init",2,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  (arg1)->init((DSP::BiQuadParams< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  kfr::biquad_params< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::init",1,"DSP::Biquad< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::init",2,"kfr::biquad_params< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_init",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_paramsT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_init",2,SWIGTYPE_p_kfr__biquad_paramsT_float_t);
  }
  
  (arg1)->init((kfr::biquad_params< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  std::vector< kfr::biquad_params< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::init",1,"DSP::Biquad< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::init",2,"std::vector< kfr::biquad_params< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_init",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0))){
    SWIG_fail_ptr("FloatBiquad_init",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t);
  }
  
  (arg1)->init((std::vector< kfr::biquad_params< float > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_init(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBiquad_init__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBiquad_init__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBiquad_init__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBiquad_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< f32 >::init(DSP::BiQuadParams< float > const &)\n"
    "    DSP::Biquad< f32 >::init(kfr::biquad_params< float > const &)\n"
    "    DSP::Biquad< f32 >::init(std::vector< kfr::biquad_params< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_FloatBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::Biquad",0,0)
  result = (DSP::Biquad< f32 > *)new DSP::Biquad< f32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< float > *arg1 = 0 ;
  DSP::Biquad< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::Biquad",1,"kfr::biquad_params< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_float_t,0))){
    SWIG_fail_ptr("new_FloatBiquad",1,SWIGTYPE_p_kfr__biquad_paramsT_float_t);
  }
  
  result = (DSP::Biquad< f32 > *)new DSP::Biquad< f32 >((kfr::biquad_params< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  DSP::Biquad< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::Biquad",1,"DSP::BiQuadParams< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatBiquad",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  result = (DSP::Biquad< f32 > *)new DSP::Biquad< f32 >((DSP::BiQuadParams< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBiquad(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatBiquad__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatBiquad__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatBiquad__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< f32 >::Biquad()\n"
    "    DSP::Biquad< f32 >::Biquad(kfr::biquad_params< float > const &)\n"
    "    DSP::Biquad< f32 >::Biquad(DSP::BiQuadParams< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatBiquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::notch",1,"DSP::Biquad< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::notch",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::notch",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_notch",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::lowpass",1,"DSP::Biquad< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::lowpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::lowpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_lowpass",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::highpass",1,"DSP::Biquad< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::highpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::highpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_highpass",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::peak",1,"DSP::Biquad< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::peak",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::peak",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Biquad< f32 >::peak",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_peak",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::lowshelf",1,"DSP::Biquad< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::lowshelf",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::lowshelf",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_lowshelf",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::highshelf",1,"DSP::Biquad< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::highshelf",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::highshelf",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_highshelf",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->highshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::bandpass",1,"DSP::Biquad< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::bandpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_bandpass",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::apply",1,"DSP::Biquad< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_apply",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::apply",1,"DSP::Biquad< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_apply",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiquad_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBiquad_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatBiquad_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBiquad_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Biquad< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatBiquad_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f32 >::reset",1,"DSP::Biquad< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBiquad_reset",1,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatBiquad(void *obj) {
DSP::Biquad< f32 > *arg1 = (DSP::Biquad< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBiquad_attributes[] = {
    { "filter", _wrap_FloatBiquad_filter_get, _wrap_FloatBiquad_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBiquad_methods[]= {
    { "init", _wrap_FloatBiquad_init},
    { "notch", _wrap_FloatBiquad_notch},
    { "lowpass", _wrap_FloatBiquad_lowpass},
    { "highpass", _wrap_FloatBiquad_highpass},
    { "peak", _wrap_FloatBiquad_peak},
    { "lowshelf", _wrap_FloatBiquad_lowshelf},
    { "highshelf", _wrap_FloatBiquad_highshelf},
    { "bandpass", _wrap_FloatBiquad_bandpass},
    { "apply", _wrap_FloatBiquad_apply},
    { "reset", _wrap_FloatBiquad_reset},
    {0,0}
};
static swig_lua_method swig_FloatBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBiquad_Sf_SwigStatic = {
    "FloatBiquad",
    swig_FloatBiquad_Sf_SwigStatic_methods,
    swig_FloatBiquad_Sf_SwigStatic_attributes,
    swig_FloatBiquad_Sf_SwigStatic_constants,
    swig_FloatBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBiquad_bases[] = {0};
static const char *swig_FloatBiquad_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBiquad = { "FloatBiquad", "FloatBiquad", &SWIGTYPE_p_DSP__BiquadT_float_t,_proxy__wrap_new_FloatBiquad, swig_delete_FloatBiquad, swig_FloatBiquad_methods, swig_FloatBiquad_attributes, &swig_FloatBiquad_Sf_SwigStatic, swig_FloatBiquad_meta, swig_FloatBiquad_bases, swig_FloatBiquad_base_names };

static int _wrap_DoubleBiquad_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  kfr::biquad_filter< double > *arg2 = (kfr::biquad_filter< double > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::filter",1,"DSP::Biquad< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::filter",2,"kfr::biquad_filter< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_filter_set",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_filterT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DoubleBiquad_filter_set",2,SWIGTYPE_p_kfr__biquad_filterT_double_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  kfr::biquad_filter< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::filter",1,"DSP::Biquad< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_filter_get",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  result = (kfr::biquad_filter< double > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_filterT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  DSP::BiQuadParams< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::init",1,"DSP::Biquad< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::init",2,"DSP::BiQuadParams< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_init",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_init",2,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  (arg1)->init((DSP::BiQuadParams< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  kfr::biquad_params< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::init",1,"DSP::Biquad< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::init",2,"kfr::biquad_params< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_init",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_init",2,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  
  (arg1)->init((kfr::biquad_params< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::init",1,"DSP::Biquad< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::init",2,"std::vector< kfr::biquad_params< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_init",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("DoubleBiquad_init",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  (arg1)->init((std::vector< kfr::biquad_params< double > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_init(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleBiquad_init__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleBiquad_init__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleBiquad_init__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleBiquad_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< f64 >::init(DSP::BiQuadParams< double > const &)\n"
    "    DSP::Biquad< f64 >::init(kfr::biquad_params< double > const &)\n"
    "    DSP::Biquad< f64 >::init(std::vector< kfr::biquad_params< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_DoubleBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::Biquad",0,0)
  result = (DSP::Biquad< f64 > *)new DSP::Biquad< f64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< double > *arg1 = 0 ;
  DSP::Biquad< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::Biquad",1,"kfr::biquad_params< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleBiquad",1,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  
  result = (DSP::Biquad< f64 > *)new DSP::Biquad< f64 >((kfr::biquad_params< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  DSP::Biquad< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::Biquad",1,"DSP::BiQuadParams< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleBiquad",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  result = (DSP::Biquad< f64 > *)new DSP::Biquad< f64 >((DSP::BiQuadParams< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBiquad(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleBiquad__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleBiquad__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleBiquad__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< f64 >::Biquad()\n"
    "    DSP::Biquad< f64 >::Biquad(kfr::biquad_params< double > const &)\n"
    "    DSP::Biquad< f64 >::Biquad(DSP::BiQuadParams< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleBiquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::notch",1,"DSP::Biquad< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_notch",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::lowpass",1,"DSP::Biquad< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_lowpass",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::highpass",1,"DSP::Biquad< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_highpass",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::peak",1,"DSP::Biquad< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::peak",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::peak",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Biquad< f64 >::peak",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_peak",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::lowshelf",1,"DSP::Biquad< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::lowshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::lowshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_lowshelf",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::highshelf",1,"DSP::Biquad< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::highshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::highshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_highshelf",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::bandpass",1,"DSP::Biquad< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_bandpass",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::apply",1,"DSP::Biquad< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_apply",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::apply",1,"DSP::Biquad< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_apply",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiquad_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleBiquad_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoubleBiquad_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleBiquad_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::Biquad< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleBiquad_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< f64 >::reset",1,"DSP::Biquad< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBiquad_reset",1,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleBiquad(void *obj) {
DSP::Biquad< f64 > *arg1 = (DSP::Biquad< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleBiquad_attributes[] = {
    { "filter", _wrap_DoubleBiquad_filter_get, _wrap_DoubleBiquad_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleBiquad_methods[]= {
    { "init", _wrap_DoubleBiquad_init},
    { "notch", _wrap_DoubleBiquad_notch},
    { "lowpass", _wrap_DoubleBiquad_lowpass},
    { "highpass", _wrap_DoubleBiquad_highpass},
    { "peak", _wrap_DoubleBiquad_peak},
    { "lowshelf", _wrap_DoubleBiquad_lowshelf},
    { "highshelf", _wrap_DoubleBiquad_highshelf},
    { "bandpass", _wrap_DoubleBiquad_bandpass},
    { "apply", _wrap_DoubleBiquad_apply},
    { "reset", _wrap_DoubleBiquad_reset},
    {0,0}
};
static swig_lua_method swig_DoubleBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleBiquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleBiquad_Sf_SwigStatic = {
    "DoubleBiquad",
    swig_DoubleBiquad_Sf_SwigStatic_methods,
    swig_DoubleBiquad_Sf_SwigStatic_attributes,
    swig_DoubleBiquad_Sf_SwigStatic_constants,
    swig_DoubleBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleBiquad_bases[] = {0};
static const char *swig_DoubleBiquad_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleBiquad = { "DoubleBiquad", "DoubleBiquad", &SWIGTYPE_p_DSP__BiquadT_double_t,_proxy__wrap_new_DoubleBiquad, swig_delete_DoubleBiquad, swig_DoubleBiquad_methods, swig_DoubleBiquad_attributes, &swig_DoubleBiquad_Sf_SwigStatic, swig_DoubleBiquad_meta, swig_DoubleBiquad_bases, swig_DoubleBiquad_base_names };

static int _wrap_FloatBiQuadParams_bq_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  std::vector< kfr::biquad_params< float > > *arg2 = (std::vector< kfr::biquad_params< float > > *) 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::bq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::bq",1,"DSP::BiQuadParams< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::bq",2,"std::vector< kfr::biquad_params< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_bq_set",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_bq_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t);
  }
  
  if (arg1) (arg1)->bq = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_bq_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  std::vector< kfr::biquad_params< float > > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::bq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::bq",1,"DSP::BiQuadParams< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_bq_get",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  result = (std::vector< kfr::biquad_params< float > > *)& ((arg1)->bq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBiQuadParams(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::BiQuadParams",0,0)
  result = (DSP::BiQuadParams< f32 > *)new DSP::BiQuadParams< f32 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_get_params(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  kfr::biquad_params< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::get_params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::get_params",1,"DSP::BiQuadParams< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_get_params",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  result = (kfr::biquad_params< float > *)(arg1)->get_params();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_biquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::biquad_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_notch",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_notch",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_notch",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_biquad_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->biquad_notch(arg2,arg3);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_biquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::biquad_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_lowpass",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_lowpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_lowpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_biquad_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->biquad_lowpass(arg2,arg3);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_biquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::biquad_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_highpass",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_highpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_highpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_biquad_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->biquad_highpass(arg2,arg3);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_biquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::biquad_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_peak",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_peak",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_peak",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_peak",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_biquad_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (arg1)->biquad_peak(arg2,arg3,arg4);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_biquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::biquad_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_lowshelf",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_lowshelf",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_lowshelf",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_biquad_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->biquad_lowshelf(arg2,arg3);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_biquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::biquad_highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_highshelf",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_highshelf",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_highshelf",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_biquad_highshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->biquad_highshelf(arg2,arg3);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_biquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::biquad_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_bandpass",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::biquad_bandpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_biquad_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->biquad_bandpass(arg2,arg3);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_add_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::add_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_notch",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_notch",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_notch",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_add_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->add_notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_add_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::add_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_lowpass",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_lowpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_lowpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_add_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->add_lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_add_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::add_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_highpass",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_highpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_highpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_add_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->add_highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_add_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::add_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_peak",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_peak",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_peak",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_peak",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_add_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->add_peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_add_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::add_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_lowshelf",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_lowshelf",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_lowshelf",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_add_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->add_lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_add_highself(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::add_highself",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_highself",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_highself",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_highself",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_add_highself",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->add_highself(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBiQuadParams_add_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f32 >::add_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_bandpass",1,"DSP::BiQuadParams< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f32 >::add_bandpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("FloatBiQuadParams_add_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->add_bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatBiQuadParams(void *obj) {
DSP::BiQuadParams< f32 > *arg1 = (DSP::BiQuadParams< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBiQuadParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBiQuadParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBiQuadParams_attributes[] = {
    { "bq", _wrap_FloatBiQuadParams_bq_get, _wrap_FloatBiQuadParams_bq_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBiQuadParams_methods[]= {
    { "get_params", _wrap_FloatBiQuadParams_get_params},
    { "biquad_notch", _wrap_FloatBiQuadParams_biquad_notch},
    { "biquad_lowpass", _wrap_FloatBiQuadParams_biquad_lowpass},
    { "biquad_highpass", _wrap_FloatBiQuadParams_biquad_highpass},
    { "biquad_peak", _wrap_FloatBiQuadParams_biquad_peak},
    { "biquad_lowshelf", _wrap_FloatBiQuadParams_biquad_lowshelf},
    { "biquad_highshelf", _wrap_FloatBiQuadParams_biquad_highshelf},
    { "biquad_bandpass", _wrap_FloatBiQuadParams_biquad_bandpass},
    { "add_notch", _wrap_FloatBiQuadParams_add_notch},
    { "add_lowpass", _wrap_FloatBiQuadParams_add_lowpass},
    { "add_highpass", _wrap_FloatBiQuadParams_add_highpass},
    { "add_peak", _wrap_FloatBiQuadParams_add_peak},
    { "add_lowshelf", _wrap_FloatBiQuadParams_add_lowshelf},
    { "add_highself", _wrap_FloatBiQuadParams_add_highself},
    { "add_bandpass", _wrap_FloatBiQuadParams_add_bandpass},
    {0,0}
};
static swig_lua_method swig_FloatBiQuadParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBiQuadParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBiQuadParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBiQuadParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBiQuadParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBiQuadParams_Sf_SwigStatic = {
    "FloatBiQuadParams",
    swig_FloatBiQuadParams_Sf_SwigStatic_methods,
    swig_FloatBiQuadParams_Sf_SwigStatic_attributes,
    swig_FloatBiQuadParams_Sf_SwigStatic_constants,
    swig_FloatBiQuadParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBiQuadParams_bases[] = {0};
static const char *swig_FloatBiQuadParams_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBiQuadParams = { "FloatBiQuadParams", "FloatBiQuadParams", &SWIGTYPE_p_DSP__BiQuadParamsT_float_t,_proxy__wrap_new_FloatBiQuadParams, swig_delete_FloatBiQuadParams, swig_FloatBiQuadParams_methods, swig_FloatBiQuadParams_attributes, &swig_FloatBiQuadParams_Sf_SwigStatic, swig_FloatBiQuadParams_meta, swig_FloatBiQuadParams_bases, swig_FloatBiQuadParams_base_names };

static int _wrap_DoubleBiQuadParams_bq_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  std::vector< kfr::biquad_params< double > > *arg2 = (std::vector< kfr::biquad_params< double > > *) 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::bq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::bq",1,"DSP::BiQuadParams< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::bq",2,"std::vector< kfr::biquad_params< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_bq_set",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_bq_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t);
  }
  
  if (arg1) (arg1)->bq = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_bq_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  std::vector< kfr::biquad_params< double > > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::bq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::bq",1,"DSP::BiQuadParams< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_bq_get",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  result = (std::vector< kfr::biquad_params< double > > *)& ((arg1)->bq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_double_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBiQuadParams(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::BiQuadParams",0,0)
  result = (DSP::BiQuadParams< f64 > *)new DSP::BiQuadParams< f64 >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_get_params(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  kfr::biquad_params< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::get_params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::get_params",1,"DSP::BiQuadParams< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_get_params",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  result = (kfr::biquad_params< double > *)(arg1)->get_params();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_biquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::biquad_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_notch",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_biquad_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_notch(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_biquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::biquad_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_lowpass",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_biquad_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_lowpass(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_biquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::biquad_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_highpass",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_biquad_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_highpass(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_biquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::biquad_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_peak",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_peak",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_peak",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_peak",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_biquad_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (arg1)->biquad_peak(arg2,arg3,arg4);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_biquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::biquad_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_lowshelf",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_lowshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_lowshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_biquad_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_lowshelf(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_biquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::biquad_highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_highshelf",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_highshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_highshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_biquad_highshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_highshelf(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_biquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::biquad_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_bandpass",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::biquad_bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_biquad_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (arg1)->biquad_bandpass(arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_add_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::add_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_notch",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_add_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_add_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::add_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_lowpass",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_add_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_add_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::add_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_highpass",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_add_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_add_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::add_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_peak",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_peak",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_peak",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_peak",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_add_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->add_peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_add_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::add_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_lowshelf",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_lowshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_lowshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_add_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_add_highself(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::add_highself",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_highself",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_highself",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_highself",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_add_highself",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_highself(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBiQuadParams_add_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< f64 >::add_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_bandpass",1,"DSP::BiQuadParams< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BiQuadParams< f64 >::add_bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("DoubleBiQuadParams_add_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->add_bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleBiQuadParams(void *obj) {
DSP::BiQuadParams< f64 > *arg1 = (DSP::BiQuadParams< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleBiQuadParams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleBiQuadParams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleBiQuadParams_attributes[] = {
    { "bq", _wrap_DoubleBiQuadParams_bq_get, _wrap_DoubleBiQuadParams_bq_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleBiQuadParams_methods[]= {
    { "get_params", _wrap_DoubleBiQuadParams_get_params},
    { "biquad_notch", _wrap_DoubleBiQuadParams_biquad_notch},
    { "biquad_lowpass", _wrap_DoubleBiQuadParams_biquad_lowpass},
    { "biquad_highpass", _wrap_DoubleBiQuadParams_biquad_highpass},
    { "biquad_peak", _wrap_DoubleBiQuadParams_biquad_peak},
    { "biquad_lowshelf", _wrap_DoubleBiQuadParams_biquad_lowshelf},
    { "biquad_highshelf", _wrap_DoubleBiQuadParams_biquad_highshelf},
    { "biquad_bandpass", _wrap_DoubleBiQuadParams_biquad_bandpass},
    { "add_notch", _wrap_DoubleBiQuadParams_add_notch},
    { "add_lowpass", _wrap_DoubleBiQuadParams_add_lowpass},
    { "add_highpass", _wrap_DoubleBiQuadParams_add_highpass},
    { "add_peak", _wrap_DoubleBiQuadParams_add_peak},
    { "add_lowshelf", _wrap_DoubleBiQuadParams_add_lowshelf},
    { "add_highself", _wrap_DoubleBiQuadParams_add_highself},
    { "add_bandpass", _wrap_DoubleBiQuadParams_add_bandpass},
    {0,0}
};
static swig_lua_method swig_DoubleBiQuadParams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleBiQuadParams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleBiQuadParams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleBiQuadParams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleBiQuadParams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleBiQuadParams_Sf_SwigStatic = {
    "DoubleBiQuadParams",
    swig_DoubleBiQuadParams_Sf_SwigStatic_methods,
    swig_DoubleBiQuadParams_Sf_SwigStatic_attributes,
    swig_DoubleBiQuadParams_Sf_SwigStatic_constants,
    swig_DoubleBiQuadParams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleBiQuadParams_bases[] = {0};
static const char *swig_DoubleBiQuadParams_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleBiQuadParams = { "DoubleBiQuadParams", "DoubleBiQuadParams", &SWIGTYPE_p_DSP__BiQuadParamsT_double_t,_proxy__wrap_new_DoubleBiQuadParams, swig_delete_DoubleBiQuadParams, swig_DoubleBiQuadParams_methods, swig_DoubleBiQuadParams_attributes, &swig_DoubleBiQuadParams_Sf_SwigStatic, swig_DoubleBiQuadParams_meta, swig_DoubleBiQuadParams_bases, swig_DoubleBiQuadParams_base_names };

static int _wrap_biquadf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::biquad< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::biquad< f32 >",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::biquad< f32 >",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("biquadf",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("biquadf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR biquad< f32 >((DSP::BiQuadParams< float > const &)*arg1,*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::biquad< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::biquad< f64 >",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::biquad< f64 >",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("biquadd",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("biquadd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR biquad< f64 >((DSP::BiQuadParams< double > const &)*arg1,*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notchf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::notch< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::notch< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::notch< f32 >",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR notch< f32 >(arg1,arg2);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notchd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::notch< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::notch< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::notch< f64 >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR notch< f64 >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpassf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::lowpass< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::lowpass< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::lowpass< f32 >",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowpass< f32 >(arg1,arg2);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpassd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::lowpass< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::lowpass< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::lowpass< f64 >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowpass< f64 >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpassf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::highpass< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::highpass< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::highpass< f32 >",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highpass< f32 >(arg1,arg2);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpassd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::highpass< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::highpass< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::highpass< f64 >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highpass< f64 >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peakf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::peak< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::peak< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::peak< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::peak< f32 >",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR peak< f32 >(arg1,arg2,arg3);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peakd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::peak< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::peak< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::peak< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::peak< f64 >",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR peak< f64 >(arg1,arg2,arg3);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelff(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::lowshelf< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::lowshelf< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::lowshelf< f32 >",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowshelf< f32 >(arg1,arg2);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelfd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::lowshelf< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::lowshelf< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::lowshelf< f64 >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowshelf< f64 >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelff(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::highshelf< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::highshelf< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::highshelf< f32 >",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highshelf< f32 >(arg1,arg2);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelfd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::highshelf< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::highshelf< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::highshelf< f64 >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highshelf< f64 >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpassf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  kfr::biquad_params< float > result;
  
  SWIG_check_num_args("DSP::bandpass< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bandpass< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bandpass< f32 >",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bandpass< f32 >(arg1,arg2);
  {
    kfr::biquad_params< float > * resultptr = new kfr::biquad_params< float >((const kfr::biquad_params< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpassd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::biquad_params< double > result;
  
  SWIG_check_num_args("DSP::bandpass< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bandpass< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bandpass< f64 >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bandpass< f64 >(arg1,arg2);
  {
    kfr::biquad_params< double > * resultptr = new kfr::biquad_params< double >((const kfr::biquad_params< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNotchFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f32 > *arg1 = (DSP::NotchFilter< f32 > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f32 >::filter",1,"DSP::NotchFilter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::NotchFilter< f32 >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_filter_set",1,SWIGTYPE_p_DSP__NotchFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNotchFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f32 > *arg1 = (DSP::NotchFilter< f32 > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f32 >::filter",1,"DSP::NotchFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_filter_get",1,SWIGTYPE_p_DSP__NotchFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatNotchFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  DSP::NotchFilter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f32 >::NotchFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::NotchFilter< f32 >::NotchFilter",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::NotchFilter< f32 >::NotchFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::NotchFilter< f32 >::NotchFilter",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatNotchFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::NotchFilter< f32 > *)new DSP::NotchFilter< f32 >((DSP::BiQuadParams< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__NotchFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNotchFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f32 > *arg1 = (DSP::NotchFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f32 >::apply",1,"DSP::NotchFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNotchFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f32 > *arg1 = (DSP::NotchFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f32 >::apply",1,"DSP::NotchFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::NotchFilter< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNotchFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatNotchFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatNotchFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNotchFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::NotchFilter< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::NotchFilter< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNotchFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f32 > *arg1 = (DSP::NotchFilter< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f32 >::reset",1,"DSP::NotchFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_float_t,0))){
    SWIG_fail_ptr("FloatNotchFilter_reset",1,SWIGTYPE_p_DSP__NotchFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatNotchFilter(void *obj) {
DSP::NotchFilter< f32 > *arg1 = (DSP::NotchFilter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatNotchFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatNotchFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatNotchFilter_attributes[] = {
    { "filter", _wrap_FloatNotchFilter_filter_get, _wrap_FloatNotchFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatNotchFilter_methods[]= {
    { "apply", _wrap_FloatNotchFilter_apply},
    { "reset", _wrap_FloatNotchFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatNotchFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatNotchFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatNotchFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatNotchFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatNotchFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatNotchFilter_Sf_SwigStatic = {
    "FloatNotchFilter",
    swig_FloatNotchFilter_Sf_SwigStatic_methods,
    swig_FloatNotchFilter_Sf_SwigStatic_attributes,
    swig_FloatNotchFilter_Sf_SwigStatic_constants,
    swig_FloatNotchFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatNotchFilter_bases[] = {0};
static const char *swig_FloatNotchFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatNotchFilter = { "FloatNotchFilter", "FloatNotchFilter", &SWIGTYPE_p_DSP__NotchFilterT_float_t,_proxy__wrap_new_FloatNotchFilter, swig_delete_FloatNotchFilter, swig_FloatNotchFilter_methods, swig_FloatNotchFilter_attributes, &swig_FloatNotchFilter_Sf_SwigStatic, swig_FloatNotchFilter_meta, swig_FloatNotchFilter_bases, swig_FloatNotchFilter_base_names };

static int _wrap_DoubleNotchFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f64 > *arg1 = (DSP::NotchFilter< f64 > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f64 >::filter",1,"DSP::NotchFilter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::NotchFilter< f64 >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_filter_set",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleNotchFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f64 > *arg1 = (DSP::NotchFilter< f64 > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f64 >::filter",1,"DSP::NotchFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_filter_get",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleNotchFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::NotchFilter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f64 >::NotchFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::NotchFilter< f64 >::NotchFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::NotchFilter< f64 >::NotchFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::NotchFilter< f64 >::NotchFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleNotchFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::NotchFilter< f64 > *)new DSP::NotchFilter< f64 >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__NotchFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleNotchFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f64 > *arg1 = (DSP::NotchFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f64 >::apply",1,"DSP::NotchFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleNotchFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f64 > *arg1 = (DSP::NotchFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f64 >::apply",1,"DSP::NotchFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::NotchFilter< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleNotchFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleNotchFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoubleNotchFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleNotchFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::NotchFilter< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::NotchFilter< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleNotchFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< f64 > *arg1 = (DSP::NotchFilter< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< f64 >::reset",1,"DSP::NotchFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleNotchFilter_reset",1,SWIGTYPE_p_DSP__NotchFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleNotchFilter(void *obj) {
DSP::NotchFilter< f64 > *arg1 = (DSP::NotchFilter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleNotchFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleNotchFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleNotchFilter_attributes[] = {
    { "filter", _wrap_DoubleNotchFilter_filter_get, _wrap_DoubleNotchFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleNotchFilter_methods[]= {
    { "apply", _wrap_DoubleNotchFilter_apply},
    { "reset", _wrap_DoubleNotchFilter_reset},
    {0,0}
};
static swig_lua_method swig_DoubleNotchFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleNotchFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleNotchFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleNotchFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleNotchFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleNotchFilter_Sf_SwigStatic = {
    "DoubleNotchFilter",
    swig_DoubleNotchFilter_Sf_SwigStatic_methods,
    swig_DoubleNotchFilter_Sf_SwigStatic_attributes,
    swig_DoubleNotchFilter_Sf_SwigStatic_constants,
    swig_DoubleNotchFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleNotchFilter_bases[] = {0};
static const char *swig_DoubleNotchFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleNotchFilter = { "DoubleNotchFilter", "DoubleNotchFilter", &SWIGTYPE_p_DSP__NotchFilterT_double_t,_proxy__wrap_new_DoubleNotchFilter, swig_delete_DoubleNotchFilter, swig_DoubleNotchFilter_methods, swig_DoubleNotchFilter_attributes, &swig_DoubleNotchFilter_Sf_SwigStatic, swig_DoubleNotchFilter_meta, swig_DoubleNotchFilter_bases, swig_DoubleNotchFilter_base_names };

static int _wrap_FloatLowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f32 > *arg1 = (DSP::LowPassFilter< f32 > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::filter",1,"DSP::LowPassFilter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_filter_set",1,SWIGTYPE_p_DSP__LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f32 > *arg1 = (DSP::LowPassFilter< f32 > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::filter",1,"DSP::LowPassFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_filter_get",1,SWIGTYPE_p_DSP__LowPassFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  DSP::LowPassFilter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f32 >::LowPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::LowPassFilter",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::LowPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::LowPassFilter",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatLowPassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::LowPassFilter< f32 > *)new DSP::LowPassFilter< f32 >((DSP::BiQuadParams< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f32 > *arg1 = (DSP::LowPassFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::apply",1,"DSP::LowPassFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f32 > *arg1 = (DSP::LowPassFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::apply",1,"DSP::LowPassFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatLowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatLowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatLowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowPassFilter< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::LowPassFilter< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatLowPassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f32 > *arg1 = (DSP::LowPassFilter< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f32 >::reset",1,"DSP::LowPassFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowPassFilter_reset",1,SWIGTYPE_p_DSP__LowPassFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatLowPassFilter(void *obj) {
DSP::LowPassFilter< f32 > *arg1 = (DSP::LowPassFilter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatLowPassFilter_attributes[] = {
    { "filter", _wrap_FloatLowPassFilter_filter_get, _wrap_FloatLowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatLowPassFilter_methods[]= {
    { "apply", _wrap_FloatLowPassFilter_apply},
    { "reset", _wrap_FloatLowPassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatLowPassFilter_Sf_SwigStatic = {
    "FloatLowPassFilter",
    swig_FloatLowPassFilter_Sf_SwigStatic_methods,
    swig_FloatLowPassFilter_Sf_SwigStatic_attributes,
    swig_FloatLowPassFilter_Sf_SwigStatic_constants,
    swig_FloatLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatLowPassFilter_bases[] = {0};
static const char *swig_FloatLowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatLowPassFilter = { "FloatLowPassFilter", "FloatLowPassFilter", &SWIGTYPE_p_DSP__LowPassFilterT_float_t,_proxy__wrap_new_FloatLowPassFilter, swig_delete_FloatLowPassFilter, swig_FloatLowPassFilter_methods, swig_FloatLowPassFilter_attributes, &swig_FloatLowPassFilter_Sf_SwigStatic, swig_FloatLowPassFilter_meta, swig_FloatLowPassFilter_bases, swig_FloatLowPassFilter_base_names };

static int _wrap_DoubleLowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f64 > *arg1 = (DSP::LowPassFilter< f64 > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::filter",1,"DSP::LowPassFilter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_filter_set",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f64 > *arg1 = (DSP::LowPassFilter< f64 > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::filter",1,"DSP::LowPassFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_filter_get",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::LowPassFilter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f64 >::LowPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::LowPassFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::LowPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::LowPassFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleLowPassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::LowPassFilter< f64 > *)new DSP::LowPassFilter< f64 >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f64 > *arg1 = (DSP::LowPassFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::apply",1,"DSP::LowPassFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f64 > *arg1 = (DSP::LowPassFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::apply",1,"DSP::LowPassFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleLowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoubleLowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleLowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowPassFilter< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::LowPassFilter< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleLowPassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< f64 > *arg1 = (DSP::LowPassFilter< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< f64 >::reset",1,"DSP::LowPassFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowPassFilter_reset",1,SWIGTYPE_p_DSP__LowPassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleLowPassFilter(void *obj) {
DSP::LowPassFilter< f64 > *arg1 = (DSP::LowPassFilter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleLowPassFilter_attributes[] = {
    { "filter", _wrap_DoubleLowPassFilter_filter_get, _wrap_DoubleLowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleLowPassFilter_methods[]= {
    { "apply", _wrap_DoubleLowPassFilter_apply},
    { "reset", _wrap_DoubleLowPassFilter_reset},
    {0,0}
};
static swig_lua_method swig_DoubleLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleLowPassFilter_Sf_SwigStatic = {
    "DoubleLowPassFilter",
    swig_DoubleLowPassFilter_Sf_SwigStatic_methods,
    swig_DoubleLowPassFilter_Sf_SwigStatic_attributes,
    swig_DoubleLowPassFilter_Sf_SwigStatic_constants,
    swig_DoubleLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleLowPassFilter_bases[] = {0};
static const char *swig_DoubleLowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleLowPassFilter = { "DoubleLowPassFilter", "DoubleLowPassFilter", &SWIGTYPE_p_DSP__LowPassFilterT_double_t,_proxy__wrap_new_DoubleLowPassFilter, swig_delete_DoubleLowPassFilter, swig_DoubleLowPassFilter_methods, swig_DoubleLowPassFilter_attributes, &swig_DoubleLowPassFilter_Sf_SwigStatic, swig_DoubleLowPassFilter_meta, swig_DoubleLowPassFilter_bases, swig_DoubleLowPassFilter_base_names };

static int _wrap_FloatHighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f32 > *arg1 = (DSP::HighPassFilter< f32 > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::filter",1,"DSP::HighPassFilter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_filter_set",1,SWIGTYPE_p_DSP__HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f32 > *arg1 = (DSP::HighPassFilter< f32 > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::filter",1,"DSP::HighPassFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_filter_get",1,SWIGTYPE_p_DSP__HighPassFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  DSP::HighPassFilter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f32 >::HighPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::HighPassFilter",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::HighPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::HighPassFilter",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatHighPassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::HighPassFilter< f32 > *)new DSP::HighPassFilter< f32 >((DSP::BiQuadParams< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f32 > *arg1 = (DSP::HighPassFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::apply",1,"DSP::HighPassFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f32 > *arg1 = (DSP::HighPassFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::apply",1,"DSP::HighPassFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatHighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatHighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatHighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighPassFilter< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::HighPassFilter< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatHighPassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f32 > *arg1 = (DSP::HighPassFilter< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f32 >::reset",1,"DSP::HighPassFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighPassFilter_reset",1,SWIGTYPE_p_DSP__HighPassFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatHighPassFilter(void *obj) {
DSP::HighPassFilter< f32 > *arg1 = (DSP::HighPassFilter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatHighPassFilter_attributes[] = {
    { "filter", _wrap_FloatHighPassFilter_filter_get, _wrap_FloatHighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatHighPassFilter_methods[]= {
    { "apply", _wrap_FloatHighPassFilter_apply},
    { "reset", _wrap_FloatHighPassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatHighPassFilter_Sf_SwigStatic = {
    "FloatHighPassFilter",
    swig_FloatHighPassFilter_Sf_SwigStatic_methods,
    swig_FloatHighPassFilter_Sf_SwigStatic_attributes,
    swig_FloatHighPassFilter_Sf_SwigStatic_constants,
    swig_FloatHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatHighPassFilter_bases[] = {0};
static const char *swig_FloatHighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatHighPassFilter = { "FloatHighPassFilter", "FloatHighPassFilter", &SWIGTYPE_p_DSP__HighPassFilterT_float_t,_proxy__wrap_new_FloatHighPassFilter, swig_delete_FloatHighPassFilter, swig_FloatHighPassFilter_methods, swig_FloatHighPassFilter_attributes, &swig_FloatHighPassFilter_Sf_SwigStatic, swig_FloatHighPassFilter_meta, swig_FloatHighPassFilter_bases, swig_FloatHighPassFilter_base_names };

static int _wrap_DoubleHighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f64 > *arg1 = (DSP::HighPassFilter< f64 > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::filter",1,"DSP::HighPassFilter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_filter_set",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f64 > *arg1 = (DSP::HighPassFilter< f64 > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::filter",1,"DSP::HighPassFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_filter_get",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::HighPassFilter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f64 >::HighPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::HighPassFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::HighPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::HighPassFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleHighPassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::HighPassFilter< f64 > *)new DSP::HighPassFilter< f64 >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f64 > *arg1 = (DSP::HighPassFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::apply",1,"DSP::HighPassFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f64 > *arg1 = (DSP::HighPassFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::apply",1,"DSP::HighPassFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleHighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoubleHighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleHighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighPassFilter< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::HighPassFilter< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleHighPassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< f64 > *arg1 = (DSP::HighPassFilter< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< f64 >::reset",1,"DSP::HighPassFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighPassFilter_reset",1,SWIGTYPE_p_DSP__HighPassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleHighPassFilter(void *obj) {
DSP::HighPassFilter< f64 > *arg1 = (DSP::HighPassFilter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleHighPassFilter_attributes[] = {
    { "filter", _wrap_DoubleHighPassFilter_filter_get, _wrap_DoubleHighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleHighPassFilter_methods[]= {
    { "apply", _wrap_DoubleHighPassFilter_apply},
    { "reset", _wrap_DoubleHighPassFilter_reset},
    {0,0}
};
static swig_lua_method swig_DoubleHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleHighPassFilter_Sf_SwigStatic = {
    "DoubleHighPassFilter",
    swig_DoubleHighPassFilter_Sf_SwigStatic_methods,
    swig_DoubleHighPassFilter_Sf_SwigStatic_attributes,
    swig_DoubleHighPassFilter_Sf_SwigStatic_constants,
    swig_DoubleHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleHighPassFilter_bases[] = {0};
static const char *swig_DoubleHighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleHighPassFilter = { "DoubleHighPassFilter", "DoubleHighPassFilter", &SWIGTYPE_p_DSP__HighPassFilterT_double_t,_proxy__wrap_new_DoubleHighPassFilter, swig_delete_DoubleHighPassFilter, swig_DoubleHighPassFilter_methods, swig_DoubleHighPassFilter_attributes, &swig_DoubleHighPassFilter_Sf_SwigStatic, swig_DoubleHighPassFilter_meta, swig_DoubleHighPassFilter_bases, swig_DoubleHighPassFilter_base_names };

static int _wrap_FloatBandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f32 > *arg1 = (DSP::BandPassFilter< f32 > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::filter",1,"DSP::BandPassFilter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_filter_set",1,SWIGTYPE_p_DSP__BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f32 > *arg1 = (DSP::BandPassFilter< f32 > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::filter",1,"DSP::BandPassFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_filter_get",1,SWIGTYPE_p_DSP__BandPassFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  DSP::BandPassFilter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f32 >::BandPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::BandPassFilter",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::BandPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::BandPassFilter",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatBandPassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::BandPassFilter< f32 > *)new DSP::BandPassFilter< f32 >((DSP::BiQuadParams< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BandPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f32 > *arg1 = (DSP::BandPassFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::apply",1,"DSP::BandPassFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f32 > *arg1 = (DSP::BandPassFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::apply",1,"DSP::BandPassFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatBandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BandPassFilter< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::BandPassFilter< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatBandPassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f32 > *arg1 = (DSP::BandPassFilter< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f32 >::reset",1,"DSP::BandPassFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBandPassFilter_reset",1,SWIGTYPE_p_DSP__BandPassFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatBandPassFilter(void *obj) {
DSP::BandPassFilter< f32 > *arg1 = (DSP::BandPassFilter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBandPassFilter_attributes[] = {
    { "filter", _wrap_FloatBandPassFilter_filter_get, _wrap_FloatBandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBandPassFilter_methods[]= {
    { "apply", _wrap_FloatBandPassFilter_apply},
    { "reset", _wrap_FloatBandPassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBandPassFilter_Sf_SwigStatic = {
    "FloatBandPassFilter",
    swig_FloatBandPassFilter_Sf_SwigStatic_methods,
    swig_FloatBandPassFilter_Sf_SwigStatic_attributes,
    swig_FloatBandPassFilter_Sf_SwigStatic_constants,
    swig_FloatBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBandPassFilter_bases[] = {0};
static const char *swig_FloatBandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBandPassFilter = { "FloatBandPassFilter", "FloatBandPassFilter", &SWIGTYPE_p_DSP__BandPassFilterT_float_t,_proxy__wrap_new_FloatBandPassFilter, swig_delete_FloatBandPassFilter, swig_FloatBandPassFilter_methods, swig_FloatBandPassFilter_attributes, &swig_FloatBandPassFilter_Sf_SwigStatic, swig_FloatBandPassFilter_meta, swig_FloatBandPassFilter_bases, swig_FloatBandPassFilter_base_names };

static int _wrap_DoubleBandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f64 > *arg1 = (DSP::BandPassFilter< f64 > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::filter",1,"DSP::BandPassFilter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_filter_set",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f64 > *arg1 = (DSP::BandPassFilter< f64 > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::filter",1,"DSP::BandPassFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_filter_get",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::BandPassFilter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f64 >::BandPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::BandPassFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::BandPassFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::BandPassFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleBandPassFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::BandPassFilter< f64 > *)new DSP::BandPassFilter< f64 >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BandPassFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f64 > *arg1 = (DSP::BandPassFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::apply",1,"DSP::BandPassFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f64 > *arg1 = (DSP::BandPassFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::apply",1,"DSP::BandPassFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleBandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoubleBandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleBandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BandPassFilter< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::BandPassFilter< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleBandPassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< f64 > *arg1 = (DSP::BandPassFilter< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< f64 >::reset",1,"DSP::BandPassFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleBandPassFilter_reset",1,SWIGTYPE_p_DSP__BandPassFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleBandPassFilter(void *obj) {
DSP::BandPassFilter< f64 > *arg1 = (DSP::BandPassFilter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleBandPassFilter_attributes[] = {
    { "filter", _wrap_DoubleBandPassFilter_filter_get, _wrap_DoubleBandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleBandPassFilter_methods[]= {
    { "apply", _wrap_DoubleBandPassFilter_apply},
    { "reset", _wrap_DoubleBandPassFilter_reset},
    {0,0}
};
static swig_lua_method swig_DoubleBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleBandPassFilter_Sf_SwigStatic = {
    "DoubleBandPassFilter",
    swig_DoubleBandPassFilter_Sf_SwigStatic_methods,
    swig_DoubleBandPassFilter_Sf_SwigStatic_attributes,
    swig_DoubleBandPassFilter_Sf_SwigStatic_constants,
    swig_DoubleBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleBandPassFilter_bases[] = {0};
static const char *swig_DoubleBandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleBandPassFilter = { "DoubleBandPassFilter", "DoubleBandPassFilter", &SWIGTYPE_p_DSP__BandPassFilterT_double_t,_proxy__wrap_new_DoubleBandPassFilter, swig_delete_DoubleBandPassFilter, swig_DoubleBandPassFilter_methods, swig_DoubleBandPassFilter_attributes, &swig_DoubleBandPassFilter_Sf_SwigStatic, swig_DoubleBandPassFilter_meta, swig_DoubleBandPassFilter_bases, swig_DoubleBandPassFilter_base_names };

static int _wrap_FloatPeakFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f32 > *arg1 = (DSP::PeakFilter< f32 > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f32 >::filter",1,"DSP::PeakFilter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::PeakFilter< f32 >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_filter_set",1,SWIGTYPE_p_DSP__PeakFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatPeakFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f32 > *arg1 = (DSP::PeakFilter< f32 > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f32 >::filter",1,"DSP::PeakFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_filter_get",1,SWIGTYPE_p_DSP__PeakFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatPeakFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::PeakFilter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f32 >::PeakFilter",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::PeakFilter< f32 >::PeakFilter",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::PeakFilter< f32 >::PeakFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::PeakFilter< f32 >::PeakFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::PeakFilter< f32 >::PeakFilter",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatPeakFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::PeakFilter< f32 > *)new DSP::PeakFilter< f32 >((DSP::BiQuadParams< float > const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__PeakFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatPeakFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f32 > *arg1 = (DSP::PeakFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f32 >::apply",1,"DSP::PeakFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatPeakFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f32 > *arg1 = (DSP::PeakFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f32 >::apply",1,"DSP::PeakFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::PeakFilter< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatPeakFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatPeakFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatPeakFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatPeakFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::PeakFilter< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::PeakFilter< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatPeakFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f32 > *arg1 = (DSP::PeakFilter< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f32 >::reset",1,"DSP::PeakFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_float_t,0))){
    SWIG_fail_ptr("FloatPeakFilter_reset",1,SWIGTYPE_p_DSP__PeakFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatPeakFilter(void *obj) {
DSP::PeakFilter< f32 > *arg1 = (DSP::PeakFilter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatPeakFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatPeakFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatPeakFilter_attributes[] = {
    { "filter", _wrap_FloatPeakFilter_filter_get, _wrap_FloatPeakFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatPeakFilter_methods[]= {
    { "apply", _wrap_FloatPeakFilter_apply},
    { "reset", _wrap_FloatPeakFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatPeakFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatPeakFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatPeakFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatPeakFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatPeakFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatPeakFilter_Sf_SwigStatic = {
    "FloatPeakFilter",
    swig_FloatPeakFilter_Sf_SwigStatic_methods,
    swig_FloatPeakFilter_Sf_SwigStatic_attributes,
    swig_FloatPeakFilter_Sf_SwigStatic_constants,
    swig_FloatPeakFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatPeakFilter_bases[] = {0};
static const char *swig_FloatPeakFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatPeakFilter = { "FloatPeakFilter", "FloatPeakFilter", &SWIGTYPE_p_DSP__PeakFilterT_float_t,_proxy__wrap_new_FloatPeakFilter, swig_delete_FloatPeakFilter, swig_FloatPeakFilter_methods, swig_FloatPeakFilter_attributes, &swig_FloatPeakFilter_Sf_SwigStatic, swig_FloatPeakFilter_meta, swig_FloatPeakFilter_bases, swig_FloatPeakFilter_base_names };

static int _wrap_DoublePeakFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f64 > *arg1 = (DSP::PeakFilter< f64 > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f64 >::filter",1,"DSP::PeakFilter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::PeakFilter< f64 >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_filter_set",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoublePeakFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f64 > *arg1 = (DSP::PeakFilter< f64 > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f64 >::filter",1,"DSP::PeakFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_filter_get",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoublePeakFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::PeakFilter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f64 >::PeakFilter",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::PeakFilter< f64 >::PeakFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::PeakFilter< f64 >::PeakFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::PeakFilter< f64 >::PeakFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::PeakFilter< f64 >::PeakFilter",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoublePeakFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (DSP::PeakFilter< f64 > *)new DSP::PeakFilter< f64 >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__PeakFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoublePeakFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f64 > *arg1 = (DSP::PeakFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f64 >::apply",1,"DSP::PeakFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoublePeakFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f64 > *arg1 = (DSP::PeakFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f64 >::apply",1,"DSP::PeakFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::PeakFilter< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoublePeakFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoublePeakFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoublePeakFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoublePeakFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::PeakFilter< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::PeakFilter< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoublePeakFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< f64 > *arg1 = (DSP::PeakFilter< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< f64 >::reset",1,"DSP::PeakFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_double_t,0))){
    SWIG_fail_ptr("DoublePeakFilter_reset",1,SWIGTYPE_p_DSP__PeakFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoublePeakFilter(void *obj) {
DSP::PeakFilter< f64 > *arg1 = (DSP::PeakFilter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoublePeakFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoublePeakFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoublePeakFilter_attributes[] = {
    { "filter", _wrap_DoublePeakFilter_filter_get, _wrap_DoublePeakFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoublePeakFilter_methods[]= {
    { "apply", _wrap_DoublePeakFilter_apply},
    { "reset", _wrap_DoublePeakFilter_reset},
    {0,0}
};
static swig_lua_method swig_DoublePeakFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoublePeakFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoublePeakFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoublePeakFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoublePeakFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoublePeakFilter_Sf_SwigStatic = {
    "DoublePeakFilter",
    swig_DoublePeakFilter_Sf_SwigStatic_methods,
    swig_DoublePeakFilter_Sf_SwigStatic_attributes,
    swig_DoublePeakFilter_Sf_SwigStatic_constants,
    swig_DoublePeakFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoublePeakFilter_bases[] = {0};
static const char *swig_DoublePeakFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DoublePeakFilter = { "DoublePeakFilter", "DoublePeakFilter", &SWIGTYPE_p_DSP__PeakFilterT_double_t,_proxy__wrap_new_DoublePeakFilter, swig_delete_DoublePeakFilter, swig_DoublePeakFilter_methods, swig_DoublePeakFilter_attributes, &swig_DoublePeakFilter_Sf_SwigStatic, swig_DoublePeakFilter_meta, swig_DoublePeakFilter_bases, swig_DoublePeakFilter_base_names };

static int _wrap_FloatLowShelfFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f32 > *arg1 = (DSP::LowShelfFilter< f32 > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::filter",1,"DSP::LowShelfFilter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_filter_set",1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowShelfFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f32 > *arg1 = (DSP::LowShelfFilter< f32 > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::filter",1,"DSP::LowShelfFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_filter_get",1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatLowShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  DSP::LowShelfFilter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f32 >::LowShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::LowShelfFilter",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::LowShelfFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::LowShelfFilter",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatLowShelfFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::LowShelfFilter< f32 > *)new DSP::LowShelfFilter< f32 >((DSP::BiQuadParams< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowShelfFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowShelfFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f32 > *arg1 = (DSP::LowShelfFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::apply",1,"DSP::LowShelfFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowShelfFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f32 > *arg1 = (DSP::LowShelfFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::apply",1,"DSP::LowShelfFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatLowShelfFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatLowShelfFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatLowShelfFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatLowShelfFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowShelfFilter< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::LowShelfFilter< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatLowShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f32 > *arg1 = (DSP::LowShelfFilter< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f32 >::reset",1,"DSP::LowShelfFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatLowShelfFilter_reset",1,SWIGTYPE_p_DSP__LowShelfFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatLowShelfFilter(void *obj) {
DSP::LowShelfFilter< f32 > *arg1 = (DSP::LowShelfFilter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatLowShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatLowShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatLowShelfFilter_attributes[] = {
    { "filter", _wrap_FloatLowShelfFilter_filter_get, _wrap_FloatLowShelfFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatLowShelfFilter_methods[]= {
    { "apply", _wrap_FloatLowShelfFilter_apply},
    { "reset", _wrap_FloatLowShelfFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatLowShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatLowShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatLowShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatLowShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatLowShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatLowShelfFilter_Sf_SwigStatic = {
    "FloatLowShelfFilter",
    swig_FloatLowShelfFilter_Sf_SwigStatic_methods,
    swig_FloatLowShelfFilter_Sf_SwigStatic_attributes,
    swig_FloatLowShelfFilter_Sf_SwigStatic_constants,
    swig_FloatLowShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatLowShelfFilter_bases[] = {0};
static const char *swig_FloatLowShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatLowShelfFilter = { "FloatLowShelfFilter", "FloatLowShelfFilter", &SWIGTYPE_p_DSP__LowShelfFilterT_float_t,_proxy__wrap_new_FloatLowShelfFilter, swig_delete_FloatLowShelfFilter, swig_FloatLowShelfFilter_methods, swig_FloatLowShelfFilter_attributes, &swig_FloatLowShelfFilter_Sf_SwigStatic, swig_FloatLowShelfFilter_meta, swig_FloatLowShelfFilter_bases, swig_FloatLowShelfFilter_base_names };

static int _wrap_DoubleLowShelfFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f64 > *arg1 = (DSP::LowShelfFilter< f64 > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::filter",1,"DSP::LowShelfFilter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_filter_set",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowShelfFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f64 > *arg1 = (DSP::LowShelfFilter< f64 > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::filter",1,"DSP::LowShelfFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_filter_get",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleLowShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::LowShelfFilter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f64 >::LowShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::LowShelfFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::LowShelfFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::LowShelfFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleLowShelfFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::LowShelfFilter< f64 > *)new DSP::LowShelfFilter< f64 >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowShelfFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f64 > *arg1 = (DSP::LowShelfFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::apply",1,"DSP::LowShelfFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowShelfFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f64 > *arg1 = (DSP::LowShelfFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::apply",1,"DSP::LowShelfFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleLowShelfFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleLowShelfFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoubleLowShelfFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleLowShelfFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowShelfFilter< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::LowShelfFilter< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleLowShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< f64 > *arg1 = (DSP::LowShelfFilter< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< f64 >::reset",1,"DSP::LowShelfFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleLowShelfFilter_reset",1,SWIGTYPE_p_DSP__LowShelfFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleLowShelfFilter(void *obj) {
DSP::LowShelfFilter< f64 > *arg1 = (DSP::LowShelfFilter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleLowShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleLowShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleLowShelfFilter_attributes[] = {
    { "filter", _wrap_DoubleLowShelfFilter_filter_get, _wrap_DoubleLowShelfFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleLowShelfFilter_methods[]= {
    { "apply", _wrap_DoubleLowShelfFilter_apply},
    { "reset", _wrap_DoubleLowShelfFilter_reset},
    {0,0}
};
static swig_lua_method swig_DoubleLowShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleLowShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleLowShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleLowShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleLowShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleLowShelfFilter_Sf_SwigStatic = {
    "DoubleLowShelfFilter",
    swig_DoubleLowShelfFilter_Sf_SwigStatic_methods,
    swig_DoubleLowShelfFilter_Sf_SwigStatic_attributes,
    swig_DoubleLowShelfFilter_Sf_SwigStatic_constants,
    swig_DoubleLowShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleLowShelfFilter_bases[] = {0};
static const char *swig_DoubleLowShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleLowShelfFilter = { "DoubleLowShelfFilter", "DoubleLowShelfFilter", &SWIGTYPE_p_DSP__LowShelfFilterT_double_t,_proxy__wrap_new_DoubleLowShelfFilter, swig_delete_DoubleLowShelfFilter, swig_DoubleLowShelfFilter_methods, swig_DoubleLowShelfFilter_attributes, &swig_DoubleLowShelfFilter_Sf_SwigStatic, swig_DoubleLowShelfFilter_meta, swig_DoubleLowShelfFilter_bases, swig_DoubleLowShelfFilter_base_names };

static int _wrap_FloatHighShelfFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f32 > *arg1 = (DSP::HighShelfFilter< f32 > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f32 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::filter",1,"DSP::HighShelfFilter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_filter_set",1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighShelfFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f32 > *arg1 = (DSP::HighShelfFilter< f32 > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f32 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::filter",1,"DSP::HighShelfFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_filter_get",1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatHighShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< float > *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  DSP::HighShelfFilter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f32 >::HighShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::HighShelfFilter",1,"DSP::BiQuadParams< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::HighShelfFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::HighShelfFilter",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t,0))){
    SWIG_fail_ptr("new_FloatHighShelfFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::HighShelfFilter< f32 > *)new DSP::HighShelfFilter< f32 >((DSP::BiQuadParams< float > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighShelfFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighShelfFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f32 > *arg1 = (DSP::HighShelfFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f32 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::apply",1,"DSP::HighShelfFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighShelfFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f32 > *arg1 = (DSP::HighShelfFilter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f32 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::apply",1,"DSP::HighShelfFilter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatHighShelfFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatHighShelfFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatHighShelfFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatHighShelfFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighShelfFilter< f32 >::apply(DSP::UniVector< float > &)\n"
    "    DSP::HighShelfFilter< f32 >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatHighShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f32 > *arg1 = (DSP::HighShelfFilter< f32 > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f32 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f32 >::reset",1,"DSP::HighShelfFilter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t,0))){
    SWIG_fail_ptr("FloatHighShelfFilter_reset",1,SWIGTYPE_p_DSP__HighShelfFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatHighShelfFilter(void *obj) {
DSP::HighShelfFilter< f32 > *arg1 = (DSP::HighShelfFilter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatHighShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatHighShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatHighShelfFilter_attributes[] = {
    { "filter", _wrap_FloatHighShelfFilter_filter_get, _wrap_FloatHighShelfFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatHighShelfFilter_methods[]= {
    { "apply", _wrap_FloatHighShelfFilter_apply},
    { "reset", _wrap_FloatHighShelfFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatHighShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatHighShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatHighShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatHighShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatHighShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatHighShelfFilter_Sf_SwigStatic = {
    "FloatHighShelfFilter",
    swig_FloatHighShelfFilter_Sf_SwigStatic_methods,
    swig_FloatHighShelfFilter_Sf_SwigStatic_attributes,
    swig_FloatHighShelfFilter_Sf_SwigStatic_constants,
    swig_FloatHighShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatHighShelfFilter_bases[] = {0};
static const char *swig_FloatHighShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatHighShelfFilter = { "FloatHighShelfFilter", "FloatHighShelfFilter", &SWIGTYPE_p_DSP__HighShelfFilterT_float_t,_proxy__wrap_new_FloatHighShelfFilter, swig_delete_FloatHighShelfFilter, swig_FloatHighShelfFilter_methods, swig_FloatHighShelfFilter_attributes, &swig_FloatHighShelfFilter_Sf_SwigStatic, swig_FloatHighShelfFilter_meta, swig_FloatHighShelfFilter_bases, swig_FloatHighShelfFilter_base_names };

static int _wrap_DoubleHighShelfFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f64 > *arg1 = (DSP::HighShelfFilter< f64 > *) 0 ;
  DSP::Biquad< double > *arg2 = (DSP::Biquad< double > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f64 >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::filter",1,"DSP::HighShelfFilter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::filter",2,"DSP::Biquad< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_filter_set",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_double_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighShelfFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f64 > *arg1 = (DSP::HighShelfFilter< f64 > *) 0 ;
  DSP::Biquad< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f64 >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::filter",1,"DSP::HighShelfFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_filter_get",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  result = (DSP::Biquad< double > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleHighShelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  DSP::HighShelfFilter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f64 >::HighShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::HighShelfFilter",1,"DSP::BiQuadParams< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::HighShelfFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::HighShelfFilter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t,0))){
    SWIG_fail_ptr("new_DoubleHighShelfFilter",1,SWIGTYPE_p_DSP__BiQuadParamsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (DSP::HighShelfFilter< f64 > *)new DSP::HighShelfFilter< f64 >((DSP::BiQuadParams< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighShelfFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f64 > *arg1 = (DSP::HighShelfFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f64 >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::apply",1,"DSP::HighShelfFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::apply",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighShelfFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f64 > *arg1 = (DSP::HighShelfFilter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f64 >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::apply",1,"DSP::HighShelfFilter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::apply",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::apply",3,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->apply((DSP::UniVector< double > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleHighShelfFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DoubleHighShelfFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DoubleHighShelfFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DoubleHighShelfFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighShelfFilter< f64 >::apply(DSP::UniVector< double > &)\n"
    "    DSP::HighShelfFilter< f64 >::apply(DSP::UniVector< double > const &,DSP::UniVector< double > &)\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleHighShelfFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< f64 > *arg1 = (DSP::HighShelfFilter< f64 > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< f64 >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< f64 >::reset",1,"DSP::HighShelfFilter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t,0))){
    SWIG_fail_ptr("DoubleHighShelfFilter_reset",1,SWIGTYPE_p_DSP__HighShelfFilterT_double_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleHighShelfFilter(void *obj) {
DSP::HighShelfFilter< f64 > *arg1 = (DSP::HighShelfFilter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleHighShelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleHighShelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleHighShelfFilter_attributes[] = {
    { "filter", _wrap_DoubleHighShelfFilter_filter_get, _wrap_DoubleHighShelfFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleHighShelfFilter_methods[]= {
    { "apply", _wrap_DoubleHighShelfFilter_apply},
    { "reset", _wrap_DoubleHighShelfFilter_reset},
    {0,0}
};
static swig_lua_method swig_DoubleHighShelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleHighShelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleHighShelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleHighShelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleHighShelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleHighShelfFilter_Sf_SwigStatic = {
    "DoubleHighShelfFilter",
    swig_DoubleHighShelfFilter_Sf_SwigStatic_methods,
    swig_DoubleHighShelfFilter_Sf_SwigStatic_attributes,
    swig_DoubleHighShelfFilter_Sf_SwigStatic_constants,
    swig_DoubleHighShelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleHighShelfFilter_bases[] = {0};
static const char *swig_DoubleHighShelfFilter_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleHighShelfFilter = { "DoubleHighShelfFilter", "DoubleHighShelfFilter", &SWIGTYPE_p_DSP__HighShelfFilterT_double_t,_proxy__wrap_new_DoubleHighShelfFilter, swig_delete_DoubleHighShelfFilter, swig_DoubleHighShelfFilter_methods, swig_DoubleHighShelfFilter_attributes, &swig_DoubleHighShelfFilter_Sf_SwigStatic, swig_DoubleHighShelfFilter_meta, swig_DoubleHighShelfFilter_bases, swig_DoubleHighShelfFilter_base_names };

static int _wrap_normalize_frequencyf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("DSP::normalize_frequency< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::normalize_frequency< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::normalize_frequency< f32 >",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR normalize_frequency< f32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_normalize_frequencyd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("DSP::normalize_frequency< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::normalize_frequency< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::normalize_frequency< f64 >",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR normalize_frequency< f64 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspacef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::linspace< f32 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< f32 >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::linspace< f32 >",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::linspace< f32 >",5,"bool");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< f32 >(arg1,arg2,arg3,arg4,arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspacef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  size_t arg3 ;
  bool arg4 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::linspace< f32 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< f32 >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::linspace< f32 >",4,"bool");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< f32 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspacef__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  size_t arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::linspace< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< f32 >",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< f32 >",3,"size_t");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspacef(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_linspacef__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_linspacef__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_linspacef__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'linspacef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::linspace< f32 >(float,float,size_t,bool,bool)\n"
    "    DSP::linspace< f32 >(float,float,size_t,bool)\n"
    "    DSP::linspace< f32 >(float,float,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_padf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::pad< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pad< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::pad< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("padf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pad< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_padf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::pad< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pad< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("padf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pad< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_padf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_padf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_padf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'padf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::pad< f32 >(DSP::UniVector< float > const &,float const &)\n"
    "    DSP::pad< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_slicef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::slice< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::slice< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::slice< f32 >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::slice< f32 >",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("slicef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR slice< f32 >((DSP::UniVector< float > const &)*arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slicef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::slice< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::slice< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::slice< f32 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("slicef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR slice< f32 >((DSP::UniVector< float > const &)*arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slicef(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_slicef__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_slicef__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'slicef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::slice< f32 >(DSP::UniVector< float > const &,size_t,size_t)\n"
    "    DSP::slice< f32 >(DSP::UniVector< float > const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_truncatef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::truncate< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::truncate< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::truncate< f32 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("truncatef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR truncate< f32 >((DSP::UniVector< float > const &)*arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reversef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::reverse< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::reverse< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("reversef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR reverse< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspaced__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::linspace< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< f64 >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::linspace< f64 >",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::linspace< f64 >",5,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< f64 >(arg1,arg2,arg3,arg4,arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspaced__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  bool arg4 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::linspace< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< f64 >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::linspace< f64 >",4,"bool");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< f64 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspaced__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  size_t arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::linspace< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::linspace< f64 >",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::linspace< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::linspace< f64 >",3,"size_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR linspace< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspaced(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_linspaced__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_linspaced__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_linspaced__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'linspaced'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::linspace< f64 >(double,double,size_t,bool,bool)\n"
    "    DSP::linspace< f64 >(double,double,size_t,bool)\n"
    "    DSP::linspace< f64 >(double,double,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_padd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::pad< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pad< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::pad< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("padd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pad< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_padd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::pad< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pad< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("padd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pad< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_padd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_padd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_padd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'padd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::pad< f64 >(DSP::UniVector< double > const &,double const &)\n"
    "    DSP::pad< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sliced__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::slice< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::slice< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::slice< f64 >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::slice< f64 >",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sliced",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR slice< f64 >((DSP::UniVector< double > const &)*arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sliced__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  size_t arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::slice< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::slice< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::slice< f64 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sliced",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR slice< f64 >((DSP::UniVector< double > const &)*arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sliced(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sliced__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sliced__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sliced'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::slice< f64 >(DSP::UniVector< double > const &,size_t,size_t)\n"
    "    DSP::slice< f64 >(DSP::UniVector< double > const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_truncated(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  size_t arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::truncate< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::truncate< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::truncate< f64 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("truncated",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR truncate< f64 >((DSP::UniVector< double > const &)*arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reversed(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::reverse< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::reverse< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("reversed",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR reverse< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_readf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  float *arg3 = 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("DSP::ringbuf_read< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ringbuf_read< f32 >",1,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ringbuf_read< f32 >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ringbuf_read< f32 >",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("ringbuf_readf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_readf",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ringbuf_readf",3,SWIGTYPE_p_float);
  }
  
  result = (float *) &DSP::SWIGTEMPLATEDISAMBIGUATOR ringbuf_read< f32 >(*arg1,*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_writef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  float *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ringbuf_write< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ringbuf_write< f32 >",1,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ringbuf_write< f32 >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ringbuf_write< f32 >",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("ringbuf_writef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_writef",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ringbuf_writef",3,SWIGTYPE_p_float);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR ringbuf_write< f32 >(*arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_readd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  double *arg3 = 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("DSP::ringbuf_read< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ringbuf_read< f64 >",1,"DSP::UniVector< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ringbuf_read< f64 >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ringbuf_read< f64 >",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("ringbuf_readd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_readd",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ringbuf_readd",3,SWIGTYPE_p_double);
  }
  
  result = (double *) &DSP::SWIGTEMPLATEDISAMBIGUATOR ringbuf_read< f64 >(*arg1,*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_writed(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  double *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ringbuf_write< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ringbuf_write< f64 >",1,"DSP::UniVector< double > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ringbuf_write< f64 >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ringbuf_write< f64 >",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("ringbuf_writed",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_writed",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ringbuf_writed",3,SWIGTYPE_p_double);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR ringbuf_write< f64 >(*arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::abs< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::abs< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR abs< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::abs< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::abs< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR abs< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::abs< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::abs< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_addf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::add< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::add< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::add< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("addf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("addf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR add< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_addf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::add< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::add< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::add< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("addf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR add< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_addf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_addf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_addf__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'addf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::add< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n"
    "    DSP::add< f32 >(DSP::UniVector< float > const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absmaxf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::absmax< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmax< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::absmax< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absmaxf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absmaxf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmax< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::absmax< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmax< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::absmax< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absmaxf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmax< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmaxf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_absmaxf__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absmaxf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::absmax< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n"
    "    DSP::absmax< f32 >(DSP::UniVector< float > const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absminf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::absmin< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmin< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::absmin< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absminf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absminf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmin< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absminf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::absmin< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmin< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::absmin< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absminf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmin< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absminf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absminf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_absminf__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absminf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::absmin< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n"
    "    DSP::absmin< f32 >(DSP::UniVector< float > const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_clampf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::clamp< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::clamp< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::clamp< f32 >",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::clamp< f32 >",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("clampf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("clampf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("clampf",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR clamp< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2,(DSP::UniVector< float > const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clampf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::clamp< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::clamp< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::clamp< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::clamp< f32 >",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("clampf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR clamp< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clampf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_clampf__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_clampf__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'clampf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::clamp< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n"
    "    DSP::clamp< f32 >(DSP::UniVector< float > const &,float const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cubef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::cube< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cube< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cube< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::cube< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cube< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("cubef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cube< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubef__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cubef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cube< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::cube< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_divf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::div< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::div< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::div< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("divf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("divf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR div< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaddf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fmadd< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmadd< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmadd< f32 >",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fmadd< f32 >",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fmaddf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fmaddf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fmaddf",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmadd< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2,(DSP::UniVector< float > const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmsubf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fmsub< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmsub< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmsub< f32 >",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fmsub< f32 >",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fmsubf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fmsubf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fmsubf",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmsub< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2,(DSP::UniVector< float > const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::max< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::max< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::max< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("maxf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("maxf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR max< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::max< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::max< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::max< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("maxf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR max< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_maxf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_maxf__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'maxf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::max< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n"
    "    DSP::max< f32 >(DSP::UniVector< float > const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_minf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::min< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::min< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::min< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("minf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("minf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR min< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::min< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::min< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::min< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("minf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR min< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_minf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_minf__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'minf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::min< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n"
    "    DSP::min< f32 >(DSP::UniVector< float > const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_mixf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::mix< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mix< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mix< f32 >",2,"float const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::mix< f32 >",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("mixf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("mixf",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mix< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2,(DSP::UniVector< float > const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mixsf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::mixs< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mixs< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mixs< f32 >",2,"float const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::mixs< f32 >",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("mixsf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("mixsf",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mixs< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2,(DSP::UniVector< float > const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mulf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::mul< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mul< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::mul< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("mulf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("mulf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mul< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mulf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::mul< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mul< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mul< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("mulf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mul< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mulf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_mulf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_mulf__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mulf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::mul< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n"
    "    DSP::mul< f32 >(DSP::UniVector< float > const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_negf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::neg< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::neg< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("negf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR neg< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sqr< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqr< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sqrf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqr< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::sqrt< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqrt< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sqrt< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqrt< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sqrtf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sqrt< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::sqrt< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_expf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::exp< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::exp< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'expf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::exp< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::exp< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp10f(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::exp10< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp10< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("exp10f",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp10< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::exp2< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp2< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("exp2f",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp2< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::exp2< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp2< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("exp2f",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp2< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2f__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2f__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exp2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::exp2< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::exp2< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp_fmaddf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::exp_fmadd< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp_fmadd< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::exp_fmadd< f32 >",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::exp_fmadd< f32 >",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("exp_fmaddf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("exp_fmaddf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("exp_fmaddf",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp_fmadd< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2,(DSP::UniVector< float > const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::log< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::log< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::log< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log10f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::log10< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log10< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log10< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::log10< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log10< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log10< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log10f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log10< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::log10< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::log2< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log2< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("log2f",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log2< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::log2< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log2< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("log2f",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log2< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2f__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2f__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log2< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::log2< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log_fmaddf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::log_fmadd< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log_fmadd< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::log_fmadd< f32 >",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::log_fmadd< f32 >",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("log_fmaddf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("log_fmaddf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("log_fmaddf",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log_fmadd< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2,(DSP::UniVector< float > const &)*arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::logb< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logb< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("logbf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logb< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::logb< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logb< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("logbf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logb< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logbf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logbf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logbf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::logb< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::logb< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_logmf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::logm< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logm< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::logm< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("logmf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("logmf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logm< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lognf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::logn< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logn< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::logn< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("lognf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("lognf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logn< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::pow< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::pow< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("powf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::pow< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::pow< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::pow< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::pow< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("powf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powf__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'powf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::pow< f32 >(DSP::Scalar< float > const &,DSP::Scalar< float > const &)\n"
    "    DSP::pow< f32 >(DSP::UniVector< float > const &,float const &)\n"
    "    DSP::pow< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_rootf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::root< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::root< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::root< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("rootf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("rootf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR root< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::floor< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::floor< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR floor< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::floor< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::floor< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR floor< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'floorf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::floor< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::floor< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acosf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::acos< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acos< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acos< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::acos< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acos< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acos< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acosf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::acos< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::acos< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::asin< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::asin< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR asin< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::atan< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::atan< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atanf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::atan< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::atan2< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("atan2f",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("atan2f",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::atan2< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::atan2< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("atan2f",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::atan2< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("atan2f",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("atan2f",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2f__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2f__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2f__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan2< f32 >(DSP::Scalar< float > const &,DSP::Scalar< float > const &)\n"
    "    DSP::atan2< f32 >(DSP::UniVector< float > const &,float const &)\n"
    "    DSP::atan2< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::cos< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cos< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cos< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::cos< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cos< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cos< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cosf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cos< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::cos< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::sin< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sin< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sin< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sin< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sin< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sin< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sin< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::sin< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::tan< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tan< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tan< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::tan< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tan< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tan< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::tan< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::tan< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_coshf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::cosh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosh< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosh< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::cosh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosh< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosh< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'coshf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cosh< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::cosh< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cothf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::coth< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::coth< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("cothf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR coth< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::sinh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinh< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinh< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sinh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinh< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinh< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sinh< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::sinh< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::tanh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tanh< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tanh< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::tanh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tanh< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tanh< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::tanh< f32 >(DSP::Scalar< float > const &)\n"
    "    DSP::tanh< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2degf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::atan2deg< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2deg< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::atan2deg< f32 >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("atan2degf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2deg< f32 >((DSP::UniVector< float > const &)*arg1,(float const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2degf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::atan2deg< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2deg< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2deg< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("atan2degf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("atan2degf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2deg< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2degf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2degf__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2degf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2degf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan2deg< f32 >(DSP::UniVector< float > const &,float const &)\n"
    "    DSP::atan2deg< f32 >(DSP::UniVector< float > const &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosdegf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::cosdeg< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosdeg< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("cosdegf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosdeg< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sindegf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sindeg< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sindeg< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sindegf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sindeg< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sincf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sinc< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinc< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sincf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinc< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gammaf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::gamma< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::gamma< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("gammaf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR gamma< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxof(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::absmaxof< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmaxof< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("absmaxof",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR absmaxof< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dotf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::dot< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::dot< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::dot< f32 >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("dotf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("dotf",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR dot< f32 >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxoff(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::maxof< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::maxof< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("maxoff",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR maxof< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minoff(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::minof< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::minof< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("minoff",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR minof< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_meanf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::mean< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mean< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("meanf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR mean< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prdocutf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::product< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::product< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("prdocutf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR product< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rmsf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::rms< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rms< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("rmsf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR rms< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sumf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::sum< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sum< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sumf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR sum< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sumsqrf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("DSP::sumsqr< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sumsqr< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("sumsqrf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR sumsqr< f32 >((DSP::UniVector< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipowf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  int arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::ipow< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ipow< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ipow< f32 >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("ipowf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ipow< f32 >((DSP::UniVector< float > const &)*arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos2xf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("DSP::kcos2x< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kcos2x< f32 >",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::kcos2x< f32 >",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR kcos2x< f32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin2xf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("DSP::ksin2x< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ksin2x< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ksin2x< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR ksin2x< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos3xf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("DSP::kcos3x< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kcos3x< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::kcos3x< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR kcos3x< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin3xf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("DSP::ksin3x< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ksin3x< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ksin3x< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR ksin3x< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reciprocalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("DSP::kreciprocal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kreciprocal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR kreciprocal< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::acosh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acosh< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acosh< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::asinh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::asinh< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR asinh< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::atanh< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atanh< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atanh< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::cbrt< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cbrt< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("cbrtf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::cbrt< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cbrt< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::copysign< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::copysign< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::copysign< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("copysignf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("copysignf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR copysign< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::erf< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::erf< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("erff",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR erf< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::erfc< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::erfc< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("erfcf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR erfc< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::expm1< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::expm1< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("expm1f",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR expm1< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::fdim< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fdim< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fdim< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fdimf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fdimf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fdim< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  DSP::Scalar< float > *arg3 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::fma< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fma< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fma< f32 >",2,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fma< f32 >",3,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaf",3,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fma< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2,(DSP::Scalar< float > const &)*arg3);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::fmax< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmax< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmax< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaxf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmaxf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmax< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::fmin< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmin< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmin< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fminf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fminf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmin< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::fmod< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmod< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmod< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmodf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fmodf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmod< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("DSP::fpclassify< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fpclassify< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("fpclassifyf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR fpclassify< f32 >((DSP::Scalar< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::hypot< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::hypot< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::hypot< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("hypotf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("hypotf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR hypot< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("DSP::ilogb< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ilogb< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("ilogbf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR ilogb< f32 >((DSP::Scalar< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isfinite< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isfinite< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isfinitef",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isfinite< f32 >((DSP::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isgreater< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isgreater< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isgreater< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isgreater< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isgreaterequal< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isgreaterequal< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isgreaterequal< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterequalf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isgreaterequalf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isinf< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isinf< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isinff",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isinf< f32 >((DSP::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isless< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isless< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isless< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isless< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::islessequal< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::islessequal< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::islessequal< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessequalf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("islessequalf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR islessequal< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isnan< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isnan< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isnanf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isnan< f32 >((DSP::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isnormal< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isnormal< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isnormalf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isnormal< f32 >((DSP::Scalar< float > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isunordered< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isunordered< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isunordered< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isunorderedf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("isunorderedf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isunordered< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::ldexp< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ldexp< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ldexp< f32 >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("ldexpf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ldexp< f32 >((DSP::Scalar< float > const &)*arg1,arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::lgamma< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lgamma< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("lgammaf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lgamma< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::llrint< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::llrint< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("llrintf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR llrint< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::llround< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::llround< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("llroundf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR llround< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::log1p< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log1p< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log1p< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::lrint< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lrint< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("lrintf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lrint< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::lround< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lround< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("lroundf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lround< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nan< f32 >((char const *)arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nanf< f32 >((char const *)arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nanl< f32 >((char const *)arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::nearbyint< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nearbyint< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("nearbyintf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nearbyint< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::nextafter< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nextafter< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::nextafter< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("nextafterf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("nextafterf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nextafter< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::nexttoward< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nexttoward< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::nexttoward< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("nexttowardf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("nexttowardf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nexttoward< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  DSP::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::remainder< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::remainder< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::remainder< f32 >",2,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("remainderf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("remainderf",2,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR remainder< f32 >((DSP::Scalar< float > const &)*arg1,(DSP::Scalar< float > const &)*arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::rint< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rint< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR rint< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::round< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::round< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR round< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  long arg2 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::scalbln< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::scalbln< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::scalbln< f32 >",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("scalblnf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR scalbln< f32 >((DSP::Scalar< float > const &)*arg1,arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::scalbn< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::scalbn< f32 >",1,"DSP::Scalar< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::scalbn< f32 >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("scalbnf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR scalbn< f32 >((DSP::Scalar< float > const &)*arg1,arg2);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::square< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::square< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("squaref",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR square< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::tgamma< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tgamma< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("tgammaf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tgamma< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< float > > result;
  
  SWIG_check_num_args("DSP::trunc< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::trunc< f32 >",1,"DSP::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_float_t,0))){
    SWIG_fail_ptr("truncf",1,SWIGTYPE_p_DSP__ScalarT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trunc< f32 >((DSP::Scalar< float > const &)*arg1);
  {
    DSP::Scalar< float > * resultptr = new DSP::Scalar< float >((const DSP::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::abs< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::abs< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("absd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR abs< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::abs< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::abs< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR abs< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::abs< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::abs< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_addd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::add< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::add< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::add< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("addd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("addd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR add< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_addd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::add< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::add< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::add< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("addd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR add< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_addd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_addd__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_addd__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'addd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::add< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n"
    "    DSP::add< f64 >(DSP::UniVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absmaxd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::absmax< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmax< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::absmax< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absmaxd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absmaxd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmax< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::absmax< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmax< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::absmax< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absmaxd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmax< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmaxd__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_absmaxd__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absmaxd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::absmax< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n"
    "    DSP::absmax< f64 >(DSP::UniVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absmind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::absmin< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmin< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::absmin< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absmind",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absmind",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmin< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::absmin< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmin< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::absmin< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absmind",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR absmin< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmind(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmind__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_absmind__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absmind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::absmin< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n"
    "    DSP::absmin< f64 >(DSP::UniVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_clampd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::clamp< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::clamp< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::clamp< f64 >",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::clamp< f64 >",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("clampd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("clampd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("clampd",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR clamp< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2,(DSP::UniVector< double > const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clampd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp2 ;
  double temp3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::clamp< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::clamp< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::clamp< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::clamp< f64 >",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("clampd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR clamp< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clampd(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_clampd__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_clampd__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'clampd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::clamp< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n"
    "    DSP::clamp< f64 >(DSP::UniVector< double > const &,double const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cubed__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cube< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cube< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("cubed",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cube< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubed__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::cube< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cube< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("cubed",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cube< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubed(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubed__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cubed__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cubed'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cube< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::cube< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_divd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::div< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::div< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::div< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("divd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("divd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR div< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaddd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::fmadd< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmadd< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmadd< f64 >",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fmadd< f64 >",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("fmaddd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("fmaddd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("fmaddd",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmadd< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2,(DSP::UniVector< double > const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmsubd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::fmsub< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmsub< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmsub< f64 >",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fmsub< f64 >",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("fmsubd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("fmsubd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("fmsubd",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmsub< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2,(DSP::UniVector< double > const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::max< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::max< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::max< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("maxd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("maxd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR max< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::max< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::max< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::max< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("maxd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR max< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_maxd__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_maxd__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'maxd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::max< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n"
    "    DSP::max< f64 >(DSP::UniVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_mind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::min< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::min< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::min< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("mind",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("mind",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR min< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::min< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::min< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::min< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("mind",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR min< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mind(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_mind__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_mind__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::min< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n"
    "    DSP::min< f64 >(DSP::UniVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_mixd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::mix< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mix< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mix< f64 >",2,"double const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::mix< f64 >",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("mixd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("mixd",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mix< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2,(DSP::UniVector< double > const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mixsd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::mixs< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mixs< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mixs< f64 >",2,"double const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::mixs< f64 >",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("mixsd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("mixsd",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mixs< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2,(DSP::UniVector< double > const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_muld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::mul< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mul< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::mul< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("muld",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("muld",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mul< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_muld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::mul< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mul< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::mul< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("muld",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR mul< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_muld(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_muld__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_muld__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'muld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::mul< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n"
    "    DSP::mul< f64 >(DSP::UniVector< double > const &,double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_negd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::neg< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::neg< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("negd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR neg< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sqr< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqr< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sqrd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqr< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::sqrt< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqrt< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("sqrtd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sqrt< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sqrt< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sqrtd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sqrt< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sqrtd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sqrt< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::sqrt< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_expd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::exp< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("expd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::exp< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("expd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'expd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::exp< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::exp< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp10d(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::exp10< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp10< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("exp10d",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp10< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::exp2< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp2< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("exp2d",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp2< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::exp2< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp2< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("exp2d",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp2< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2d__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_exp2d__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exp2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::exp2< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::exp2< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_exp_fmaddd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::exp_fmadd< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::exp_fmadd< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::exp_fmadd< f64 >",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::exp_fmadd< f64 >",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("exp_fmaddd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("exp_fmaddd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("exp_fmaddd",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR exp_fmadd< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2,(DSP::UniVector< double > const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("logd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::log< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("logd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::log< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log10d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log10< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log10< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("log10d",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log10< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::log10< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log10< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("log10d",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log10< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10d__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10d__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log10d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log10< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::log10< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log2< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log2< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("log2d",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log2< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::log2< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log2< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("log2d",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log2< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2d__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log2d__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::log2< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::log2< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_log_fmaddd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > *arg3 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::log_fmadd< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log_fmadd< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::log_fmadd< f64 >",2,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::log_fmadd< f64 >",3,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("log_fmaddd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("log_fmaddd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("log_fmaddd",3,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log_fmadd< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2,(DSP::UniVector< double > const &)*arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::logb< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logb< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("logbd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logb< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::logb< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logb< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("logbd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logb< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logbd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logbd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logbd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::logb< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::logb< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_logmd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::logm< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logm< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::logm< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("logmd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("logmd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logm< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lognd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::logn< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::logn< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::logn< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("lognd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("lognd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR logn< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::pow< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::pow< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("powd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("powd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::pow< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::pow< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("powd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::pow< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::pow< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::pow< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("powd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("powd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR pow< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powd__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powd__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powd__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'powd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::pow< f64 >(DSP::Scalar< double > const &,DSP::Scalar< double > const &)\n"
    "    DSP::pow< f64 >(DSP::UniVector< double > const &,double const &)\n"
    "    DSP::pow< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_rootd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::root< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::root< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::root< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("rootd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("rootd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR root< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::floor< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::floor< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("floord",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR floor< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::floor< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::floor< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("floord",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR floor< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floord__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floord__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'floord'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::floor< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::floor< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acosd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::acos< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acos< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("acosd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acos< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::acos< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acos< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("acosd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acos< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acosd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::acos< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::acos< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::asin< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::asin< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("asind",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR asin< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::atan< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atand",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::atan< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("atand",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atand__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atand__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::atan< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2d__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::atan2< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atan2d",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atan2d",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::atan2< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::atan2< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("atan2d",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::atan2< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("atan2d",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("atan2d",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2d__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2d__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2d__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2d'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan2< f64 >(DSP::Scalar< double > const &,DSP::Scalar< double > const &)\n"
    "    DSP::atan2< f64 >(DSP::UniVector< double > const &,double const &)\n"
    "    DSP::atan2< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cos< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cos< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("cosd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cos< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::cos< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cos< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("cosd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cos< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cosd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cos< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::cos< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::sin< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sin< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("sind",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sin< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sin< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sin< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sind",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sin< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sind__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sind__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sin< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::sin< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::tan< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tan< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("tand",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tan< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::tan< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tan< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("tand",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tan< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tand__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tand__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::tan< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::tan< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_coshd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cosh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosh< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("coshd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosh< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::cosh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosh< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("coshd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosh< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'coshd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::cosh< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::cosh< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cothd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::coth< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::coth< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("cothd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR coth< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::sinh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinh< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("sinhd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinh< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sinh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinh< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sinhd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinh< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinhd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sinh< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::sinh< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanhd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::tanh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tanh< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("tanhd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tanh< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::tanh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tanh< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("tanhd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tanh< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ScalarT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhd__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhd__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanhd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::tanh< f64 >(DSP::Scalar< double > const &)\n"
    "    DSP::tanh< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atan2degd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::atan2deg< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2deg< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::atan2deg< f64 >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("atan2degd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2deg< f64 >((DSP::UniVector< double > const &)*arg1,(double const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2degd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::atan2deg< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atan2deg< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::atan2deg< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("atan2degd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("atan2degd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atan2deg< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2degd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2degd__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_atan2degd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2degd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::atan2deg< f64 >(DSP::UniVector< double > const &,double const &)\n"
    "    DSP::atan2deg< f64 >(DSP::UniVector< double > const &,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosdegd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::cosdeg< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cosdeg< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("cosdegd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cosdeg< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sindegd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sindeg< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sindeg< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sindegd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sindeg< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sincd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sinc< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sinc< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sincd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinc< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gammad(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::gamma< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::gamma< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("gammad",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR gamma< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxod(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::absmaxof< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::absmaxof< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("absmaxod",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR absmaxof< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dotd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::dot< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::dot< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::dot< f64 >",2,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("dotd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("dotd",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR dot< f64 >((DSP::UniVector< double > const &)*arg1,(DSP::UniVector< double > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxofd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::maxof< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::maxof< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("maxofd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR maxof< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minofd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::minof< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::minof< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("minofd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR minof< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_meand(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::mean< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::mean< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("meand",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR mean< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prdocutd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::product< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::product< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("prdocutd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR product< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rmsd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::rms< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rms< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("rmsd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR rms< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sumd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::sum< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sum< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sumd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR sum< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sumsqrd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("DSP::sumsqr< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::sumsqr< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("sumsqrd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR sumsqr< f64 >((DSP::UniVector< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipowd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  int arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::ipow< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ipow< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ipow< f64 >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("ipowd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ipow< f64 >((DSP::UniVector< double > const &)*arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos2xd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("DSP::kcos2x< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kcos2x< f64 >",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::kcos2x< f64 >",2,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR kcos2x< f64 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin2xd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("DSP::ksin2x< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ksin2x< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ksin2x< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR ksin2x< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos3xd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("DSP::kcos3x< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kcos3x< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::kcos3x< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR kcos3x< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin3xd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("DSP::ksin3x< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ksin3x< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ksin3x< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR ksin3x< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reciprocald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("DSP::kreciprocal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::kreciprocal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR kreciprocal< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::acosh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::acosh< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("acoshd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR acosh< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::asinh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::asinh< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("asinhd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR asinh< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::atanh< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::atanh< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("atanhd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR atanh< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cbrt< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cbrt< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("cbrtd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::cbrt< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::cbrt< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("ceild",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR cbrt< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::copysign< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::copysign< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::copysign< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("copysignd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("copysignd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR copysign< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::erf< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::erf< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("erfd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR erf< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::erfc< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::erfc< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("erfcd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR erfc< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::expm1< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::expm1< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("expm1d",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR expm1< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fdim< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fdim< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fdim< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fdimd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fdimd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fdim< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  DSP::Scalar< double > *arg3 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fma< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fma< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fma< f64 >",2,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fma< f64 >",3,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmad",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmad",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmad",3,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fma< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2,(DSP::Scalar< double > const &)*arg3);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fmax< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmax< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmax< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmaxd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmaxd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmax< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fmin< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmin< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmin< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmind",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmind",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmin< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::fmod< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fmod< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::fmod< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmodd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fmodd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fmod< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("DSP::fpclassify< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fpclassify< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("fpclassifyd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR fpclassify< f64 >((DSP::Scalar< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::hypot< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::hypot< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::hypot< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("hypotd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("hypotd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR hypot< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int result;
  
  SWIG_check_num_args("DSP::ilogb< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ilogb< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("ilogbd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR ilogb< f64 >((DSP::Scalar< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isfinite< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isfinite< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isfinited",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isfinite< f64 >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isgreater< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isgreater< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isgreater< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreaterd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreaterd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isgreater< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isgreaterequal< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isgreaterequal< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isgreaterequal< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreaterequald",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isgreaterequald",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isgreaterequal< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isinf< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isinf< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isinfd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isinf< f64 >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isless< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isless< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isless< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("islessd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("islessd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isless< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::islessequal< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::islessequal< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::islessequal< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("islessequald",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("islessequald",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR islessequal< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isnan< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isnan< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isnand",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isnan< f64 >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isnormal< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isnormal< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isnormald",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isnormal< f64 >((DSP::Scalar< double > const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("DSP::isunordered< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::isunordered< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::isunordered< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isunorderedd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("isunorderedd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = (bool)DSP::SWIGTEMPLATEDISAMBIGUATOR isunordered< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::ldexp< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ldexp< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ldexp< f64 >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("ldexpd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ldexp< f64 >((DSP::Scalar< double > const &)*arg1,arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::lgamma< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lgamma< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("lgammad",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lgamma< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::llrint< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::llrint< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("llrintd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR llrint< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::llround< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::llround< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("llroundd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR llround< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::log1p< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::log1p< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("log1pd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR log1p< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::lrint< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lrint< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("lrintd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lrint< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::lround< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lround< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("lroundd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lround< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nan< f64 >((char const *)arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nanf< f64 >((char const *)arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nanl< f64 >((char const *)arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nearbyint< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nearbyint< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nearbyintd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nearbyint< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nextafter< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nextafter< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::nextafter< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nextafterd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nextafterd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nextafter< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::nexttoward< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::nexttoward< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::nexttoward< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nexttowardd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("nexttowardd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR nexttoward< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  DSP::Scalar< double > *arg2 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::remainder< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::remainder< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::remainder< f64 >",2,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("remainderd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("remainderd",2,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR remainder< f64 >((DSP::Scalar< double > const &)*arg1,(DSP::Scalar< double > const &)*arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::rint< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rint< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("rintd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR rint< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::round< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::round< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("roundd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR round< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  long arg2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::scalbln< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::scalbln< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::scalbln< f64 >",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("scalblnd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR scalbln< f64 >((DSP::Scalar< double > const &)*arg1,arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  int arg2 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::scalbn< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::scalbn< f64 >",1,"DSP::Scalar< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::scalbn< f64 >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("scalbnd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR scalbn< f64 >((DSP::Scalar< double > const &)*arg1,arg2);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::square< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::square< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("squared",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR square< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::tgamma< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::tgamma< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("tgammad",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR tgamma< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Scalar< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::Scalar< double > > result;
  
  SWIG_check_num_args("DSP::trunc< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::trunc< f64 >",1,"DSP::Scalar< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ScalarT_double_t,0))){
    SWIG_fail_ptr("truncd",1,SWIGTYPE_p_DSP__ScalarT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trunc< f64 >((DSP::Scalar< double > const &)*arg1);
  {
    DSP::Scalar< double > * resultptr = new DSP::Scalar< double >((const DSP::Scalar< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ScalarT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complexf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::make_complex< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_complex< f32 >",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_complex< f32 >",2,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_complex< f32 >(arg1,arg2);
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complexf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = 0 ;
  DSP::Complex< float > result;
  
  SWIG_check_num_args("DSP::make_complex< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::make_complex< f32 >",1,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("make_complexf",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_complex< f32 >((kfr::complex< float > const &)*arg1);
  {
    DSP::Complex< float > * resultptr = new DSP::Complex< float >((const DSP::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complexf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_make_complexf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_make_complexf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'make_complexf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_complex< f32 >(float const,float const)\n"
    "    DSP::make_complex< f32 >(kfr::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_make_complexd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::make_complex< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_complex< f64 >",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_complex< f64 >",2,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_complex< f64 >(arg1,arg2);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complexd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = 0 ;
  DSP::Complex< double > result;
  
  SWIG_check_num_args("DSP::make_complex< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::make_complex< f64 >",1,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("make_complexd",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_complex< f64 >((kfr::complex< double > const &)*arg1);
  {
    DSP::Complex< double > * resultptr = new DSP::Complex< double >((const DSP::Complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__ComplexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_complexd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_make_complexd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_make_complexd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'make_complexd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_complex< f64 >(double const,double const)\n"
    "    DSP::make_complex< f64 >(kfr::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_make_univectorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_univec< f32 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< f32 >",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< f32 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("make_univectorf",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< f32 >((float const *)arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_univectord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  size_t arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_univec< f64 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< f64 >",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< f64 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("make_univectord",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< f64 >((double const *)arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_univectori8(lua_State* L) {
  int SWIG_arg = 0;
  signed char *arg1 = (signed char *) 0 ;
  size_t arg2 ;
  DSP::UniVector< signed char > result;
  
  SWIG_check_num_args("DSP::make_univec< i8 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< i8 >",1,"signed char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< i8 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("make_univectori8",1,SWIGTYPE_p_signed_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< i8 >((signed char const *)arg1,arg2);
  {
    DSP::UniVector< signed char > * resultptr = new DSP::UniVector< signed char >((const DSP::UniVector< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_univectoru8(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char *arg1 = (unsigned char *) 0 ;
  size_t arg2 ;
  DSP::UniVector< unsigned char > result;
  
  SWIG_check_num_args("DSP::make_univec< u8 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< u8 >",1,"unsigned char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< u8 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("make_univectoru8",1,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< u8 >((unsigned char const *)arg1,arg2);
  {
    DSP::UniVector< unsigned char > * resultptr = new DSP::UniVector< unsigned char >((const DSP::UniVector< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_univectori16(lua_State* L) {
  int SWIG_arg = 0;
  short *arg1 = (short *) 0 ;
  size_t arg2 ;
  DSP::UniVector< short > result;
  
  SWIG_check_num_args("DSP::make_univec< i16 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< i16 >",1,"short const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< i16 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("make_univectori16",1,SWIGTYPE_p_short);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< i16 >((short const *)arg1,arg2);
  {
    DSP::UniVector< short > * resultptr = new DSP::UniVector< short >((const DSP::UniVector< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_univectoru16(lua_State* L) {
  int SWIG_arg = 0;
  unsigned short *arg1 = (unsigned short *) 0 ;
  size_t arg2 ;
  DSP::UniVector< unsigned short > result;
  
  SWIG_check_num_args("DSP::make_univec< u16 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< u16 >",1,"unsigned short const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< u16 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("make_univectoru16",1,SWIGTYPE_p_unsigned_short);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< u16 >((unsigned short const *)arg1,arg2);
  {
    DSP::UniVector< unsigned short > * resultptr = new DSP::UniVector< unsigned short >((const DSP::UniVector< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_univectori32(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  size_t arg2 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::make_univec< i32 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< i32 >",1,"int const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< i32 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("make_univectori32",1,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< i32 >((int const *)arg1,arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_make_univectoru32(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int *arg1 = (unsigned int *) 0 ;
  size_t arg2 ;
  DSP::UniVector< unsigned int > result;
  
  SWIG_check_num_args("DSP::make_univec< u32 >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::make_univec< u32 >",1,"unsigned int const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_univec< u32 >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("make_univectoru32",1,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_univec< u32 >((unsigned int const *)arg1,arg2);
  {
    DSP::UniVector< unsigned int > * resultptr = new DSP::UniVector< unsigned int >((const DSP::UniVector< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hannf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_hann< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hammingf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_hamming< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmanf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  DSP::window_symmetry arg3 ;
  DSP::window_symmetry *argp3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman< f32 >",2,"float const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman< f32 >",3,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackmanf",3,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmanf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman< f32 >",2,"float const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< f32 >(arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmanf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmanf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackmanf__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_blackmanf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackmanf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackmanf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman< f32 >(size_t,float const,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman< f32 >(size_t,float const)\n"
    "    DSP::make_window_blackman< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harrisf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::window_symmetry arg2 ;
  DSP::window_symmetry *argp2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< f32 >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris< f32 >",2,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harrisf",2,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< f32 >(arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harrisf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harrisf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harrisf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harrisf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harrisf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris< f32 >(size_t,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_harris< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussianf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_gaussian< f32 >",2,"float const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< f32 >(arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussianf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussianf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussianf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_gaussianf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussianf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian< f32 >(size_t,float const)\n"
    "    DSP::make_window_gaussian< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangularf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_triangular< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlettf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosinef(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_cosine< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hannf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohmanf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_bohman< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczosf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_flattopf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_flattop< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiserf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_kaiser< f32 >",2,"float const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< f32 >(arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiserf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiserf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiserf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_kaiserf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiserf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser< f32 >(size_t,float const)\n"
    "    DSP::make_window_kaiser< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_hannd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_hann< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hammingd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_hamming< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::window_symmetry arg3 ;
  DSP::window_symmetry *argp3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman< f64 >",2,"double const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman< f64 >",3,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackmand",3,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman< f64 >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< f64 >(arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmand__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackmand(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackmand__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_blackmand__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackmand__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackmand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman< f64 >(size_t,double const,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman< f64 >(size_t,double const)\n"
    "    DSP::make_window_blackman< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harrisd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::window_symmetry arg2 ;
  DSP::window_symmetry *argp2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< f64 >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris< f64 >",2,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harrisd",2,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< f64 >(arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harrisd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harrisd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harrisd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harrisd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harrisd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris< f64 >(size_t,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_harris< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussiand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_gaussian< f64 >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< f64 >(arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussiand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussiand(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussiand__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_gaussiand__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussiand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian< f64 >(size_t,double const)\n"
    "    DSP::make_window_gaussian< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangulard(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_triangular< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlettd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosined(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_cosine< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hannd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohmand(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_bohman< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczosd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_dlattopd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_flattop< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiserd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_kaiser< f64 >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< f64 >(arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiserd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiserd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiserd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_kaiserd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiserd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser< f64 >(size_t,double const)\n"
    "    DSP::make_window_kaiser< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_hann_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_hann_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hamming_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_hamming_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  DSP::window_symmetry arg3 ;
  DSP::window_symmetry *argp3 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f32 >",2,"float const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f32 >",3,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_ptrf",3,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< f32 >(arg1,arg2,arg3);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f32 >",2,"float const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< f32 >(arg1,arg2);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_ptrf__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_blackman_ptrf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackman_ptrf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_ptrf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_ptr< f32 >(size_t,float const,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_ptr< f32 >(size_t,float const)\n"
    "    DSP::make_window_blackman_ptr< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harris_ptrf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::window_symmetry arg2 ;
  DSP::window_symmetry *argp2 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< f32 >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< f32 >",2,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harris_ptrf",2,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< f32 >(arg1,arg2);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptrf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptrf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harris_ptrf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harris_ptrf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harris_ptrf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris_ptr< f32 >(size_t,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_harris_ptr< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussian_ptrf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< f32 >",2,"float const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< f32 >(arg1,arg2);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptrf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptrf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussian_ptrf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_gaussian_ptrf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussian_ptrf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian_ptr< f32 >(size_t,float const)\n"
    "    DSP::make_window_gaussian_ptr< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangular_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_triangular_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosine_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_cosine_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hann_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohman_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_bohman_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczos_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_flattop_ptrf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_flattop_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptrf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< f32 >",2,"float const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< f32 >(arg1,arg2);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptrf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< float > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< f32 >(arg1);
  {
    kfr::expression_pointer< float > * resultptr = new kfr::expression_pointer< float >((const kfr::expression_pointer< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptrf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiser_ptrf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_kaiser_ptrf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiser_ptrf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser_ptr< f32 >(size_t,float const)\n"
    "    DSP::make_window_kaiser_ptr< f32 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_hann_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_hann_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hamming_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_hamming_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  DSP::window_symmetry arg3 ;
  DSP::window_symmetry *argp3 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f64 >",2,"double const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f64 >",3,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_ptrd",3,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< f64 >(arg1,arg2,arg3);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f64 >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< f64 >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptrd(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_ptrd__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_blackman_ptrd__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackman_ptrd__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_ptrd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_ptr< f64 >(size_t,double const,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_ptr< f64 >(size_t,double const)\n"
    "    DSP::make_window_blackman_ptr< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harris_ptrd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::window_symmetry arg2 ;
  DSP::window_symmetry *argp2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< f64 >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< f64 >",2,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harris_ptrd",2,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< f64 >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptrd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptrd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harris_ptrd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harris_ptrd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harris_ptrd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris_ptr< f64 >(size_t,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_harris_ptr< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussian_ptrd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< f64 >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< f64 >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptrd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptrd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussian_ptrd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_gaussian_ptrd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussian_ptrd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian_ptr< f64 >(size_t,double const)\n"
    "    DSP::make_window_gaussian_ptr< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangular_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_triangular_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosine_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_cosine_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hann_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohman_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_bohman_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczos_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_dlattop_ptrd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_flattop_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptrd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< f64 >",2,"double const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double const)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< f64 >(arg1,arg2);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptrd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< double > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< f64 >(arg1);
  {
    kfr::expression_pointer< double > * resultptr = new kfr::expression_pointer< double >((const kfr::expression_pointer< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptrd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiser_ptrd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_window_kaiser_ptrd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiser_ptrd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser_ptr< f64 >(size_t,double const)\n"
    "    DSP::make_window_kaiser_ptr< f64 >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< float > > *arg1 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::run_dft< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_dft< f32 >",1,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("dftf",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_dft< f32 >((DSP::UniVector< kfr::complex< float > > const &)*arg1);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_realdftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::run_realdft< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_realdft< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("realdftf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_realdft< f32 >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_idftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< float > > *arg1 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("DSP::run_idft< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_idft< f32 >",1,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("idftf",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_idft< f32 >((DSP::UniVector< kfr::complex< float > > const &)*arg1);
  {
    DSP::UniVector< kfr::complex< float > > * resultptr = new DSP::UniVector< kfr::complex< float > >((const DSP::UniVector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_irealdftf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< float > > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::run_irealdft< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_irealdft< f32 >",1,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("irealdftf",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_irealdft< f32 >((DSP::UniVector< kfr::complex< float > > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< double > > *arg1 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_dft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_dft< f64 >",1,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("dftd",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_dft< f64 >((DSP::UniVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_realdftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_realdft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_realdft< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("realdftd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_realdft< f64 >((DSP::UniVector< double > const &)*arg1);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_idftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< double > > *arg1 = 0 ;
  SwigValueWrapper< DSP::UniVector< kfr::complex< double > > > result;
  
  SWIG_check_num_args("DSP::run_idft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_idft< f64 >",1,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("idftd",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_idft< f64 >((DSP::UniVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::UniVector< kfr::complex< double > > * resultptr = new DSP::UniVector< kfr::complex< double > >((const DSP::UniVector< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_irealdftd(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< kfr::complex< double > > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::run_irealdft< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_irealdft< f64 >",1,"DSP::UniVector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("irealdftd",1,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_double_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_irealdft< f64 >((DSP::UniVector< kfr::complex< double > > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roli32(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::rol< i32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::rol< i32 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::rol< i32 >",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR rol< i32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ro4i32(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::ror< i32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ror< i32 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ror< i32 >",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR ror< i32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shli32(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::shl< i32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::shl< i32 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::shl< i32 >",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR shl< i32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shri32(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::shr< i32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::shr< i32 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::shr< i32 >",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR shr< i32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remi32(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::rem< i32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::rem< i32 >",1,"int const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::rem< i32 >",2,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  arg2 = (int const)lua_tonumber(L, 2);
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR rem< i32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sataddi32(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::satadd< i32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::satadd< i32 >",1,"int const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::satadd< i32 >",2,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  arg2 = (int const)lua_tonumber(L, 2);
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR satadd< i32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_satsubi32(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("DSP::satsub< i32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::satsub< i32 >",1,"int const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::satsub< i32 >",2,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  arg2 = (int const)lua_tonumber(L, 2);
  result = (int)DSP::SWIGTEMPLATEDISAMBIGUATOR satsub< i32 >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwiseandi32(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int > *arg1 = 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::bitwiseand< i32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwiseand< i32 >",1,"DSP::UniVector< int > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwiseand< i32 >",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwiseandi32",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwiseandi32",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwiseand< i32 >((DSP::UniVector< int > const &)*arg1,(DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwiseori32(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int > *arg1 = 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::bitwiseor< i32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwiseor< i32 >",1,"DSP::UniVector< int > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwiseor< i32 >",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwiseori32",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwiseori32",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwiseor< i32 >((DSP::UniVector< int > const &)*arg1,(DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwisexori32(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int > *arg1 = 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::bitwisexor< i32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwisexor< i32 >",1,"DSP::UniVector< int > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwisexor< i32 >",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwisexori32",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwisexori32",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwisexor< i32 >((DSP::UniVector< int > const &)*arg1,(DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwiseandnoti32(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int > *arg1 = 0 ;
  DSP::UniVector< int > *arg2 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::bitwiseandnot< i32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwiseandnot< i32 >",1,"DSP::UniVector< int > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwiseandnot< i32 >",2,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwiseandnoti32",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwiseandnoti32",2,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwiseandnot< i32 >((DSP::UniVector< int > const &)*arg1,(DSP::UniVector< int > const &)*arg2);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwisenoti32(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int > *arg1 = 0 ;
  DSP::UniVector< int > result;
  
  SWIG_check_num_args("DSP::bitwisenot< i32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwisenot< i32 >",1,"DSP::UniVector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int_t,0))){
    SWIG_fail_ptr("bitwisenoti32",1,SWIGTYPE_p_DSP__UniVectorT_int_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwisenot< i32 >((DSP::UniVector< int > const &)*arg1);
  {
    DSP::UniVector< int > * resultptr = new DSP::UniVector< int >((const DSP::UniVector< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roli64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::rol< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rol< i64 >",1,"int64_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::rol< i64 >",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("roli64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("roli64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR rol< i64 >(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ro4i64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::ror< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ror< i64 >",1,"int64_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ror< i64 >",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("ro4i64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("ro4i64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR ror< i64 >(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shli64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::shl< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::shl< i64 >",1,"int64_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::shl< i64 >",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("shli64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("shli64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR shl< i64 >(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shri64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::shr< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::shr< i64 >",1,"int64_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::shr< i64 >",2,"int64_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("shri64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("shri64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR shr< i64 >(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remi64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::rem< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::rem< i64 >",1,"int64_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::rem< i64 >",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("remi64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("remi64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR rem< i64 >(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sataddi64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::satadd< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::satadd< i64 >",1,"int64_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::satadd< i64 >",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("sataddi64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("sataddi64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR satadd< i64 >(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_satsubi64(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  int64_t *argp1 ;
  int64_t *argp2 ;
  int64_t result;
  
  SWIG_check_num_args("DSP::satsub< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::satsub< i64 >",1,"int64_t const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::satsub< i64 >",2,"int64_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("satsubi64",1,SWIGTYPE_p_int64_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_int64_t,0))){
    SWIG_fail_ptr("satsubi64",2,SWIGTYPE_p_int64_t);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR satsub< i64 >(arg1,arg2);
  {
    int64_t * resultptr = new int64_t((const int64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwiseandi64(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int64_t > *arg1 = 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::bitwiseand< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwiseand< i64 >",1,"DSP::UniVector< int64_t > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwiseand< i64 >",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwiseandi64",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwiseandi64",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwiseand< i64 >((DSP::UniVector< int64_t > const &)*arg1,(DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwiseori64(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int64_t > *arg1 = 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::bitwiseor< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwiseor< i64 >",1,"DSP::UniVector< int64_t > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwiseor< i64 >",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwiseori64",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwiseori64",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwiseor< i64 >((DSP::UniVector< int64_t > const &)*arg1,(DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwisexori64(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int64_t > *arg1 = 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::bitwisexor< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwisexor< i64 >",1,"DSP::UniVector< int64_t > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwisexor< i64 >",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwisexori64",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwisexori64",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwisexor< i64 >((DSP::UniVector< int64_t > const &)*arg1,(DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwiseandnoti64(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int64_t > *arg1 = 0 ;
  DSP::UniVector< int64_t > *arg2 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::bitwiseandnot< i64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwiseandnot< i64 >",1,"DSP::UniVector< int64_t > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bitwiseandnot< i64 >",2,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwiseandnoti64",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwiseandnoti64",2,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwiseandnot< i64 >((DSP::UniVector< int64_t > const &)*arg1,(DSP::UniVector< int64_t > const &)*arg2);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitwisenoti64(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< int64_t > *arg1 = 0 ;
  DSP::UniVector< int64_t > result;
  
  SWIG_check_num_args("DSP::bitwisenot< i64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bitwisenot< i64 >",1,"DSP::UniVector< int64_t > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,0))){
    SWIG_fail_ptr("bitwisenoti64",1,SWIGTYPE_p_DSP__UniVectorT_int64_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bitwisenot< i64 >((DSP::UniVector< int64_t > const &)*arg1);
  {
    DSP::UniVector< int64_t > * resultptr = new DSP::UniVector< int64_t >((const DSP::UniVector< int64_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_int64_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_energy_to_loudnessf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("DSP::energy_to_loudness< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::energy_to_loudness< f32 >",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR energy_to_loudness< f32 >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loudness_to_energyf(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("DSP::loudness_to_energy< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::loudness_to_energy< f32 >",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)DSP::SWIGTEMPLATEDISAMBIGUATOR loudness_to_energy< f32 >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_energy_to_loudnessd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("DSP::energy_to_loudness< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::energy_to_loudness< f64 >",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR energy_to_loudness< f64 >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loudness_to_energyd(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("DSP::loudness_to_energy< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::loudness_to_energy< f64 >",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)DSP::SWIGTEMPLATEDISAMBIGUATOR loudness_to_energy< f64 >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dcremovef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  float arg2 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::dcremove< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::dcremove< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dcremove< f32 >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("dcremovef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR dcremove< f32 >((DSP::UniVector< float > const &)*arg1,arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dcremoved(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  double arg2 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::dcremove< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::dcremove< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dcremove< f64 >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("dcremoved",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR dcremove< f64 >((DSP::UniVector< double > const &)*arg1,arg2);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatWavReader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::WavReader< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< f32 >::WavReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavReader< f32 >::WavReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::WavReader< f32 > *)new DSP::WavReader< f32 >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavReaderT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatWavReader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f32 > *arg1 = (DSP::WavReader< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< f32 >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f32 >::read",1,"DSP::WavReader< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavReader< f32 >::read",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_float_t,0))){
    SWIG_fail_ptr("FloatWavReader_read",1,SWIGTYPE_p_DSP__WavReaderT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatWavReader_read",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatWavReader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f32 > *arg1 = (DSP::WavReader< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< f32 >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f32 >::tell",1,"DSP::WavReader< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_float_t,0))){
    SWIG_fail_ptr("FloatWavReader_tell",1,SWIGTYPE_p_DSP__WavReaderT_float_t);
  }
  
  result = ((DSP::WavReader< f32 > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatWavReader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f32 > *arg1 = (DSP::WavReader< f32 > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::WavReader< f32 >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f32 >::seek",1,"DSP::WavReader< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::WavReader< f32 >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::WavReader< f32 >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_float_t,0))){
    SWIG_fail_ptr("FloatWavReader_seek",1,SWIGTYPE_p_DSP__WavReaderT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("FloatWavReader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatWavReader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f32 > *arg1 = (DSP::WavReader< f32 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< f32 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f32 >::format",1,"DSP::WavReader< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_float_t,0))){
    SWIG_fail_ptr("FloatWavReader_format",1,SWIGTYPE_p_DSP__WavReaderT_float_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatWavReader(void *obj) {
DSP::WavReader< f32 > *arg1 = (DSP::WavReader< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatWavReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatWavReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatWavReader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatWavReader_methods[]= {
    { "read", _wrap_FloatWavReader_read},
    { "tell", _wrap_FloatWavReader_tell},
    { "seek", _wrap_FloatWavReader_seek},
    { "format", _wrap_FloatWavReader_format},
    {0,0}
};
static swig_lua_method swig_FloatWavReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatWavReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatWavReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatWavReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatWavReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatWavReader_Sf_SwigStatic = {
    "FloatWavReader",
    swig_FloatWavReader_Sf_SwigStatic_methods,
    swig_FloatWavReader_Sf_SwigStatic_attributes,
    swig_FloatWavReader_Sf_SwigStatic_constants,
    swig_FloatWavReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatWavReader_bases[] = {0};
static const char *swig_FloatWavReader_base_names[] = {0};
static swig_lua_class _wrap_class_FloatWavReader = { "FloatWavReader", "FloatWavReader", &SWIGTYPE_p_DSP__WavReaderT_float_t,_proxy__wrap_new_FloatWavReader, swig_delete_FloatWavReader, swig_FloatWavReader_methods, swig_FloatWavReader_attributes, &swig_FloatWavReader_Sf_SwigStatic, swig_FloatWavReader_meta, swig_FloatWavReader_bases, swig_FloatWavReader_base_names };

static int _wrap_new_DoubleWavReader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::WavReader< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< f64 >::WavReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavReader< f64 >::WavReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::WavReader< f64 > *)new DSP::WavReader< f64 >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavReaderT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleWavReader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f64 > *arg1 = (DSP::WavReader< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< f64 >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f64 >::read",1,"DSP::WavReader< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavReader< f64 >::read",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleWavReader_read",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleWavReader_read",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleWavReader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f64 > *arg1 = (DSP::WavReader< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< f64 >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f64 >::tell",1,"DSP::WavReader< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleWavReader_tell",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  result = ((DSP::WavReader< f64 > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleWavReader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f64 > *arg1 = (DSP::WavReader< f64 > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::WavReader< f64 >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f64 >::seek",1,"DSP::WavReader< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::WavReader< f64 >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::WavReader< f64 >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleWavReader_seek",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("DoubleWavReader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleWavReader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< f64 > *arg1 = (DSP::WavReader< f64 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< f64 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< f64 >::format",1,"DSP::WavReader< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleWavReader_format",1,SWIGTYPE_p_DSP__WavReaderT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleWavReader(void *obj) {
DSP::WavReader< f64 > *arg1 = (DSP::WavReader< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleWavReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleWavReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleWavReader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DoubleWavReader_methods[]= {
    { "read", _wrap_DoubleWavReader_read},
    { "tell", _wrap_DoubleWavReader_tell},
    { "seek", _wrap_DoubleWavReader_seek},
    { "format", _wrap_DoubleWavReader_format},
    {0,0}
};
static swig_lua_method swig_DoubleWavReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleWavReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleWavReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleWavReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleWavReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleWavReader_Sf_SwigStatic = {
    "DoubleWavReader",
    swig_DoubleWavReader_Sf_SwigStatic_methods,
    swig_DoubleWavReader_Sf_SwigStatic_attributes,
    swig_DoubleWavReader_Sf_SwigStatic_constants,
    swig_DoubleWavReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleWavReader_bases[] = {0};
static const char *swig_DoubleWavReader_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleWavReader = { "DoubleWavReader", "DoubleWavReader", &SWIGTYPE_p_DSP__WavReaderT_double_t,_proxy__wrap_new_DoubleWavReader, swig_delete_DoubleWavReader, swig_DoubleWavReader_methods, swig_DoubleWavReader_attributes, &swig_DoubleWavReader_Sf_SwigStatic, swig_DoubleWavReader_meta, swig_DoubleWavReader_bases, swig_DoubleWavReader_base_names };

static int _wrap_FloatWavWriter_writer_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f32 > *arg1 = (DSP::WavWriter< f32 > *) 0 ;
  kfr::audio_writer_wav< float > *arg2 = (kfr::audio_writer_wav< float > *) 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f32 >::writer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f32 >::writer",1,"DSP::WavWriter< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::WavWriter< f32 >::writer",2,"kfr::audio_writer_wav< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_float_t,0))){
    SWIG_fail_ptr("FloatWavWriter_writer_set",1,SWIGTYPE_p_DSP__WavWriterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_writer_wavT_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatWavWriter_writer_set",2,SWIGTYPE_p_kfr__audio_writer_wavT_float_t);
  }
  
  if (arg1) (arg1)->writer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatWavWriter_writer_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f32 > *arg1 = (DSP::WavWriter< f32 > *) 0 ;
  kfr::audio_writer_wav< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f32 >::writer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f32 >::writer",1,"DSP::WavWriter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_float_t,0))){
    SWIG_fail_ptr("FloatWavWriter_writer_get",1,SWIGTYPE_p_DSP__WavWriterT_float_t);
  }
  
  result = (kfr::audio_writer_wav< float > *) ((arg1)->writer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_writer_wavT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatWavWriter(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::audio_format *arg2 = 0 ;
  DSP::WavWriter< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f32 >::WavWriter",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavWriter< f32 >::WavWriter",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< f32 >::WavWriter",2,"DSP::audio_format const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_format_and_length,0))){
    SWIG_fail_ptr("new_FloatWavWriter",2,SWIGTYPE_p_kfr__audio_format_and_length);
  }
  
  result = (DSP::WavWriter< f32 > *)new DSP::WavWriter< f32 >((char const *)arg1,(DSP::audio_format const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavWriterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatWavWriter_write(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f32 > *arg1 = (DSP::WavWriter< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f32 >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f32 >::write",1,"DSP::WavWriter< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< f32 >::write",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_float_t,0))){
    SWIG_fail_ptr("FloatWavWriter_write",1,SWIGTYPE_p_DSP__WavWriterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatWavWriter_write",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatWavWriter_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f32 > *arg1 = (DSP::WavWriter< f32 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f32 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f32 >::format",1,"DSP::WavWriter< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_float_t,0))){
    SWIG_fail_ptr("FloatWavWriter_format",1,SWIGTYPE_p_DSP__WavWriterT_float_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatWavWriter(void *obj) {
DSP::WavWriter< f32 > *arg1 = (DSP::WavWriter< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatWavWriter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatWavWriter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatWavWriter_attributes[] = {
    { "writer", _wrap_FloatWavWriter_writer_get, _wrap_FloatWavWriter_writer_set },
    {0,0,0}
};
static swig_lua_method swig_FloatWavWriter_methods[]= {
    { "write", _wrap_FloatWavWriter_write},
    { "format", _wrap_FloatWavWriter_format},
    {0,0}
};
static swig_lua_method swig_FloatWavWriter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatWavWriter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatWavWriter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatWavWriter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatWavWriter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatWavWriter_Sf_SwigStatic = {
    "FloatWavWriter",
    swig_FloatWavWriter_Sf_SwigStatic_methods,
    swig_FloatWavWriter_Sf_SwigStatic_attributes,
    swig_FloatWavWriter_Sf_SwigStatic_constants,
    swig_FloatWavWriter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatWavWriter_bases[] = {0};
static const char *swig_FloatWavWriter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatWavWriter = { "FloatWavWriter", "FloatWavWriter", &SWIGTYPE_p_DSP__WavWriterT_float_t,_proxy__wrap_new_FloatWavWriter, swig_delete_FloatWavWriter, swig_FloatWavWriter_methods, swig_FloatWavWriter_attributes, &swig_FloatWavWriter_Sf_SwigStatic, swig_FloatWavWriter_meta, swig_FloatWavWriter_bases, swig_FloatWavWriter_base_names };

static int _wrap_DoubleWavWriter_writer_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f64 > *arg1 = (DSP::WavWriter< f64 > *) 0 ;
  kfr::audio_writer_wav< double > *arg2 = (kfr::audio_writer_wav< double > *) 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f64 >::writer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f64 >::writer",1,"DSP::WavWriter< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::WavWriter< f64 >::writer",2,"kfr::audio_writer_wav< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("DoubleWavWriter_writer_set",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_writer_wavT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DoubleWavWriter_writer_set",2,SWIGTYPE_p_kfr__audio_writer_wavT_double_t);
  }
  
  if (arg1) (arg1)->writer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleWavWriter_writer_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f64 > *arg1 = (DSP::WavWriter< f64 > *) 0 ;
  kfr::audio_writer_wav< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f64 >::writer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f64 >::writer",1,"DSP::WavWriter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("DoubleWavWriter_writer_get",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  result = (kfr::audio_writer_wav< double > *) ((arg1)->writer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_writer_wavT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleWavWriter(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::audio_format *arg2 = 0 ;
  DSP::WavWriter< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f64 >::WavWriter",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavWriter< f64 >::WavWriter",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< f64 >::WavWriter",2,"DSP::audio_format const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_format_and_length,0))){
    SWIG_fail_ptr("new_DoubleWavWriter",2,SWIGTYPE_p_kfr__audio_format_and_length);
  }
  
  result = (DSP::WavWriter< f64 > *)new DSP::WavWriter< f64 >((char const *)arg1,(DSP::audio_format const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavWriterT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleWavWriter_write(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f64 > *arg1 = (DSP::WavWriter< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f64 >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f64 >::write",1,"DSP::WavWriter< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< f64 >::write",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("DoubleWavWriter_write",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleWavWriter_write",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleWavWriter_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< f64 > *arg1 = (DSP::WavWriter< f64 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< f64 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< f64 >::format",1,"DSP::WavWriter< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_double_t,0))){
    SWIG_fail_ptr("DoubleWavWriter_format",1,SWIGTYPE_p_DSP__WavWriterT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleWavWriter(void *obj) {
DSP::WavWriter< f64 > *arg1 = (DSP::WavWriter< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleWavWriter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleWavWriter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleWavWriter_attributes[] = {
    { "writer", _wrap_DoubleWavWriter_writer_get, _wrap_DoubleWavWriter_writer_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleWavWriter_methods[]= {
    { "write", _wrap_DoubleWavWriter_write},
    { "format", _wrap_DoubleWavWriter_format},
    {0,0}
};
static swig_lua_method swig_DoubleWavWriter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleWavWriter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleWavWriter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleWavWriter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleWavWriter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleWavWriter_Sf_SwigStatic = {
    "DoubleWavWriter",
    swig_DoubleWavWriter_Sf_SwigStatic_methods,
    swig_DoubleWavWriter_Sf_SwigStatic_attributes,
    swig_DoubleWavWriter_Sf_SwigStatic_constants,
    swig_DoubleWavWriter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleWavWriter_bases[] = {0};
static const char *swig_DoubleWavWriter_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleWavWriter = { "DoubleWavWriter", "DoubleWavWriter", &SWIGTYPE_p_DSP__WavWriterT_double_t,_proxy__wrap_new_DoubleWavWriter, swig_delete_DoubleWavWriter, swig_DoubleWavWriter_methods, swig_DoubleWavWriter_attributes, &swig_DoubleWavWriter_Sf_SwigStatic, swig_DoubleWavWriter_meta, swig_DoubleWavWriter_bases, swig_DoubleWavWriter_base_names };

static int _wrap_FloatMp3Reader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f32 > *arg1 = (DSP::MP3Reader< f32 > *) 0 ;
  kfr::audio_reader_mp3< float > *arg2 = (kfr::audio_reader_mp3< float > *) 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f32 >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f32 >::reader",1,"DSP::MP3Reader< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::MP3Reader< f32 >::reader",2,"kfr::audio_reader_mp3< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_float_t,0))){
    SWIG_fail_ptr("FloatMp3Reader_reader_set",1,SWIGTYPE_p_DSP__MP3ReaderT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_mp3T_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatMp3Reader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_mp3T_float_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMp3Reader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f32 > *arg1 = (DSP::MP3Reader< f32 > *) 0 ;
  kfr::audio_reader_mp3< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f32 >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f32 >::reader",1,"DSP::MP3Reader< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_float_t,0))){
    SWIG_fail_ptr("FloatMp3Reader_reader_get",1,SWIGTYPE_p_DSP__MP3ReaderT_float_t);
  }
  
  result = (kfr::audio_reader_mp3< float > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_mp3T_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMp3Reader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::MP3Reader< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f32 >::MP3Reader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::MP3Reader< f32 >::MP3Reader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::MP3Reader< f32 > *)new DSP::MP3Reader< f32 >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__MP3ReaderT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMp3Reader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f32 > *arg1 = (DSP::MP3Reader< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< f32 >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f32 >::read",1,"DSP::MP3Reader< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::MP3Reader< f32 >::read",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_float_t,0))){
    SWIG_fail_ptr("FloatMp3Reader_read",1,SWIGTYPE_p_DSP__MP3ReaderT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatMp3Reader_read",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMp3Reader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f32 > *arg1 = (DSP::MP3Reader< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< f32 >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f32 >::tell",1,"DSP::MP3Reader< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_float_t,0))){
    SWIG_fail_ptr("FloatMp3Reader_tell",1,SWIGTYPE_p_DSP__MP3ReaderT_float_t);
  }
  
  result = ((DSP::MP3Reader< f32 > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMp3Reader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f32 > *arg1 = (DSP::MP3Reader< f32 > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::MP3Reader< f32 >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f32 >::seek",1,"DSP::MP3Reader< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::MP3Reader< f32 >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::MP3Reader< f32 >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_float_t,0))){
    SWIG_fail_ptr("FloatMp3Reader_seek",1,SWIGTYPE_p_DSP__MP3ReaderT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("FloatMp3Reader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMp3Reader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f32 > *arg1 = (DSP::MP3Reader< f32 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f32 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f32 >::format",1,"DSP::MP3Reader< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_float_t,0))){
    SWIG_fail_ptr("FloatMp3Reader_format",1,SWIGTYPE_p_DSP__MP3ReaderT_float_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatMp3Reader(void *obj) {
DSP::MP3Reader< f32 > *arg1 = (DSP::MP3Reader< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatMp3Reader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatMp3Reader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatMp3Reader_attributes[] = {
    { "reader", _wrap_FloatMp3Reader_reader_get, _wrap_FloatMp3Reader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_FloatMp3Reader_methods[]= {
    { "read", _wrap_FloatMp3Reader_read},
    { "tell", _wrap_FloatMp3Reader_tell},
    { "seek", _wrap_FloatMp3Reader_seek},
    { "format", _wrap_FloatMp3Reader_format},
    {0,0}
};
static swig_lua_method swig_FloatMp3Reader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatMp3Reader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatMp3Reader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatMp3Reader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatMp3Reader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatMp3Reader_Sf_SwigStatic = {
    "FloatMp3Reader",
    swig_FloatMp3Reader_Sf_SwigStatic_methods,
    swig_FloatMp3Reader_Sf_SwigStatic_attributes,
    swig_FloatMp3Reader_Sf_SwigStatic_constants,
    swig_FloatMp3Reader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatMp3Reader_bases[] = {0};
static const char *swig_FloatMp3Reader_base_names[] = {0};
static swig_lua_class _wrap_class_FloatMp3Reader = { "FloatMp3Reader", "FloatMp3Reader", &SWIGTYPE_p_DSP__MP3ReaderT_float_t,_proxy__wrap_new_FloatMp3Reader, swig_delete_FloatMp3Reader, swig_FloatMp3Reader_methods, swig_FloatMp3Reader_attributes, &swig_FloatMp3Reader_Sf_SwigStatic, swig_FloatMp3Reader_meta, swig_FloatMp3Reader_bases, swig_FloatMp3Reader_base_names };

static int _wrap_DoubleMp3Reader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f64 > *arg1 = (DSP::MP3Reader< f64 > *) 0 ;
  kfr::audio_reader_mp3< double > *arg2 = (kfr::audio_reader_mp3< double > *) 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f64 >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f64 >::reader",1,"DSP::MP3Reader< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::MP3Reader< f64 >::reader",2,"kfr::audio_reader_mp3< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleMp3Reader_reader_set",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_mp3T_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DoubleMp3Reader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_mp3T_double_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMp3Reader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f64 > *arg1 = (DSP::MP3Reader< f64 > *) 0 ;
  kfr::audio_reader_mp3< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f64 >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f64 >::reader",1,"DSP::MP3Reader< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleMp3Reader_reader_get",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  result = (kfr::audio_reader_mp3< double > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_mp3T_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleMp3Reader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::MP3Reader< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f64 >::MP3Reader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::MP3Reader< f64 >::MP3Reader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::MP3Reader< f64 > *)new DSP::MP3Reader< f64 >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__MP3ReaderT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMp3Reader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f64 > *arg1 = (DSP::MP3Reader< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< f64 >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f64 >::read",1,"DSP::MP3Reader< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::MP3Reader< f64 >::read",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleMp3Reader_read",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleMp3Reader_read",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMp3Reader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f64 > *arg1 = (DSP::MP3Reader< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< f64 >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f64 >::tell",1,"DSP::MP3Reader< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleMp3Reader_tell",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  result = ((DSP::MP3Reader< f64 > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMp3Reader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f64 > *arg1 = (DSP::MP3Reader< f64 > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::MP3Reader< f64 >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f64 >::seek",1,"DSP::MP3Reader< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::MP3Reader< f64 >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::MP3Reader< f64 >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleMp3Reader_seek",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("DoubleMp3Reader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleMp3Reader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< f64 > *arg1 = (DSP::MP3Reader< f64 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< f64 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< f64 >::format",1,"DSP::MP3Reader< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleMp3Reader_format",1,SWIGTYPE_p_DSP__MP3ReaderT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleMp3Reader(void *obj) {
DSP::MP3Reader< f64 > *arg1 = (DSP::MP3Reader< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleMp3Reader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleMp3Reader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleMp3Reader_attributes[] = {
    { "reader", _wrap_DoubleMp3Reader_reader_get, _wrap_DoubleMp3Reader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleMp3Reader_methods[]= {
    { "read", _wrap_DoubleMp3Reader_read},
    { "tell", _wrap_DoubleMp3Reader_tell},
    { "seek", _wrap_DoubleMp3Reader_seek},
    { "format", _wrap_DoubleMp3Reader_format},
    {0,0}
};
static swig_lua_method swig_DoubleMp3Reader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleMp3Reader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleMp3Reader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleMp3Reader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleMp3Reader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleMp3Reader_Sf_SwigStatic = {
    "DoubleMp3Reader",
    swig_DoubleMp3Reader_Sf_SwigStatic_methods,
    swig_DoubleMp3Reader_Sf_SwigStatic_attributes,
    swig_DoubleMp3Reader_Sf_SwigStatic_constants,
    swig_DoubleMp3Reader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleMp3Reader_bases[] = {0};
static const char *swig_DoubleMp3Reader_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleMp3Reader = { "DoubleMp3Reader", "DoubleMp3Reader", &SWIGTYPE_p_DSP__MP3ReaderT_double_t,_proxy__wrap_new_DoubleMp3Reader, swig_delete_DoubleMp3Reader, swig_DoubleMp3Reader_methods, swig_DoubleMp3Reader_attributes, &swig_DoubleMp3Reader_Sf_SwigStatic, swig_DoubleMp3Reader_meta, swig_DoubleMp3Reader_bases, swig_DoubleMp3Reader_base_names };

static int _wrap_FloatFlacReader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f32 > *arg1 = (DSP::FlacReader< f32 > *) 0 ;
  kfr::audio_reader_flac< float > *arg2 = (kfr::audio_reader_flac< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f32 >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f32 >::reader",1,"DSP::FlacReader< f32 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FlacReader< f32 >::reader",2,"kfr::audio_reader_flac< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_float_t,0))){
    SWIG_fail_ptr("FloatFlacReader_reader_set",1,SWIGTYPE_p_DSP__FlacReaderT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_flacT_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatFlacReader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_flacT_float_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFlacReader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f32 > *arg1 = (DSP::FlacReader< f32 > *) 0 ;
  kfr::audio_reader_flac< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f32 >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f32 >::reader",1,"DSP::FlacReader< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_float_t,0))){
    SWIG_fail_ptr("FloatFlacReader_reader_get",1,SWIGTYPE_p_DSP__FlacReaderT_float_t);
  }
  
  result = (kfr::audio_reader_flac< float > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_flacT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFlacReader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::FlacReader< f32 > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f32 >::FlacReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::FlacReader< f32 >::FlacReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::FlacReader< f32 > *)new DSP::FlacReader< f32 >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FlacReaderT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFlacReader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f32 > *arg1 = (DSP::FlacReader< f32 > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< f32 >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f32 >::read",1,"DSP::FlacReader< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FlacReader< f32 >::read",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_float_t,0))){
    SWIG_fail_ptr("FloatFlacReader_read",1,SWIGTYPE_p_DSP__FlacReaderT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFlacReader_read",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFlacReader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f32 > *arg1 = (DSP::FlacReader< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< f32 >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f32 >::tell",1,"DSP::FlacReader< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_float_t,0))){
    SWIG_fail_ptr("FloatFlacReader_tell",1,SWIGTYPE_p_DSP__FlacReaderT_float_t);
  }
  
  result = ((DSP::FlacReader< f32 > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFlacReader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f32 > *arg1 = (DSP::FlacReader< f32 > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::FlacReader< f32 >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f32 >::seek",1,"DSP::FlacReader< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FlacReader< f32 >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FlacReader< f32 >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_float_t,0))){
    SWIG_fail_ptr("FloatFlacReader_seek",1,SWIGTYPE_p_DSP__FlacReaderT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("FloatFlacReader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFlacReader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f32 > *arg1 = (DSP::FlacReader< f32 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f32 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f32 >::format",1,"DSP::FlacReader< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_float_t,0))){
    SWIG_fail_ptr("FloatFlacReader_format",1,SWIGTYPE_p_DSP__FlacReaderT_float_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatFlacReader(void *obj) {
DSP::FlacReader< f32 > *arg1 = (DSP::FlacReader< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatFlacReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatFlacReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatFlacReader_attributes[] = {
    { "reader", _wrap_FloatFlacReader_reader_get, _wrap_FloatFlacReader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_FloatFlacReader_methods[]= {
    { "read", _wrap_FloatFlacReader_read},
    { "tell", _wrap_FloatFlacReader_tell},
    { "seek", _wrap_FloatFlacReader_seek},
    { "format", _wrap_FloatFlacReader_format},
    {0,0}
};
static swig_lua_method swig_FloatFlacReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatFlacReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatFlacReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatFlacReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatFlacReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatFlacReader_Sf_SwigStatic = {
    "FloatFlacReader",
    swig_FloatFlacReader_Sf_SwigStatic_methods,
    swig_FloatFlacReader_Sf_SwigStatic_attributes,
    swig_FloatFlacReader_Sf_SwigStatic_constants,
    swig_FloatFlacReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatFlacReader_bases[] = {0};
static const char *swig_FloatFlacReader_base_names[] = {0};
static swig_lua_class _wrap_class_FloatFlacReader = { "FloatFlacReader", "FloatFlacReader", &SWIGTYPE_p_DSP__FlacReaderT_float_t,_proxy__wrap_new_FloatFlacReader, swig_delete_FloatFlacReader, swig_FloatFlacReader_methods, swig_FloatFlacReader_attributes, &swig_FloatFlacReader_Sf_SwigStatic, swig_FloatFlacReader_meta, swig_FloatFlacReader_bases, swig_FloatFlacReader_base_names };

static int _wrap_DoubleFlacReader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f64 > *arg1 = (DSP::FlacReader< f64 > *) 0 ;
  kfr::audio_reader_flac< double > *arg2 = (kfr::audio_reader_flac< double > *) 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f64 >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f64 >::reader",1,"DSP::FlacReader< f64 > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FlacReader< f64 >::reader",2,"kfr::audio_reader_flac< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleFlacReader_reader_set",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_flacT_double_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("DoubleFlacReader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_flacT_double_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleFlacReader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f64 > *arg1 = (DSP::FlacReader< f64 > *) 0 ;
  kfr::audio_reader_flac< double > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f64 >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f64 >::reader",1,"DSP::FlacReader< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleFlacReader_reader_get",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  result = (kfr::audio_reader_flac< double > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_flacT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleFlacReader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::FlacReader< f64 > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f64 >::FlacReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::FlacReader< f64 >::FlacReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::FlacReader< f64 > *)new DSP::FlacReader< f64 >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FlacReaderT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleFlacReader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f64 > *arg1 = (DSP::FlacReader< f64 > *) 0 ;
  DSP::UniVector< double > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< f64 >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f64 >::read",1,"DSP::FlacReader< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FlacReader< f64 >::read",2,"DSP::UniVector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleFlacReader_read",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("DoubleFlacReader_read",2,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleFlacReader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f64 > *arg1 = (DSP::FlacReader< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< f64 >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f64 >::tell",1,"DSP::FlacReader< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleFlacReader_tell",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  result = ((DSP::FlacReader< f64 > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleFlacReader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f64 > *arg1 = (DSP::FlacReader< f64 > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  DSP::seek_origin *argp3 ;
  bool result;
  
  SWIG_check_num_args("DSP::FlacReader< f64 >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f64 >::seek",1,"DSP::FlacReader< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FlacReader< f64 >::seek",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FlacReader< f64 >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleFlacReader_seek",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__seek_origin,0))){
    SWIG_fail_ptr("DoubleFlacReader_seek",3,SWIGTYPE_p_kfr__seek_origin);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleFlacReader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< f64 > *arg1 = (DSP::FlacReader< f64 > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< f64 >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< f64 >::format",1,"DSP::FlacReader< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_double_t,0))){
    SWIG_fail_ptr("DoubleFlacReader_format",1,SWIGTYPE_p_DSP__FlacReaderT_double_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleFlacReader(void *obj) {
DSP::FlacReader< f64 > *arg1 = (DSP::FlacReader< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleFlacReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleFlacReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleFlacReader_attributes[] = {
    { "reader", _wrap_DoubleFlacReader_reader_get, _wrap_DoubleFlacReader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_DoubleFlacReader_methods[]= {
    { "read", _wrap_DoubleFlacReader_read},
    { "tell", _wrap_DoubleFlacReader_tell},
    { "seek", _wrap_DoubleFlacReader_seek},
    { "format", _wrap_DoubleFlacReader_format},
    {0,0}
};
static swig_lua_method swig_DoubleFlacReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleFlacReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleFlacReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleFlacReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleFlacReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleFlacReader_Sf_SwigStatic = {
    "DoubleFlacReader",
    swig_DoubleFlacReader_Sf_SwigStatic_methods,
    swig_DoubleFlacReader_Sf_SwigStatic_attributes,
    swig_DoubleFlacReader_Sf_SwigStatic_constants,
    swig_DoubleFlacReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleFlacReader_bases[] = {0};
static const char *swig_DoubleFlacReader_base_names[] = {0};
static swig_lua_class _wrap_class_DoubleFlacReader = { "DoubleFlacReader", "DoubleFlacReader", &SWIGTYPE_p_DSP__FlacReaderT_double_t,_proxy__wrap_new_DoubleFlacReader, swig_delete_DoubleFlacReader, swig_DoubleFlacReader_methods, swig_DoubleFlacReader_attributes, &swig_DoubleFlacReader_Sf_SwigStatic, swig_DoubleFlacReader_meta, swig_DoubleFlacReader_bases, swig_DoubleFlacReader_base_names };

static int _wrap_randomf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::random< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::random< f32 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR random< f32 >(arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::random< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::random< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::random< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::random< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR random< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_randomf__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_randomf__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'randomf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::random< f32 >(size_t)\n"
    "    DSP::random< f32 >(size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_savef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("DSP::plot_save< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_save< f32 >",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("DSP::plot_save< f32 >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("plot_savef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< f32 >((DSP::UniVector< float > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_savef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("DSP::plot_save< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_save< f32 >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("plot_savef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< f32 >((DSP::UniVector< float > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_savef__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  
  SWIG_check_num_args("DSP::plot_save< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("plot_savef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< f32 >((DSP::UniVector< float > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_savef(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_savef__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_plot_savef__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_plot_savef__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_savef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::plot_save< f32 >(DSP::UniVector< float > const &,std::string const &,std::string const &)\n"
    "    DSP::plot_save< f32 >(DSP::UniVector< float > const &,std::string const &)\n"
    "    DSP::plot_save< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_showf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("DSP::plot_show< f32 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_show< f32 >",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("DSP::plot_show< f32 >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("plot_showf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< f32 >((DSP::UniVector< float > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_showf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("DSP::plot_show< f32 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< f32 >",1,"DSP::UniVector< float > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_show< f32 >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("plot_showf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< f32 >((DSP::UniVector< float > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_showf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  
  SWIG_check_num_args("DSP::plot_show< f32 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< f32 >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("plot_showf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< f32 >((DSP::UniVector< float > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_showf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_showf__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_plot_showf__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_plot_showf__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_showf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::plot_show< f32 >(DSP::UniVector< float > const &,std::string const &,std::string const &)\n"
    "    DSP::plot_show< f32 >(DSP::UniVector< float > const &,std::string const &)\n"
    "    DSP::plot_show< f32 >(DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinewavef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sinewave< f32 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sinewave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sinewave< f32 >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::sinewave< f32 >",4,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< f32 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewavef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sinewave< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sinewave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sinewave< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewavef(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sinewavef__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sinewavef__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinewavef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sinewave< f32 >(size_t,float,float,float)\n"
    "    DSP::sinewave< f32 >(size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_squarewavef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::squarewave< f32 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::squarewave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::squarewave< f32 >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::squarewave< f32 >",4,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< f32 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewavef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::squarewave< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::squarewave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::squarewave< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewavef(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_squarewavef__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_squarewavef__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'squarewavef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::squarewave< f32 >(size_t,float,float,float)\n"
    "    DSP::squarewave< f32 >(size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_trianglewavef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::trianglewave< f32 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::trianglewave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::trianglewave< f32 >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::trianglewave< f32 >",4,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< f32 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewavef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::trianglewave< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::trianglewave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::trianglewave< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewavef(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_trianglewavef__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_trianglewavef__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'trianglewavef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::trianglewave< f32 >(size_t,float,float,float)\n"
    "    DSP::trianglewave< f32 >(size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_sawtoothwavef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< f32 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sawtoothwave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sawtoothwave< f32 >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::sawtoothwave< f32 >",4,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< f32 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwavef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sawtoothwave< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sawtoothwave< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwavef(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sawtoothwavef__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sawtoothwavef__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sawtoothwavef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sawtoothwave< f32 >(size_t,float,float,float)\n"
    "    DSP::sawtoothwave< f32 >(size_t,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_generate_sinef(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::generate_sin< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_sin< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_sin< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_sin< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_sin< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_linearf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::generate_linear< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_linear< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_linear< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_linear< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_linear< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_expf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::generate_exp< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_exp< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_exp< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::generate_exp2< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp2< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_exp2< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_exp2< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp2< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_cossinf(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::generate_cossin< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_cossin< f32 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_cossin< f32 >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_cossin< f32 >",3,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_cossin< f32 >(arg1,arg2,arg3);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::random< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::random< f64 >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR random< f64 >(arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::random< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::random< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::random< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::random< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR random< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomd(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_randomd__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_randomd__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'randomd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::random< f64 >(size_t)\n"
    "    DSP::random< f64 >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_saved__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("DSP::plot_save< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_save< f64 >",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("DSP::plot_save< f64 >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("plot_saved",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< f64 >((DSP::UniVector< double > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_saved__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("DSP::plot_save< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_save< f64 >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("plot_saved",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< f64 >((DSP::UniVector< double > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_saved__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("DSP::plot_save< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_save< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("plot_saved",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_save< f64 >((DSP::UniVector< double > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_saved(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_saved__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_plot_saved__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_plot_saved__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_saved'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::plot_save< f64 >(DSP::UniVector< double > const &,std::string const &,std::string const &)\n"
    "    DSP::plot_save< f64 >(DSP::UniVector< double > const &,std::string const &)\n"
    "    DSP::plot_save< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_showd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("DSP::plot_show< f64 >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_show< f64 >",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("DSP::plot_show< f64 >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("plot_showd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< f64 >((DSP::UniVector< double > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_showd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("DSP::plot_show< f64 >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< f64 >",1,"DSP::UniVector< double > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DSP::plot_show< f64 >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("plot_showd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< f64 >((DSP::UniVector< double > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_showd__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< double > *arg1 = 0 ;
  
  SWIG_check_num_args("DSP::plot_show< f64 >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::plot_show< f64 >",1,"DSP::UniVector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("plot_showd",1,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  DSP::SWIGTEMPLATEDISAMBIGUATOR plot_show< f64 >((DSP::UniVector< double > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_showd(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_showd__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_plot_showd__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_plot_showd__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_showd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::plot_show< f64 >(DSP::UniVector< double > const &,std::string const &,std::string const &)\n"
    "    DSP::plot_show< f64 >(DSP::UniVector< double > const &,std::string const &)\n"
    "    DSP::plot_show< f64 >(DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinewaved__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sinewave< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sinewave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sinewave< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::sinewave< f64 >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< f64 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewaved__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sinewave< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sinewave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sinewave< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewaved(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sinewaved__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sinewaved__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinewaved'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sinewave< f64 >(size_t,double,double,double)\n"
    "    DSP::sinewave< f64 >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_squarewaved__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::squarewave< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::squarewave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::squarewave< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::squarewave< f64 >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< f64 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewaved__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::squarewave< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::squarewave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::squarewave< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewaved(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_squarewaved__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_squarewaved__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'squarewaved'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::squarewave< f64 >(size_t,double,double,double)\n"
    "    DSP::squarewave< f64 >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_trianglewaved__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::trianglewave< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::trianglewave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::trianglewave< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::trianglewave< f64 >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< f64 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewaved__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::trianglewave< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::trianglewave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::trianglewave< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewaved(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_trianglewaved__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_trianglewaved__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'trianglewaved'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::trianglewave< f64 >(size_t,double,double,double)\n"
    "    DSP::trianglewave< f64 >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_sawtoothwaved__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sawtoothwave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sawtoothwave< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::sawtoothwave< f64 >",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< f64 >(arg1,arg2,arg3,arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwaved__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::sawtoothwave< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::sawtoothwave< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwaved(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sawtoothwaved__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_sawtoothwaved__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sawtoothwaved'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sawtoothwave< f64 >(size_t,double,double,double)\n"
    "    DSP::sawtoothwave< f64 >(size_t,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_generate_sined(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::generate_sin< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_sin< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_sin< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_sin< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_sin< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_lineard(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::generate_linear< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_linear< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_linear< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_linear< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_linear< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_expd(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::generate_exp< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_exp< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_exp< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::generate_exp2< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp2< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_exp2< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_exp2< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp2< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_cossind(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::generate_cossin< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_cossin< f64 >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::generate_cossin< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::generate_cossin< f64 >",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_cossin< f64 >(arg1,arg2,arg3);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_autocorrelatef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::autocorrelate< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::autocorrelate< float >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("autocorrelatef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR autocorrelate< float >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_correlatef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::correlate< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::correlate< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::correlate< float >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("correlatef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("correlatef",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR correlate< float >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatDCTPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DCTPlan< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::DCTPlan< float >::DCTPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DCTPlan< float >::DCTPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DCTPlan< float > *)new DSP::DCTPlan< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DCTPlanT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDCTPlan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DCTPlan< float > *arg1 = (DSP::DCTPlan< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::DCTPlan< float >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DCTPlan< float >::execute",1,"DSP::DCTPlan< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DCTPlan< float >::execute",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DCTPlan< float >::execute",3,"DSP::UniVector< float > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::DCTPlan< float >::execute",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DCTPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDCTPlan_execute",1,SWIGTYPE_p_DSP__DCTPlanT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatDCTPlan_execute",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatDCTPlan_execute",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->execute(*arg2,(DSP::UniVector< float > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDCTPlan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DCTPlan< float > *arg1 = (DSP::DCTPlan< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DCTPlan< float >::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DCTPlan< float >::execute",1,"DSP::DCTPlan< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DCTPlan< float >::execute",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DCTPlan< float >::execute",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DCTPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDCTPlan_execute",1,SWIGTYPE_p_DSP__DCTPlanT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatDCTPlan_execute",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatDCTPlan_execute",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->execute(*arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDCTPlan_execute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DCTPlanT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatDCTPlan_execute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DCTPlanT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatDCTPlan_execute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatDCTPlan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::DCTPlan< float >::execute(DSP::UniVector< float > &,DSP::UniVector< float > const &,bool)\n"
    "    DSP::DCTPlan< float >::execute(DSP::UniVector< float > &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatDCTPlan(void *obj) {
DSP::DCTPlan< float > *arg1 = (DSP::DCTPlan< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatDCTPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatDCTPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatDCTPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatDCTPlan_methods[]= {
    { "execute", _wrap_FloatDCTPlan_execute},
    {0,0}
};
static swig_lua_method swig_FloatDCTPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatDCTPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatDCTPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatDCTPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatDCTPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatDCTPlan_Sf_SwigStatic = {
    "FloatDCTPlan",
    swig_FloatDCTPlan_Sf_SwigStatic_methods,
    swig_FloatDCTPlan_Sf_SwigStatic_attributes,
    swig_FloatDCTPlan_Sf_SwigStatic_constants,
    swig_FloatDCTPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatDCTPlan_bases[] = {0};
static const char *swig_FloatDCTPlan_base_names[] = {0};
static swig_lua_class _wrap_class_FloatDCTPlan = { "FloatDCTPlan", "FloatDCTPlan", &SWIGTYPE_p_DSP__DCTPlanT_float_t,_proxy__wrap_new_FloatDCTPlan, swig_delete_FloatDCTPlan, swig_FloatDCTPlan_methods, swig_FloatDCTPlan_attributes, &swig_FloatDCTPlan_Sf_SwigStatic, swig_FloatDCTPlan_meta, swig_FloatDCTPlan_bases, swig_FloatDCTPlan_base_names };

static int _wrap_new_FloatDFTPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DFTPlan< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< float >::DFTPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DFTPlan< float >::DFTPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DFTPlan< float > *)new DSP::DFTPlan< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DFTPlanT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDFTPlan_dump(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< float > *arg1 = (DSP::DFTPlan< float > *) 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< float >::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< float >::dump",1,"DSP::DFTPlan< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDFTPlan_dump",1,SWIGTYPE_p_DSP__DFTPlanT_float_t);
  }
  
  ((DSP::DFTPlan< float > const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDFTPlan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< float > *arg1 = (DSP::DFTPlan< float > *) 0 ;
  DSP::UniVector< kfr::complex< float > > *arg2 = 0 ;
  DSP::UniVector< kfr::complex< float > > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::DFTPlan< float >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< float >::execute",1,"DSP::DFTPlan< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTPlan< float >::execute",2,"DSP::UniVector< kfr::complex< float > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTPlan< float >::execute",3,"DSP::UniVector< kfr::complex< float > > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::DFTPlan< float >::execute",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDFTPlan_execute",1,SWIGTYPE_p_DSP__DFTPlanT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("FloatDFTPlan_execute",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("FloatDFTPlan_execute",3,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->execute(*arg2,(DSP::UniVector< kfr::complex< float > > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDFTPlan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< float > *arg1 = (DSP::DFTPlan< float > *) 0 ;
  DSP::UniVector< kfr::complex< float > > *arg2 = 0 ;
  DSP::UniVector< kfr::complex< float > > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< float >::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< float >::execute",1,"DSP::DFTPlan< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTPlan< float >::execute",2,"DSP::UniVector< kfr::complex< float > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTPlan< float >::execute",3,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDFTPlan_execute",1,SWIGTYPE_p_DSP__DFTPlanT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("FloatDFTPlan_execute",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("FloatDFTPlan_execute",3,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  (arg1)->execute(*arg2,(DSP::UniVector< kfr::complex< float > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDFTPlan_execute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DFTPlanT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatDFTPlan_execute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DFTPlanT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatDFTPlan_execute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatDFTPlan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::DFTPlan< float >::execute(DSP::UniVector< kfr::complex< float > > &,DSP::UniVector< kfr::complex< float > > const &,bool)\n"
    "    DSP::DFTPlan< float >::execute(DSP::UniVector< kfr::complex< float > > &,DSP::UniVector< kfr::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatDFTPlan(void *obj) {
DSP::DFTPlan< float > *arg1 = (DSP::DFTPlan< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatDFTPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatDFTPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatDFTPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatDFTPlan_methods[]= {
    { "dump", _wrap_FloatDFTPlan_dump},
    { "execute", _wrap_FloatDFTPlan_execute},
    {0,0}
};
static swig_lua_method swig_FloatDFTPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatDFTPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatDFTPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatDFTPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatDFTPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatDFTPlan_Sf_SwigStatic = {
    "FloatDFTPlan",
    swig_FloatDFTPlan_Sf_SwigStatic_methods,
    swig_FloatDFTPlan_Sf_SwigStatic_attributes,
    swig_FloatDFTPlan_Sf_SwigStatic_constants,
    swig_FloatDFTPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatDFTPlan_bases[] = {0};
static const char *swig_FloatDFTPlan_base_names[] = {0};
static swig_lua_class _wrap_class_FloatDFTPlan = { "FloatDFTPlan", "FloatDFTPlan", &SWIGTYPE_p_DSP__DFTPlanT_float_t,_proxy__wrap_new_FloatDFTPlan, swig_delete_FloatDFTPlan, swig_FloatDFTPlan_methods, swig_FloatDFTPlan_attributes, &swig_FloatDFTPlan_Sf_SwigStatic, swig_FloatDFTPlan_meta, swig_FloatDFTPlan_bases, swig_FloatDFTPlan_base_names };

static int _wrap_new_FloatDFTRealPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DFTRealPlan< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< float >::DFTRealPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< float >::DFTRealPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DFTRealPlan< float > *)new DSP::DFTRealPlan< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DFTRealPlanT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDFTRealPlan_dump(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< float > *arg1 = (DSP::DFTRealPlan< float > *) 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< float >::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< float >::dump",1,"DSP::DFTRealPlan< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDFTRealPlan_dump",1,SWIGTYPE_p_DSP__DFTRealPlanT_float_t);
  }
  
  ((DSP::DFTRealPlan< float > const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDFTRealPlan_execute_forward(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< float > *arg1 = (DSP::DFTRealPlan< float > *) 0 ;
  DSP::UniVector< kfr::complex< float > > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< float >::execute_forward",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< float >::execute_forward",1,"DSP::DFTRealPlan< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTRealPlan< float >::execute_forward",2,"DSP::UniVector< kfr::complex< float > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTRealPlan< float >::execute_forward",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDFTRealPlan_execute_forward",1,SWIGTYPE_p_DSP__DFTRealPlanT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("FloatDFTRealPlan_execute_forward",2,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatDFTRealPlan_execute_forward",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->execute_forward(*arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatDFTRealPlan_execute_reverse(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< float > *arg1 = (DSP::DFTRealPlan< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< kfr::complex< float > > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< float >::execute_reverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< float >::execute_reverse",1,"DSP::DFTRealPlan< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTRealPlan< float >::execute_reverse",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTRealPlan< float >::execute_reverse",3,"DSP::UniVector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_float_t,0))){
    SWIG_fail_ptr("FloatDFTRealPlan_execute_reverse",1,SWIGTYPE_p_DSP__DFTRealPlanT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatDFTRealPlan_execute_reverse",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("FloatDFTRealPlan_execute_reverse",3,SWIGTYPE_p_DSP__UniVectorT_kfr__complexT_float_t_t);
  }
  
  (arg1)->execute_reverse(*arg2,(DSP::UniVector< kfr::complex< float > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatDFTRealPlan(void *obj) {
DSP::DFTRealPlan< float > *arg1 = (DSP::DFTRealPlan< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatDFTRealPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatDFTRealPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatDFTRealPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatDFTRealPlan_methods[]= {
    { "dump", _wrap_FloatDFTRealPlan_dump},
    { "execute_forward", _wrap_FloatDFTRealPlan_execute_forward},
    { "execute_reverse", _wrap_FloatDFTRealPlan_execute_reverse},
    {0,0}
};
static swig_lua_method swig_FloatDFTRealPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatDFTRealPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatDFTRealPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatDFTRealPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatDFTRealPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatDFTRealPlan_Sf_SwigStatic = {
    "FloatDFTRealPlan",
    swig_FloatDFTRealPlan_Sf_SwigStatic_methods,
    swig_FloatDFTRealPlan_Sf_SwigStatic_attributes,
    swig_FloatDFTRealPlan_Sf_SwigStatic_constants,
    swig_FloatDFTRealPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatDFTRealPlan_bases[] = {0};
static const char *swig_FloatDFTRealPlan_base_names[] = {0};
static swig_lua_class _wrap_class_FloatDFTRealPlan = { "FloatDFTRealPlan", "FloatDFTRealPlan", &SWIGTYPE_p_DSP__DFTRealPlanT_float_t,_proxy__wrap_new_FloatDFTRealPlan, swig_delete_FloatDFTRealPlan, swig_FloatDFTRealPlan_methods, swig_FloatDFTRealPlan_attributes, &swig_FloatDFTRealPlan_Sf_SwigStatic, swig_FloatDFTRealPlan_meta, swig_FloatDFTRealPlan_bases, swig_FloatDFTRealPlan_base_names };

static int _wrap_resamplef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::sample_rate_conversion_quality arg1 ;
  DSP::UniVector< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  DSP::sample_rate_conversion_quality *argp1 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::resample< float >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::resample< float >",1,"DSP::sample_rate_conversion_quality");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::resample< float >",2,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::resample< float >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::resample< float >",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_kfr__sample_rate_conversion_quality,0))){
    SWIG_fail_ptr("resamplef",1,SWIGTYPE_p_kfr__sample_rate_conversion_quality);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("resamplef",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR resample< float >(arg1,(DSP::UniVector< float > const &)*arg2,arg3,arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convert_samplef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::convert_sample< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::convert_sample< float >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("convert_samplef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR convert_sample< float >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_amp_to_dBf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::amp_to_dB< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::amp_to_dB< float >",1,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("amp_to_dBf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR amp_to_dB< float >((DSP::UniVector< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::FIRFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::FIRFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::FIRFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::FIRFilter< float > *)new DSP::FIRFilter< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_bandpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::bandpass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",4,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandpass",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandpass(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_bandpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< float >::bandpass",4,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandpass",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  (arg1)->bandpass(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_bandpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatFIRFilter_bandpass__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatFIRFilter_bandpass__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRFilter_bandpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< float >::bandpass(float,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRFilter< float >::bandpass(float,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRFilter_bandstop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::bandstop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",4,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandstop",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandstop(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_bandstop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< float >::bandstop",4,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandstop",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  (arg1)->bandstop(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_bandstop(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatFIRFilter_bandstop__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatFIRFilter_bandstop__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRFilter_bandstop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< float >::bandstop(float,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRFilter< float >::bandstop(float,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRFilter_highpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::highpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::highpass",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::highpass",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::highpass",3,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRFilter< float >::highpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_highpass",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->highpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_highpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::highpass",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::highpass",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::highpass",3,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_highpass",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  (arg1)->highpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_highpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatFIRFilter_highpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatFIRFilter_highpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRFilter_highpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< float >::highpass(float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRFilter< float >::highpass(float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRFilter_lowpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::lowpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::lowpass",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::lowpass",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::lowpass",3,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRFilter< float >::lowpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_lowpass",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->lowpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_lowpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::lowpass",1,"DSP::FIRFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::lowpass",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::lowpass",3,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_lowpass",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  (arg1)->lowpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_lowpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatFIRFilter_lowpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatFIRFilter_lowpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRFilter_lowpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< float >::lowpass(float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRFilter< float >::lowpass(float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::apply",1,"DSP::FIRFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_apply",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::apply",1,"DSP::FIRFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< float >::apply",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< float >::apply",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_apply",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatFIRFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatFIRFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::FIRFilter< float >::apply(DSP::UniVector< float > &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< float >::reset",1,"DSP::FIRFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRFilter_reset",1,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatFIRFilter(void *obj) {
DSP::FIRFilter< float > *arg1 = (DSP::FIRFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatFIRFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatFIRFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatFIRFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatFIRFilter_methods[]= {
    { "bandpass", _wrap_FloatFIRFilter_bandpass},
    { "bandstop", _wrap_FloatFIRFilter_bandstop},
    { "highpass", _wrap_FloatFIRFilter_highpass},
    { "lowpass", _wrap_FloatFIRFilter_lowpass},
    { "apply", _wrap_FloatFIRFilter_apply},
    { "reset", _wrap_FloatFIRFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatFIRFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatFIRFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatFIRFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatFIRFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatFIRFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatFIRFilter_Sf_SwigStatic = {
    "FloatFIRFilter",
    swig_FloatFIRFilter_Sf_SwigStatic_methods,
    swig_FloatFIRFilter_Sf_SwigStatic_attributes,
    swig_FloatFIRFilter_Sf_SwigStatic_constants,
    swig_FloatFIRFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatFIRFilter_bases[] = {0};
static const char *swig_FloatFIRFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatFIRFilter = { "FloatFIRFilter", "FloatFIRFilter", &SWIGTYPE_p_DSP__FIRFilterT_float_t,_proxy__wrap_new_FloatFIRFilter, swig_delete_FloatFIRFilter, swig_FloatFIRFilter_methods, swig_FloatFIRFilter_attributes, &swig_FloatFIRFilter_Sf_SwigStatic, swig_FloatFIRFilter_meta, swig_FloatFIRFilter_bases, swig_FloatFIRFilter_base_names };

static int _wrap_FloatFIRBandpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< float > *arg1 = (DSP::FIRBandpassFilter< float > *) 0 ;
  DSP::FIRFilter< float > *arg2 = (DSP::FIRFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::filter",1,"DSP::FIRBandpassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::filter",2,"DSP::FIRFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_filter_set",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRBandpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< float > *arg1 = (DSP::FIRBandpassFilter< float > *) 0 ;
  DSP::FIRFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::filter",1,"DSP::FIRBandpassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_filter_get",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t);
  }
  
  result = (DSP::FIRFilter< float > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRBandpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  bool arg5 ;
  DSP::FIRBandpassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",4,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRBandpassFilter",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (DSP::FIRBandpassFilter< float > *)new DSP::FIRBandpassFilter< float >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRBandpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  DSP::FIRBandpassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::FIRBandpassFilter",4,"kfr::expression_pointer< float > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRBandpassFilter",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = (DSP::FIRBandpassFilter< float > *)new DSP::FIRBandpassFilter< float >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRBandpassFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_FloatFIRBandpassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FloatFIRBandpassFilter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatFIRBandpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandpassFilter< float >::FIRBandpassFilter(size_t,float,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRBandpassFilter< float >::FIRBandpassFilter(size_t,float,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRBandpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< float > *arg1 = (DSP::FIRBandpassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::apply",1,"DSP::FIRBandpassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_apply",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRBandpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< float > *arg1 = (DSP::FIRBandpassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::apply",1,"DSP::FIRBandpassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::apply",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::apply",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_apply",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRBandpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatFIRBandpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatFIRBandpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRBandpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandpassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::FIRBandpassFilter< float >::apply(DSP::UniVector< float > &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRBandpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< float > *arg1 = (DSP::FIRBandpassFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< float >::reset",1,"DSP::FIRBandpassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandpassFilter_reset",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatFIRBandpassFilter(void *obj) {
DSP::FIRBandpassFilter< float > *arg1 = (DSP::FIRBandpassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatFIRBandpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatFIRBandpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatFIRBandpassFilter_attributes[] = {
    { "filter", _wrap_FloatFIRBandpassFilter_filter_get, _wrap_FloatFIRBandpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatFIRBandpassFilter_methods[]= {
    { "apply", _wrap_FloatFIRBandpassFilter_apply},
    { "reset", _wrap_FloatFIRBandpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatFIRBandpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatFIRBandpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatFIRBandpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatFIRBandpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatFIRBandpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatFIRBandpassFilter_Sf_SwigStatic = {
    "FloatFIRBandpassFilter",
    swig_FloatFIRBandpassFilter_Sf_SwigStatic_methods,
    swig_FloatFIRBandpassFilter_Sf_SwigStatic_attributes,
    swig_FloatFIRBandpassFilter_Sf_SwigStatic_constants,
    swig_FloatFIRBandpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatFIRBandpassFilter_bases[] = {0};
static const char *swig_FloatFIRBandpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatFIRBandpassFilter = { "FloatFIRBandpassFilter", "FloatFIRBandpassFilter", &SWIGTYPE_p_DSP__FIRBandpassFilterT_float_t,_proxy__wrap_new_FloatFIRBandpassFilter, swig_delete_FloatFIRBandpassFilter, swig_FloatFIRBandpassFilter_methods, swig_FloatFIRBandpassFilter_attributes, &swig_FloatFIRBandpassFilter_Sf_SwigStatic, swig_FloatFIRBandpassFilter_meta, swig_FloatFIRBandpassFilter_bases, swig_FloatFIRBandpassFilter_base_names };

static int _wrap_FloatFIRLowpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< float > *arg1 = (DSP::FIRLowpassFilter< float > *) 0 ;
  DSP::FIRFilter< float > *arg2 = (DSP::FIRFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::filter",1,"DSP::FIRLowpassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::filter",2,"DSP::FIRFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_filter_set",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRLowpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< float > *arg1 = (DSP::FIRLowpassFilter< float > *) 0 ;
  DSP::FIRFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::filter",1,"DSP::FIRLowpassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_filter_get",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t);
  }
  
  result = (DSP::FIRFilter< float > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRLowpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  bool arg4 ;
  DSP::FIRLowpassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",3,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRLowpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (DSP::FIRLowpassFilter< float > *)new DSP::FIRLowpassFilter< float >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRLowpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  DSP::FIRLowpassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::FIRLowpassFilter",3,"kfr::expression_pointer< float > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRLowpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = (DSP::FIRLowpassFilter< float > *)new DSP::FIRLowpassFilter< float >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRLowpassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_FloatFIRLowpassFilter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FloatFIRLowpassFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatFIRLowpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRLowpassFilter< float >::FIRLowpassFilter(size_t,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRLowpassFilter< float >::FIRLowpassFilter(size_t,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRLowpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< float > *arg1 = (DSP::FIRLowpassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::apply",1,"DSP::FIRLowpassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_apply",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRLowpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< float > *arg1 = (DSP::FIRLowpassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::apply",1,"DSP::FIRLowpassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::apply",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::apply",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_apply",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRLowpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatFIRLowpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatFIRLowpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRLowpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRLowpassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::FIRLowpassFilter< float >::apply(DSP::UniVector< float > &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRLowpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< float > *arg1 = (DSP::FIRLowpassFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< float >::reset",1,"DSP::FIRLowpassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRLowpassFilter_reset",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatFIRLowpassFilter(void *obj) {
DSP::FIRLowpassFilter< float > *arg1 = (DSP::FIRLowpassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatFIRLowpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatFIRLowpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatFIRLowpassFilter_attributes[] = {
    { "filter", _wrap_FloatFIRLowpassFilter_filter_get, _wrap_FloatFIRLowpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatFIRLowpassFilter_methods[]= {
    { "apply", _wrap_FloatFIRLowpassFilter_apply},
    { "reset", _wrap_FloatFIRLowpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatFIRLowpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatFIRLowpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatFIRLowpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatFIRLowpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatFIRLowpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatFIRLowpassFilter_Sf_SwigStatic = {
    "FloatFIRLowpassFilter",
    swig_FloatFIRLowpassFilter_Sf_SwigStatic_methods,
    swig_FloatFIRLowpassFilter_Sf_SwigStatic_attributes,
    swig_FloatFIRLowpassFilter_Sf_SwigStatic_constants,
    swig_FloatFIRLowpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatFIRLowpassFilter_bases[] = {0};
static const char *swig_FloatFIRLowpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatFIRLowpassFilter = { "FloatFIRLowpassFilter", "FloatFIRLowpassFilter", &SWIGTYPE_p_DSP__FIRLowpassFilterT_float_t,_proxy__wrap_new_FloatFIRLowpassFilter, swig_delete_FloatFIRLowpassFilter, swig_FloatFIRLowpassFilter_methods, swig_FloatFIRLowpassFilter_attributes, &swig_FloatFIRLowpassFilter_Sf_SwigStatic, swig_FloatFIRLowpassFilter_meta, swig_FloatFIRLowpassFilter_bases, swig_FloatFIRLowpassFilter_base_names };

static int _wrap_FloatFIRHighpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< float > *arg1 = (DSP::FIRHighpassFilter< float > *) 0 ;
  DSP::FIRFilter< float > *arg2 = (DSP::FIRFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::filter",1,"DSP::FIRHighpassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::filter",2,"DSP::FIRFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_filter_set",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRHighpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< float > *arg1 = (DSP::FIRHighpassFilter< float > *) 0 ;
  DSP::FIRFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::filter",1,"DSP::FIRHighpassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_filter_get",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t);
  }
  
  result = (DSP::FIRFilter< float > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRHighpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  bool arg4 ;
  DSP::FIRHighpassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",3,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRHighpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (DSP::FIRHighpassFilter< float > *)new DSP::FIRHighpassFilter< float >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRHighpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  kfr::expression_pointer< float > *arg3 = 0 ;
  DSP::FIRHighpassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::FIRHighpassFilter",3,"kfr::expression_pointer< float > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRHighpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = (DSP::FIRHighpassFilter< float > *)new DSP::FIRHighpassFilter< float >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRHighpassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_FloatFIRHighpassFilter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FloatFIRHighpassFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatFIRHighpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRHighpassFilter< float >::FIRHighpassFilter(size_t,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRHighpassFilter< float >::FIRHighpassFilter(size_t,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRHighpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< float > *arg1 = (DSP::FIRHighpassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::apply",1,"DSP::FIRHighpassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_apply",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRHighpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< float > *arg1 = (DSP::FIRHighpassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::apply",1,"DSP::FIRHighpassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::apply",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::apply",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_apply",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRHighpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatFIRHighpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatFIRHighpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRHighpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRHighpassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::FIRHighpassFilter< float >::apply(DSP::UniVector< float > &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRHighpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< float > *arg1 = (DSP::FIRHighpassFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< float >::reset",1,"DSP::FIRHighpassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRHighpassFilter_reset",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatFIRHighpassFilter(void *obj) {
DSP::FIRHighpassFilter< float > *arg1 = (DSP::FIRHighpassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatFIRHighpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatFIRHighpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatFIRHighpassFilter_attributes[] = {
    { "filter", _wrap_FloatFIRHighpassFilter_filter_get, _wrap_FloatFIRHighpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatFIRHighpassFilter_methods[]= {
    { "apply", _wrap_FloatFIRHighpassFilter_apply},
    { "reset", _wrap_FloatFIRHighpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatFIRHighpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatFIRHighpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatFIRHighpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatFIRHighpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatFIRHighpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatFIRHighpassFilter_Sf_SwigStatic = {
    "FloatFIRHighpassFilter",
    swig_FloatFIRHighpassFilter_Sf_SwigStatic_methods,
    swig_FloatFIRHighpassFilter_Sf_SwigStatic_attributes,
    swig_FloatFIRHighpassFilter_Sf_SwigStatic_constants,
    swig_FloatFIRHighpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatFIRHighpassFilter_bases[] = {0};
static const char *swig_FloatFIRHighpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatFIRHighpassFilter = { "FloatFIRHighpassFilter", "FloatFIRHighpassFilter", &SWIGTYPE_p_DSP__FIRHighpassFilterT_float_t,_proxy__wrap_new_FloatFIRHighpassFilter, swig_delete_FloatFIRHighpassFilter, swig_FloatFIRHighpassFilter_methods, swig_FloatFIRHighpassFilter_attributes, &swig_FloatFIRHighpassFilter_Sf_SwigStatic, swig_FloatFIRHighpassFilter_meta, swig_FloatFIRHighpassFilter_bases, swig_FloatFIRHighpassFilter_base_names };

static int _wrap_FloatFIRBandstopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< float > *arg1 = (DSP::FIRBandstopFilter< float > *) 0 ;
  DSP::FIRFilter< float > *arg2 = (DSP::FIRFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::filter",1,"DSP::FIRBandstopFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::filter",2,"DSP::FIRFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_filter_set",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_float_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRBandstopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< float > *arg1 = (DSP::FIRBandstopFilter< float > *) 0 ;
  DSP::FIRFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::filter",1,"DSP::FIRBandstopFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_filter_get",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t);
  }
  
  result = (DSP::FIRFilter< float > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRBandstopFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  bool arg5 ;
  DSP::FIRBandstopFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",4,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRBandstopFilter",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (DSP::FIRBandstopFilter< float > *)new DSP::FIRBandstopFilter< float >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRBandstopFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  DSP::FIRBandstopFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::FIRBandstopFilter",4,"kfr::expression_pointer< float > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("new_FloatFIRBandstopFilter",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = (DSP::FIRBandstopFilter< float > *)new DSP::FIRBandstopFilter< float >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatFIRBandstopFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_FloatFIRBandstopFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FloatFIRBandstopFilter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatFIRBandstopFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandstopFilter< float >::FIRBandstopFilter(size_t,float,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::FIRBandstopFilter< float >::FIRBandstopFilter(size_t,float,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRBandstopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< float > *arg1 = (DSP::FIRBandstopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::apply",1,"DSP::FIRBandstopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_apply",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRBandstopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< float > *arg1 = (DSP::FIRBandstopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::apply",1,"DSP::FIRBandstopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::apply",2,"DSP::UniVector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::apply",3,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_apply",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2,(DSP::UniVector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatFIRBandstopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatFIRBandstopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatFIRBandstopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatFIRBandstopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandstopFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::FIRBandstopFilter< float >::apply(DSP::UniVector< float > &,DSP::UniVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatFIRBandstopFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< float > *arg1 = (DSP::FIRBandstopFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< float >::reset",1,"DSP::FIRBandstopFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatFIRBandstopFilter_reset",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatFIRBandstopFilter(void *obj) {
DSP::FIRBandstopFilter< float > *arg1 = (DSP::FIRBandstopFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatFIRBandstopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatFIRBandstopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatFIRBandstopFilter_attributes[] = {
    { "filter", _wrap_FloatFIRBandstopFilter_filter_get, _wrap_FloatFIRBandstopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatFIRBandstopFilter_methods[]= {
    { "apply", _wrap_FloatFIRBandstopFilter_apply},
    { "reset", _wrap_FloatFIRBandstopFilter_reset},
    {0,0}
};
static swig_lua_method swig_FloatFIRBandstopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatFIRBandstopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatFIRBandstopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatFIRBandstopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatFIRBandstopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatFIRBandstopFilter_Sf_SwigStatic = {
    "FloatFIRBandstopFilter",
    swig_FloatFIRBandstopFilter_Sf_SwigStatic_methods,
    swig_FloatFIRBandstopFilter_Sf_SwigStatic_attributes,
    swig_FloatFIRBandstopFilter_Sf_SwigStatic_constants,
    swig_FloatFIRBandstopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatFIRBandstopFilter_bases[] = {0};
static const char *swig_FloatFIRBandstopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatFIRBandstopFilter = { "FloatFIRBandstopFilter", "FloatFIRBandstopFilter", &SWIGTYPE_p_DSP__FIRBandstopFilterT_float_t,_proxy__wrap_new_FloatFIRBandstopFilter, swig_delete_FloatFIRBandstopFilter, swig_FloatFIRBandstopFilter_methods, swig_FloatFIRBandstopFilter_attributes, &swig_FloatFIRBandstopFilter_Sf_SwigStatic, swig_FloatFIRBandstopFilter_meta, swig_FloatFIRBandstopFilter_bases, swig_FloatFIRBandstopFilter_base_names };

static int _wrap_fir_lowpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  bool arg5 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_lowpass< float >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_lowpass< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_lowpass< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_lowpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_lowpass< float >",4,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::fir_lowpass< float >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_lowpassf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_lowpassf",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_lowpass< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,*arg4,arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_lowpass< float >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_lowpass< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_lowpass< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_lowpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_lowpass< float >",4,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_lowpassf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_lowpassf",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_lowpass< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,*arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_lowpassf__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_lowpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_lowpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_lowpass< float >(DSP::UniVector< float > const &,size_t,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::fir_lowpass< float >(DSP::UniVector< float > const &,size_t,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_highpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  bool arg5 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_highpass< float >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_highpass< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_highpass< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_highpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_highpass< float >",4,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::fir_highpass< float >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_highpassf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_highpassf",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_highpass< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,*arg4,arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  kfr::expression_pointer< float > *arg4 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_highpass< float >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_highpass< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_highpass< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_highpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_highpass< float >",4,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_highpassf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_highpassf",4,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_highpass< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,*arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_highpassf__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_highpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_highpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_highpass< float >(DSP::UniVector< float > const &,size_t,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::fir_highpass< float >(DSP::UniVector< float > const &,size_t,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  kfr::expression_pointer< float > *arg5 = 0 ;
  bool arg6 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_bandpass< float >",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandpass< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandpass< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandpass< float >",5,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("DSP::fir_bandpass< float >",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_bandpassf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_bandpassf",5,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandpass< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  kfr::expression_pointer< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_bandpass< float >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandpass< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandpass< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandpass< float >",5,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_bandpassf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_bandpassf",5,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandpass< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,arg4,*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpassf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_fir_bandpassf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_fir_bandpassf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_bandpass< float >(DSP::UniVector< float > const &,size_t,float,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::fir_bandpass< float >(DSP::UniVector< float > const &,size_t,float,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandstopf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  kfr::expression_pointer< float > *arg5 = 0 ;
  bool arg6 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_bandstop< float >",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandstop< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandstop< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandstop< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandstop< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandstop< float >",5,"kfr::expression_pointer< float > &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("DSP::fir_bandstop< float >",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_bandstopf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_bandstopf",5,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandstop< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstopf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  float arg4 ;
  kfr::expression_pointer< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::fir_bandstop< float >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandstop< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandstop< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::fir_bandstop< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::fir_bandstop< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandstop< float >",5,"kfr::expression_pointer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("fir_bandstopf",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_float_t,0))){
    SWIG_fail_ptr("fir_bandstopf",5,SWIGTYPE_p_kfr__expression_pointerT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandstop< float >((DSP::UniVector< float > const &)*arg1,arg2,arg3,arg4,*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstopf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_fir_bandstopf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_fir_bandstopf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandstopf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_bandstop< float >(DSP::UniVector< float > const &,size_t,float,float,kfr::expression_pointer< float > &,bool)\n"
    "    DSP::fir_bandstop< float >(DSP::UniVector< float > const &,size_t,float,float,kfr::expression_pointer< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatBesselFilter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *arg2 = (std::vector< kfr::biquad_params< float > > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::bqs",1,"DSP::BesselFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::bqs",2,"std::vector< kfr::biquad_params< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_bqs_set",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::bqs",1,"DSP::BesselFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_bqs_get",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  result = (std::vector< kfr::biquad_params< float > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::filter",1,"DSP::BesselFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_filter_set",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::filter",1,"DSP::BesselFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_filter_get",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::order",1,"DSP::BesselFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_order_set",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::order",1,"DSP::BesselFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_order_get",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBesselFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::BesselFilter",0,0)
  result = (DSP::BesselFilter< float > *)new DSP::BesselFilter< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBesselFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DSP::BesselFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::BesselFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::BesselFilter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (DSP::BesselFilter< float > *)new DSP::BesselFilter< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBesselFilter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatBesselFilter__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatBesselFilter__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatBesselFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselFilter< float >::BesselFilter()\n"
    "    DSP::BesselFilter< float >::BesselFilter(int)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatBesselFilter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::lowpass",1,"DSP::BesselFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::lowpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< float >::lowpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_lowpass",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::highpass",1,"DSP::BesselFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::highpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< float >::highpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_highpass",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::bandpass",1,"DSP::BesselFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< float >::bandpass",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselFilter< float >::bandpass",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_bandpass",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::bandstop",1,"DSP::BesselFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::bandstop",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselFilter< float >::bandstop",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselFilter< float >::bandstop",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_bandstop",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::apply",1,"DSP::BesselFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_apply",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< float >::apply",1,"DSP::BesselFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_apply",1,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBesselFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatBesselFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBesselFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::BesselFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatBesselFilter(void *obj) {
DSP::BesselFilter< float > *arg1 = (DSP::BesselFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBesselFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBesselFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBesselFilter_attributes[] = {
    { "bqs", _wrap_FloatBesselFilter_bqs_get, _wrap_FloatBesselFilter_bqs_set },
    { "filter", _wrap_FloatBesselFilter_filter_get, _wrap_FloatBesselFilter_filter_set },
    { "order", _wrap_FloatBesselFilter_order_get, _wrap_FloatBesselFilter_order_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBesselFilter_methods[]= {
    { "lowpass", _wrap_FloatBesselFilter_lowpass},
    { "highpass", _wrap_FloatBesselFilter_highpass},
    { "bandpass", _wrap_FloatBesselFilter_bandpass},
    { "bandstop", _wrap_FloatBesselFilter_bandstop},
    { "apply", _wrap_FloatBesselFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatBesselFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBesselFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBesselFilter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::BesselFilter< float >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBesselFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBesselFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBesselFilter_Sf_SwigStatic = {
    "FloatBesselFilter",
    swig_FloatBesselFilter_Sf_SwigStatic_methods,
    swig_FloatBesselFilter_Sf_SwigStatic_attributes,
    swig_FloatBesselFilter_Sf_SwigStatic_constants,
    swig_FloatBesselFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBesselFilter_bases[] = {0};
static const char *swig_FloatBesselFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBesselFilter = { "FloatBesselFilter", "FloatBesselFilter", &SWIGTYPE_p_DSP__BesselFilterT_float_t,_proxy__wrap_new_FloatBesselFilter, swig_delete_FloatBesselFilter, swig_FloatBesselFilter_methods, swig_FloatBesselFilter_attributes, &swig_FloatBesselFilter_Sf_SwigStatic, swig_FloatBesselFilter_meta, swig_FloatBesselFilter_bases, swig_FloatBesselFilter_base_names };

static int _wrap_FloatBesselLowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< float > *arg1 = (DSP::BesselLowPassFilter< float > *) 0 ;
  DSP::BesselFilter< float > *arg2 = (DSP::BesselFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::filter",1,"DSP::BesselLowPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::filter",2,"DSP::BesselFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_filter_set",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselLowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< float > *arg1 = (DSP::BesselLowPassFilter< float > *) 0 ;
  DSP::BesselFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::filter",1,"DSP::BesselLowPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_filter_get",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t);
  }
  
  result = (DSP::BesselFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBesselLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::BesselLowPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< float >::BesselLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::BesselLowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::BesselLowPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::BesselLowPassFilter",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::BesselLowPassFilter< float > *)new DSP::BesselLowPassFilter< float >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselLowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< float > *arg1 = (DSP::BesselLowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::apply",1,"DSP::BesselLowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_apply",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselLowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< float > *arg1 = (DSP::BesselLowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::apply",1,"DSP::BesselLowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselLowPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_apply",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselLowPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselLowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBesselLowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatBesselLowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBesselLowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselLowPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::BesselLowPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatBesselLowPassFilter(void *obj) {
DSP::BesselLowPassFilter< float > *arg1 = (DSP::BesselLowPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBesselLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBesselLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBesselLowPassFilter_attributes[] = {
    { "filter", _wrap_FloatBesselLowPassFilter_filter_get, _wrap_FloatBesselLowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBesselLowPassFilter_methods[]= {
    { "apply", _wrap_FloatBesselLowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatBesselLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBesselLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBesselLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBesselLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBesselLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBesselLowPassFilter_Sf_SwigStatic = {
    "FloatBesselLowPassFilter",
    swig_FloatBesselLowPassFilter_Sf_SwigStatic_methods,
    swig_FloatBesselLowPassFilter_Sf_SwigStatic_attributes,
    swig_FloatBesselLowPassFilter_Sf_SwigStatic_constants,
    swig_FloatBesselLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBesselLowPassFilter_bases[] = {0};
static const char *swig_FloatBesselLowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBesselLowPassFilter = { "FloatBesselLowPassFilter", "FloatBesselLowPassFilter", &SWIGTYPE_p_DSP__BesselLowPassFilterT_float_t,_proxy__wrap_new_FloatBesselLowPassFilter, swig_delete_FloatBesselLowPassFilter, swig_FloatBesselLowPassFilter_methods, swig_FloatBesselLowPassFilter_attributes, &swig_FloatBesselLowPassFilter_Sf_SwigStatic, swig_FloatBesselLowPassFilter_meta, swig_FloatBesselLowPassFilter_bases, swig_FloatBesselLowPassFilter_base_names };

static int _wrap_FloatBesselHighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< float > *arg1 = (DSP::BesselHighPassFilter< float > *) 0 ;
  DSP::BesselFilter< float > *arg2 = (DSP::BesselFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::filter",1,"DSP::BesselHighPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::filter",2,"DSP::BesselFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_filter_set",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselHighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< float > *arg1 = (DSP::BesselHighPassFilter< float > *) 0 ;
  DSP::BesselFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::filter",1,"DSP::BesselHighPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_filter_get",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t);
  }
  
  result = (DSP::BesselFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBesselHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::BesselHighPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< float >::BesselHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::BesselHighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::BesselHighPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::BesselHighPassFilter",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::BesselHighPassFilter< float > *)new DSP::BesselHighPassFilter< float >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselHighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< float > *arg1 = (DSP::BesselHighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::apply",1,"DSP::BesselHighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_apply",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselHighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< float > *arg1 = (DSP::BesselHighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::apply",1,"DSP::BesselHighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselHighPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_apply",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselHighPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselHighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBesselHighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatBesselHighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBesselHighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselHighPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::BesselHighPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatBesselHighPassFilter(void *obj) {
DSP::BesselHighPassFilter< float > *arg1 = (DSP::BesselHighPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBesselHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBesselHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBesselHighPassFilter_attributes[] = {
    { "filter", _wrap_FloatBesselHighPassFilter_filter_get, _wrap_FloatBesselHighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBesselHighPassFilter_methods[]= {
    { "apply", _wrap_FloatBesselHighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatBesselHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBesselHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBesselHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBesselHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBesselHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBesselHighPassFilter_Sf_SwigStatic = {
    "FloatBesselHighPassFilter",
    swig_FloatBesselHighPassFilter_Sf_SwigStatic_methods,
    swig_FloatBesselHighPassFilter_Sf_SwigStatic_attributes,
    swig_FloatBesselHighPassFilter_Sf_SwigStatic_constants,
    swig_FloatBesselHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBesselHighPassFilter_bases[] = {0};
static const char *swig_FloatBesselHighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBesselHighPassFilter = { "FloatBesselHighPassFilter", "FloatBesselHighPassFilter", &SWIGTYPE_p_DSP__BesselHighPassFilterT_float_t,_proxy__wrap_new_FloatBesselHighPassFilter, swig_delete_FloatBesselHighPassFilter, swig_FloatBesselHighPassFilter_methods, swig_FloatBesselHighPassFilter_attributes, &swig_FloatBesselHighPassFilter_Sf_SwigStatic, swig_FloatBesselHighPassFilter_meta, swig_FloatBesselHighPassFilter_bases, swig_FloatBesselHighPassFilter_base_names };

static int _wrap_FloatBesselBandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< float > *arg1 = (DSP::BesselBandPassFilter< float > *) 0 ;
  DSP::BesselFilter< float > *arg2 = (DSP::BesselFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::filter",1,"DSP::BesselBandPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::filter",2,"DSP::BesselFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_filter_set",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< float > *arg1 = (DSP::BesselBandPassFilter< float > *) 0 ;
  DSP::BesselFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::filter",1,"DSP::BesselBandPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_filter_get",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t);
  }
  
  result = (DSP::BesselFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBesselBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::BesselBandPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< float >::BesselBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::BesselBandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::BesselBandPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::BesselBandPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::BesselBandPassFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::BesselBandPassFilter< float > *)new DSP::BesselBandPassFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< float > *arg1 = (DSP::BesselBandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::apply",1,"DSP::BesselBandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_apply",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< float > *arg1 = (DSP::BesselBandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::apply",1,"DSP::BesselBandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_apply",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBesselBandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatBesselBandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBesselBandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselBandPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::BesselBandPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatBesselBandPassFilter(void *obj) {
DSP::BesselBandPassFilter< float > *arg1 = (DSP::BesselBandPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBesselBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBesselBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBesselBandPassFilter_attributes[] = {
    { "filter", _wrap_FloatBesselBandPassFilter_filter_get, _wrap_FloatBesselBandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBesselBandPassFilter_methods[]= {
    { "apply", _wrap_FloatBesselBandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatBesselBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBesselBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBesselBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBesselBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBesselBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBesselBandPassFilter_Sf_SwigStatic = {
    "FloatBesselBandPassFilter",
    swig_FloatBesselBandPassFilter_Sf_SwigStatic_methods,
    swig_FloatBesselBandPassFilter_Sf_SwigStatic_attributes,
    swig_FloatBesselBandPassFilter_Sf_SwigStatic_constants,
    swig_FloatBesselBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBesselBandPassFilter_bases[] = {0};
static const char *swig_FloatBesselBandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBesselBandPassFilter = { "FloatBesselBandPassFilter", "FloatBesselBandPassFilter", &SWIGTYPE_p_DSP__BesselBandPassFilterT_float_t,_proxy__wrap_new_FloatBesselBandPassFilter, swig_delete_FloatBesselBandPassFilter, swig_FloatBesselBandPassFilter_methods, swig_FloatBesselBandPassFilter_attributes, &swig_FloatBesselBandPassFilter_Sf_SwigStatic, swig_FloatBesselBandPassFilter_meta, swig_FloatBesselBandPassFilter_bases, swig_FloatBesselBandPassFilter_base_names };

static int _wrap_FloatBesselBandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< float > *arg1 = (DSP::BesselBandStopFilter< float > *) 0 ;
  DSP::BesselFilter< float > *arg2 = (DSP::BesselFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::filter",1,"DSP::BesselBandStopFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::filter",2,"DSP::BesselFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_filter_set",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< float > *arg1 = (DSP::BesselBandStopFilter< float > *) 0 ;
  DSP::BesselFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::filter",1,"DSP::BesselBandStopFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_filter_get",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t);
  }
  
  result = (DSP::BesselFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatBesselBandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::BesselBandStopFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< float >::BesselBandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::BesselBandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::BesselBandStopFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::BesselBandStopFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::BesselBandStopFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::BesselBandStopFilter< float > *)new DSP::BesselBandStopFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< float > *arg1 = (DSP::BesselBandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::apply",1,"DSP::BesselBandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_apply",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< float > *arg1 = (DSP::BesselBandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::apply",1,"DSP::BesselBandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandStopFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_apply",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatBesselBandStopFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBesselBandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatBesselBandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatBesselBandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatBesselBandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselBandStopFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::BesselBandStopFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatBesselBandStopFilter(void *obj) {
DSP::BesselBandStopFilter< float > *arg1 = (DSP::BesselBandStopFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatBesselBandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatBesselBandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatBesselBandStopFilter_attributes[] = {
    { "filter", _wrap_FloatBesselBandStopFilter_filter_get, _wrap_FloatBesselBandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatBesselBandStopFilter_methods[]= {
    { "apply", _wrap_FloatBesselBandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatBesselBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatBesselBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatBesselBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatBesselBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatBesselBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatBesselBandStopFilter_Sf_SwigStatic = {
    "FloatBesselBandStopFilter",
    swig_FloatBesselBandStopFilter_Sf_SwigStatic_methods,
    swig_FloatBesselBandStopFilter_Sf_SwigStatic_attributes,
    swig_FloatBesselBandStopFilter_Sf_SwigStatic_constants,
    swig_FloatBesselBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatBesselBandStopFilter_bases[] = {0};
static const char *swig_FloatBesselBandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatBesselBandStopFilter = { "FloatBesselBandStopFilter", "FloatBesselBandStopFilter", &SWIGTYPE_p_DSP__BesselBandStopFilterT_float_t,_proxy__wrap_new_FloatBesselBandStopFilter, swig_delete_FloatBesselBandStopFilter, swig_FloatBesselBandStopFilter_methods, swig_FloatBesselBandStopFilter_attributes, &swig_FloatBesselBandStopFilter_Sf_SwigStatic, swig_FloatBesselBandStopFilter_meta, swig_FloatBesselBandStopFilter_bases, swig_FloatBesselBandStopFilter_base_names };

static int _wrap_FloatButterworthFilter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *arg2 = (std::vector< kfr::biquad_params< float > > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bqs",1,"DSP::ButterworthFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bqs",2,"std::vector< kfr::biquad_params< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_bqs_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bqs",1,"DSP::ButterworthFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_bqs_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  result = (std::vector< kfr::biquad_params< float > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::filter",1,"DSP::ButterworthFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::filter",1,"DSP::ButterworthFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::order",1,"DSP::ButterworthFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_order_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::order",1,"DSP::ButterworthFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_order_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatButterworthFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DSP::ButterworthFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::ButterworthFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::ButterworthFilter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (DSP::ButterworthFilter< float > *)new DSP::ButterworthFilter< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::lowpass",1,"DSP::ButterworthFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::lowpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< float >::lowpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_lowpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::highpass",1,"DSP::ButterworthFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::highpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< float >::highpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_highpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandpass",1,"DSP::ButterworthFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandpass",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandpass",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_bandpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandstop",1,"DSP::ButterworthFilter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandstop",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandstop",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthFilter< float >::bandstop",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_bandstop",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::apply",1,"DSP::ButterworthFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_apply",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< float >::apply",1,"DSP::ButterworthFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_apply",1,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatButterworthFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatButterworthFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatButterworthFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::ButterworthFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatButterworthFilter(void *obj) {
DSP::ButterworthFilter< float > *arg1 = (DSP::ButterworthFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatButterworthFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatButterworthFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatButterworthFilter_attributes[] = {
    { "bqs", _wrap_FloatButterworthFilter_bqs_get, _wrap_FloatButterworthFilter_bqs_set },
    { "filter", _wrap_FloatButterworthFilter_filter_get, _wrap_FloatButterworthFilter_filter_set },
    { "order", _wrap_FloatButterworthFilter_order_get, _wrap_FloatButterworthFilter_order_set },
    {0,0,0}
};
static swig_lua_method swig_FloatButterworthFilter_methods[]= {
    { "lowpass", _wrap_FloatButterworthFilter_lowpass},
    { "highpass", _wrap_FloatButterworthFilter_highpass},
    { "bandpass", _wrap_FloatButterworthFilter_bandpass},
    { "bandstop", _wrap_FloatButterworthFilter_bandstop},
    { "apply", _wrap_FloatButterworthFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatButterworthFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatButterworthFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatButterworthFilter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::ButterworthFilter< float >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatButterworthFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatButterworthFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatButterworthFilter_Sf_SwigStatic = {
    "FloatButterworthFilter",
    swig_FloatButterworthFilter_Sf_SwigStatic_methods,
    swig_FloatButterworthFilter_Sf_SwigStatic_attributes,
    swig_FloatButterworthFilter_Sf_SwigStatic_constants,
    swig_FloatButterworthFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatButterworthFilter_bases[] = {0};
static const char *swig_FloatButterworthFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatButterworthFilter = { "FloatButterworthFilter", "FloatButterworthFilter", &SWIGTYPE_p_DSP__ButterworthFilterT_float_t,_proxy__wrap_new_FloatButterworthFilter, swig_delete_FloatButterworthFilter, swig_FloatButterworthFilter_methods, swig_FloatButterworthFilter_attributes, &swig_FloatButterworthFilter_Sf_SwigStatic, swig_FloatButterworthFilter_meta, swig_FloatButterworthFilter_bases, swig_FloatButterworthFilter_base_names };

static int _wrap_FloatButterworthLowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< float > *arg1 = (DSP::ButterworthLowPassFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *arg2 = (DSP::ButterworthFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::filter",1,"DSP::ButterworthLowPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::filter",2,"DSP::ButterworthFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthLowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< float > *arg1 = (DSP::ButterworthLowPassFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::filter",1,"DSP::ButterworthLowPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t);
  }
  
  result = (DSP::ButterworthFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatButterworthLowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::ButterworthLowPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< float >::ButterworthLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::ButterworthLowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::ButterworthLowPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::ButterworthLowPassFilter",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::ButterworthLowPassFilter< float > *)new DSP::ButterworthLowPassFilter< float >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthLowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< float > *arg1 = (DSP::ButterworthLowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::apply",1,"DSP::ButterworthLowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthLowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< float > *arg1 = (DSP::ButterworthLowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::apply",1,"DSP::ButterworthLowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthLowPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthLowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatButterworthLowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatButterworthLowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatButterworthLowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthLowPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::ButterworthLowPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatButterworthLowPassFilter(void *obj) {
DSP::ButterworthLowPassFilter< float > *arg1 = (DSP::ButterworthLowPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatButterworthLowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatButterworthLowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatButterworthLowPassFilter_attributes[] = {
    { "filter", _wrap_FloatButterworthLowPassFilter_filter_get, _wrap_FloatButterworthLowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatButterworthLowPassFilter_methods[]= {
    { "apply", _wrap_FloatButterworthLowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatButterworthLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatButterworthLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatButterworthLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatButterworthLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatButterworthLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatButterworthLowPassFilter_Sf_SwigStatic = {
    "FloatButterworthLowPassFilter",
    swig_FloatButterworthLowPassFilter_Sf_SwigStatic_methods,
    swig_FloatButterworthLowPassFilter_Sf_SwigStatic_attributes,
    swig_FloatButterworthLowPassFilter_Sf_SwigStatic_constants,
    swig_FloatButterworthLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatButterworthLowPassFilter_bases[] = {0};
static const char *swig_FloatButterworthLowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatButterworthLowPassFilter = { "FloatButterworthLowPassFilter", "FloatButterworthLowPassFilter", &SWIGTYPE_p_DSP__ButterworthLowPassFilterT_float_t,_proxy__wrap_new_FloatButterworthLowPassFilter, swig_delete_FloatButterworthLowPassFilter, swig_FloatButterworthLowPassFilter_methods, swig_FloatButterworthLowPassFilter_attributes, &swig_FloatButterworthLowPassFilter_Sf_SwigStatic, swig_FloatButterworthLowPassFilter_meta, swig_FloatButterworthLowPassFilter_bases, swig_FloatButterworthLowPassFilter_base_names };

static int _wrap_FloatButterworthHighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< float > *arg1 = (DSP::ButterworthHighPassFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *arg2 = (DSP::ButterworthFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::filter",1,"DSP::ButterworthHighPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::filter",2,"DSP::ButterworthFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthHighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< float > *arg1 = (DSP::ButterworthHighPassFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::filter",1,"DSP::ButterworthHighPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t);
  }
  
  result = (DSP::ButterworthFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatButterworthHighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::ButterworthHighPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< float >::ButterworthHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::ButterworthHighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::ButterworthHighPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::ButterworthHighPassFilter",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (DSP::ButterworthHighPassFilter< float > *)new DSP::ButterworthHighPassFilter< float >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthHighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< float > *arg1 = (DSP::ButterworthHighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::apply",1,"DSP::ButterworthHighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthHighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< float > *arg1 = (DSP::ButterworthHighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::apply",1,"DSP::ButterworthHighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthHighPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthHighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatButterworthHighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatButterworthHighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatButterworthHighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthHighPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::ButterworthHighPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatButterworthHighPassFilter(void *obj) {
DSP::ButterworthHighPassFilter< float > *arg1 = (DSP::ButterworthHighPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatButterworthHighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatButterworthHighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatButterworthHighPassFilter_attributes[] = {
    { "filter", _wrap_FloatButterworthHighPassFilter_filter_get, _wrap_FloatButterworthHighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatButterworthHighPassFilter_methods[]= {
    { "apply", _wrap_FloatButterworthHighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatButterworthHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatButterworthHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatButterworthHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatButterworthHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatButterworthHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatButterworthHighPassFilter_Sf_SwigStatic = {
    "FloatButterworthHighPassFilter",
    swig_FloatButterworthHighPassFilter_Sf_SwigStatic_methods,
    swig_FloatButterworthHighPassFilter_Sf_SwigStatic_attributes,
    swig_FloatButterworthHighPassFilter_Sf_SwigStatic_constants,
    swig_FloatButterworthHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatButterworthHighPassFilter_bases[] = {0};
static const char *swig_FloatButterworthHighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatButterworthHighPassFilter = { "FloatButterworthHighPassFilter", "FloatButterworthHighPassFilter", &SWIGTYPE_p_DSP__ButterworthHighPassFilterT_float_t,_proxy__wrap_new_FloatButterworthHighPassFilter, swig_delete_FloatButterworthHighPassFilter, swig_FloatButterworthHighPassFilter_methods, swig_FloatButterworthHighPassFilter_attributes, &swig_FloatButterworthHighPassFilter_Sf_SwigStatic, swig_FloatButterworthHighPassFilter_meta, swig_FloatButterworthHighPassFilter_bases, swig_FloatButterworthHighPassFilter_base_names };

static int _wrap_FloatButterworthBandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< float > *arg1 = (DSP::ButterworthBandPassFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *arg2 = (DSP::ButterworthFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::filter",1,"DSP::ButterworthBandPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::filter",2,"DSP::ButterworthFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< float > *arg1 = (DSP::ButterworthBandPassFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::filter",1,"DSP::ButterworthBandPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t);
  }
  
  result = (DSP::ButterworthFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatButterworthBandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::ButterworthBandPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< float >::ButterworthBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::ButterworthBandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::ButterworthBandPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::ButterworthBandPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::ButterworthBandPassFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::ButterworthBandPassFilter< float > *)new DSP::ButterworthBandPassFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< float > *arg1 = (DSP::ButterworthBandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::apply",1,"DSP::ButterworthBandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< float > *arg1 = (DSP::ButterworthBandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::apply",1,"DSP::ButterworthBandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatButterworthBandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatButterworthBandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatButterworthBandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthBandPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::ButterworthBandPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatButterworthBandPassFilter(void *obj) {
DSP::ButterworthBandPassFilter< float > *arg1 = (DSP::ButterworthBandPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatButterworthBandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatButterworthBandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatButterworthBandPassFilter_attributes[] = {
    { "filter", _wrap_FloatButterworthBandPassFilter_filter_get, _wrap_FloatButterworthBandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatButterworthBandPassFilter_methods[]= {
    { "apply", _wrap_FloatButterworthBandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatButterworthBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatButterworthBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatButterworthBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatButterworthBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatButterworthBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatButterworthBandPassFilter_Sf_SwigStatic = {
    "FloatButterworthBandPassFilter",
    swig_FloatButterworthBandPassFilter_Sf_SwigStatic_methods,
    swig_FloatButterworthBandPassFilter_Sf_SwigStatic_attributes,
    swig_FloatButterworthBandPassFilter_Sf_SwigStatic_constants,
    swig_FloatButterworthBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatButterworthBandPassFilter_bases[] = {0};
static const char *swig_FloatButterworthBandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatButterworthBandPassFilter = { "FloatButterworthBandPassFilter", "FloatButterworthBandPassFilter", &SWIGTYPE_p_DSP__ButterworthBandPassFilterT_float_t,_proxy__wrap_new_FloatButterworthBandPassFilter, swig_delete_FloatButterworthBandPassFilter, swig_FloatButterworthBandPassFilter_methods, swig_FloatButterworthBandPassFilter_attributes, &swig_FloatButterworthBandPassFilter_Sf_SwigStatic, swig_FloatButterworthBandPassFilter_meta, swig_FloatButterworthBandPassFilter_bases, swig_FloatButterworthBandPassFilter_base_names };

static int _wrap_FloatButterworthBandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< float > *arg1 = (DSP::ButterworthBandStopFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *arg2 = (DSP::ButterworthFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::filter",1,"DSP::ButterworthBandStopFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::filter",2,"DSP::ButterworthFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_filter_set",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< float > *arg1 = (DSP::ButterworthBandStopFilter< float > *) 0 ;
  DSP::ButterworthFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::filter",1,"DSP::ButterworthBandStopFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_filter_get",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t);
  }
  
  result = (DSP::ButterworthFilter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatButterworthBandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::ButterworthBandStopFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< float >::ButterworthBandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::ButterworthBandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::ButterworthBandStopFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::ButterworthBandStopFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::ButterworthBandStopFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::ButterworthBandStopFilter< float > *)new DSP::ButterworthBandStopFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< float > *arg1 = (DSP::ButterworthBandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::apply",1,"DSP::ButterworthBandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< float > *arg1 = (DSP::ButterworthBandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::apply",1,"DSP::ButterworthBandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_apply",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatButterworthBandStopFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatButterworthBandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatButterworthBandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatButterworthBandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatButterworthBandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthBandStopFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::ButterworthBandStopFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatButterworthBandStopFilter(void *obj) {
DSP::ButterworthBandStopFilter< float > *arg1 = (DSP::ButterworthBandStopFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatButterworthBandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatButterworthBandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatButterworthBandStopFilter_attributes[] = {
    { "filter", _wrap_FloatButterworthBandStopFilter_filter_get, _wrap_FloatButterworthBandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatButterworthBandStopFilter_methods[]= {
    { "apply", _wrap_FloatButterworthBandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatButterworthBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatButterworthBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatButterworthBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatButterworthBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatButterworthBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatButterworthBandStopFilter_Sf_SwigStatic = {
    "FloatButterworthBandStopFilter",
    swig_FloatButterworthBandStopFilter_Sf_SwigStatic_methods,
    swig_FloatButterworthBandStopFilter_Sf_SwigStatic_attributes,
    swig_FloatButterworthBandStopFilter_Sf_SwigStatic_constants,
    swig_FloatButterworthBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatButterworthBandStopFilter_bases[] = {0};
static const char *swig_FloatButterworthBandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatButterworthBandStopFilter = { "FloatButterworthBandStopFilter", "FloatButterworthBandStopFilter", &SWIGTYPE_p_DSP__ButterworthBandStopFilterT_float_t,_proxy__wrap_new_FloatButterworthBandStopFilter, swig_delete_FloatButterworthBandStopFilter, swig_FloatButterworthBandStopFilter_methods, swig_FloatButterworthBandStopFilter_attributes, &swig_FloatButterworthBandStopFilter_Sf_SwigStatic, swig_FloatButterworthBandStopFilter_meta, swig_FloatButterworthBandStopFilter_bases, swig_FloatButterworthBandStopFilter_base_names };

static int _wrap_FloatChevyshev1Filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *arg2 = (std::vector< kfr::biquad_params< float > > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bqs",1,"DSP::Chebyshev1Filter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bqs",2,"std::vector< kfr::biquad_params< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_bqs_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bqs",1,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_bqs_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  result = (std::vector< kfr::biquad_params< float > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::filter",1,"DSP::Chebyshev1Filter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::filter",1,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::order",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_order_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::order",1,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_order_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_rp_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::rp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::rp",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::rp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_rp_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_rp_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::rp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::rp",1,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_rp_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  result = (float) ((arg1)->rp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev1Filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::Chebyshev1Filter",0,0)
  result = (DSP::Chebyshev1Filter< float > *)new DSP::Chebyshev1Filter< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev1Filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  DSP::Chebyshev1Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::Chebyshev1Filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::Chebyshev1Filter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::Chebyshev1Filter",2,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (DSP::Chebyshev1Filter< float > *)new DSP::Chebyshev1Filter< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev1Filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatChevyshev1Filter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatChevyshev1Filter__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatChevyshev1Filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1Filter< float >::Chebyshev1Filter()\n"
    "    DSP::Chebyshev1Filter< float >::Chebyshev1Filter(int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatChevyshev1Filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::lowpass",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::lowpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::lowpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_lowpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::highpass",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::highpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::highpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_highpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandpass",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandpass",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandpass",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_bandpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandstop",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandstop",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandstop",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::bandstop",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_bandstop",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::apply",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::apply",1,"DSP::Chebyshev1Filter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1Filter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1Filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev1Filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev1Filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev1Filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1Filter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev1Filter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev1Filter(void *obj) {
DSP::Chebyshev1Filter< float > *arg1 = (DSP::Chebyshev1Filter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev1Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev1Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev1Filter_attributes[] = {
    { "bqs", _wrap_FloatChevyshev1Filter_bqs_get, _wrap_FloatChevyshev1Filter_bqs_set },
    { "filter", _wrap_FloatChevyshev1Filter_filter_get, _wrap_FloatChevyshev1Filter_filter_set },
    { "order", _wrap_FloatChevyshev1Filter_order_get, _wrap_FloatChevyshev1Filter_order_set },
    { "rp", _wrap_FloatChevyshev1Filter_rp_get, _wrap_FloatChevyshev1Filter_rp_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev1Filter_methods[]= {
    { "lowpass", _wrap_FloatChevyshev1Filter_lowpass},
    { "highpass", _wrap_FloatChevyshev1Filter_highpass},
    { "bandpass", _wrap_FloatChevyshev1Filter_bandpass},
    { "bandstop", _wrap_FloatChevyshev1Filter_bandstop},
    { "apply", _wrap_FloatChevyshev1Filter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev1Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev1Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev1Filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::Chebyshev1Filter< float >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev1Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev1Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev1Filter_Sf_SwigStatic = {
    "FloatChevyshev1Filter",
    swig_FloatChevyshev1Filter_Sf_SwigStatic_methods,
    swig_FloatChevyshev1Filter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev1Filter_Sf_SwigStatic_constants,
    swig_FloatChevyshev1Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev1Filter_bases[] = {0};
static const char *swig_FloatChevyshev1Filter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev1Filter = { "FloatChevyshev1Filter", "FloatChevyshev1Filter", &SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,_proxy__wrap_new_FloatChevyshev1Filter, swig_delete_FloatChevyshev1Filter, swig_FloatChevyshev1Filter_methods, swig_FloatChevyshev1Filter_attributes, &swig_FloatChevyshev1Filter_Sf_SwigStatic, swig_FloatChevyshev1Filter_meta, swig_FloatChevyshev1Filter_bases, swig_FloatChevyshev1Filter_base_names };

static int _wrap_FloatChevyshev1LowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< float > *arg1 = (DSP::Chebyshev1LowPassFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *arg2 = (DSP::Chebyshev1Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::filter",1,"DSP::Chebyshev1LowPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::filter",2,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1LowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< float > *arg1 = (DSP::Chebyshev1LowPassFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::filter",1,"DSP::Chebyshev1LowPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t);
  }
  
  result = (DSP::Chebyshev1Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev1LowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::Chebyshev1LowPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< float >::Chebyshev1LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::Chebyshev1LowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::Chebyshev1LowPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::Chebyshev1LowPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::Chebyshev1LowPassFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::Chebyshev1LowPassFilter< float > *)new DSP::Chebyshev1LowPassFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1LowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< float > *arg1 = (DSP::Chebyshev1LowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::apply",1,"DSP::Chebyshev1LowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1LowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< float > *arg1 = (DSP::Chebyshev1LowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::apply",1,"DSP::Chebyshev1LowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1LowPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1LowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev1LowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev1LowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev1LowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1LowPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev1LowPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev1LowPassFilter(void *obj) {
DSP::Chebyshev1LowPassFilter< float > *arg1 = (DSP::Chebyshev1LowPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev1LowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev1LowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev1LowPassFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev1LowPassFilter_filter_get, _wrap_FloatChevyshev1LowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev1LowPassFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev1LowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev1LowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic = {
    "FloatChevyshev1LowPassFilter",
    swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev1LowPassFilter_bases[] = {0};
static const char *swig_FloatChevyshev1LowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev1LowPassFilter = { "FloatChevyshev1LowPassFilter", "FloatChevyshev1LowPassFilter", &SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_float_t,_proxy__wrap_new_FloatChevyshev1LowPassFilter, swig_delete_FloatChevyshev1LowPassFilter, swig_FloatChevyshev1LowPassFilter_methods, swig_FloatChevyshev1LowPassFilter_attributes, &swig_FloatChevyshev1LowPassFilter_Sf_SwigStatic, swig_FloatChevyshev1LowPassFilter_meta, swig_FloatChevyshev1LowPassFilter_bases, swig_FloatChevyshev1LowPassFilter_base_names };

static int _wrap_FloatChevyshev1HighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< float > *arg1 = (DSP::Chebyshev1HighPassFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *arg2 = (DSP::Chebyshev1Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::filter",1,"DSP::Chebyshev1HighPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::filter",2,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1HighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< float > *arg1 = (DSP::Chebyshev1HighPassFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::filter",1,"DSP::Chebyshev1HighPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t);
  }
  
  result = (DSP::Chebyshev1Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev1HighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::Chebyshev1HighPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< float >::Chebyshev1HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::Chebyshev1HighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::Chebyshev1HighPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::Chebyshev1HighPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::Chebyshev1HighPassFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::Chebyshev1HighPassFilter< float > *)new DSP::Chebyshev1HighPassFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1HighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< float > *arg1 = (DSP::Chebyshev1HighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::apply",1,"DSP::Chebyshev1HighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1HighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< float > *arg1 = (DSP::Chebyshev1HighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::apply",1,"DSP::Chebyshev1HighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1HighPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1HighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev1HighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev1HighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev1HighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1HighPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev1HighPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev1HighPassFilter(void *obj) {
DSP::Chebyshev1HighPassFilter< float > *arg1 = (DSP::Chebyshev1HighPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev1HighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev1HighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev1HighPassFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev1HighPassFilter_filter_get, _wrap_FloatChevyshev1HighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev1HighPassFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev1HighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev1HighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic = {
    "FloatChevyshev1HighPassFilter",
    swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev1HighPassFilter_bases[] = {0};
static const char *swig_FloatChevyshev1HighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev1HighPassFilter = { "FloatChevyshev1HighPassFilter", "FloatChevyshev1HighPassFilter", &SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_float_t,_proxy__wrap_new_FloatChevyshev1HighPassFilter, swig_delete_FloatChevyshev1HighPassFilter, swig_FloatChevyshev1HighPassFilter_methods, swig_FloatChevyshev1HighPassFilter_attributes, &swig_FloatChevyshev1HighPassFilter_Sf_SwigStatic, swig_FloatChevyshev1HighPassFilter_meta, swig_FloatChevyshev1HighPassFilter_bases, swig_FloatChevyshev1HighPassFilter_base_names };

static int _wrap_FloatChevyshev1BandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< float > *arg1 = (DSP::Chebyshev1BandPassFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *arg2 = (DSP::Chebyshev1Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::filter",1,"DSP::Chebyshev1BandPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::filter",2,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< float > *arg1 = (DSP::Chebyshev1BandPassFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::filter",1,"DSP::Chebyshev1BandPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t);
  }
  
  result = (DSP::Chebyshev1Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev1BandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::Chebyshev1BandPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< float >::Chebyshev1BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::Chebyshev1BandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::Chebyshev1BandPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::Chebyshev1BandPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::Chebyshev1BandPassFilter",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::Chebyshev1BandPassFilter",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (DSP::Chebyshev1BandPassFilter< float > *)new DSP::Chebyshev1BandPassFilter< float >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< float > *arg1 = (DSP::Chebyshev1BandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::apply",1,"DSP::Chebyshev1BandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< float > *arg1 = (DSP::Chebyshev1BandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::apply",1,"DSP::Chebyshev1BandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev1BandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev1BandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev1BandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1BandPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev1BandPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev1BandPassFilter(void *obj) {
DSP::Chebyshev1BandPassFilter< float > *arg1 = (DSP::Chebyshev1BandPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev1BandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev1BandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev1BandPassFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev1BandPassFilter_filter_get, _wrap_FloatChevyshev1BandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev1BandPassFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev1BandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev1BandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic = {
    "FloatChevyshev1BandPassFilter",
    swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev1BandPassFilter_bases[] = {0};
static const char *swig_FloatChevyshev1BandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev1BandPassFilter = { "FloatChevyshev1BandPassFilter", "FloatChevyshev1BandPassFilter", &SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_float_t,_proxy__wrap_new_FloatChevyshev1BandPassFilter, swig_delete_FloatChevyshev1BandPassFilter, swig_FloatChevyshev1BandPassFilter_methods, swig_FloatChevyshev1BandPassFilter_attributes, &swig_FloatChevyshev1BandPassFilter_Sf_SwigStatic, swig_FloatChevyshev1BandPassFilter_meta, swig_FloatChevyshev1BandPassFilter_bases, swig_FloatChevyshev1BandPassFilter_base_names };

static int _wrap_FloatChevyshev1BandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< float > *arg1 = (DSP::Chebyshev1BandStopFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *arg2 = (DSP::Chebyshev1Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::filter",1,"DSP::Chebyshev1BandStopFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::filter",2,"DSP::Chebyshev1Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< float > *arg1 = (DSP::Chebyshev1BandStopFilter< float > *) 0 ;
  DSP::Chebyshev1Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::filter",1,"DSP::Chebyshev1BandStopFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t);
  }
  
  result = (DSP::Chebyshev1Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev1BandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::Chebyshev1BandStopFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< float >::Chebyshev1BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::Chebyshev1BandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::Chebyshev1BandStopFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::Chebyshev1BandStopFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::Chebyshev1BandStopFilter",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::Chebyshev1BandStopFilter",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (DSP::Chebyshev1BandStopFilter< float > *)new DSP::Chebyshev1BandStopFilter< float >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< float > *arg1 = (DSP::Chebyshev1BandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::apply",1,"DSP::Chebyshev1BandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< float > *arg1 = (DSP::Chebyshev1BandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::apply",1,"DSP::Chebyshev1BandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev1BandStopFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev1BandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev1BandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev1BandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev1BandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1BandStopFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev1BandStopFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev1BandStopFilter(void *obj) {
DSP::Chebyshev1BandStopFilter< float > *arg1 = (DSP::Chebyshev1BandStopFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev1BandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev1BandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev1BandStopFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev1BandStopFilter_filter_get, _wrap_FloatChevyshev1BandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev1BandStopFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev1BandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev1BandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic = {
    "FloatChevyshev1BandStopFilter",
    swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev1BandStopFilter_bases[] = {0};
static const char *swig_FloatChevyshev1BandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev1BandStopFilter = { "FloatChevyshev1BandStopFilter", "FloatChevyshev1BandStopFilter", &SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_float_t,_proxy__wrap_new_FloatChevyshev1BandStopFilter, swig_delete_FloatChevyshev1BandStopFilter, swig_FloatChevyshev1BandStopFilter_methods, swig_FloatChevyshev1BandStopFilter_attributes, &swig_FloatChevyshev1BandStopFilter_Sf_SwigStatic, swig_FloatChevyshev1BandStopFilter_meta, swig_FloatChevyshev1BandStopFilter_bases, swig_FloatChevyshev1BandStopFilter_base_names };

static int _wrap_FloatChevyshev2Filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *arg2 = (std::vector< kfr::biquad_params< float > > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bqs",1,"DSP::Chebyshev2Filter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bqs",2,"std::vector< kfr::biquad_params< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_bqs_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  std::vector< kfr::biquad_params< float > > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bqs",1,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_bqs_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  result = (std::vector< kfr::biquad_params< float > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_float_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  DSP::Biquad< float > *arg2 = (DSP::Biquad< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::filter",1,"DSP::Chebyshev2Filter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::filter",2,"DSP::Biquad< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  DSP::Biquad< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::filter",1,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  result = (DSP::Biquad< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::order",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_order_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::order",1,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_order_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_rs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::rs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::rs",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::rs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_rs_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_rs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::rs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::rs",1,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_rs_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  result = (float) ((arg1)->rs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev2Filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::Chebyshev2Filter",0,0)
  result = (DSP::Chebyshev2Filter< float > *)new DSP::Chebyshev2Filter< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev2Filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  DSP::Chebyshev2Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::Chebyshev2Filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::Chebyshev2Filter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::Chebyshev2Filter",2,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (DSP::Chebyshev2Filter< float > *)new DSP::Chebyshev2Filter< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev2Filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatChevyshev2Filter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatChevyshev2Filter__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatChevyshev2Filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2Filter< float >::Chebyshev2Filter()\n"
    "    DSP::Chebyshev2Filter< float >::Chebyshev2Filter(int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatChevyshev2Filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::lowpass",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::lowpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::lowpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_lowpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::highpass",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::highpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::highpass",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_highpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandpass",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandpass",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandpass",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandpass",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_bandpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandstop",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandstop",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandstop",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::bandstop",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_bandstop",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::apply",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::apply",1,"DSP::Chebyshev2Filter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2Filter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2Filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev2Filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev2Filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev2Filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2Filter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev2Filter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev2Filter(void *obj) {
DSP::Chebyshev2Filter< float > *arg1 = (DSP::Chebyshev2Filter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev2Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev2Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev2Filter_attributes[] = {
    { "bqs", _wrap_FloatChevyshev2Filter_bqs_get, _wrap_FloatChevyshev2Filter_bqs_set },
    { "filter", _wrap_FloatChevyshev2Filter_filter_get, _wrap_FloatChevyshev2Filter_filter_set },
    { "order", _wrap_FloatChevyshev2Filter_order_get, _wrap_FloatChevyshev2Filter_order_set },
    { "rs", _wrap_FloatChevyshev2Filter_rs_get, _wrap_FloatChevyshev2Filter_rs_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev2Filter_methods[]= {
    { "lowpass", _wrap_FloatChevyshev2Filter_lowpass},
    { "highpass", _wrap_FloatChevyshev2Filter_highpass},
    { "bandpass", _wrap_FloatChevyshev2Filter_bandpass},
    { "bandstop", _wrap_FloatChevyshev2Filter_bandstop},
    { "apply", _wrap_FloatChevyshev2Filter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev2Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev2Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev2Filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::Chebyshev2Filter< float >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev2Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev2Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev2Filter_Sf_SwigStatic = {
    "FloatChevyshev2Filter",
    swig_FloatChevyshev2Filter_Sf_SwigStatic_methods,
    swig_FloatChevyshev2Filter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev2Filter_Sf_SwigStatic_constants,
    swig_FloatChevyshev2Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev2Filter_bases[] = {0};
static const char *swig_FloatChevyshev2Filter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev2Filter = { "FloatChevyshev2Filter", "FloatChevyshev2Filter", &SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,_proxy__wrap_new_FloatChevyshev2Filter, swig_delete_FloatChevyshev2Filter, swig_FloatChevyshev2Filter_methods, swig_FloatChevyshev2Filter_attributes, &swig_FloatChevyshev2Filter_Sf_SwigStatic, swig_FloatChevyshev2Filter_meta, swig_FloatChevyshev2Filter_bases, swig_FloatChevyshev2Filter_base_names };

static int _wrap_FloatChevyshev2LowPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< float > *arg1 = (DSP::Chebyshev2LowPassFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *arg2 = (DSP::Chebyshev2Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::filter",1,"DSP::Chebyshev2LowPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::filter",2,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2LowPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< float > *arg1 = (DSP::Chebyshev2LowPassFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::filter",1,"DSP::Chebyshev2LowPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t);
  }
  
  result = (DSP::Chebyshev2Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev2LowPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::Chebyshev2LowPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< float >::Chebyshev2LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::Chebyshev2LowPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::Chebyshev2LowPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::Chebyshev2LowPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::Chebyshev2LowPassFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::Chebyshev2LowPassFilter< float > *)new DSP::Chebyshev2LowPassFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2LowPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< float > *arg1 = (DSP::Chebyshev2LowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::apply",1,"DSP::Chebyshev2LowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2LowPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< float > *arg1 = (DSP::Chebyshev2LowPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::apply",1,"DSP::Chebyshev2LowPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2LowPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2LowPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev2LowPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev2LowPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev2LowPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2LowPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev2LowPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev2LowPassFilter(void *obj) {
DSP::Chebyshev2LowPassFilter< float > *arg1 = (DSP::Chebyshev2LowPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev2LowPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev2LowPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev2LowPassFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev2LowPassFilter_filter_get, _wrap_FloatChevyshev2LowPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev2LowPassFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev2LowPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev2LowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic = {
    "FloatChevyshev2LowPassFilter",
    swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev2LowPassFilter_bases[] = {0};
static const char *swig_FloatChevyshev2LowPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev2LowPassFilter = { "FloatChevyshev2LowPassFilter", "FloatChevyshev2LowPassFilter", &SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_float_t,_proxy__wrap_new_FloatChevyshev2LowPassFilter, swig_delete_FloatChevyshev2LowPassFilter, swig_FloatChevyshev2LowPassFilter_methods, swig_FloatChevyshev2LowPassFilter_attributes, &swig_FloatChevyshev2LowPassFilter_Sf_SwigStatic, swig_FloatChevyshev2LowPassFilter_meta, swig_FloatChevyshev2LowPassFilter_bases, swig_FloatChevyshev2LowPassFilter_base_names };

static int _wrap_FloatChevyshev2HighPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< float > *arg1 = (DSP::Chebyshev2HighPassFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *arg2 = (DSP::Chebyshev2Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::filter",1,"DSP::Chebyshev2HighPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::filter",2,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2HighPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< float > *arg1 = (DSP::Chebyshev2HighPassFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::filter",1,"DSP::Chebyshev2HighPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t);
  }
  
  result = (DSP::Chebyshev2Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev2HighPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::Chebyshev2HighPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< float >::Chebyshev2HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::Chebyshev2HighPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::Chebyshev2HighPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::Chebyshev2HighPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::Chebyshev2HighPassFilter",4,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (DSP::Chebyshev2HighPassFilter< float > *)new DSP::Chebyshev2HighPassFilter< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2HighPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< float > *arg1 = (DSP::Chebyshev2HighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::apply",1,"DSP::Chebyshev2HighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2HighPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< float > *arg1 = (DSP::Chebyshev2HighPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::apply",1,"DSP::Chebyshev2HighPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2HighPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2HighPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev2HighPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev2HighPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev2HighPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2HighPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev2HighPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev2HighPassFilter(void *obj) {
DSP::Chebyshev2HighPassFilter< float > *arg1 = (DSP::Chebyshev2HighPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev2HighPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev2HighPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev2HighPassFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev2HighPassFilter_filter_get, _wrap_FloatChevyshev2HighPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev2HighPassFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev2HighPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev2HighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic = {
    "FloatChevyshev2HighPassFilter",
    swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev2HighPassFilter_bases[] = {0};
static const char *swig_FloatChevyshev2HighPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev2HighPassFilter = { "FloatChevyshev2HighPassFilter", "FloatChevyshev2HighPassFilter", &SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_float_t,_proxy__wrap_new_FloatChevyshev2HighPassFilter, swig_delete_FloatChevyshev2HighPassFilter, swig_FloatChevyshev2HighPassFilter_methods, swig_FloatChevyshev2HighPassFilter_attributes, &swig_FloatChevyshev2HighPassFilter_Sf_SwigStatic, swig_FloatChevyshev2HighPassFilter_meta, swig_FloatChevyshev2HighPassFilter_bases, swig_FloatChevyshev2HighPassFilter_base_names };

static int _wrap_FloatChevyshev2BandPassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< float > *arg1 = (DSP::Chebyshev2BandPassFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *arg2 = (DSP::Chebyshev2Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::filter",1,"DSP::Chebyshev2BandPassFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::filter",2,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandPassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< float > *arg1 = (DSP::Chebyshev2BandPassFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::filter",1,"DSP::Chebyshev2BandPassFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t);
  }
  
  result = (DSP::Chebyshev2Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev2BandPassFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::Chebyshev2BandPassFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< float >::Chebyshev2BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::Chebyshev2BandPassFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::Chebyshev2BandPassFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::Chebyshev2BandPassFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::Chebyshev2BandPassFilter",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::Chebyshev2BandPassFilter",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (DSP::Chebyshev2BandPassFilter< float > *)new DSP::Chebyshev2BandPassFilter< float >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandPassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< float > *arg1 = (DSP::Chebyshev2BandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::apply",1,"DSP::Chebyshev2BandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandPassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< float > *arg1 = (DSP::Chebyshev2BandPassFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::apply",1,"DSP::Chebyshev2BandPassFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandPassFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandPassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev2BandPassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev2BandPassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev2BandPassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2BandPassFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev2BandPassFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev2BandPassFilter(void *obj) {
DSP::Chebyshev2BandPassFilter< float > *arg1 = (DSP::Chebyshev2BandPassFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev2BandPassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev2BandPassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev2BandPassFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev2BandPassFilter_filter_get, _wrap_FloatChevyshev2BandPassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev2BandPassFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev2BandPassFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev2BandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic = {
    "FloatChevyshev2BandPassFilter",
    swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev2BandPassFilter_bases[] = {0};
static const char *swig_FloatChevyshev2BandPassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev2BandPassFilter = { "FloatChevyshev2BandPassFilter", "FloatChevyshev2BandPassFilter", &SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_float_t,_proxy__wrap_new_FloatChevyshev2BandPassFilter, swig_delete_FloatChevyshev2BandPassFilter, swig_FloatChevyshev2BandPassFilter_methods, swig_FloatChevyshev2BandPassFilter_attributes, &swig_FloatChevyshev2BandPassFilter_Sf_SwigStatic, swig_FloatChevyshev2BandPassFilter_meta, swig_FloatChevyshev2BandPassFilter_bases, swig_FloatChevyshev2BandPassFilter_base_names };

static int _wrap_FloatChevyshev2BandStopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< float > *arg1 = (DSP::Chebyshev2BandStopFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *arg2 = (DSP::Chebyshev2Filter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< float >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::filter",1,"DSP::Chebyshev2BandStopFilter< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::filter",2,"DSP::Chebyshev2Filter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandStopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< float > *arg1 = (DSP::Chebyshev2BandStopFilter< float > *) 0 ;
  DSP::Chebyshev2Filter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< float >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::filter",1,"DSP::Chebyshev2BandStopFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t);
  }
  
  result = (DSP::Chebyshev2Filter< float > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatChevyshev2BandStopFilter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::Chebyshev2BandStopFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< float >::Chebyshev2BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::Chebyshev2BandStopFilter",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::Chebyshev2BandStopFilter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::Chebyshev2BandStopFilter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::Chebyshev2BandStopFilter",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::Chebyshev2BandStopFilter",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (DSP::Chebyshev2BandStopFilter< float > *)new DSP::Chebyshev2BandStopFilter< float >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandStopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< float > *arg1 = (DSP::Chebyshev2BandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::apply",1,"DSP::Chebyshev2BandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandStopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< float > *arg1 = (DSP::Chebyshev2BandStopFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::apply",1,"DSP::Chebyshev2BandStopFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatChevyshev2BandStopFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatChevyshev2BandStopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatChevyshev2BandStopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatChevyshev2BandStopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatChevyshev2BandStopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2BandStopFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::Chebyshev2BandStopFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatChevyshev2BandStopFilter(void *obj) {
DSP::Chebyshev2BandStopFilter< float > *arg1 = (DSP::Chebyshev2BandStopFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatChevyshev2BandStopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatChevyshev2BandStopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatChevyshev2BandStopFilter_attributes[] = {
    { "filter", _wrap_FloatChevyshev2BandStopFilter_filter_get, _wrap_FloatChevyshev2BandStopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FloatChevyshev2BandStopFilter_methods[]= {
    { "apply", _wrap_FloatChevyshev2BandStopFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatChevyshev2BandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic = {
    "FloatChevyshev2BandStopFilter",
    swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_methods,
    swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_attributes,
    swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_constants,
    swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatChevyshev2BandStopFilter_bases[] = {0};
static const char *swig_FloatChevyshev2BandStopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatChevyshev2BandStopFilter = { "FloatChevyshev2BandStopFilter", "FloatChevyshev2BandStopFilter", &SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_float_t,_proxy__wrap_new_FloatChevyshev2BandStopFilter, swig_delete_FloatChevyshev2BandStopFilter, swig_FloatChevyshev2BandStopFilter_methods, swig_FloatChevyshev2BandStopFilter_attributes, &swig_FloatChevyshev2BandStopFilter_Sf_SwigStatic, swig_FloatChevyshev2BandStopFilter_meta, swig_FloatChevyshev2BandStopFilter_bases, swig_FloatChevyshev2BandStopFilter_base_names };

static int _wrap_interleavef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< float > *arg1 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::do_interleave< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::do_interleave< float >",1,"DSP::UniVector2D< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("interleavef",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR do_interleave< float >((DSP::UniVector2D< float > const &)*arg1);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleavef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< float > *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("DSP::do_deinterleave< float >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::do_deinterleave< float >",1,"DSP::UniVector2D< float > &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::do_deinterleave< float >",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::do_deinterleave< float >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::do_deinterleave< float >",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_float_t,0))){
    SWIG_fail_ptr("deinterleavef",1,SWIGTYPE_p_DSP__UniVector2DT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("deinterleavef",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  DSP::SWIGTEMPLATEDISAMBIGUATOR do_deinterleave< float >(*arg1,(float const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleaved(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< double > *arg1 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::do_interleave< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::do_interleave< double >",1,"DSP::UniVector2D< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("interleaved",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR do_interleave< double >((DSP::UniVector2D< double > const &)*arg1);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleaved(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector2D< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("DSP::do_deinterleave< double >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::do_deinterleave< double >",1,"DSP::UniVector2D< double > &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::do_deinterleave< double >",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::do_deinterleave< double >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::do_deinterleave< double >",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVector2DT_double_t,0))){
    SWIG_fail_ptr("deinterleaved",1,SWIGTYPE_p_DSP__UniVector2DT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("deinterleaved",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  DSP::SWIGTEMPLATEDISAMBIGUATOR do_deinterleave< double >(*arg1,(double const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > *arg4 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::bessel_lowpass< float >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_lowpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_lowpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_lowpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_lowpass< float >",4,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("bessel_lowpassf",4,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_lowpass< float >(arg1,arg2,arg3,(DSP::UniVector< float > const &)*arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > *arg4 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::bessel_highpass< float >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_highpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_highpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_highpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_highpass< float >",4,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("bessel_highpassf",4,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_highpass< float >(arg1,arg2,arg3,(DSP::UniVector< float > const &)*arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::bessel_bandpass< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_bandpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_bandpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::bessel_bandpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandpass< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("bessel_bandpassf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandpass< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstopf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::bessel_bandstop< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandstop< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_bandstop< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_bandstop< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::bessel_bandstop< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandstop< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("bessel_bandstopf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandstop< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > *arg4 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::butterworth_lowpass< float >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_lowpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_lowpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_lowpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_lowpass< float >",4,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("butterworth_lowpassf",4,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_lowpass< float >(arg1,arg2,arg3,(DSP::UniVector< float > const &)*arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  DSP::UniVector< float > *arg4 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::butterworth_highpass< float >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_highpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_highpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_highpass< float >",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_highpass< float >",4,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("butterworth_highpassf",4,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_highpass< float >(arg1,arg2,arg3,(DSP::UniVector< float > const &)*arg4);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::butterworth_bandpass< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_bandpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_bandpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::butterworth_bandpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandpass< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("butterworth_bandpassf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandpass< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstopf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::butterworth_bandstop< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandstop< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_bandstop< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_bandstop< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::butterworth_bandstop< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandstop< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("butterworth_bandstopf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandstop< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_lowpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev1_lowpass< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_lowpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_lowpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_lowpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_lowpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_lowpass< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev1_lowpassf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_lowpass< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_highpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev1_highpass< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_highpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_highpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_highpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_highpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_highpass< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev1_highpassf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_highpass< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::UniVector< float > *arg6 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandpass< float >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandpass< float >",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandpass< float >",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandpass< float >",6,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev1_bandpassf",6,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandpass< float >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< float > const &)*arg6);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandstopf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::UniVector< float > *arg6 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandstop< float >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandstop< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandstop< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandstop< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandstop< float >",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandstop< float >",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandstop< float >",6,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev1_bandstopf",6,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandstop< float >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< float > const &)*arg6);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_lowpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev2_lowpass< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_lowpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_lowpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_lowpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_lowpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_lowpass< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev2_lowpassf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_lowpass< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_highpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  DSP::UniVector< float > *arg5 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev2_highpass< float >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_highpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_highpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_highpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_highpass< float >",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_highpass< float >",5,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev2_highpassf",5,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_highpass< float >(arg1,arg2,arg3,arg4,(DSP::UniVector< float > const &)*arg5);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandpassf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::UniVector< float > *arg6 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandpass< float >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandpass< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandpass< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandpass< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandpass< float >",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandpass< float >",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandpass< float >",6,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev2_bandpassf",6,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandpass< float >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< float > const &)*arg6);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandstopf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  DSP::UniVector< float > *arg6 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandstop< float >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandstop< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandstop< float >",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandstop< float >",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandstop< float >",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandstop< float >",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandstop< float >",6,"DSP::UniVector< float > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("chebyshev2_bandstopf",6,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandstop< float >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< float > const &)*arg6);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > *arg4 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_lowpass< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_lowpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_lowpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_lowpass< f64 >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_lowpass< f64 >",4,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_lowpassf",4,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_lowpass< f64 >(arg1,arg2,arg3,(DSP::UniVector< double > const &)*arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpassf(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_bessel_lowpassf__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_bessel_lowpassf__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_lowpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::bessel_lowpass< float >(int,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::bessel_lowpass< f64 >(int,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_bessel_highpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > *arg4 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_highpass< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_highpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_highpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_highpass< f64 >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_highpass< f64 >",4,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_highpassf",4,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_highpass< f64 >(arg1,arg2,arg3,(DSP::UniVector< double > const &)*arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpassf(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_bessel_highpassf__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_bessel_highpassf__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_highpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::bessel_highpass< float >(int,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::bessel_highpass< f64 >(int,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_bessel_bandpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_bandpass< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_bandpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_bandpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::bessel_bandpass< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandpass< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_bandpassf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandpass< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_bessel_bandpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_bessel_bandpassf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_bandpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::bessel_bandpass< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::bessel_bandpass< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_bessel_bandstopf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::bessel_bandstop< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandstop< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::bessel_bandstop< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::bessel_bandstop< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::bessel_bandstop< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandstop< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("bessel_bandstopf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandstop< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstopf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_bessel_bandstopf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_bessel_bandstopf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_bandstopf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::bessel_bandstop< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::bessel_bandstop< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_butterworth_lowpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > *arg4 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_lowpass< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_lowpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_lowpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_lowpass< f64 >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_lowpass< f64 >",4,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_lowpassf",4,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_lowpass< f64 >(arg1,arg2,arg3,(DSP::UniVector< double > const &)*arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpassf(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_butterworth_lowpassf__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_butterworth_lowpassf__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_lowpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::butterworth_lowpass< float >(int,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::butterworth_lowpass< f64 >(int,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_butterworth_highpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  DSP::UniVector< double > *arg4 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_highpass< f64 >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_highpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_highpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_highpass< f64 >",3,"double");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_highpass< f64 >",4,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_highpassf",4,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_highpass< f64 >(arg1,arg2,arg3,(DSP::UniVector< double > const &)*arg4);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpassf(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_butterworth_highpassf__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_butterworth_highpassf__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_highpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::butterworth_highpass< float >(int,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::butterworth_highpass< f64 >(int,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_butterworth_bandpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_bandpass< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_bandpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_bandpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::butterworth_bandpass< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandpass< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_bandpassf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandpass< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_butterworth_bandpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_butterworth_bandpassf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_bandpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::butterworth_bandpass< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::butterworth_bandpass< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_butterworth_bandstopf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::butterworth_bandstop< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandstop< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::butterworth_bandstop< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::butterworth_bandstop< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::butterworth_bandstop< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandstop< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("butterworth_bandstopf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandstop< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstopf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_butterworth_bandstopf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_butterworth_bandstopf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_bandstopf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::butterworth_bandstop< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::butterworth_bandstop< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev1_lowpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_lowpass< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_lowpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_lowpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_lowpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_lowpass< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_lowpass< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_lowpassf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_lowpass< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_lowpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev1_lowpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev1_lowpassf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev1_lowpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev1_lowpass< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev1_lowpass< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev1_highpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_highpass< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_highpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_highpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_highpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_highpass< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_highpass< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_highpassf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_highpass< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_highpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev1_highpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev1_highpassf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev1_highpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev1_highpass< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev1_highpass< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev1_bandpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::UniVector< double > *arg6 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandpass< f64 >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandpass< f64 >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandpass< f64 >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandpass< f64 >",6,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_bandpassf",6,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandpass< f64 >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< double > const &)*arg6);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandpassf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev1_bandpassf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev1_bandpassf__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev1_bandpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev1_bandpass< float >(int,float,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev1_bandpass< f64 >(int,double,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev1_bandstopf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::UniVector< double > *arg6 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandstop< f64 >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandstop< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandstop< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandstop< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandstop< f64 >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandstop< f64 >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandstop< f64 >",6,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev1_bandstopf",6,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandstop< f64 >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< double > const &)*arg6);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandstopf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev1_bandstopf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev1_bandstopf__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev1_bandstopf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev1_bandstop< float >(int,float,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev1_bandstop< f64 >(int,double,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev2_lowpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_lowpass< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_lowpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_lowpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_lowpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_lowpass< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_lowpass< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_lowpassf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_lowpass< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_lowpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev2_lowpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev2_lowpassf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev2_lowpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev2_lowpass< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev2_lowpass< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev2_highpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  DSP::UniVector< double > *arg5 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_highpass< f64 >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_highpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_highpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_highpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_highpass< f64 >",4,"double");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_highpass< f64 >",5,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_highpassf",5,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_highpass< f64 >(arg1,arg2,arg3,arg4,(DSP::UniVector< double > const &)*arg5);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_highpassf(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev2_highpassf__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_chebyshev2_highpassf__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev2_highpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev2_highpass< float >(int,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev2_highpass< f64 >(int,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev2_bandpassf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::UniVector< double > *arg6 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandpass< f64 >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandpass< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandpass< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandpass< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandpass< f64 >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandpass< f64 >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandpass< f64 >",6,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_bandpassf",6,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandpass< f64 >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< double > const &)*arg6);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandpassf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev2_bandpassf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev2_bandpassf__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev2_bandpassf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev2_bandpass< float >(int,float,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev2_bandpass< f64 >(int,double,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_chebyshev2_bandstopf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  DSP::UniVector< double > *arg6 = 0 ;
  DSP::UniVector< double > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandstop< f64 >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandstop< f64 >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandstop< f64 >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandstop< f64 >",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandstop< f64 >",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandstop< f64 >",5,"double");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandstop< f64 >",6,"DSP::UniVector< double > const &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_DSP__UniVectorT_double_t,0))){
    SWIG_fail_ptr("chebyshev2_bandstopf",6,SWIGTYPE_p_DSP__UniVectorT_double_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandstop< f64 >(arg1,arg2,arg3,arg4,arg5,(DSP::UniVector< double > const &)*arg6);
  {
    DSP::UniVector< double > * resultptr = new DSP::UniVector< double >((const DSP::UniVector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandstopf(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev2_bandstopf__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_double_t, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_chebyshev2_bandstopf__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chebyshev2_bandstopf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::chebyshev2_bandstop< float >(int,float,float,float,float,DSP::UniVector< float > const &)\n"
    "    DSP::chebyshev2_bandstop< f64 >(int,double,double,double,double,DSP::UniVector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_convolvef(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > result;
  
  SWIG_check_num_args("DSP::convolve< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::convolve< float >",1,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::convolve< float >",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("convolvef",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("convolvef",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR convolve< float >((DSP::UniVector< float > const &)*arg1,(DSP::UniVector< float > const &)*arg2);
  {
    DSP::UniVector< float > * resultptr = new DSP::UniVector< float >((const DSP::UniVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DSP__UniVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatConvolveFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  DSP::ConvolveFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::ConvolveFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::ConvolveFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< float >::ConvolveFilter",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::ConvolveFilter< float > *)new DSP::ConvolveFilter< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatConvolveFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::ConvolveFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::ConvolveFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::ConvolveFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::ConvolveFilter< float > *)new DSP::ConvolveFilter< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatConvolveFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  size_t arg2 ;
  DSP::ConvolveFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::ConvolveFilter",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::ConvolveFilter",1,"DSP::UniVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< float >::ConvolveFilter",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatConvolveFilter",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DSP::ConvolveFilter< float > *)new DSP::ConvolveFilter< float >(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatConvolveFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DSP::UniVector< float > *arg1 = 0 ;
  DSP::ConvolveFilter< float > *result = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::ConvolveFilter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::ConvolveFilter",1,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatConvolveFilter",1,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  result = (DSP::ConvolveFilter< float > *)new DSP::ConvolveFilter< float >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatConvolveFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatConvolveFilter__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatConvolveFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatConvolveFilter__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatConvolveFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatConvolveFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ConvolveFilter< float >::ConvolveFilter(size_t,size_t)\n"
    "    DSP::ConvolveFilter< float >::ConvolveFilter(size_t)\n"
    "    DSP::ConvolveFilter< float >::ConvolveFilter(DSP::UniVector< float > &,size_t)\n"
    "    DSP::ConvolveFilter< float >::ConvolveFilter(DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatConvolveFilter_set_data(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< float > *arg1 = (DSP::ConvolveFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::set_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::set_data",1,"DSP::ConvolveFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< float >::set_data",2,"DSP::UniVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_set_data",1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_set_data",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->set_data((DSP::UniVector< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatConvolveFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< float > *arg1 = (DSP::ConvolveFilter< float > *) 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::reset",1,"DSP::ConvolveFilter< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_reset",1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatConvolveFilter_input_block_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< float > *arg1 = (DSP::ConvolveFilter< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::input_block_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::input_block_size",1,"DSP::ConvolveFilter< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_input_block_size",1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t);
  }
  
  result = ((DSP::ConvolveFilter< float > const *)arg1)->input_block_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatConvolveFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< float > *arg1 = (DSP::ConvolveFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::apply",1,"DSP::ConvolveFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< float >::apply",2,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_apply",1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatConvolveFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ConvolveFilter< float > *arg1 = (DSP::ConvolveFilter< float > *) 0 ;
  DSP::UniVector< float > *arg2 = 0 ;
  DSP::UniVector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ConvolveFilter< float >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ConvolveFilter< float >::apply",1,"DSP::ConvolveFilter< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ConvolveFilter< float >::apply",2,"DSP::UniVector< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ConvolveFilter< float >::apply",3,"DSP::UniVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_apply",1,SWIGTYPE_p_DSP__ConvolveFilterT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_apply",2,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_DSP__UniVectorT_float_t,0))){
    SWIG_fail_ptr("FloatConvolveFilter_apply",3,SWIGTYPE_p_DSP__UniVectorT_float_t);
  }
  
  (arg1)->apply((DSP::UniVector< float > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatConvolveFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ConvolveFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatConvolveFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ConvolveFilterT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_DSP__UniVectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatConvolveFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatConvolveFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ConvolveFilter< float >::apply(DSP::UniVector< float > &)\n"
    "    DSP::ConvolveFilter< float >::apply(DSP::UniVector< float > const &,DSP::UniVector< float > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatConvolveFilter(void *obj) {
DSP::ConvolveFilter< float > *arg1 = (DSP::ConvolveFilter< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatConvolveFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatConvolveFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatConvolveFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatConvolveFilter_methods[]= {
    { "set_data", _wrap_FloatConvolveFilter_set_data},
    { "reset", _wrap_FloatConvolveFilter_reset},
    { "input_block_size", _wrap_FloatConvolveFilter_input_block_size},
    { "apply", _wrap_FloatConvolveFilter_apply},
    {0,0}
};
static swig_lua_method swig_FloatConvolveFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatConvolveFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatConvolveFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatConvolveFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatConvolveFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatConvolveFilter_Sf_SwigStatic = {
    "FloatConvolveFilter",
    swig_FloatConvolveFilter_Sf_SwigStatic_methods,
    swig_FloatConvolveFilter_Sf_SwigStatic_attributes,
    swig_FloatConvolveFilter_Sf_SwigStatic_constants,
    swig_FloatConvolveFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatConvolveFilter_bases[] = {0};
static const char *swig_FloatConvolveFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FloatConvolveFilter = { "FloatConvolveFilter", "FloatConvolveFilter", &SWIGTYPE_p_DSP__ConvolveFilterT_float_t,_proxy__wrap_new_FloatConvolveFilter, swig_delete_FloatConvolveFilter, swig_FloatConvolveFilter_methods, swig_FloatConvolveFilter_attributes, &swig_FloatConvolveFilter_Sf_SwigStatic, swig_FloatConvolveFilter_meta, swig_FloatConvolveFilter_bases, swig_FloatConvolveFilter_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("FloatBesselFilter_maxorder",&DSP::BesselFilter< float >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("FloatButterworthFilter_maxorder",&DSP::ButterworthFilter< float >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("FloatChevyshev1Filter_maxorder",&DSP::Chebyshev1Filter< float >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("FloatChevyshev2Filter_maxorder",&DSP::Chebyshev2Filter< float >::maxorder, SWIGTYPE_p_size_t) },
    {SWIG_LUA_CONSTTAB_INT("audio_sample_unknown", kfr::audio_sample_type::unknown)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i8", kfr::audio_sample_type::i8)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i16", kfr::audio_sample_type::i16)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i24", kfr::audio_sample_type::i24)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i32", kfr::audio_sample_type::i32)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_i64", kfr::audio_sample_type::i64)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_f32", kfr::audio_sample_type::f32)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_f64", kfr::audio_sample_type::f64)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "dB_to_string", _wrap_dB_to_string},
    { "dB_to_utf8string", _wrap_dB_to_utf8string},
    { "biquadf", _wrap_biquadf},
    { "biquadd", _wrap_biquadd},
    { "notchf", _wrap_notchf},
    { "notchd", _wrap_notchd},
    { "lowpassf", _wrap_lowpassf},
    { "lowpassd", _wrap_lowpassd},
    { "highpassf", _wrap_highpassf},
    { "highpassd", _wrap_highpassd},
    { "peakf", _wrap_peakf},
    { "peakd", _wrap_peakd},
    { "lowshelff", _wrap_lowshelff},
    { "lowshelfd", _wrap_lowshelfd},
    { "highshelff", _wrap_highshelff},
    { "highshelfd", _wrap_highshelfd},
    { "bandpassf", _wrap_bandpassf},
    { "bandpassd", _wrap_bandpassd},
    { "normalize_frequencyf", _wrap_normalize_frequencyf},
    { "normalize_frequencyd", _wrap_normalize_frequencyd},
    { "linspacef", _wrap_linspacef},
    { "padf", _wrap_padf},
    { "slicef", _wrap_slicef},
    { "truncatef", _wrap_truncatef},
    { "reversef", _wrap_reversef},
    { "linspaced", _wrap_linspaced},
    { "padd", _wrap_padd},
    { "sliced", _wrap_sliced},
    { "truncated", _wrap_truncated},
    { "reversed", _wrap_reversed},
    { "ringbuf_readf", _wrap_ringbuf_readf},
    { "ringbuf_writef", _wrap_ringbuf_writef},
    { "ringbuf_readd", _wrap_ringbuf_readd},
    { "ringbuf_writed", _wrap_ringbuf_writed},
    { "absf", _wrap_absf},
    { "addf", _wrap_addf},
    { "absmaxf", _wrap_absmaxf},
    { "absminf", _wrap_absminf},
    { "clampf", _wrap_clampf},
    { "cubef", _wrap_cubef},
    { "divf", _wrap_divf},
    { "fmaddf", _wrap_fmaddf},
    { "fmsubf", _wrap_fmsubf},
    { "maxf", _wrap_maxf},
    { "minf", _wrap_minf},
    { "mixf", _wrap_mixf},
    { "mixsf", _wrap_mixsf},
    { "mulf", _wrap_mulf},
    { "negf", _wrap_negf},
    { "sqrf", _wrap_sqrf},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp10f", _wrap_exp10f},
    { "exp2f", _wrap_exp2f},
    { "exp_fmaddf", _wrap_exp_fmaddf},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "log_fmaddf", _wrap_log_fmaddf},
    { "logbf", _wrap_logbf},
    { "logmf", _wrap_logmf},
    { "lognf", _wrap_lognf},
    { "powf", _wrap_powf},
    { "rootf", _wrap_rootf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "cothf", _wrap_cothf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "atan2degf", _wrap_atan2degf},
    { "cosdegf", _wrap_cosdegf},
    { "sindegf", _wrap_sindegf},
    { "sincf", _wrap_sincf},
    { "gammaf", _wrap_gammaf},
    { "absmaxof", _wrap_absmaxof},
    { "dotf", _wrap_dotf},
    { "maxoff", _wrap_maxoff},
    { "minoff", _wrap_minoff},
    { "meanf", _wrap_meanf},
    { "prdocutf", _wrap_prdocutf},
    { "rmsf", _wrap_rmsf},
    { "sumf", _wrap_sumf},
    { "sumsqrf", _wrap_sumsqrf},
    { "ipowf", _wrap_ipowf},
    { "cos2xf", _wrap_cos2xf},
    { "sin2xf", _wrap_sin2xf},
    { "cos3xf", _wrap_cos3xf},
    { "sin3xf", _wrap_sin3xf},
    { "reciprocalf", _wrap_reciprocalf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "lgammaf", _wrap_lgammaf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "addd", _wrap_addd},
    { "absmaxd", _wrap_absmaxd},
    { "absmind", _wrap_absmind},
    { "clampd", _wrap_clampd},
    { "cubed", _wrap_cubed},
    { "divd", _wrap_divd},
    { "fmaddd", _wrap_fmaddd},
    { "fmsubd", _wrap_fmsubd},
    { "maxd", _wrap_maxd},
    { "mind", _wrap_mind},
    { "mixd", _wrap_mixd},
    { "mixsd", _wrap_mixsd},
    { "muld", _wrap_muld},
    { "negd", _wrap_negd},
    { "sqrd", _wrap_sqrd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp10d", _wrap_exp10d},
    { "exp2d", _wrap_exp2d},
    { "exp_fmaddd", _wrap_exp_fmaddd},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "log_fmaddd", _wrap_log_fmaddd},
    { "logbd", _wrap_logbd},
    { "logmd", _wrap_logmd},
    { "lognd", _wrap_lognd},
    { "powd", _wrap_powd},
    { "rootd", _wrap_rootd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "cothd", _wrap_cothd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "atan2degd", _wrap_atan2degd},
    { "cosdegd", _wrap_cosdegd},
    { "sindegd", _wrap_sindegd},
    { "sincd", _wrap_sincd},
    { "gammad", _wrap_gammad},
    { "absmaxod", _wrap_absmaxod},
    { "dotd", _wrap_dotd},
    { "maxofd", _wrap_maxofd},
    { "minofd", _wrap_minofd},
    { "meand", _wrap_meand},
    { "prdocutd", _wrap_prdocutd},
    { "rmsd", _wrap_rmsd},
    { "sumd", _wrap_sumd},
    { "sumsqrd", _wrap_sumsqrd},
    { "ipowd", _wrap_ipowd},
    { "cos2xd", _wrap_cos2xd},
    { "sin2xd", _wrap_sin2xd},
    { "cos3xd", _wrap_cos3xd},
    { "sin3xd", _wrap_sin3xd},
    { "reciprocald", _wrap_reciprocald},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "lgammad", _wrap_lgammad},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "make_complexf", _wrap_make_complexf},
    { "make_complexd", _wrap_make_complexd},
    { "make_univectorf", _wrap_make_univectorf},
    { "make_univectord", _wrap_make_univectord},
    { "make_univectori8", _wrap_make_univectori8},
    { "make_univectoru8", _wrap_make_univectoru8},
    { "make_univectori16", _wrap_make_univectori16},
    { "make_univectoru16", _wrap_make_univectoru16},
    { "make_univectori32", _wrap_make_univectori32},
    { "make_univectoru32", _wrap_make_univectoru32},
    { "window_hannf", _wrap_window_hannf},
    { "window_hammingf", _wrap_window_hammingf},
    { "window_blackmanf", _wrap_window_blackmanf},
    { "window_blackman_harrisf", _wrap_window_blackman_harrisf},
    { "window_gaussianf", _wrap_window_gaussianf},
    { "window_triangularf", _wrap_window_triangularf},
    { "window_bartlettf", _wrap_window_bartlettf},
    { "window_cosinef", _wrap_window_cosinef},
    { "window_bartlett_hannf", _wrap_window_bartlett_hannf},
    { "window_bohmanf", _wrap_window_bohmanf},
    { "window_lanczosf", _wrap_window_lanczosf},
    { "window_flattopf", _wrap_window_flattopf},
    { "window_kaiserf", _wrap_window_kaiserf},
    { "window_hannd", _wrap_window_hannd},
    { "window_hammingd", _wrap_window_hammingd},
    { "window_blackmand", _wrap_window_blackmand},
    { "window_blackman_harrisd", _wrap_window_blackman_harrisd},
    { "window_gaussiand", _wrap_window_gaussiand},
    { "window_triangulard", _wrap_window_triangulard},
    { "window_bartlettd", _wrap_window_bartlettd},
    { "window_cosined", _wrap_window_cosined},
    { "window_bartlett_hannd", _wrap_window_bartlett_hannd},
    { "window_bohmand", _wrap_window_bohmand},
    { "window_lanczosd", _wrap_window_lanczosd},
    { "window_dlattopd", _wrap_window_dlattopd},
    { "window_kaiserd", _wrap_window_kaiserd},
    { "window_hann_ptrf", _wrap_window_hann_ptrf},
    { "window_hamming_ptrf", _wrap_window_hamming_ptrf},
    { "window_blackman_ptrf", _wrap_window_blackman_ptrf},
    { "window_blackman_harris_ptrf", _wrap_window_blackman_harris_ptrf},
    { "window_gaussian_ptrf", _wrap_window_gaussian_ptrf},
    { "window_triangular_ptrf", _wrap_window_triangular_ptrf},
    { "window_bartlett_ptrf", _wrap_window_bartlett_ptrf},
    { "window_cosine_ptrf", _wrap_window_cosine_ptrf},
    { "window_bartlett_hann_ptrf", _wrap_window_bartlett_hann_ptrf},
    { "window_bohman_ptrf", _wrap_window_bohman_ptrf},
    { "window_lanczos_ptrf", _wrap_window_lanczos_ptrf},
    { "window_flattop_ptrf", _wrap_window_flattop_ptrf},
    { "window_kaiser_ptrf", _wrap_window_kaiser_ptrf},
    { "window_hann_ptrd", _wrap_window_hann_ptrd},
    { "window_hamming_ptrd", _wrap_window_hamming_ptrd},
    { "window_blackman_ptrd", _wrap_window_blackman_ptrd},
    { "window_blackman_harris_ptrd", _wrap_window_blackman_harris_ptrd},
    { "window_gaussian_ptrd", _wrap_window_gaussian_ptrd},
    { "window_triangular_ptrd", _wrap_window_triangular_ptrd},
    { "window_bartlett_ptrd", _wrap_window_bartlett_ptrd},
    { "window_cosine_ptrd", _wrap_window_cosine_ptrd},
    { "window_bartlett_hann_ptrd", _wrap_window_bartlett_hann_ptrd},
    { "window_bohman_ptrd", _wrap_window_bohman_ptrd},
    { "window_lanczos_ptrd", _wrap_window_lanczos_ptrd},
    { "window_dlattop_ptrd", _wrap_window_dlattop_ptrd},
    { "window_kaiser_ptrd", _wrap_window_kaiser_ptrd},
    { "dftf", _wrap_dftf},
    { "realdftf", _wrap_realdftf},
    { "idftf", _wrap_idftf},
    { "irealdftf", _wrap_irealdftf},
    { "dftd", _wrap_dftd},
    { "realdftd", _wrap_realdftd},
    { "idftd", _wrap_idftd},
    { "irealdftd", _wrap_irealdftd},
    { "roli32", _wrap_roli32},
    { "ro4i32", _wrap_ro4i32},
    { "shli32", _wrap_shli32},
    { "shri32", _wrap_shri32},
    { "remi32", _wrap_remi32},
    { "sataddi32", _wrap_sataddi32},
    { "satsubi32", _wrap_satsubi32},
    { "bitwiseandi32", _wrap_bitwiseandi32},
    { "bitwiseori32", _wrap_bitwiseori32},
    { "bitwisexori32", _wrap_bitwisexori32},
    { "bitwiseandnoti32", _wrap_bitwiseandnoti32},
    { "bitwisenoti32", _wrap_bitwisenoti32},
    { "roli64", _wrap_roli64},
    { "ro4i64", _wrap_ro4i64},
    { "shli64", _wrap_shli64},
    { "shri64", _wrap_shri64},
    { "remi64", _wrap_remi64},
    { "sataddi64", _wrap_sataddi64},
    { "satsubi64", _wrap_satsubi64},
    { "bitwiseandi64", _wrap_bitwiseandi64},
    { "bitwiseori64", _wrap_bitwiseori64},
    { "bitwisexori64", _wrap_bitwisexori64},
    { "bitwiseandnoti64", _wrap_bitwiseandnoti64},
    { "bitwisenoti64", _wrap_bitwisenoti64},
    { "energy_to_loudnessf", _wrap_energy_to_loudnessf},
    { "loudness_to_energyf", _wrap_loudness_to_energyf},
    { "energy_to_loudnessd", _wrap_energy_to_loudnessd},
    { "loudness_to_energyd", _wrap_loudness_to_energyd},
    { "dcremovef", _wrap_dcremovef},
    { "dcremoved", _wrap_dcremoved},
    { "randomf", _wrap_randomf},
    { "plot_savef", _wrap_plot_savef},
    { "plot_showf", _wrap_plot_showf},
    { "sinewavef", _wrap_sinewavef},
    { "squarewavef", _wrap_squarewavef},
    { "trianglewavef", _wrap_trianglewavef},
    { "sawtoothwavef", _wrap_sawtoothwavef},
    { "generate_sinef", _wrap_generate_sinef},
    { "generate_linearf", _wrap_generate_linearf},
    { "generate_expf", _wrap_generate_expf},
    { "generate_exp2f", _wrap_generate_exp2f},
    { "generate_cossinf", _wrap_generate_cossinf},
    { "randomd", _wrap_randomd},
    { "plot_saved", _wrap_plot_saved},
    { "plot_showd", _wrap_plot_showd},
    { "sinewaved", _wrap_sinewaved},
    { "squarewaved", _wrap_squarewaved},
    { "trianglewaved", _wrap_trianglewaved},
    { "sawtoothwaved", _wrap_sawtoothwaved},
    { "generate_sined", _wrap_generate_sined},
    { "generate_lineard", _wrap_generate_lineard},
    { "generate_expd", _wrap_generate_expd},
    { "generate_exp2d", _wrap_generate_exp2d},
    { "generate_cossind", _wrap_generate_cossind},
    { "autocorrelatef", _wrap_autocorrelatef},
    { "correlatef", _wrap_correlatef},
    { "resamplef", _wrap_resamplef},
    { "convert_samplef", _wrap_convert_samplef},
    { "amp_to_dBf", _wrap_amp_to_dBf},
    { "fir_lowpassf", _wrap_fir_lowpassf},
    { "fir_highpassf", _wrap_fir_highpassf},
    { "fir_bandpassf", _wrap_fir_bandpassf},
    { "fir_bandstopf", _wrap_fir_bandstopf},
    { "interleavef", _wrap_interleavef},
    { "deinterleavef", _wrap_deinterleavef},
    { "interleaved", _wrap_interleaved},
    { "deinterleaved", _wrap_deinterleaved},
    { "bessel_lowpassf", _wrap_bessel_lowpassf},
    { "bessel_highpassf", _wrap_bessel_highpassf},
    { "bessel_bandpassf", _wrap_bessel_bandpassf},
    { "bessel_bandstopf", _wrap_bessel_bandstopf},
    { "butterworth_lowpassf", _wrap_butterworth_lowpassf},
    { "butterworth_highpassf", _wrap_butterworth_highpassf},
    { "butterworth_bandpassf", _wrap_butterworth_bandpassf},
    { "butterworth_bandstopf", _wrap_butterworth_bandstopf},
    { "chebyshev1_lowpassf", _wrap_chebyshev1_lowpassf},
    { "chebyshev1_highpassf", _wrap_chebyshev1_highpassf},
    { "chebyshev1_bandpassf", _wrap_chebyshev1_bandpassf},
    { "chebyshev1_bandstopf", _wrap_chebyshev1_bandstopf},
    { "chebyshev2_lowpassf", _wrap_chebyshev2_lowpassf},
    { "chebyshev2_highpassf", _wrap_chebyshev2_highpassf},
    { "chebyshev2_bandpassf", _wrap_chebyshev2_bandpassf},
    { "chebyshev2_bandstopf", _wrap_chebyshev2_bandstopf},
    { "convolvef", _wrap_convolvef},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_int8_vector,
&_wrap_class_uint8_vector,
&_wrap_class_int16_vector,
&_wrap_class_uint16_vector,
&_wrap_class_int32_vector,
&_wrap_class_uint32_vector,
&_wrap_class_int64_vector,
&_wrap_class_FloatScalar,
&_wrap_class_DoubleScalar,
&_wrap_class_Int8Scalar,
&_wrap_class_UInt8Scalar,
&_wrap_class_Int16Scalar,
&_wrap_class_UInt16Scalar,
&_wrap_class_Int32Scalar,
&_wrap_class_UInt32Scalar,
&_wrap_class_Int64Scalar,
&_wrap_class_UInt64Scalar,
&_wrap_class_FloatComplex,
&_wrap_class_DoubleComplex,
&_wrap_class_FloatVector,
&_wrap_class_DoubleVector,
&_wrap_class_ComplexVector,
&_wrap_class_DoubleComplexVector,
&_wrap_class_Int8Vector,
&_wrap_class_UInt8Vector,
&_wrap_class_Int16Vector,
&_wrap_class_UInt16Vector,
&_wrap_class_Int32Vector,
&_wrap_class_UInt32Vector,
&_wrap_class_Int64Vector,
&_wrap_class_UInt64Vector,
&_wrap_class_FloatVector2D,
&_wrap_class_DoubleVector2D,
&_wrap_class_FloatBiquad,
&_wrap_class_DoubleBiquad,
&_wrap_class_FloatBiQuadParams,
&_wrap_class_DoubleBiQuadParams,
&_wrap_class_FloatNotchFilter,
&_wrap_class_DoubleNotchFilter,
&_wrap_class_FloatLowPassFilter,
&_wrap_class_DoubleLowPassFilter,
&_wrap_class_FloatHighPassFilter,
&_wrap_class_DoubleHighPassFilter,
&_wrap_class_FloatBandPassFilter,
&_wrap_class_DoubleBandPassFilter,
&_wrap_class_FloatPeakFilter,
&_wrap_class_DoublePeakFilter,
&_wrap_class_FloatLowShelfFilter,
&_wrap_class_DoubleLowShelfFilter,
&_wrap_class_FloatHighShelfFilter,
&_wrap_class_DoubleHighShelfFilter,
&_wrap_class_FloatWavReader,
&_wrap_class_DoubleWavReader,
&_wrap_class_FloatWavWriter,
&_wrap_class_DoubleWavWriter,
&_wrap_class_FloatMp3Reader,
&_wrap_class_DoubleMp3Reader,
&_wrap_class_FloatFlacReader,
&_wrap_class_DoubleFlacReader,
&_wrap_class_FloatDCTPlan,
&_wrap_class_FloatDFTPlan,
&_wrap_class_FloatDFTRealPlan,
&_wrap_class_FloatFIRFilter,
&_wrap_class_FloatFIRBandpassFilter,
&_wrap_class_FloatFIRLowpassFilter,
&_wrap_class_FloatFIRHighpassFilter,
&_wrap_class_FloatFIRBandstopFilter,
&_wrap_class_FloatBesselFilter,
&_wrap_class_FloatBesselLowPassFilter,
&_wrap_class_FloatBesselHighPassFilter,
&_wrap_class_FloatBesselBandPassFilter,
&_wrap_class_FloatBesselBandStopFilter,
&_wrap_class_FloatButterworthFilter,
&_wrap_class_FloatButterworthLowPassFilter,
&_wrap_class_FloatButterworthHighPassFilter,
&_wrap_class_FloatButterworthBandPassFilter,
&_wrap_class_FloatButterworthBandStopFilter,
&_wrap_class_FloatChevyshev1Filter,
&_wrap_class_FloatChevyshev1LowPassFilter,
&_wrap_class_FloatChevyshev1HighPassFilter,
&_wrap_class_FloatChevyshev1BandPassFilter,
&_wrap_class_FloatChevyshev1BandStopFilter,
&_wrap_class_FloatChevyshev2Filter,
&_wrap_class_FloatChevyshev2LowPassFilter,
&_wrap_class_FloatChevyshev2HighPassFilter,
&_wrap_class_FloatChevyshev2BandPassFilter,
&_wrap_class_FloatChevyshev2BandStopFilter,
&_wrap_class_FloatConvolveFilter,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "kfr",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_DSP__BandPassFilterT_double_t = {"_p_DSP__BandPassFilterT_double_t", "DSP::BandPassFilter< f64 > *|DSP::BandPassFilter< double > *", 0, 0, (void*)&_wrap_class_DoubleBandPassFilter, 0};
static swig_type_info _swigt__p_DSP__BandPassFilterT_float_t = {"_p_DSP__BandPassFilterT_float_t", "DSP::BandPassFilter< float > *|DSP::BandPassFilter< f32 > *", 0, 0, (void*)&_wrap_class_FloatBandPassFilter, 0};
static swig_type_info _swigt__p_DSP__BesselBandPassFilterT_float_t = {"_p_DSP__BesselBandPassFilterT_float_t", "DSP::BesselBandPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatBesselBandPassFilter, 0};
static swig_type_info _swigt__p_DSP__BesselBandStopFilterT_float_t = {"_p_DSP__BesselBandStopFilterT_float_t", "DSP::BesselBandStopFilter< float > *", 0, 0, (void*)&_wrap_class_FloatBesselBandStopFilter, 0};
static swig_type_info _swigt__p_DSP__BesselFilterT_float_t = {"_p_DSP__BesselFilterT_float_t", "DSP::BesselFilter< float > *", 0, 0, (void*)&_wrap_class_FloatBesselFilter, 0};
static swig_type_info _swigt__p_DSP__BesselHighPassFilterT_float_t = {"_p_DSP__BesselHighPassFilterT_float_t", "DSP::BesselHighPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatBesselHighPassFilter, 0};
static swig_type_info _swigt__p_DSP__BesselLowPassFilterT_float_t = {"_p_DSP__BesselLowPassFilterT_float_t", "DSP::BesselLowPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatBesselLowPassFilter, 0};
static swig_type_info _swigt__p_DSP__BiQuadParamsT_double_t = {"_p_DSP__BiQuadParamsT_double_t", "DSP::BiQuadParams< f64 > *|DSP::BiQuadParams< double > *", 0, 0, (void*)&_wrap_class_DoubleBiQuadParams, 0};
static swig_type_info _swigt__p_DSP__BiQuadParamsT_float_t = {"_p_DSP__BiQuadParamsT_float_t", "DSP::BiQuadParams< float > *|DSP::BiQuadParams< f32 > *", 0, 0, (void*)&_wrap_class_FloatBiQuadParams, 0};
static swig_type_info _swigt__p_DSP__BiquadT_double_t = {"_p_DSP__BiquadT_double_t", "DSP::Biquad< f64 > *|DSP::Biquad< double > *", 0, 0, (void*)&_wrap_class_DoubleBiquad, 0};
static swig_type_info _swigt__p_DSP__BiquadT_float_t = {"_p_DSP__BiquadT_float_t", "DSP::Biquad< float > *|DSP::Biquad< f32 > *", 0, 0, (void*)&_wrap_class_FloatBiquad, 0};
static swig_type_info _swigt__p_DSP__ButterworthBandPassFilterT_float_t = {"_p_DSP__ButterworthBandPassFilterT_float_t", "DSP::ButterworthBandPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatButterworthBandPassFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthBandStopFilterT_float_t = {"_p_DSP__ButterworthBandStopFilterT_float_t", "DSP::ButterworthBandStopFilter< float > *", 0, 0, (void*)&_wrap_class_FloatButterworthBandStopFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthFilterT_float_t = {"_p_DSP__ButterworthFilterT_float_t", "DSP::ButterworthFilter< float > *", 0, 0, (void*)&_wrap_class_FloatButterworthFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthHighPassFilterT_float_t = {"_p_DSP__ButterworthHighPassFilterT_float_t", "DSP::ButterworthHighPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatButterworthHighPassFilter, 0};
static swig_type_info _swigt__p_DSP__ButterworthLowPassFilterT_float_t = {"_p_DSP__ButterworthLowPassFilterT_float_t", "DSP::ButterworthLowPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatButterworthLowPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1BandPassFilterT_float_t = {"_p_DSP__Chebyshev1BandPassFilterT_float_t", "DSP::Chebyshev1BandPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev1BandPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1BandStopFilterT_float_t = {"_p_DSP__Chebyshev1BandStopFilterT_float_t", "DSP::Chebyshev1BandStopFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev1BandStopFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1FilterT_float_t = {"_p_DSP__Chebyshev1FilterT_float_t", "DSP::Chebyshev1Filter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev1Filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1HighPassFilterT_float_t = {"_p_DSP__Chebyshev1HighPassFilterT_float_t", "DSP::Chebyshev1HighPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev1HighPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1LowPassFilterT_float_t = {"_p_DSP__Chebyshev1LowPassFilterT_float_t", "DSP::Chebyshev1LowPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev1LowPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2BandPassFilterT_float_t = {"_p_DSP__Chebyshev2BandPassFilterT_float_t", "DSP::Chebyshev2BandPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev2BandPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2BandStopFilterT_float_t = {"_p_DSP__Chebyshev2BandStopFilterT_float_t", "DSP::Chebyshev2BandStopFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev2BandStopFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2FilterT_float_t = {"_p_DSP__Chebyshev2FilterT_float_t", "DSP::Chebyshev2Filter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev2Filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2HighPassFilterT_float_t = {"_p_DSP__Chebyshev2HighPassFilterT_float_t", "DSP::Chebyshev2HighPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev2HighPassFilter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2LowPassFilterT_float_t = {"_p_DSP__Chebyshev2LowPassFilterT_float_t", "DSP::Chebyshev2LowPassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatChevyshev2LowPassFilter, 0};
static swig_type_info _swigt__p_DSP__ComplexT_double_t = {"_p_DSP__ComplexT_double_t", "DSP::Complex< double > *", 0, 0, (void*)&_wrap_class_DoubleComplex, 0};
static swig_type_info _swigt__p_DSP__ComplexT_float_t = {"_p_DSP__ComplexT_float_t", "DSP::Complex< float > *", 0, 0, (void*)&_wrap_class_FloatComplex, 0};
static swig_type_info _swigt__p_DSP__ConvolveFilterT_float_t = {"_p_DSP__ConvolveFilterT_float_t", "DSP::ConvolveFilter< float > *", 0, 0, (void*)&_wrap_class_FloatConvolveFilter, 0};
static swig_type_info _swigt__p_DSP__DCTPlanT_float_t = {"_p_DSP__DCTPlanT_float_t", "DSP::DCTPlan< float > *", 0, 0, (void*)&_wrap_class_FloatDCTPlan, 0};
static swig_type_info _swigt__p_DSP__DFTPlanT_float_t = {"_p_DSP__DFTPlanT_float_t", "DSP::DFTPlan< float > *", 0, 0, (void*)&_wrap_class_FloatDFTPlan, 0};
static swig_type_info _swigt__p_DSP__DFTRealPlanT_float_t = {"_p_DSP__DFTRealPlanT_float_t", "DSP::DFTRealPlan< float > *", 0, 0, (void*)&_wrap_class_FloatDFTRealPlan, 0};
static swig_type_info _swigt__p_DSP__FIRBandpassFilterT_float_t = {"_p_DSP__FIRBandpassFilterT_float_t", "DSP::FIRBandpassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatFIRBandpassFilter, 0};
static swig_type_info _swigt__p_DSP__FIRBandstopFilterT_float_t = {"_p_DSP__FIRBandstopFilterT_float_t", "DSP::FIRBandstopFilter< float > *", 0, 0, (void*)&_wrap_class_FloatFIRBandstopFilter, 0};
static swig_type_info _swigt__p_DSP__FIRFilterT_float_t = {"_p_DSP__FIRFilterT_float_t", "DSP::FIRFilter< float > *", 0, 0, (void*)&_wrap_class_FloatFIRFilter, 0};
static swig_type_info _swigt__p_DSP__FIRHighpassFilterT_float_t = {"_p_DSP__FIRHighpassFilterT_float_t", "DSP::FIRHighpassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatFIRHighpassFilter, 0};
static swig_type_info _swigt__p_DSP__FIRLowpassFilterT_float_t = {"_p_DSP__FIRLowpassFilterT_float_t", "DSP::FIRLowpassFilter< float > *", 0, 0, (void*)&_wrap_class_FloatFIRLowpassFilter, 0};
static swig_type_info _swigt__p_DSP__FlacReaderT_double_t = {"_p_DSP__FlacReaderT_double_t", "DSP::FlacReader< f64 > *|DSP::FlacReader< double > *", 0, 0, (void*)&_wrap_class_DoubleFlacReader, 0};
static swig_type_info _swigt__p_DSP__FlacReaderT_float_t = {"_p_DSP__FlacReaderT_float_t", "DSP::FlacReader< float > *|DSP::FlacReader< f32 > *", 0, 0, (void*)&_wrap_class_FloatFlacReader, 0};
static swig_type_info _swigt__p_DSP__HighPassFilterT_double_t = {"_p_DSP__HighPassFilterT_double_t", "DSP::HighPassFilter< f64 > *|DSP::HighPassFilter< double > *", 0, 0, (void*)&_wrap_class_DoubleHighPassFilter, 0};
static swig_type_info _swigt__p_DSP__HighPassFilterT_float_t = {"_p_DSP__HighPassFilterT_float_t", "DSP::HighPassFilter< float > *|DSP::HighPassFilter< f32 > *", 0, 0, (void*)&_wrap_class_FloatHighPassFilter, 0};
static swig_type_info _swigt__p_DSP__HighShelfFilterT_double_t = {"_p_DSP__HighShelfFilterT_double_t", "DSP::HighShelfFilter< f64 > *|DSP::HighShelfFilter< double > *", 0, 0, (void*)&_wrap_class_DoubleHighShelfFilter, 0};
static swig_type_info _swigt__p_DSP__HighShelfFilterT_float_t = {"_p_DSP__HighShelfFilterT_float_t", "DSP::HighShelfFilter< float > *|DSP::HighShelfFilter< f32 > *", 0, 0, (void*)&_wrap_class_FloatHighShelfFilter, 0};
static swig_type_info _swigt__p_DSP__LowPassFilterT_double_t = {"_p_DSP__LowPassFilterT_double_t", "DSP::LowPassFilter< f64 > *|DSP::LowPassFilter< double > *", 0, 0, (void*)&_wrap_class_DoubleLowPassFilter, 0};
static swig_type_info _swigt__p_DSP__LowPassFilterT_float_t = {"_p_DSP__LowPassFilterT_float_t", "DSP::LowPassFilter< float > *|DSP::LowPassFilter< f32 > *", 0, 0, (void*)&_wrap_class_FloatLowPassFilter, 0};
static swig_type_info _swigt__p_DSP__LowShelfFilterT_double_t = {"_p_DSP__LowShelfFilterT_double_t", "DSP::LowShelfFilter< f64 > *|DSP::LowShelfFilter< double > *", 0, 0, (void*)&_wrap_class_DoubleLowShelfFilter, 0};
static swig_type_info _swigt__p_DSP__LowShelfFilterT_float_t = {"_p_DSP__LowShelfFilterT_float_t", "DSP::LowShelfFilter< float > *|DSP::LowShelfFilter< f32 > *", 0, 0, (void*)&_wrap_class_FloatLowShelfFilter, 0};
static swig_type_info _swigt__p_DSP__MP3ReaderT_double_t = {"_p_DSP__MP3ReaderT_double_t", "DSP::MP3Reader< f64 > *|DSP::MP3Reader< double > *", 0, 0, (void*)&_wrap_class_DoubleMp3Reader, 0};
static swig_type_info _swigt__p_DSP__MP3ReaderT_float_t = {"_p_DSP__MP3ReaderT_float_t", "DSP::MP3Reader< float > *|DSP::MP3Reader< f32 > *", 0, 0, (void*)&_wrap_class_FloatMp3Reader, 0};
static swig_type_info _swigt__p_DSP__NotchFilterT_double_t = {"_p_DSP__NotchFilterT_double_t", "DSP::NotchFilter< f64 > *|DSP::NotchFilter< double > *", 0, 0, (void*)&_wrap_class_DoubleNotchFilter, 0};
static swig_type_info _swigt__p_DSP__NotchFilterT_float_t = {"_p_DSP__NotchFilterT_float_t", "DSP::NotchFilter< float > *|DSP::NotchFilter< f32 > *", 0, 0, (void*)&_wrap_class_FloatNotchFilter, 0};
static swig_type_info _swigt__p_DSP__PeakFilterT_double_t = {"_p_DSP__PeakFilterT_double_t", "DSP::PeakFilter< f64 > *|DSP::PeakFilter< double > *", 0, 0, (void*)&_wrap_class_DoublePeakFilter, 0};
static swig_type_info _swigt__p_DSP__PeakFilterT_float_t = {"_p_DSP__PeakFilterT_float_t", "DSP::PeakFilter< float > *|DSP::PeakFilter< f32 > *", 0, 0, (void*)&_wrap_class_FloatPeakFilter, 0};
static swig_type_info _swigt__p_DSP__ScalarT_double_t = {"_p_DSP__ScalarT_double_t", "DSP::Scalar< f64 > *|DSP::Scalar< double > *", 0, 0, (void*)&_wrap_class_DoubleScalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_float_t = {"_p_DSP__ScalarT_float_t", "DSP::Scalar< float > *|DSP::Scalar< f32 > *", 0, 0, (void*)&_wrap_class_FloatScalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_int64_t_t = {"_p_DSP__ScalarT_int64_t_t", "DSP::Scalar< i64 > *|DSP::Scalar< int64_t > *", 0, 0, (void*)&_wrap_class_Int64Scalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_int_t = {"_p_DSP__ScalarT_int_t", "DSP::Scalar< i32 > *|DSP::Scalar< int > *", 0, 0, (void*)&_wrap_class_Int32Scalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_kfr__complexT_double_t_t = {"_p_DSP__ScalarT_kfr__complexT_double_t_t", "DSP::Scalar< kfr::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__ScalarT_kfr__complexT_float_t_t = {"_p_DSP__ScalarT_kfr__complexT_float_t_t", "DSP::Scalar< kfr::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__ScalarT_short_t = {"_p_DSP__ScalarT_short_t", "DSP::Scalar< short > *|DSP::Scalar< i16 > *", 0, 0, (void*)&_wrap_class_Int16Scalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_signed_char_t = {"_p_DSP__ScalarT_signed_char_t", "DSP::Scalar< signed char > *|DSP::Scalar< i8 > *", 0, 0, (void*)&_wrap_class_Int8Scalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_u64_t = {"_p_DSP__ScalarT_u64_t", "DSP::Scalar< u64 > *", 0, 0, (void*)&_wrap_class_UInt64Scalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_unsigned_char_t = {"_p_DSP__ScalarT_unsigned_char_t", "DSP::Scalar< unsigned char > *|DSP::Scalar< u8 > *", 0, 0, (void*)&_wrap_class_UInt8Scalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_unsigned_int_t = {"_p_DSP__ScalarT_unsigned_int_t", "DSP::Scalar< u32 > *|DSP::Scalar< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Scalar, 0};
static swig_type_info _swigt__p_DSP__ScalarT_unsigned_short_t = {"_p_DSP__ScalarT_unsigned_short_t", "DSP::Scalar< unsigned short > *|DSP::Scalar< u16 > *", 0, 0, (void*)&_wrap_class_UInt16Scalar, 0};
static swig_type_info _swigt__p_DSP__UniComplexT_double_t = {"_p_DSP__UniComplexT_double_t", "DSP::UniComplex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__UniComplexT_float_t = {"_p_DSP__UniComplexT_float_t", "DSP::UniComplex< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__UniVector2DT_double_t = {"_p_DSP__UniVector2DT_double_t", "DSP::UniVector2D< f64 > *|DSP::UniVector2D< double > *", 0, 0, (void*)&_wrap_class_DoubleVector2D, 0};
static swig_type_info _swigt__p_DSP__UniVector2DT_float_t = {"_p_DSP__UniVector2DT_float_t", "DSP::UniVector2D< float > *|DSP::UniVector2D< f32 > *", 0, 0, (void*)&_wrap_class_FloatVector2D, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_double_t = {"_p_DSP__UniVectorT_double_t", "DSP::UniVector< f64 > *|DSP::UniVector< double > *", 0, 0, (void*)&_wrap_class_DoubleVector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_float_t = {"_p_DSP__UniVectorT_float_t", "DSP::UniVector< float > *|DSP::UniVector< f32 > *", 0, 0, (void*)&_wrap_class_FloatVector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_int64_t_t = {"_p_DSP__UniVectorT_int64_t_t", "DSP::UniVector< i64 > *|DSP::UniVector< int64_t > *", 0, 0, (void*)&_wrap_class_Int64Vector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_int_t = {"_p_DSP__UniVectorT_int_t", "DSP::UniVector< i32 > *|DSP::UniVector< int > *", 0, 0, (void*)&_wrap_class_Int32Vector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_kfr__complexT_double_t_t = {"_p_DSP__UniVectorT_kfr__complexT_double_t_t", "DSP::UniVector< kfr::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_kfr__complexT_f32_t_t = {"_p_DSP__UniVectorT_kfr__complexT_f32_t_t", "DSP::UniVector< kfr::complex< f32 > > *", 0, 0, (void*)&_wrap_class_ComplexVector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_kfr__complexT_f64_t_t = {"_p_DSP__UniVectorT_kfr__complexT_f64_t_t", "DSP::UniVector< kfr::complex< f64 > > *", 0, 0, (void*)&_wrap_class_DoubleComplexVector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_kfr__complexT_float_t_t = {"_p_DSP__UniVectorT_kfr__complexT_float_t_t", "DSP::UniVector< kfr::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_short_t = {"_p_DSP__UniVectorT_short_t", "DSP::UniVector< short > *|DSP::UniVector< i16 > *", 0, 0, (void*)&_wrap_class_Int16Vector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_signed_char_t = {"_p_DSP__UniVectorT_signed_char_t", "DSP::UniVector< signed char > *|DSP::UniVector< i8 > *", 0, 0, (void*)&_wrap_class_Int8Vector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_u64_t = {"_p_DSP__UniVectorT_u64_t", "DSP::UniVector< u64 > *", 0, 0, (void*)&_wrap_class_UInt64Vector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_unsigned_char_t = {"_p_DSP__UniVectorT_unsigned_char_t", "DSP::UniVector< unsigned char > *|DSP::UniVector< u8 > *", 0, 0, (void*)&_wrap_class_UInt8Vector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_unsigned_int_t = {"_p_DSP__UniVectorT_unsigned_int_t", "DSP::UniVector< u32 > *|DSP::UniVector< unsigned int > *", 0, 0, (void*)&_wrap_class_UInt32Vector, 0};
static swig_type_info _swigt__p_DSP__UniVectorT_unsigned_short_t = {"_p_DSP__UniVectorT_unsigned_short_t", "DSP::UniVector< unsigned short > *|DSP::UniVector< u16 > *", 0, 0, (void*)&_wrap_class_UInt16Vector, 0};
static swig_type_info _swigt__p_DSP__WavReaderT_double_t = {"_p_DSP__WavReaderT_double_t", "DSP::WavReader< f64 > *|DSP::WavReader< double > *", 0, 0, (void*)&_wrap_class_DoubleWavReader, 0};
static swig_type_info _swigt__p_DSP__WavReaderT_float_t = {"_p_DSP__WavReaderT_float_t", "DSP::WavReader< float > *|DSP::WavReader< f32 > *", 0, 0, (void*)&_wrap_class_FloatWavReader, 0};
static swig_type_info _swigt__p_DSP__WavWriterT_double_t = {"_p_DSP__WavWriterT_double_t", "DSP::WavWriter< f64 > *|DSP::WavWriter< double > *", 0, 0, (void*)&_wrap_class_DoubleWavWriter, 0};
static swig_type_info _swigt__p_DSP__WavWriterT_float_t = {"_p_DSP__WavWriterT_float_t", "DSP::WavWriter< float > *|DSP::WavWriter< f32 > *", 0, 0, (void*)&_wrap_class_FloatWavWriter, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "f32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_format_and_length = {"_p_kfr__audio_format_and_length", "kfr::audio_format_and_length *|DSP::audio_format *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_reader_flacT_double_t = {"_p_kfr__audio_reader_flacT_double_t", "kfr::audio_reader_flac< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_reader_flacT_float_t = {"_p_kfr__audio_reader_flacT_float_t", "kfr::audio_reader_flac< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_reader_mp3T_double_t = {"_p_kfr__audio_reader_mp3T_double_t", "kfr::audio_reader_mp3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_reader_mp3T_float_t = {"_p_kfr__audio_reader_mp3T_float_t", "kfr::audio_reader_mp3< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_writer_wavT_double_t = {"_p_kfr__audio_writer_wavT_double_t", "kfr::audio_writer_wav< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_writer_wavT_float_t = {"_p_kfr__audio_writer_wavT_float_t", "kfr::audio_writer_wav< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_filterT_double_t = {"_p_kfr__biquad_filterT_double_t", "kfr::biquad_filter< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_filterT_float_t = {"_p_kfr__biquad_filterT_float_t", "kfr::biquad_filter< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_paramsT_double_t = {"_p_kfr__biquad_paramsT_double_t", "kfr::biquad_params< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_paramsT_float_t = {"_p_kfr__biquad_paramsT_float_t", "kfr::biquad_params< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__complexT_double_t = {"_p_kfr__complexT_double_t", "kfr::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__complexT_float_t = {"_p_kfr__complexT_float_t", "kfr::complex< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__dft_order = {"_p_kfr__dft_order", "kfr::dft_order *|DSP::dft_order *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__expression_pointerT_double_t = {"_p_kfr__expression_pointerT_double_t", "kfr::expression_pointer< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__expression_pointerT_float_t = {"_p_kfr__expression_pointerT_float_t", "kfr::expression_pointer< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__sample_rate_conversion_quality = {"_p_kfr__sample_rate_conversion_quality", "kfr::sample_rate_conversion_quality *|DSP::sample_rate_conversion_quality *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__seek_origin = {"_p_kfr__seek_origin", "kfr::seek_origin *|DSP::seek_origin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univector2dT_double_t = {"_p_kfr__univector2dT_double_t", "kfr::univector2d< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univector2dT_float_t = {"_p_kfr__univector2dT_float_t", "kfr::univector2d< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_double_t = {"_p_kfr__univectorT_double_t", "kfr::univector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_float_t = {"_p_kfr__univectorT_float_t", "kfr::univector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_int64_t_t = {"_p_kfr__univectorT_int64_t_t", "kfr::univector< int64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_int_t = {"_p_kfr__univectorT_int_t", "kfr::univector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_kfr__complexT_double_t_t = {"_p_kfr__univectorT_kfr__complexT_double_t_t", "kfr::univector< kfr::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_kfr__complexT_float_t_t = {"_p_kfr__univectorT_kfr__complexT_float_t_t", "kfr::univector< kfr::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_short_t = {"_p_kfr__univectorT_short_t", "kfr::univector< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_signed_char_t = {"_p_kfr__univectorT_signed_char_t", "kfr::univector< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_u64_t = {"_p_kfr__univectorT_u64_t", "kfr::univector< u64 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_unsigned_char_t = {"_p_kfr__univectorT_unsigned_char_t", "kfr::univector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_unsigned_int_t = {"_p_kfr__univectorT_unsigned_int_t", "kfr::univector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_unsigned_short_t = {"_p_kfr__univectorT_unsigned_short_t", "kfr::univector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__window_symmetry = {"_p_kfr__window_symmetry", "kfr::window_symmetry *|DSP::window_symmetry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|i16 *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|i8 *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< f64 > *|std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< f32 > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_int64_t_t = {"_p_std__vectorT_int64_t_t", "std::vector< i64 > *|std::vector< int64_t > *", 0, 0, (void*)&_wrap_class_int64_vector, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< i32 > *|std::vector< int > *", 0, 0, (void*)&_wrap_class_int32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__biquad_paramsT_double_t_t = {"_p_std__vectorT_kfr__biquad_paramsT_double_t_t", "std::vector< kfr::biquad_params< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__biquad_paramsT_float_t_t = {"_p_std__vectorT_kfr__biquad_paramsT_float_t_t", "std::vector< kfr::biquad_params< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__complexT_double_t_t = {"_p_std__vectorT_kfr__complexT_double_t_t", "std::vector< kfr::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__complexT_float_t_t = {"_p_std__vectorT_kfr__complexT_float_t_t", "std::vector< kfr::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *|std::vector< i16 > *", 0, 0, (void*)&_wrap_class_int16_vector, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *|std::vector< i8 > *", 0, 0, (void*)&_wrap_class_int8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_u64_t = {"_p_std__vectorT_u64_t", "std::vector< u64 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *|std::vector< u8 > *", 0, 0, (void*)&_wrap_class_uint8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< u32 > *|std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_uint32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *|std::vector< u16 > *", 0, 0, (void*)&_wrap_class_uint16_vector, 0};
static swig_type_info _swigt__p_u64 = {"_p_u64", "u64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|unsigned int *|u32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|u16 *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DSP__BandPassFilterT_double_t,
  &_swigt__p_DSP__BandPassFilterT_float_t,
  &_swigt__p_DSP__BesselBandPassFilterT_float_t,
  &_swigt__p_DSP__BesselBandStopFilterT_float_t,
  &_swigt__p_DSP__BesselFilterT_float_t,
  &_swigt__p_DSP__BesselHighPassFilterT_float_t,
  &_swigt__p_DSP__BesselLowPassFilterT_float_t,
  &_swigt__p_DSP__BiQuadParamsT_double_t,
  &_swigt__p_DSP__BiQuadParamsT_float_t,
  &_swigt__p_DSP__BiquadT_double_t,
  &_swigt__p_DSP__BiquadT_float_t,
  &_swigt__p_DSP__ButterworthBandPassFilterT_float_t,
  &_swigt__p_DSP__ButterworthBandStopFilterT_float_t,
  &_swigt__p_DSP__ButterworthFilterT_float_t,
  &_swigt__p_DSP__ButterworthHighPassFilterT_float_t,
  &_swigt__p_DSP__ButterworthLowPassFilterT_float_t,
  &_swigt__p_DSP__Chebyshev1BandPassFilterT_float_t,
  &_swigt__p_DSP__Chebyshev1BandStopFilterT_float_t,
  &_swigt__p_DSP__Chebyshev1FilterT_float_t,
  &_swigt__p_DSP__Chebyshev1HighPassFilterT_float_t,
  &_swigt__p_DSP__Chebyshev1LowPassFilterT_float_t,
  &_swigt__p_DSP__Chebyshev2BandPassFilterT_float_t,
  &_swigt__p_DSP__Chebyshev2BandStopFilterT_float_t,
  &_swigt__p_DSP__Chebyshev2FilterT_float_t,
  &_swigt__p_DSP__Chebyshev2HighPassFilterT_float_t,
  &_swigt__p_DSP__Chebyshev2LowPassFilterT_float_t,
  &_swigt__p_DSP__ComplexT_double_t,
  &_swigt__p_DSP__ComplexT_float_t,
  &_swigt__p_DSP__ConvolveFilterT_float_t,
  &_swigt__p_DSP__DCTPlanT_float_t,
  &_swigt__p_DSP__DFTPlanT_float_t,
  &_swigt__p_DSP__DFTRealPlanT_float_t,
  &_swigt__p_DSP__FIRBandpassFilterT_float_t,
  &_swigt__p_DSP__FIRBandstopFilterT_float_t,
  &_swigt__p_DSP__FIRFilterT_float_t,
  &_swigt__p_DSP__FIRHighpassFilterT_float_t,
  &_swigt__p_DSP__FIRLowpassFilterT_float_t,
  &_swigt__p_DSP__FlacReaderT_double_t,
  &_swigt__p_DSP__FlacReaderT_float_t,
  &_swigt__p_DSP__HighPassFilterT_double_t,
  &_swigt__p_DSP__HighPassFilterT_float_t,
  &_swigt__p_DSP__HighShelfFilterT_double_t,
  &_swigt__p_DSP__HighShelfFilterT_float_t,
  &_swigt__p_DSP__LowPassFilterT_double_t,
  &_swigt__p_DSP__LowPassFilterT_float_t,
  &_swigt__p_DSP__LowShelfFilterT_double_t,
  &_swigt__p_DSP__LowShelfFilterT_float_t,
  &_swigt__p_DSP__MP3ReaderT_double_t,
  &_swigt__p_DSP__MP3ReaderT_float_t,
  &_swigt__p_DSP__NotchFilterT_double_t,
  &_swigt__p_DSP__NotchFilterT_float_t,
  &_swigt__p_DSP__PeakFilterT_double_t,
  &_swigt__p_DSP__PeakFilterT_float_t,
  &_swigt__p_DSP__ScalarT_double_t,
  &_swigt__p_DSP__ScalarT_float_t,
  &_swigt__p_DSP__ScalarT_int64_t_t,
  &_swigt__p_DSP__ScalarT_int_t,
  &_swigt__p_DSP__ScalarT_kfr__complexT_double_t_t,
  &_swigt__p_DSP__ScalarT_kfr__complexT_float_t_t,
  &_swigt__p_DSP__ScalarT_short_t,
  &_swigt__p_DSP__ScalarT_signed_char_t,
  &_swigt__p_DSP__ScalarT_u64_t,
  &_swigt__p_DSP__ScalarT_unsigned_char_t,
  &_swigt__p_DSP__ScalarT_unsigned_int_t,
  &_swigt__p_DSP__ScalarT_unsigned_short_t,
  &_swigt__p_DSP__UniComplexT_double_t,
  &_swigt__p_DSP__UniComplexT_float_t,
  &_swigt__p_DSP__UniVector2DT_double_t,
  &_swigt__p_DSP__UniVector2DT_float_t,
  &_swigt__p_DSP__UniVectorT_double_t,
  &_swigt__p_DSP__UniVectorT_float_t,
  &_swigt__p_DSP__UniVectorT_int64_t_t,
  &_swigt__p_DSP__UniVectorT_int_t,
  &_swigt__p_DSP__UniVectorT_kfr__complexT_double_t_t,
  &_swigt__p_DSP__UniVectorT_kfr__complexT_f32_t_t,
  &_swigt__p_DSP__UniVectorT_kfr__complexT_f64_t_t,
  &_swigt__p_DSP__UniVectorT_kfr__complexT_float_t_t,
  &_swigt__p_DSP__UniVectorT_short_t,
  &_swigt__p_DSP__UniVectorT_signed_char_t,
  &_swigt__p_DSP__UniVectorT_u64_t,
  &_swigt__p_DSP__UniVectorT_unsigned_char_t,
  &_swigt__p_DSP__UniVectorT_unsigned_int_t,
  &_swigt__p_DSP__UniVectorT_unsigned_short_t,
  &_swigt__p_DSP__WavReaderT_double_t,
  &_swigt__p_DSP__WavReaderT_float_t,
  &_swigt__p_DSP__WavWriterT_double_t,
  &_swigt__p_DSP__WavWriterT_float_t,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_int64_t,
  &_swigt__p_kfr__audio_format_and_length,
  &_swigt__p_kfr__audio_reader_flacT_double_t,
  &_swigt__p_kfr__audio_reader_flacT_float_t,
  &_swigt__p_kfr__audio_reader_mp3T_double_t,
  &_swigt__p_kfr__audio_reader_mp3T_float_t,
  &_swigt__p_kfr__audio_writer_wavT_double_t,
  &_swigt__p_kfr__audio_writer_wavT_float_t,
  &_swigt__p_kfr__biquad_filterT_double_t,
  &_swigt__p_kfr__biquad_filterT_float_t,
  &_swigt__p_kfr__biquad_paramsT_double_t,
  &_swigt__p_kfr__biquad_paramsT_float_t,
  &_swigt__p_kfr__complexT_double_t,
  &_swigt__p_kfr__complexT_float_t,
  &_swigt__p_kfr__dft_order,
  &_swigt__p_kfr__expression_pointerT_double_t,
  &_swigt__p_kfr__expression_pointerT_float_t,
  &_swigt__p_kfr__sample_rate_conversion_quality,
  &_swigt__p_kfr__seek_origin,
  &_swigt__p_kfr__univector2dT_double_t,
  &_swigt__p_kfr__univector2dT_float_t,
  &_swigt__p_kfr__univectorT_double_t,
  &_swigt__p_kfr__univectorT_float_t,
  &_swigt__p_kfr__univectorT_int64_t_t,
  &_swigt__p_kfr__univectorT_int_t,
  &_swigt__p_kfr__univectorT_kfr__complexT_double_t_t,
  &_swigt__p_kfr__univectorT_kfr__complexT_float_t_t,
  &_swigt__p_kfr__univectorT_short_t,
  &_swigt__p_kfr__univectorT_signed_char_t,
  &_swigt__p_kfr__univectorT_u64_t,
  &_swigt__p_kfr__univectorT_unsigned_char_t,
  &_swigt__p_kfr__univectorT_unsigned_int_t,
  &_swigt__p_kfr__univectorT_unsigned_short_t,
  &_swigt__p_kfr__window_symmetry,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int64_t_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_kfr__biquad_paramsT_double_t_t,
  &_swigt__p_std__vectorT_kfr__biquad_paramsT_float_t_t,
  &_swigt__p_std__vectorT_kfr__complexT_double_t_t,
  &_swigt__p_std__vectorT_kfr__complexT_float_t_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_u64_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_u64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_DSP__BandPassFilterT_double_t[] = {  {&_swigt__p_DSP__BandPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BandPassFilterT_float_t[] = {  {&_swigt__p_DSP__BandPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselBandPassFilterT_float_t[] = {  {&_swigt__p_DSP__BesselBandPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselBandStopFilterT_float_t[] = {  {&_swigt__p_DSP__BesselBandStopFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselFilterT_float_t[] = {  {&_swigt__p_DSP__BesselFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselHighPassFilterT_float_t[] = {  {&_swigt__p_DSP__BesselHighPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselLowPassFilterT_float_t[] = {  {&_swigt__p_DSP__BesselLowPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiQuadParamsT_double_t[] = {  {&_swigt__p_DSP__BiQuadParamsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiQuadParamsT_float_t[] = {  {&_swigt__p_DSP__BiQuadParamsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiquadT_double_t[] = {  {&_swigt__p_DSP__BiquadT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiquadT_float_t[] = {  {&_swigt__p_DSP__BiquadT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthBandPassFilterT_float_t[] = {  {&_swigt__p_DSP__ButterworthBandPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthBandStopFilterT_float_t[] = {  {&_swigt__p_DSP__ButterworthBandStopFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthFilterT_float_t[] = {  {&_swigt__p_DSP__ButterworthFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthHighPassFilterT_float_t[] = {  {&_swigt__p_DSP__ButterworthHighPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthLowPassFilterT_float_t[] = {  {&_swigt__p_DSP__ButterworthLowPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1BandPassFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev1BandPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1BandStopFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev1BandStopFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1FilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev1FilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1HighPassFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev1HighPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1LowPassFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev1LowPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2BandPassFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev2BandPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2BandStopFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev2BandStopFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2FilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev2FilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2HighPassFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev2HighPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2LowPassFilterT_float_t[] = {  {&_swigt__p_DSP__Chebyshev2LowPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ComplexT_double_t[] = {  {&_swigt__p_DSP__ComplexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ComplexT_float_t[] = {  {&_swigt__p_DSP__ComplexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ConvolveFilterT_float_t[] = {  {&_swigt__p_DSP__ConvolveFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DCTPlanT_float_t[] = {  {&_swigt__p_DSP__DCTPlanT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DFTPlanT_float_t[] = {  {&_swigt__p_DSP__DFTPlanT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DFTRealPlanT_float_t[] = {  {&_swigt__p_DSP__DFTRealPlanT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRBandpassFilterT_float_t[] = {  {&_swigt__p_DSP__FIRBandpassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRBandstopFilterT_float_t[] = {  {&_swigt__p_DSP__FIRBandstopFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRFilterT_float_t[] = {  {&_swigt__p_DSP__FIRFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRHighpassFilterT_float_t[] = {  {&_swigt__p_DSP__FIRHighpassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRLowpassFilterT_float_t[] = {  {&_swigt__p_DSP__FIRLowpassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FlacReaderT_double_t[] = {  {&_swigt__p_DSP__FlacReaderT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FlacReaderT_float_t[] = {  {&_swigt__p_DSP__FlacReaderT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighPassFilterT_double_t[] = {  {&_swigt__p_DSP__HighPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighPassFilterT_float_t[] = {  {&_swigt__p_DSP__HighPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighShelfFilterT_double_t[] = {  {&_swigt__p_DSP__HighShelfFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighShelfFilterT_float_t[] = {  {&_swigt__p_DSP__HighShelfFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowPassFilterT_double_t[] = {  {&_swigt__p_DSP__LowPassFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowPassFilterT_float_t[] = {  {&_swigt__p_DSP__LowPassFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowShelfFilterT_double_t[] = {  {&_swigt__p_DSP__LowShelfFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowShelfFilterT_float_t[] = {  {&_swigt__p_DSP__LowShelfFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__MP3ReaderT_double_t[] = {  {&_swigt__p_DSP__MP3ReaderT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__MP3ReaderT_float_t[] = {  {&_swigt__p_DSP__MP3ReaderT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__NotchFilterT_double_t[] = {  {&_swigt__p_DSP__NotchFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__NotchFilterT_float_t[] = {  {&_swigt__p_DSP__NotchFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__PeakFilterT_double_t[] = {  {&_swigt__p_DSP__PeakFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__PeakFilterT_float_t[] = {  {&_swigt__p_DSP__PeakFilterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_double_t[] = {  {&_swigt__p_DSP__ScalarT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_float_t[] = {  {&_swigt__p_DSP__ScalarT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_int64_t_t[] = {  {&_swigt__p_DSP__ScalarT_int64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_int_t[] = {  {&_swigt__p_DSP__ScalarT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_kfr__complexT_double_t_t[] = {  {&_swigt__p_DSP__ScalarT_kfr__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_kfr__complexT_float_t_t[] = {  {&_swigt__p_DSP__ScalarT_kfr__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_short_t[] = {  {&_swigt__p_DSP__ScalarT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_signed_char_t[] = {  {&_swigt__p_DSP__ScalarT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_u64_t[] = {  {&_swigt__p_DSP__ScalarT_u64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_unsigned_char_t[] = {  {&_swigt__p_DSP__ScalarT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_unsigned_int_t[] = {  {&_swigt__p_DSP__ScalarT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ScalarT_unsigned_short_t[] = {  {&_swigt__p_DSP__ScalarT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniComplexT_double_t[] = {  {&_swigt__p_DSP__UniComplexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniComplexT_float_t[] = {  {&_swigt__p_DSP__UniComplexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVector2DT_double_t[] = {  {&_swigt__p_DSP__UniVector2DT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVector2DT_float_t[] = {  {&_swigt__p_DSP__UniVector2DT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_double_t[] = {  {&_swigt__p_DSP__UniVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_float_t[] = {  {&_swigt__p_DSP__UniVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_int64_t_t[] = {  {&_swigt__p_DSP__UniVectorT_int64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_int_t[] = {  {&_swigt__p_DSP__UniVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_kfr__complexT_double_t_t[] = {  {&_swigt__p_DSP__UniVectorT_kfr__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_kfr__complexT_f32_t_t[] = {  {&_swigt__p_DSP__UniVectorT_kfr__complexT_f32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_kfr__complexT_f64_t_t[] = {  {&_swigt__p_DSP__UniVectorT_kfr__complexT_f64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_kfr__complexT_float_t_t[] = {  {&_swigt__p_DSP__UniVectorT_kfr__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_short_t[] = {  {&_swigt__p_DSP__UniVectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_signed_char_t[] = {  {&_swigt__p_DSP__UniVectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_u64_t[] = {  {&_swigt__p_DSP__UniVectorT_u64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_unsigned_char_t[] = {  {&_swigt__p_DSP__UniVectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_unsigned_int_t[] = {  {&_swigt__p_DSP__UniVectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__UniVectorT_unsigned_short_t[] = {  {&_swigt__p_DSP__UniVectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavReaderT_double_t[] = {  {&_swigt__p_DSP__WavReaderT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavReaderT_float_t[] = {  {&_swigt__p_DSP__WavReaderT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavWriterT_double_t[] = {  {&_swigt__p_DSP__WavWriterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavWriterT_float_t[] = {  {&_swigt__p_DSP__WavWriterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_format_and_length[] = {  {&_swigt__p_kfr__audio_format_and_length, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_flacT_double_t[] = {  {&_swigt__p_kfr__audio_reader_flacT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_flacT_float_t[] = {  {&_swigt__p_kfr__audio_reader_flacT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_mp3T_double_t[] = {  {&_swigt__p_kfr__audio_reader_mp3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_mp3T_float_t[] = {  {&_swigt__p_kfr__audio_reader_mp3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_writer_wavT_double_t[] = {  {&_swigt__p_kfr__audio_writer_wavT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_writer_wavT_float_t[] = {  {&_swigt__p_kfr__audio_writer_wavT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_filterT_double_t[] = {  {&_swigt__p_kfr__biquad_filterT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_filterT_float_t[] = {  {&_swigt__p_kfr__biquad_filterT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_paramsT_double_t[] = {  {&_swigt__p_kfr__biquad_paramsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_paramsT_float_t[] = {  {&_swigt__p_kfr__biquad_paramsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__complexT_double_t[] = {  {&_swigt__p_kfr__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__complexT_float_t[] = {  {&_swigt__p_kfr__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__dft_order[] = {  {&_swigt__p_kfr__dft_order, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__expression_pointerT_double_t[] = {  {&_swigt__p_kfr__expression_pointerT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__expression_pointerT_float_t[] = {  {&_swigt__p_kfr__expression_pointerT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__sample_rate_conversion_quality[] = {  {&_swigt__p_kfr__sample_rate_conversion_quality, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__seek_origin[] = {  {&_swigt__p_kfr__seek_origin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univector2dT_double_t[] = {  {&_swigt__p_kfr__univector2dT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univector2dT_float_t[] = {  {&_swigt__p_kfr__univector2dT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_double_t[] = {  {&_swigt__p_kfr__univectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_float_t[] = {  {&_swigt__p_kfr__univectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_int64_t_t[] = {  {&_swigt__p_kfr__univectorT_int64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_int_t[] = {  {&_swigt__p_kfr__univectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_kfr__complexT_double_t_t[] = {  {&_swigt__p_kfr__univectorT_kfr__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_kfr__complexT_float_t_t[] = {  {&_swigt__p_kfr__univectorT_kfr__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_short_t[] = {  {&_swigt__p_kfr__univectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_signed_char_t[] = {  {&_swigt__p_kfr__univectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_u64_t[] = {  {&_swigt__p_kfr__univectorT_u64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_unsigned_char_t[] = {  {&_swigt__p_kfr__univectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_unsigned_int_t[] = {  {&_swigt__p_kfr__univectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_unsigned_short_t[] = {  {&_swigt__p_kfr__univectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__window_symmetry[] = {  {&_swigt__p_kfr__window_symmetry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int64_t_t[] = {  {&_swigt__p_std__vectorT_int64_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__biquad_paramsT_double_t_t[] = {  {&_swigt__p_std__vectorT_kfr__biquad_paramsT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__biquad_paramsT_float_t_t[] = {  {&_swigt__p_std__vectorT_kfr__biquad_paramsT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_kfr__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__complexT_float_t_t[] = {  {&_swigt__p_std__vectorT_kfr__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_u64_t[] = {  {&_swigt__p_std__vectorT_u64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_u64[] = {  {&_swigt__p_u64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DSP__BandPassFilterT_double_t,
  _swigc__p_DSP__BandPassFilterT_float_t,
  _swigc__p_DSP__BesselBandPassFilterT_float_t,
  _swigc__p_DSP__BesselBandStopFilterT_float_t,
  _swigc__p_DSP__BesselFilterT_float_t,
  _swigc__p_DSP__BesselHighPassFilterT_float_t,
  _swigc__p_DSP__BesselLowPassFilterT_float_t,
  _swigc__p_DSP__BiQuadParamsT_double_t,
  _swigc__p_DSP__BiQuadParamsT_float_t,
  _swigc__p_DSP__BiquadT_double_t,
  _swigc__p_DSP__BiquadT_float_t,
  _swigc__p_DSP__ButterworthBandPassFilterT_float_t,
  _swigc__p_DSP__ButterworthBandStopFilterT_float_t,
  _swigc__p_DSP__ButterworthFilterT_float_t,
  _swigc__p_DSP__ButterworthHighPassFilterT_float_t,
  _swigc__p_DSP__ButterworthLowPassFilterT_float_t,
  _swigc__p_DSP__Chebyshev1BandPassFilterT_float_t,
  _swigc__p_DSP__Chebyshev1BandStopFilterT_float_t,
  _swigc__p_DSP__Chebyshev1FilterT_float_t,
  _swigc__p_DSP__Chebyshev1HighPassFilterT_float_t,
  _swigc__p_DSP__Chebyshev1LowPassFilterT_float_t,
  _swigc__p_DSP__Chebyshev2BandPassFilterT_float_t,
  _swigc__p_DSP__Chebyshev2BandStopFilterT_float_t,
  _swigc__p_DSP__Chebyshev2FilterT_float_t,
  _swigc__p_DSP__Chebyshev2HighPassFilterT_float_t,
  _swigc__p_DSP__Chebyshev2LowPassFilterT_float_t,
  _swigc__p_DSP__ComplexT_double_t,
  _swigc__p_DSP__ComplexT_float_t,
  _swigc__p_DSP__ConvolveFilterT_float_t,
  _swigc__p_DSP__DCTPlanT_float_t,
  _swigc__p_DSP__DFTPlanT_float_t,
  _swigc__p_DSP__DFTRealPlanT_float_t,
  _swigc__p_DSP__FIRBandpassFilterT_float_t,
  _swigc__p_DSP__FIRBandstopFilterT_float_t,
  _swigc__p_DSP__FIRFilterT_float_t,
  _swigc__p_DSP__FIRHighpassFilterT_float_t,
  _swigc__p_DSP__FIRLowpassFilterT_float_t,
  _swigc__p_DSP__FlacReaderT_double_t,
  _swigc__p_DSP__FlacReaderT_float_t,
  _swigc__p_DSP__HighPassFilterT_double_t,
  _swigc__p_DSP__HighPassFilterT_float_t,
  _swigc__p_DSP__HighShelfFilterT_double_t,
  _swigc__p_DSP__HighShelfFilterT_float_t,
  _swigc__p_DSP__LowPassFilterT_double_t,
  _swigc__p_DSP__LowPassFilterT_float_t,
  _swigc__p_DSP__LowShelfFilterT_double_t,
  _swigc__p_DSP__LowShelfFilterT_float_t,
  _swigc__p_DSP__MP3ReaderT_double_t,
  _swigc__p_DSP__MP3ReaderT_float_t,
  _swigc__p_DSP__NotchFilterT_double_t,
  _swigc__p_DSP__NotchFilterT_float_t,
  _swigc__p_DSP__PeakFilterT_double_t,
  _swigc__p_DSP__PeakFilterT_float_t,
  _swigc__p_DSP__ScalarT_double_t,
  _swigc__p_DSP__ScalarT_float_t,
  _swigc__p_DSP__ScalarT_int64_t_t,
  _swigc__p_DSP__ScalarT_int_t,
  _swigc__p_DSP__ScalarT_kfr__complexT_double_t_t,
  _swigc__p_DSP__ScalarT_kfr__complexT_float_t_t,
  _swigc__p_DSP__ScalarT_short_t,
  _swigc__p_DSP__ScalarT_signed_char_t,
  _swigc__p_DSP__ScalarT_u64_t,
  _swigc__p_DSP__ScalarT_unsigned_char_t,
  _swigc__p_DSP__ScalarT_unsigned_int_t,
  _swigc__p_DSP__ScalarT_unsigned_short_t,
  _swigc__p_DSP__UniComplexT_double_t,
  _swigc__p_DSP__UniComplexT_float_t,
  _swigc__p_DSP__UniVector2DT_double_t,
  _swigc__p_DSP__UniVector2DT_float_t,
  _swigc__p_DSP__UniVectorT_double_t,
  _swigc__p_DSP__UniVectorT_float_t,
  _swigc__p_DSP__UniVectorT_int64_t_t,
  _swigc__p_DSP__UniVectorT_int_t,
  _swigc__p_DSP__UniVectorT_kfr__complexT_double_t_t,
  _swigc__p_DSP__UniVectorT_kfr__complexT_f32_t_t,
  _swigc__p_DSP__UniVectorT_kfr__complexT_f64_t_t,
  _swigc__p_DSP__UniVectorT_kfr__complexT_float_t_t,
  _swigc__p_DSP__UniVectorT_short_t,
  _swigc__p_DSP__UniVectorT_signed_char_t,
  _swigc__p_DSP__UniVectorT_u64_t,
  _swigc__p_DSP__UniVectorT_unsigned_char_t,
  _swigc__p_DSP__UniVectorT_unsigned_int_t,
  _swigc__p_DSP__UniVectorT_unsigned_short_t,
  _swigc__p_DSP__WavReaderT_double_t,
  _swigc__p_DSP__WavReaderT_float_t,
  _swigc__p_DSP__WavWriterT_double_t,
  _swigc__p_DSP__WavWriterT_float_t,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_int64_t,
  _swigc__p_kfr__audio_format_and_length,
  _swigc__p_kfr__audio_reader_flacT_double_t,
  _swigc__p_kfr__audio_reader_flacT_float_t,
  _swigc__p_kfr__audio_reader_mp3T_double_t,
  _swigc__p_kfr__audio_reader_mp3T_float_t,
  _swigc__p_kfr__audio_writer_wavT_double_t,
  _swigc__p_kfr__audio_writer_wavT_float_t,
  _swigc__p_kfr__biquad_filterT_double_t,
  _swigc__p_kfr__biquad_filterT_float_t,
  _swigc__p_kfr__biquad_paramsT_double_t,
  _swigc__p_kfr__biquad_paramsT_float_t,
  _swigc__p_kfr__complexT_double_t,
  _swigc__p_kfr__complexT_float_t,
  _swigc__p_kfr__dft_order,
  _swigc__p_kfr__expression_pointerT_double_t,
  _swigc__p_kfr__expression_pointerT_float_t,
  _swigc__p_kfr__sample_rate_conversion_quality,
  _swigc__p_kfr__seek_origin,
  _swigc__p_kfr__univector2dT_double_t,
  _swigc__p_kfr__univector2dT_float_t,
  _swigc__p_kfr__univectorT_double_t,
  _swigc__p_kfr__univectorT_float_t,
  _swigc__p_kfr__univectorT_int64_t_t,
  _swigc__p_kfr__univectorT_int_t,
  _swigc__p_kfr__univectorT_kfr__complexT_double_t_t,
  _swigc__p_kfr__univectorT_kfr__complexT_float_t_t,
  _swigc__p_kfr__univectorT_short_t,
  _swigc__p_kfr__univectorT_signed_char_t,
  _swigc__p_kfr__univectorT_u64_t,
  _swigc__p_kfr__univectorT_unsigned_char_t,
  _swigc__p_kfr__univectorT_unsigned_int_t,
  _swigc__p_kfr__univectorT_unsigned_short_t,
  _swigc__p_kfr__window_symmetry,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int64_t_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_kfr__biquad_paramsT_double_t_t,
  _swigc__p_std__vectorT_kfr__biquad_paramsT_float_t_t,
  _swigc__p_std__vectorT_kfr__complexT_double_t_t,
  _swigc__p_std__vectorT_kfr__complexT_float_t_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_u64_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_u64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

