/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t swig_types[0]
#define SWIGTYPE_p_SoundWave__ArrayVectorT_float_t swig_types[1]
#define SWIGTYPE_p_SoundWave__ColMatrixT_float_t swig_types[2]
#define SWIGTYPE_p_SoundWave__ColVectorT_float_t swig_types[3]
#define SWIGTYPE_p_SoundWave__EigenArrayT_float_t swig_types[4]
#define SWIGTYPE_p_SoundWave__MatrixT_float_t swig_types[5]
#define SWIGTYPE_p_SoundWave__SampleMatrixT_float_t swig_types[6]
#define SWIGTYPE_p_SoundWave__SampleVectorT_float_t swig_types[7]
#define SWIGTYPE_p_SoundWave__ScalarT_float_t swig_types[8]
#define SWIGTYPE_p_SoundWave__VectorT_float_t swig_types[9]
#define SWIGTYPE_p_difference_type swig_types[10]
#define SWIGTYPE_p_float swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_long_long swig_types[13]
#define SWIGTYPE_p_p_float swig_types[14]
#define SWIGTYPE_p_p_p_float swig_types[15]
#define SWIGTYPE_p_short swig_types[16]
#define SWIGTYPE_p_signed_char swig_types[17]
#define SWIGTYPE_p_size_type swig_types[18]
#define SWIGTYPE_p_std__complexT_double_t swig_types[19]
#define SWIGTYPE_p_std__complexT_float_t swig_types[20]
#define SWIGTYPE_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t swig_types[21]
#define SWIGTYPE_p_std__vectorT_SoundWave__SampleVectorT_float_t_t swig_types[22]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[23]
#define SWIGTYPE_p_std__vectorT_float_p_t swig_types[24]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[25]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_long_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[28]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[29]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_t swig_types[30]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_t swig_types[31]
#define SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t swig_types[32]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[33]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[34]
#define SWIGTYPE_p_std__vectorT_unsigned_long_t swig_types[35]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[36]
#define SWIGTYPE_p_unsigned_char swig_types[37]
#define SWIGTYPE_p_unsigned_int swig_types[38]
#define SWIGTYPE_p_unsigned_long_long swig_types[39]
#define SWIGTYPE_p_unsigned_short swig_types[40]
#define SWIGTYPE_p_value_type swig_types[41]
static swig_type_info *swig_types[43];
static swig_module_info swig_module = {swig_types, 42, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "sample"
#define SWIG_init      luaopen_sample
#define SWIG_init_user luaopen_sample_user

#define SWIG_LUACODE   luaopen_sample_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "SampleVector.h"
#include "samples.hpp"


#include <stdint.h>		// Use the C99 official header


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <complex>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_vector_Sl_float_Sg____getitem____SWIG(std::vector< float > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG(std::vector< float > *self,unsigned int idx,float val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN double std_vector_Sl_double_Sg____getitem____SWIG(std::vector< double > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG(std::vector< double > *self,unsigned int idx,double val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN std::complex< float > std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(std::vector< std::complex< float > > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG(std::vector< std::complex< float > > *self,unsigned int idx,std::complex< float > val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN std::complex< double > std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(std::vector< std::complex< double > > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG(std::vector< std::complex< double > > *self,unsigned int idx,std::complex< double > val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN signed char std_vector_Sl_signed_SS_char_Sg____getitem____SWIG(std::vector< signed char > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_signed_SS_char_Sg____setitem____SWIG(std::vector< signed char > *self,unsigned int idx,signed char val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG(std::vector< unsigned char > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG(std::vector< unsigned char > *self,unsigned int idx,unsigned char val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN short std_vector_Sl_short_Sg____getitem____SWIG(std::vector< short > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_short_Sg____setitem____SWIG(std::vector< short > *self,unsigned int idx,short val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned short std_vector_Sl_unsigned_SS_short_Sg____getitem____SWIG(std::vector< unsigned short > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_unsigned_SS_short_Sg____setitem____SWIG(std::vector< unsigned short > *self,unsigned int idx,unsigned short val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_int_Sg____getitem____SWIG(std::vector< int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG(std::vector< int > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG(std::vector< unsigned int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG(std::vector< unsigned int > *self,unsigned int idx,unsigned int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN long std_vector_Sl_long_Sg____getitem____SWIG(std::vector< long > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_long_Sg____setitem____SWIG(std::vector< long > *self,unsigned int idx,long val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN unsigned long std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG(std::vector< unsigned long > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG(std::vector< unsigned long > *self,unsigned int idx,unsigned long val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN float SoundWave_SampleVector_Sl_float_Sg____getitem____SWIG(SoundWave::SampleVector< float > *self,size_t i){ return self->vector[i]; }
SWIGINTERN void SoundWave_SampleVector_Sl_float_Sg____setitem____SWIG(SoundWave::SampleVector< float > *self,size_t i,float val){ self->vector[i] = val; }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_fcomplex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_fcomplex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_fcomplex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_fcomplex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_fcomplex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_fcomplex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fcomplex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fcomplex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fcomplex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fcomplex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_fcomplex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fcomplex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fcomplex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fcomplex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_fcomplex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fcomplex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fcomplex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fcomplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fcomplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fcomplex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_fcomplex_methods[]= {
    { "real", _wrap_fcomplex_real},
    { "imag", _wrap_fcomplex_imag},
    { "__add", _wrap_fcomplex___add},
    { "__sub", _wrap_fcomplex___sub},
    { "__div", _wrap_fcomplex___div},
    { "__mul", _wrap_fcomplex___mul},
    { "__pow", _wrap_fcomplex___pow},
    { "__eq", _wrap_fcomplex___eq},
    {0,0}
};
static swig_lua_method swig_fcomplex_meta[] = {
    { "__add", _wrap_fcomplex___add},
    { "__sub", _wrap_fcomplex___sub},
    { "__div", _wrap_fcomplex___div},
    { "__mul", _wrap_fcomplex___mul},
    { "__pow", _wrap_fcomplex___pow},
    { "__eq", _wrap_fcomplex___eq},
    {0,0}
};

static swig_lua_attribute swig_fcomplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fcomplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fcomplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fcomplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fcomplex_Sf_SwigStatic = {
    "fcomplex",
    swig_fcomplex_Sf_SwigStatic_methods,
    swig_fcomplex_Sf_SwigStatic_attributes,
    swig_fcomplex_Sf_SwigStatic_constants,
    swig_fcomplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fcomplex_bases[] = {0};
static const char *swig_fcomplex_base_names[] = {0};
static swig_lua_class _wrap_class_fcomplex = { "fcomplex", "fcomplex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_fcomplex, swig_delete_fcomplex, swig_fcomplex_methods, swig_fcomplex_attributes, &swig_fcomplex_Sf_SwigStatic, swig_fcomplex_meta, swig_fcomplex_bases, swig_fcomplex_base_names };

static int _wrap_new_zcomplex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_zcomplex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_zcomplex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_zcomplex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_zcomplex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_zcomplex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_zcomplex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_zcomplex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_zcomplex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_zcomplex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'zcomplex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_zcomplex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_zcomplex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_zcomplex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'zcomplex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_zcomplex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_zcomplex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_zcomplex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'zcomplex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_zcomplex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_zcomplex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_zcomplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_zcomplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_zcomplex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_zcomplex_methods[]= {
    { "real", _wrap_zcomplex_real},
    { "imag", _wrap_zcomplex_imag},
    { "__add", _wrap_zcomplex___add},
    { "__sub", _wrap_zcomplex___sub},
    { "__div", _wrap_zcomplex___div},
    { "__mul", _wrap_zcomplex___mul},
    { "__pow", _wrap_zcomplex___pow},
    { "__eq", _wrap_zcomplex___eq},
    {0,0}
};
static swig_lua_method swig_zcomplex_meta[] = {
    { "__add", _wrap_zcomplex___add},
    { "__sub", _wrap_zcomplex___sub},
    { "__div", _wrap_zcomplex___div},
    { "__mul", _wrap_zcomplex___mul},
    { "__pow", _wrap_zcomplex___pow},
    { "__eq", _wrap_zcomplex___eq},
    {0,0}
};

static swig_lua_attribute swig_zcomplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_zcomplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_zcomplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_zcomplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_zcomplex_Sf_SwigStatic = {
    "zcomplex",
    swig_zcomplex_Sf_SwigStatic_methods,
    swig_zcomplex_Sf_SwigStatic_attributes,
    swig_zcomplex_Sf_SwigStatic_constants,
    swig_zcomplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_zcomplex_bases[] = {0};
static const char *swig_zcomplex_base_names[] = {0};
static swig_lua_class _wrap_class_zcomplex = { "zcomplex", "zcomplex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_zcomplex, swig_delete_zcomplex, swig_zcomplex_methods, swig_zcomplex_attributes, &swig_zcomplex_Sf_SwigStatic, swig_zcomplex_meta, swig_zcomplex_bases, swig_zcomplex_base_names };

static int _wrap_new_float_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",0,0)
  result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_float_vector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (std::vector< float > *)new std::vector< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(unsigned int)\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n"
    "    std::vector< float >::vector(unsigned int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< float > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< float > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< float > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< float > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (float)std_vector_Sl_float_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("float_vector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  try {
    std_vector_Sl_float_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_vector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_vector_methods[]= {
    { "size", _wrap_float_vector_size},
    { "max_size", _wrap_float_vector_max_size},
    { "empty", _wrap_float_vector_empty},
    { "clear", _wrap_float_vector_clear},
    { "push_back", _wrap_float_vector_push_back},
    { "pop_back", _wrap_float_vector_pop_back},
    { "front", _wrap_float_vector_front},
    { "back", _wrap_float_vector_back},
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};
static swig_lua_method swig_float_vector_meta[] = {
    { "__getitem", _wrap_float_vector___getitem},
    { "__setitem", _wrap_float_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_float_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_vector_Sf_SwigStatic = {
    "float_vector",
    swig_float_vector_Sf_SwigStatic_methods,
    swig_float_vector_Sf_SwigStatic_attributes,
    swig_float_vector_Sf_SwigStatic_constants,
    swig_float_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_vector_bases[] = {0};
static const char *swig_float_vector_base_names[] = {0};
static swig_lua_class _wrap_class_float_vector = { "float_vector", "float_vector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_float_vector, swig_delete_float_vector, swig_float_vector_methods, swig_float_vector_attributes, &swig_float_vector_Sf_SwigStatic, swig_float_vector_meta, swig_float_vector_bases, swig_float_vector_base_names };

static int _wrap_new_double_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",0,0)
  result = (std::vector< double > *)new std::vector< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_double_vector",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  std::vector< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< double >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< double >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::vector",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (std::vector< double > *)new std::vector< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(unsigned int)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(unsigned int,double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< double >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::max_size",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (unsigned int)((std::vector< double > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< double >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::empty",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::clear",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::vector< double >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::push_back",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::push_back",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIG_check_num_args("std::vector< double >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::pop_back",1,"std::vector< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::front",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::back",1,"std::vector< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double)((std::vector< double > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< double >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__getitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (double)std_vector_Sl_double_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< double >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< double >::__setitem__",1,"std::vector< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< double >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< double >::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("double_vector___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  try {
    std_vector_Sl_double_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_vector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_vector_methods[]= {
    { "size", _wrap_double_vector_size},
    { "max_size", _wrap_double_vector_max_size},
    { "empty", _wrap_double_vector_empty},
    { "clear", _wrap_double_vector_clear},
    { "push_back", _wrap_double_vector_push_back},
    { "pop_back", _wrap_double_vector_pop_back},
    { "front", _wrap_double_vector_front},
    { "back", _wrap_double_vector_back},
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};
static swig_lua_method swig_double_vector_meta[] = {
    { "__getitem", _wrap_double_vector___getitem},
    { "__setitem", _wrap_double_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_double_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_vector_Sf_SwigStatic = {
    "double_vector",
    swig_double_vector_Sf_SwigStatic_methods,
    swig_double_vector_Sf_SwigStatic_attributes,
    swig_double_vector_Sf_SwigStatic_constants,
    swig_double_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_vector_bases[] = {0};
static const char *swig_double_vector_base_names[] = {0};
static swig_lua_class _wrap_class_double_vector = { "double_vector", "double_vector", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_double_vector, swig_delete_double_vector, swig_double_vector_methods, swig_double_vector_attributes, &swig_double_vector_Sf_SwigStatic, swig_double_vector_meta, swig_double_vector_bases, swig_double_vector_base_names };

static int _wrap_new_fcomplex_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",0,0)
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"std::vector< std::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_fcomplex_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >((std::vector< std::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::complex< float > arg2 ;
  std::complex< float > *argp2 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::vector",2,"std::complex< float >");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_fcomplex_vector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fcomplex_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_fcomplex_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_fcomplex_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_fcomplex_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_fcomplex_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fcomplex_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::vector()\n"
    "    std::vector< std::complex< float > >::vector(unsigned int)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > > const &)\n"
    "    std::vector< std::complex< float > >::vector(unsigned int,std::complex< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_fcomplex_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::size",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (unsigned int)((std::vector< std::complex< float > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::max_size",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (unsigned int)((std::vector< std::complex< float > > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::empty",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = (bool)((std::vector< std::complex< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::clear",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > arg2 ;
  std::complex< float > *argp2 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",1,"std::vector< std::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::push_back",2,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_vector_push_back",2,SWIGTYPE_p_std__complexT_float_t);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::pop_back",1,"std::vector< std::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::front",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = ((std::vector< std::complex< float > > const *)arg1)->front();
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::back",1,"std::vector< std::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  result = ((std::vector< std::complex< float > > const *)arg1)->back();
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  unsigned int arg2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem__",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fcomplex_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  unsigned int arg2 ;
  std::complex< float > arg3 ;
  std::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< float > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem__",1,"std::vector< std::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< float > >::__setitem__",3,"std::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("fcomplex_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("fcomplex_vector___setitem",3,SWIGTYPE_p_std__complexT_float_t);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fcomplex_vector(void *obj) {
std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fcomplex_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fcomplex_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fcomplex_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_fcomplex_vector_methods[]= {
    { "size", _wrap_fcomplex_vector_size},
    { "max_size", _wrap_fcomplex_vector_max_size},
    { "empty", _wrap_fcomplex_vector_empty},
    { "clear", _wrap_fcomplex_vector_clear},
    { "push_back", _wrap_fcomplex_vector_push_back},
    { "pop_back", _wrap_fcomplex_vector_pop_back},
    { "front", _wrap_fcomplex_vector_front},
    { "back", _wrap_fcomplex_vector_back},
    { "__getitem", _wrap_fcomplex_vector___getitem},
    { "__setitem", _wrap_fcomplex_vector___setitem},
    {0,0}
};
static swig_lua_method swig_fcomplex_vector_meta[] = {
    { "__getitem", _wrap_fcomplex_vector___getitem},
    { "__setitem", _wrap_fcomplex_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_fcomplex_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fcomplex_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fcomplex_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fcomplex_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fcomplex_vector_Sf_SwigStatic = {
    "fcomplex_vector",
    swig_fcomplex_vector_Sf_SwigStatic_methods,
    swig_fcomplex_vector_Sf_SwigStatic_attributes,
    swig_fcomplex_vector_Sf_SwigStatic_constants,
    swig_fcomplex_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fcomplex_vector_bases[] = {0};
static const char *swig_fcomplex_vector_base_names[] = {0};
static swig_lua_class _wrap_class_fcomplex_vector = { "fcomplex_vector", "fcomplex_vector", &SWIGTYPE_p_std__vectorT_std__complexT_float_t_t,_proxy__wrap_new_fcomplex_vector, swig_delete_fcomplex_vector, swig_fcomplex_vector_methods, swig_fcomplex_vector_attributes, &swig_fcomplex_vector_Sf_SwigStatic, swig_fcomplex_vector_meta, swig_fcomplex_vector_bases, swig_fcomplex_vector_base_names };

static int _wrap_new_zcomplex_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",0,0)
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"std::vector< std::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_zcomplex_vector",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >((std::vector< std::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::complex< double > arg2 ;
  std::complex< double > *argp2 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::vector",2,"std::complex< double >");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_zcomplex_vector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zcomplex_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_zcomplex_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_zcomplex_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_zcomplex_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_zcomplex_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_zcomplex_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::vector()\n"
    "    std::vector< std::complex< double > >::vector(unsigned int)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > > const &)\n"
    "    std::vector< std::complex< double > >::vector(unsigned int,std::complex< double >)\n");
  lua_error(L);return 0;
}


static int _wrap_zcomplex_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::size",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (unsigned int)((std::vector< std::complex< double > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::max_size",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_max_size",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (unsigned int)((std::vector< std::complex< double > > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::empty",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_empty",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = (bool)((std::vector< std::complex< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::clear",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_clear",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > arg2 ;
  std::complex< double > *argp2 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",1,"std::vector< std::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::push_back",2,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_push_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex_vector_push_back",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::pop_back",1,"std::vector< std::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_pop_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::front",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_front",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = ((std::vector< std::complex< double > > const *)arg1)->front();
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::back",1,"std::vector< std::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector_back",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  result = ((std::vector< std::complex< double > > const *)arg1)->back();
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  unsigned int arg2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem__",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector___getitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zcomplex_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  unsigned int arg2 ;
  std::complex< double > arg3 ;
  std::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< std::complex< double > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem__",1,"std::vector< std::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< std::complex< double > >::__setitem__",3,"std::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("zcomplex_vector___setitem",1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("zcomplex_vector___setitem",3,SWIGTYPE_p_std__complexT_double_t);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_zcomplex_vector(void *obj) {
std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_zcomplex_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_zcomplex_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_zcomplex_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_zcomplex_vector_methods[]= {
    { "size", _wrap_zcomplex_vector_size},
    { "max_size", _wrap_zcomplex_vector_max_size},
    { "empty", _wrap_zcomplex_vector_empty},
    { "clear", _wrap_zcomplex_vector_clear},
    { "push_back", _wrap_zcomplex_vector_push_back},
    { "pop_back", _wrap_zcomplex_vector_pop_back},
    { "front", _wrap_zcomplex_vector_front},
    { "back", _wrap_zcomplex_vector_back},
    { "__getitem", _wrap_zcomplex_vector___getitem},
    { "__setitem", _wrap_zcomplex_vector___setitem},
    {0,0}
};
static swig_lua_method swig_zcomplex_vector_meta[] = {
    { "__getitem", _wrap_zcomplex_vector___getitem},
    { "__setitem", _wrap_zcomplex_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_zcomplex_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_zcomplex_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_zcomplex_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_zcomplex_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_zcomplex_vector_Sf_SwigStatic = {
    "zcomplex_vector",
    swig_zcomplex_vector_Sf_SwigStatic_methods,
    swig_zcomplex_vector_Sf_SwigStatic_attributes,
    swig_zcomplex_vector_Sf_SwigStatic_constants,
    swig_zcomplex_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_zcomplex_vector_bases[] = {0};
static const char *swig_zcomplex_vector_base_names[] = {0};
static swig_lua_class _wrap_class_zcomplex_vector = { "zcomplex_vector", "zcomplex_vector", &SWIGTYPE_p_std__vectorT_std__complexT_double_t_t,_proxy__wrap_new_zcomplex_vector, swig_delete_zcomplex_vector, swig_zcomplex_vector_methods, swig_zcomplex_vector_attributes, &swig_zcomplex_vector_Sf_SwigStatic, swig_zcomplex_vector_meta, swig_zcomplex_vector_bases, swig_zcomplex_vector_base_names };

static int _wrap_new_int8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",0,0)
  result = (std::vector< signed char > *)new std::vector< signed char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< signed char >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< signed char > *)new std::vector< signed char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = 0 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< signed char >::vector",1,"std::vector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_int8_vector",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (std::vector< signed char > *)new std::vector< signed char >((std::vector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  signed char arg2 ;
  std::vector< signed char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< signed char >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::vector",2,"signed char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (signed char)lua_tonumber(L, 2);
  result = (std::vector< signed char > *)new std::vector< signed char >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int8_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int8_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< signed char >::vector()\n"
    "    std::vector< signed char >::vector(unsigned int)\n"
    "    std::vector< signed char >::vector(std::vector< signed char > const &)\n"
    "    std::vector< signed char >::vector(unsigned int,signed char)\n");
  lua_error(L);return 0;
}


static int _wrap_int8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< signed char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::size",1,"std::vector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (unsigned int)((std::vector< signed char > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< signed char >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::max_size",1,"std::vector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_max_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (unsigned int)((std::vector< signed char > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< signed char >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::empty",1,"std::vector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_empty",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (bool)((std::vector< signed char > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::clear",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_clear",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  signed char arg2 ;
  
  SWIG_check_num_args("std::vector< signed char >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::push_back",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::push_back",2,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_push_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  arg2 = (signed char)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  
  SWIG_check_num_args("std::vector< signed char >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::pop_back",1,"std::vector< signed char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< signed char >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::front",1,"std::vector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_front",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char)((std::vector< signed char > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< signed char >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::back",1,"std::vector< signed char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char)((std::vector< signed char > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  unsigned int arg2 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< signed char >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::__getitem__",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector___getitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (signed char)std_vector_Sl_signed_SS_char_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = (std::vector< signed char > *) 0 ;
  unsigned int arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("std::vector< signed char >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< signed char >::__setitem__",1,"std::vector< signed char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< signed char >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< signed char >::__setitem__",3,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("int8_vector___setitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (signed char)lua_tonumber(L, 3);
  try {
    std_vector_Sl_signed_SS_char_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int8_vector(void *obj) {
std::vector< signed char > *arg1 = (std::vector< signed char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int8_vector_methods[]= {
    { "size", _wrap_int8_vector_size},
    { "max_size", _wrap_int8_vector_max_size},
    { "empty", _wrap_int8_vector_empty},
    { "clear", _wrap_int8_vector_clear},
    { "push_back", _wrap_int8_vector_push_back},
    { "pop_back", _wrap_int8_vector_pop_back},
    { "front", _wrap_int8_vector_front},
    { "back", _wrap_int8_vector_back},
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int8_vector_meta[] = {
    { "__getitem", _wrap_int8_vector___getitem},
    { "__setitem", _wrap_int8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int8_vector_Sf_SwigStatic = {
    "int8_vector",
    swig_int8_vector_Sf_SwigStatic_methods,
    swig_int8_vector_Sf_SwigStatic_attributes,
    swig_int8_vector_Sf_SwigStatic_constants,
    swig_int8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int8_vector_bases[] = {0};
static const char *swig_int8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int8_vector = { "int8_vector", "int8_vector", &SWIGTYPE_p_std__vectorT_signed_char_t,_proxy__wrap_new_int8_vector, swig_delete_int8_vector, swig_int8_vector_methods, swig_int8_vector_attributes, &swig_int8_vector_Sf_SwigStatic, swig_int8_vector_meta, swig_int8_vector_bases, swig_int8_vector_base_names };

static int _wrap_new_uint8_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",0,0)
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned char >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned char >::vector",1,"std::vector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_uint8_vector",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned char arg2 ;
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned char >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::vector",2,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned char)lua_tonumber(L, 2);
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint8_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint8_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint8_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint8_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint8_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned char >::vector()\n"
    "    std::vector< unsigned char >::vector(unsigned int)\n"
    "    std::vector< unsigned char >::vector(std::vector< unsigned char > const &)\n"
    "    std::vector< unsigned char >::vector(unsigned int,unsigned char)\n");
  lua_error(L);return 0;
}


static int _wrap_uint8_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::size",1,"std::vector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned int)((std::vector< unsigned char > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned char >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::max_size",1,"std::vector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned int)((std::vector< unsigned char > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned char >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::empty",1,"std::vector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::clear",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::push_back",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::push_back",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned char)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::pop_back",1,"std::vector< unsigned char > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< unsigned char >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::front",1,"std::vector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char)((std::vector< unsigned char > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< unsigned char >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::back",1,"std::vector< unsigned char > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char)((std::vector< unsigned char > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned int arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< unsigned char >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::__getitem__",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint8_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned int arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned char >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned char >::__setitem__",1,"std::vector< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned char >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned char >::__setitem__",3,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("uint8_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned char)lua_tonumber(L, 3);
  try {
    std_vector_Sl_unsigned_SS_char_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint8_vector(void *obj) {
std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint8_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint8_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint8_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint8_vector_methods[]= {
    { "size", _wrap_uint8_vector_size},
    { "max_size", _wrap_uint8_vector_max_size},
    { "empty", _wrap_uint8_vector_empty},
    { "clear", _wrap_uint8_vector_clear},
    { "push_back", _wrap_uint8_vector_push_back},
    { "pop_back", _wrap_uint8_vector_pop_back},
    { "front", _wrap_uint8_vector_front},
    { "back", _wrap_uint8_vector_back},
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint8_vector_meta[] = {
    { "__getitem", _wrap_uint8_vector___getitem},
    { "__setitem", _wrap_uint8_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint8_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint8_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint8_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint8_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint8_vector_Sf_SwigStatic = {
    "uint8_vector",
    swig_uint8_vector_Sf_SwigStatic_methods,
    swig_uint8_vector_Sf_SwigStatic_attributes,
    swig_uint8_vector_Sf_SwigStatic_constants,
    swig_uint8_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint8_vector_bases[] = {0};
static const char *swig_uint8_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint8_vector = { "uint8_vector", "uint8_vector", &SWIGTYPE_p_std__vectorT_unsigned_char_t,_proxy__wrap_new_uint8_vector, swig_delete_uint8_vector, swig_uint8_vector_methods, swig_uint8_vector_attributes, &swig_uint8_vector_Sf_SwigStatic, swig_uint8_vector_meta, swig_uint8_vector_bases, swig_uint8_vector_base_names };

static int _wrap_new_int16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",0,0)
  result = (std::vector< short > *)new std::vector< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< short > *)new std::vector< short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = 0 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"std::vector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_int16_vector",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (std::vector< short > *)new std::vector< short >((std::vector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  short arg2 ;
  std::vector< short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< short >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< short >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::vector",2,"short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (short)lua_tonumber(L, 2);
  result = (std::vector< short > *)new std::vector< short >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int16_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int16_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< short >::vector()\n"
    "    std::vector< short >::vector(unsigned int)\n"
    "    std::vector< short >::vector(std::vector< short > const &)\n"
    "    std::vector< short >::vector(unsigned int,short)\n");
  lua_error(L);return 0;
}


static int _wrap_int16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::size",1,"std::vector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (unsigned int)((std::vector< short > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< short >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::max_size",1,"std::vector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_max_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (unsigned int)((std::vector< short > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< short >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::empty",1,"std::vector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_empty",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (bool)((std::vector< short > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::clear",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_clear",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("std::vector< short >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::push_back",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::push_back",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_push_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  SWIG_check_num_args("std::vector< short >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::pop_back",1,"std::vector< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::vector< short >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::front",1,"std::vector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_front",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short)((std::vector< short > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::vector< short >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::back",1,"std::vector< short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short)((std::vector< short > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  unsigned int arg2 ;
  short result;
  
  SWIG_check_num_args("std::vector< short >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::__getitem__",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector___getitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (short)std_vector_Sl_short_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  unsigned int arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("std::vector< short >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< short >::__setitem__",1,"std::vector< short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< short >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< short >::__setitem__",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("int16_vector___setitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  try {
    std_vector_Sl_short_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int16_vector(void *obj) {
std::vector< short > *arg1 = (std::vector< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int16_vector_methods[]= {
    { "size", _wrap_int16_vector_size},
    { "max_size", _wrap_int16_vector_max_size},
    { "empty", _wrap_int16_vector_empty},
    { "clear", _wrap_int16_vector_clear},
    { "push_back", _wrap_int16_vector_push_back},
    { "pop_back", _wrap_int16_vector_pop_back},
    { "front", _wrap_int16_vector_front},
    { "back", _wrap_int16_vector_back},
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int16_vector_meta[] = {
    { "__getitem", _wrap_int16_vector___getitem},
    { "__setitem", _wrap_int16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int16_vector_Sf_SwigStatic = {
    "int16_vector",
    swig_int16_vector_Sf_SwigStatic_methods,
    swig_int16_vector_Sf_SwigStatic_attributes,
    swig_int16_vector_Sf_SwigStatic_constants,
    swig_int16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int16_vector_bases[] = {0};
static const char *swig_int16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int16_vector = { "int16_vector", "int16_vector", &SWIGTYPE_p_std__vectorT_short_t,_proxy__wrap_new_int16_vector, swig_delete_int16_vector, swig_int16_vector_methods, swig_int16_vector_attributes, &swig_int16_vector_Sf_SwigStatic, swig_int16_vector_meta, swig_int16_vector_bases, swig_int16_vector_base_names };

static int _wrap_new_uint16_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",0,0)
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned short >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned short >::vector",1,"std::vector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_uint16_vector",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >((std::vector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned short arg2 ;
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned short >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::vector",2,"unsigned short");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint16_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint16_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint16_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint16_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint16_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned short >::vector()\n"
    "    std::vector< unsigned short >::vector(unsigned int)\n"
    "    std::vector< unsigned short >::vector(std::vector< unsigned short > const &)\n"
    "    std::vector< unsigned short >::vector(unsigned int,unsigned short)\n");
  lua_error(L);return 0;
}


static int _wrap_uint16_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::size",1,"std::vector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned int)((std::vector< unsigned short > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned short >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::max_size",1,"std::vector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned int)((std::vector< unsigned short > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned short >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::empty",1,"std::vector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (bool)((std::vector< unsigned short > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::clear",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::push_back",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::push_back",2,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::pop_back",1,"std::vector< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< unsigned short >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::front",1,"std::vector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short)((std::vector< unsigned short > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< unsigned short >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::back",1,"std::vector< unsigned short > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short)((std::vector< unsigned short > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned int arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< unsigned short >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::__getitem__",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned short)std_vector_Sl_unsigned_SS_short_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint16_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned int arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned short >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned short >::__setitem__",1,"std::vector< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned short >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned short >::__setitem__",3,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("uint16_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned short)lua_tonumber(L, 3);
  try {
    std_vector_Sl_unsigned_SS_short_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint16_vector(void *obj) {
std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint16_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint16_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint16_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint16_vector_methods[]= {
    { "size", _wrap_uint16_vector_size},
    { "max_size", _wrap_uint16_vector_max_size},
    { "empty", _wrap_uint16_vector_empty},
    { "clear", _wrap_uint16_vector_clear},
    { "push_back", _wrap_uint16_vector_push_back},
    { "pop_back", _wrap_uint16_vector_pop_back},
    { "front", _wrap_uint16_vector_front},
    { "back", _wrap_uint16_vector_back},
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint16_vector_meta[] = {
    { "__getitem", _wrap_uint16_vector___getitem},
    { "__setitem", _wrap_uint16_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint16_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint16_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint16_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint16_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint16_vector_Sf_SwigStatic = {
    "uint16_vector",
    swig_uint16_vector_Sf_SwigStatic_methods,
    swig_uint16_vector_Sf_SwigStatic_attributes,
    swig_uint16_vector_Sf_SwigStatic_constants,
    swig_uint16_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint16_vector_bases[] = {0};
static const char *swig_uint16_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint16_vector = { "uint16_vector", "uint16_vector", &SWIGTYPE_p_std__vectorT_unsigned_short_t,_proxy__wrap_new_uint16_vector, swig_delete_uint16_vector, swig_uint16_vector_methods, swig_uint16_vector_attributes, &swig_uint16_vector_Sf_SwigStatic, swig_uint16_vector_meta, swig_uint16_vector_bases, swig_uint16_vector_base_names };

static int _wrap_new_int32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",0,0)
  result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_int32_vector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (std::vector< int > *)new std::vector< int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int32_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int32_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(unsigned int)\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(unsigned int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_int32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (int)std_vector_Sl_int_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem__",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("int32_vector___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_int_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int32_vector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int32_vector_methods[]= {
    { "size", _wrap_int32_vector_size},
    { "max_size", _wrap_int32_vector_max_size},
    { "empty", _wrap_int32_vector_empty},
    { "clear", _wrap_int32_vector_clear},
    { "push_back", _wrap_int32_vector_push_back},
    { "pop_back", _wrap_int32_vector_pop_back},
    { "front", _wrap_int32_vector_front},
    { "back", _wrap_int32_vector_back},
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int32_vector_meta[] = {
    { "__getitem", _wrap_int32_vector___getitem},
    { "__setitem", _wrap_int32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int32_vector_Sf_SwigStatic = {
    "int32_vector",
    swig_int32_vector_Sf_SwigStatic_methods,
    swig_int32_vector_Sf_SwigStatic_attributes,
    swig_int32_vector_Sf_SwigStatic_constants,
    swig_int32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int32_vector_bases[] = {0};
static const char *swig_int32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int32_vector = { "int32_vector", "int32_vector", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_int32_vector, swig_delete_int32_vector, swig_int32_vector_methods, swig_int32_vector_attributes, &swig_int32_vector_Sf_SwigStatic, swig_int32_vector_meta, swig_int32_vector_bases, swig_int32_vector_base_names };

static int _wrap_new_uint32_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",0,0)
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"std::vector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_uint32_vector",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::vector",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint32_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint32_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint32_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint32_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint32_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::vector()\n"
    "    std::vector< unsigned int >::vector(unsigned int)\n"
    "    std::vector< unsigned int >::vector(std::vector< unsigned int > const &)\n"
    "    std::vector< unsigned int >::vector(unsigned int,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_uint32_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::size",1,"std::vector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::max_size",1,"std::vector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::empty",1,"std::vector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::clear",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::push_back",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::push_back",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::pop_back",1,"std::vector< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::front",1,"std::vector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::back",1,"std::vector< unsigned int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::__getitem__",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint32_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",1,"std::vector< unsigned int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned int >::__setitem__",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint32_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint32_vector(void *obj) {
std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint32_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint32_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint32_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint32_vector_methods[]= {
    { "size", _wrap_uint32_vector_size},
    { "max_size", _wrap_uint32_vector_max_size},
    { "empty", _wrap_uint32_vector_empty},
    { "clear", _wrap_uint32_vector_clear},
    { "push_back", _wrap_uint32_vector_push_back},
    { "pop_back", _wrap_uint32_vector_pop_back},
    { "front", _wrap_uint32_vector_front},
    { "back", _wrap_uint32_vector_back},
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint32_vector_meta[] = {
    { "__getitem", _wrap_uint32_vector___getitem},
    { "__setitem", _wrap_uint32_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint32_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint32_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint32_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint32_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint32_vector_Sf_SwigStatic = {
    "uint32_vector",
    swig_uint32_vector_Sf_SwigStatic_methods,
    swig_uint32_vector_Sf_SwigStatic_attributes,
    swig_uint32_vector_Sf_SwigStatic_constants,
    swig_uint32_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint32_vector_bases[] = {0};
static const char *swig_uint32_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint32_vector = { "uint32_vector", "uint32_vector", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_proxy__wrap_new_uint32_vector, swig_delete_uint32_vector, swig_uint32_vector_methods, swig_uint32_vector_attributes, &swig_uint32_vector_Sf_SwigStatic, swig_uint32_vector_meta, swig_uint32_vector_bases, swig_uint32_vector_base_names };

static int _wrap_new_int64_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",0,0)
  result = (std::vector< long > *)new std::vector< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< long > *)new std::vector< long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = 0 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"std::vector< long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("new_int64_vector",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (std::vector< long > *)new std::vector< long >((std::vector< long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  long arg2 ;
  std::vector< long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< long >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< long >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::vector",2,"long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (long)lua_tonumber(L, 2);
  result = (std::vector< long > *)new std::vector< long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int64_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_int64_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_int64_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_int64_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_int64_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::vector()\n"
    "    std::vector< long >::vector(unsigned int)\n"
    "    std::vector< long >::vector(std::vector< long > const &)\n"
    "    std::vector< long >::vector(unsigned int,long)\n");
  lua_error(L);return 0;
}


static int _wrap_int64_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::size",1,"std::vector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_size",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (unsigned int)((std::vector< long > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::max_size",1,"std::vector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_max_size",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (unsigned int)((std::vector< long > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::empty",1,"std::vector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_empty",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (bool)((std::vector< long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::clear",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_clear",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("std::vector< long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::push_back",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::push_back",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_push_back",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  SWIG_check_num_args("std::vector< long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::pop_back",1,"std::vector< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_pop_back",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::vector< long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::front",1,"std::vector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_front",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (long)((std::vector< long > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::vector< long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::back",1,"std::vector< long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector_back",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  result = (long)((std::vector< long > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  unsigned int arg2 ;
  long result;
  
  SWIG_check_num_args("std::vector< long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::__getitem__",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector___getitem",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (long)std_vector_Sl_long_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int64_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  
  SWIG_check_num_args("std::vector< long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< long >::__setitem__",1,"std::vector< long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< long >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< long >::__setitem__",3,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_t,0))){
    SWIG_fail_ptr("int64_vector___setitem",1,SWIGTYPE_p_std__vectorT_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (long)lua_tonumber(L, 3);
  try {
    std_vector_Sl_long_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int64_vector(void *obj) {
std::vector< long > *arg1 = (std::vector< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int64_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int64_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int64_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int64_vector_methods[]= {
    { "size", _wrap_int64_vector_size},
    { "max_size", _wrap_int64_vector_max_size},
    { "empty", _wrap_int64_vector_empty},
    { "clear", _wrap_int64_vector_clear},
    { "push_back", _wrap_int64_vector_push_back},
    { "pop_back", _wrap_int64_vector_pop_back},
    { "front", _wrap_int64_vector_front},
    { "back", _wrap_int64_vector_back},
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    {0,0}
};
static swig_lua_method swig_int64_vector_meta[] = {
    { "__getitem", _wrap_int64_vector___getitem},
    { "__setitem", _wrap_int64_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_int64_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int64_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int64_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int64_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int64_vector_Sf_SwigStatic = {
    "int64_vector",
    swig_int64_vector_Sf_SwigStatic_methods,
    swig_int64_vector_Sf_SwigStatic_attributes,
    swig_int64_vector_Sf_SwigStatic_constants,
    swig_int64_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int64_vector_bases[] = {0};
static const char *swig_int64_vector_base_names[] = {0};
static swig_lua_class _wrap_class_int64_vector = { "int64_vector", "int64_vector", &SWIGTYPE_p_std__vectorT_long_t,_proxy__wrap_new_int64_vector, swig_delete_int64_vector, swig_int64_vector_methods, swig_int64_vector_attributes, &swig_int64_vector_Sf_SwigStatic, swig_int64_vector_meta, swig_int64_vector_bases, swig_int64_vector_base_names };

static int _wrap_new_uint64_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",0,0)
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned long >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< unsigned long >::vector",1,"std::vector< unsigned long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_uint64_vector",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >((std::vector< unsigned long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned long arg2 ;
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< unsigned long >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::vector",2,"unsigned long");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint64_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_uint64_vector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_uint64_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_uint64_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_uint64_vector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_uint64_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::vector()\n"
    "    std::vector< unsigned long >::vector(unsigned int)\n"
    "    std::vector< unsigned long >::vector(std::vector< unsigned long > const &)\n"
    "    std::vector< unsigned long >::vector(unsigned int,unsigned long)\n");
  lua_error(L);return 0;
}


static int _wrap_uint64_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned long >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::size",1,"std::vector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_size",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (unsigned int)((std::vector< unsigned long > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< unsigned long >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::max_size",1,"std::vector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (unsigned int)((std::vector< unsigned long > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< unsigned long >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::empty",1,"std::vector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_empty",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (bool)((std::vector< unsigned long > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::clear",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_clear",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long arg2 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::push_back",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::push_back",2,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned long)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::pop_back",1,"std::vector< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::vector< unsigned long >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::front",1,"std::vector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_front",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (unsigned long)((std::vector< unsigned long > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::vector< unsigned long >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::back",1,"std::vector< unsigned long > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  result = (unsigned long)((std::vector< unsigned long > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned int arg2 ;
  unsigned long result;
  
  SWIG_check_num_args("std::vector< unsigned long >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::__getitem__",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (unsigned long)std_vector_Sl_unsigned_SS_long_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint64_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned int arg2 ;
  unsigned long arg3 ;
  
  SWIG_check_num_args("std::vector< unsigned long >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< unsigned long >::__setitem__",1,"std::vector< unsigned long > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< unsigned long >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< unsigned long >::__setitem__",3,"unsigned long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_t,0))){
    SWIG_fail_ptr("uint64_vector___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned long)lua_tonumber(L, 3);
  try {
    std_vector_Sl_unsigned_SS_long_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint64_vector(void *obj) {
std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint64_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint64_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint64_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint64_vector_methods[]= {
    { "size", _wrap_uint64_vector_size},
    { "max_size", _wrap_uint64_vector_max_size},
    { "empty", _wrap_uint64_vector_empty},
    { "clear", _wrap_uint64_vector_clear},
    { "push_back", _wrap_uint64_vector_push_back},
    { "pop_back", _wrap_uint64_vector_pop_back},
    { "front", _wrap_uint64_vector_front},
    { "back", _wrap_uint64_vector_back},
    { "__getitem", _wrap_uint64_vector___getitem},
    { "__setitem", _wrap_uint64_vector___setitem},
    {0,0}
};
static swig_lua_method swig_uint64_vector_meta[] = {
    { "__getitem", _wrap_uint64_vector___getitem},
    { "__setitem", _wrap_uint64_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_uint64_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint64_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint64_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint64_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint64_vector_Sf_SwigStatic = {
    "uint64_vector",
    swig_uint64_vector_Sf_SwigStatic_methods,
    swig_uint64_vector_Sf_SwigStatic_attributes,
    swig_uint64_vector_Sf_SwigStatic_constants,
    swig_uint64_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint64_vector_bases[] = {0};
static const char *swig_uint64_vector_base_names[] = {0};
static swig_lua_class _wrap_class_uint64_vector = { "uint64_vector", "uint64_vector", &SWIGTYPE_p_std__vectorT_unsigned_long_t,_proxy__wrap_new_uint64_vector, swig_delete_uint64_vector, swig_uint64_vector_methods, swig_uint64_vector_attributes, &swig_uint64_vector_Sf_SwigStatic, swig_uint64_vector_meta, swig_uint64_vector_bases, swig_uint64_vector_base_names };

static int _wrap_FloatSampleVector_vector_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::EigenArray< float > *arg2 = (SoundWave::EigenArray< float > *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::vector",1,"SoundWave::SampleVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::vector",2,"SoundWave::EigenArray< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_vector_set",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__EigenArrayT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_vector_set",2,SWIGTYPE_p_SoundWave__EigenArrayT_float_t);
  }
  
  if (arg1) (arg1)->vector = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_vector_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::EigenArray< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::vector",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_vector_get",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (SoundWave::EigenArray< float > *)& ((arg1)->vector);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__EigenArrayT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_channels_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::channels",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::channels",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_channels_set",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->channels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_channels_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::channels",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_channels_get",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result =  ((arg1)->channels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",0,0)
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"std::vector< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatSampleVector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >((std::vector< float > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatSampleVector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_FloatSampleVector",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >((float const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_FloatSampleVector",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >((float const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatSampleVector",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >((SoundWave::SampleVector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::EigenArray< float > *arg1 = 0 ;
  size_t arg2 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"SoundWave::EigenArray< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__EigenArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatSampleVector",1,SWIGTYPE_p_SoundWave__EigenArrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >((SoundWave::EigenArray< float > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::EigenArray< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"SoundWave::EigenArray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__EigenArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatSampleVector",1,SWIGTYPE_p_SoundWave__EigenArrayT_float_t);
  }
  
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >((SoundWave::EigenArray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SoundWave::EigenArray< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::SampleVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::SampleVector",2,"SoundWave::EigenArray< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__EigenArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatSampleVector",2,SWIGTYPE_p_SoundWave__EigenArrayT_float_t);
  }
  
  result = (SoundWave::SampleVector< float > *)new SoundWave::SampleVector< float >(arg1,(SoundWave::EigenArray< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatSampleVector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatSampleVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatSampleVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatSampleVector__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__EigenArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatSampleVector__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatSampleVector__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatSampleVector__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatSampleVector__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__EigenArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatSampleVector__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__EigenArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FloatSampleVector__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatSampleVector__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FloatSampleVector__SWIG_5(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatSampleVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::SampleVector()\n"
    "    SoundWave::SampleVector< float >::SampleVector(size_t,size_t)\n"
    "    SoundWave::SampleVector< float >::SampleVector(size_t)\n"
    "    SoundWave::SampleVector< float >::SampleVector(std::vector< float > const &,size_t)\n"
    "    SoundWave::SampleVector< float >::SampleVector(std::vector< float > const &)\n"
    "    SoundWave::SampleVector< float >::SampleVector(float const *,size_t,size_t)\n"
    "    SoundWave::SampleVector< float >::SampleVector(float const *,size_t)\n"
    "    SoundWave::SampleVector< float >::SampleVector(SoundWave::SampleVector< float > const &)\n"
    "    SoundWave::SampleVector< float >::SampleVector(SoundWave::EigenArray< float > const &,size_t)\n"
    "    SoundWave::SampleVector< float >::SampleVector(SoundWave::EigenArray< float > const &)\n"
    "    SoundWave::SampleVector< float >::SampleVector(size_t,SoundWave::EigenArray< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_clamp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::clamp",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::clamp",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::clamp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_clamp",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->clamp(arg2,arg3);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_clamp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::clamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::clamp",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::clamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_clamp",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->clamp(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_clamp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::clamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::clamp",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_clamp",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->clamp();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_clamp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatSampleVector_clamp__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector_clamp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatSampleVector_clamp__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector_clamp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::clamp(float,float)\n"
    "    SoundWave::SampleVector< float >::clamp(float)\n"
    "    SoundWave::SampleVector< float >::clamp()\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_get_stride(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::get_stride",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_stride",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_stride",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_stride",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_get_stride",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->get_stride(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_set_stride(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::set_stride",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_stride",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_stride",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_stride",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_stride",4,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_set_stride",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  (arg1)->set_stride(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_swap_stereo_channels(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::swap_stereo_channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::swap_stereo_channels",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_swap_stereo_channels",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  (arg1)->swap_stereo_channels();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_set_data(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::set_data",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_data",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_data",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_data",3,"size_t");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_data",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_set_data",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_set_data",4,SWIGTYPE_p_float);
  }
  
  (arg1)->set_data(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_copy_data(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::copy_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_data",1,"SoundWave::SampleVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_data",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_copy_data",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_copy_data",2,SWIGTYPE_p_float);
  }
  
  (arg1)->copy_data(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_set_channel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::set_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_set_channel",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_set_channel",3,SWIGTYPE_p_float);
  }
  
  (arg1)->set_channel(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_size(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::size",1,"SoundWave::SampleVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_size",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = ((SoundWave::SampleVector< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_num_channels(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::num_channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::num_channels",1,"SoundWave::SampleVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_num_channels",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = ((SoundWave::SampleVector< float > const *)arg1)->num_channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_zero(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::zero",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_zero",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_ones(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::ones",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_ones",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  (arg1)->ones();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_random(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::random",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::random",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_random",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  (arg1)->random();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::fill",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_fill",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->fill(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_samples_per_channel(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::samples_per_channel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::samples_per_channel",1,"SoundWave::SampleVector< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_samples_per_channel",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = ((SoundWave::SampleVector< float > const *)arg1)->samples_per_channel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_sum(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::sum",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_sum",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (float)(arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_min(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::min",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_min",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_max(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::max",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_max",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_min_index(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::min_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::min_index",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_min_index",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->min_index();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_max_index(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::max_index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::max_index",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_max_index",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->max_index();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_data(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::data",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_data",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_normalize(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::normalize",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_normalize",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_normalized(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::normalized",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_normalized",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->normalized();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ()",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___call",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ()",1,"SoundWave::SampleVector< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ()",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ()",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___call",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (float)((SoundWave::SampleVector< float > const *)arg1)->operator ()(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___call(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatSampleVector___call__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatSampleVector___call__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::operator ()(size_t,size_t)\n"
    "    SoundWave::SampleVector< float >::operator ()(size_t,size_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_get_channel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::get_channel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_get_channel",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->get_channel(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_get_channel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::get_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_get_channel",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_get_channel",3,SWIGTYPE_p_float);
  }
  
  (arg1)->get_channel(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_get_channel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::get_channel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel",1,"SoundWave::SampleVector< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_get_channel",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((SoundWave::SampleVector< float > const *)arg1)->get_channel(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_get_channel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector_get_channel__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector_get_channel__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatSampleVector_get_channel__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector_get_channel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::get_channel(size_t)\n"
    "    SoundWave::SampleVector< float >::get_channel(size_t,float *)\n"
    "    SoundWave::SampleVector< float >::get_channel(size_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_set_channel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::set_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",2,"SoundWave::SampleVector< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_set_channel",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_set_channel",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_channel((SoundWave::SampleVector< float > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_set_channel__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::set_channel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",1,"SoundWave::SampleVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channel",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_set_channel",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_set_channel",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->set_channel((float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_set_channel(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatSampleVector_set_channel__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatSampleVector_set_channel__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatSampleVector_set_channel__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector_set_channel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::set_channel(size_t,float *)\n"
    "    SoundWave::SampleVector< float >::set_channel(SoundWave::SampleVector< float > const &,size_t)\n"
    "    SoundWave::SampleVector< float >::set_channel(float const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_make_stereo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::make_stereo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::make_stereo",1,"SoundWave::SampleVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::make_stereo",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_make_stereo",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_make_stereo",2,SWIGTYPE_p_float);
  }
  
  (arg1)->make_stereo((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_make_stereo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::make_stereo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::make_stereo",1,"SoundWave::SampleVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::make_stereo",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::make_stereo",3,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_make_stereo",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_make_stereo",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_make_stereo",3,SWIGTYPE_p_float);
  }
  
  (arg1)->make_stereo((float const *)arg2,(float const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_make_stereo(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatSampleVector_make_stereo__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatSampleVector_make_stereo__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector_make_stereo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::make_stereo(float const *)\n"
    "    SoundWave::SampleVector< float >::make_stereo(float const *,float const *)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_set_channels(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::set_channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channels",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::set_channels",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_set_channels",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->set_channels(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::resize",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_resize",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::resize",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::resize",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_resize",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector_resize__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatSampleVector_resize__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::resize(size_t)\n"
    "    SoundWave::SampleVector< float >::resize(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_get_channel_count(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::get_channel_count",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel_count",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel_count",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel_count",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::SampleVector< float >::get_channel_count",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_get_channel_count",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (arg1)->get_channel_count(arg2,arg3,arg4);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ==",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator ==",2,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___eq",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___eq",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (bool)(arg1)->operator ==((SoundWave::SampleVector< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy",2,"SoundWave::SampleVector< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_copy",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_copy",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->copy((SoundWave::SampleVector< float > const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy",2,"SoundWave::SampleVector< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_copy",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_copy",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->copy((SoundWave::SampleVector< float > const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatSampleVector_copy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatSampleVector_copy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::copy(SoundWave::SampleVector< float > const &,size_t)\n"
    "    SoundWave::SampleVector< float >::copy(SoundWave::SampleVector< float > const &,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_copy_from(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::copy_from",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_from",1,"SoundWave::SampleVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_from",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_from",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_copy_from",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_copy_from",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->copy_from((float const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_copy_to(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::copy_to",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_to",1,"SoundWave::SampleVector< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_to",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::copy_to",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_copy_to",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatSampleVector_copy_to",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->copy_to(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_slice(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::slice",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::slice",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::slice",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_slice",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->slice(arg2,arg3);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_pan(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleType arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::pan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::pan",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::pan",2,"SoundWave::SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_pan",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (SoundWave::SampleType)lua_tonumber(L, 2);
  result = (arg1)->pan(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_stride_slice(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::stride_slice",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::stride_slice",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::stride_slice",2,"SoundWave::SampleVector< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::stride_slice",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundWave::SampleVector< float >::stride_slice",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("SoundWave::SampleVector< float >::stride_slice",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_stride_slice",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_stride_slice",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (arg1)->stride_slice((SoundWave::SampleVector< float > const &)*arg2,arg3,arg4,arg5);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator +",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator +",2,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___add",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___add",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->operator +((SoundWave::SampleVector< float > const &)*arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator -",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator -",2,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___sub",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___sub",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->operator -((SoundWave::SampleVector< float > const &)*arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator *",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator *",2,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___mul",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___mul",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->operator *((SoundWave::SampleVector< float > const &)*arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator /",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator /",2,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___div",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___div",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->operator /((SoundWave::SampleVector< float > const &)*arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator +",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator +",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___add",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator +(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatSampleVector___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::operator +(SoundWave::SampleVector< float > const &)\n"
    "    SoundWave::SampleVector< float >::operator +(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator -",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator -",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___sub",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator -(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatSampleVector___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::operator -(SoundWave::SampleVector< float > const &)\n"
    "    SoundWave::SampleVector< float >::operator -(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator /",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator /",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___div",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatSampleVector___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::operator /(SoundWave::SampleVector< float > const &)\n"
    "    SoundWave::SampleVector< float >::operator /(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator *",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::operator *",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___mul",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatSampleVector___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::operator *(SoundWave::SampleVector< float > const &)\n"
    "    SoundWave::SampleVector< float >::operator *(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::abs",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_abs",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->abs();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_abs2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::abs2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::abs2",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_abs2",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->abs2();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_inverse(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::inverse",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_inverse",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->inverse();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_exp(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::exp",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_exp",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->exp();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_log(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::log",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_log",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->log();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_log1p(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::log1p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::log1p",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_log1p",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->log1p();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_log10(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::log10",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_log10",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->log10();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::pow",1,"SoundWave::SampleVector< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::pow",2,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_pow",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_pow",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->pow((SoundWave::SampleVector< float > const &)*arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  float arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::pow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::pow",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::pow",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_pow",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (arg1)->pow(arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatSampleVector_pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatSampleVector_pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatSampleVector_pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::SampleVector< float >::pow(SoundWave::SampleVector< float > const &)\n"
    "    SoundWave::SampleVector< float >::pow(float const)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatSampleVector_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::sqrt",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_sqrt",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->sqrt();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_rsqrt(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::rsqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::rsqrt",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_rsqrt",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->rsqrt();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_square(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::square",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_square",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->square();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_sin(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::sin",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_sin",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->sin();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_cos(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::cos",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_cos",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->cos();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_tan(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::tan",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_tan",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->tan();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_asin(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::asin",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_asin",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->asin();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_acos(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::acos",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_acos",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->acos();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_atan(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::atan",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_atan",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->atan();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_sinh(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::sinh",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_sinh",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->sinh();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_cosh(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::cosh",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_cosh",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->cosh();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_tanh(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::tanh",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_tanh",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->tanh();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_ceil(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::ceil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::ceil",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_ceil",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->ceil();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_floor(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::floor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::floor",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_floor",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->floor();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_round(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::round",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::round",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_round",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (arg1)->round();
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector_println(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::println",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::println",1,"SoundWave::SampleVector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector_println",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  (arg1)->println();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::__getitem__",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___getitem",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)SoundWave_SampleVector_Sl_float_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatSampleVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("SoundWave::SampleVector< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundWave::SampleVector< float >::__setitem__",1,"SoundWave::SampleVector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::SampleVector< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::SampleVector< float >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("FloatSampleVector___setitem",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  SoundWave_SampleVector_Sl_float_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatSampleVector(void *obj) {
SoundWave::SampleVector< float > *arg1 = (SoundWave::SampleVector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatSampleVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatSampleVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatSampleVector_attributes[] = {
    { "vector", _wrap_FloatSampleVector_vector_get, _wrap_FloatSampleVector_vector_set },
    { "channels", _wrap_FloatSampleVector_channels_get, _wrap_FloatSampleVector_channels_set },
    {0,0,0}
};
static swig_lua_method swig_FloatSampleVector_methods[]= {
    { "clamp", _wrap_FloatSampleVector_clamp},
    { "get_stride", _wrap_FloatSampleVector_get_stride},
    { "set_stride", _wrap_FloatSampleVector_set_stride},
    { "swap_stereo_channels", _wrap_FloatSampleVector_swap_stereo_channels},
    { "set_data", _wrap_FloatSampleVector_set_data},
    { "copy_data", _wrap_FloatSampleVector_copy_data},
    { "size", _wrap_FloatSampleVector_size},
    { "num_channels", _wrap_FloatSampleVector_num_channels},
    { "zero", _wrap_FloatSampleVector_zero},
    { "ones", _wrap_FloatSampleVector_ones},
    { "random", _wrap_FloatSampleVector_random},
    { "fill", _wrap_FloatSampleVector_fill},
    { "samples_per_channel", _wrap_FloatSampleVector_samples_per_channel},
    { "sum", _wrap_FloatSampleVector_sum},
    { "min", _wrap_FloatSampleVector_min},
    { "max", _wrap_FloatSampleVector_max},
    { "min_index", _wrap_FloatSampleVector_min_index},
    { "max_index", _wrap_FloatSampleVector_max_index},
    { "data", _wrap_FloatSampleVector_data},
    { "normalize", _wrap_FloatSampleVector_normalize},
    { "normalized", _wrap_FloatSampleVector_normalized},
    { "__call", _wrap_FloatSampleVector___call},
    { "get_channel", _wrap_FloatSampleVector_get_channel},
    { "set_channel", _wrap_FloatSampleVector_set_channel},
    { "make_stereo", _wrap_FloatSampleVector_make_stereo},
    { "set_channels", _wrap_FloatSampleVector_set_channels},
    { "resize", _wrap_FloatSampleVector_resize},
    { "get_channel_count", _wrap_FloatSampleVector_get_channel_count},
    { "__eq", _wrap_FloatSampleVector___eq},
    { "copy", _wrap_FloatSampleVector_copy},
    { "copy_from", _wrap_FloatSampleVector_copy_from},
    { "copy_to", _wrap_FloatSampleVector_copy_to},
    { "slice", _wrap_FloatSampleVector_slice},
    { "pan", _wrap_FloatSampleVector_pan},
    { "stride_slice", _wrap_FloatSampleVector_stride_slice},
    { "__add", _wrap_FloatSampleVector___add},
    { "__sub", _wrap_FloatSampleVector___sub},
    { "__div", _wrap_FloatSampleVector___div},
    { "__mul", _wrap_FloatSampleVector___mul},
    { "abs", _wrap_FloatSampleVector_abs},
    { "abs2", _wrap_FloatSampleVector_abs2},
    { "inverse", _wrap_FloatSampleVector_inverse},
    { "exp", _wrap_FloatSampleVector_exp},
    { "log", _wrap_FloatSampleVector_log},
    { "log1p", _wrap_FloatSampleVector_log1p},
    { "log10", _wrap_FloatSampleVector_log10},
    { "pow", _wrap_FloatSampleVector_pow},
    { "sqrt", _wrap_FloatSampleVector_sqrt},
    { "rsqrt", _wrap_FloatSampleVector_rsqrt},
    { "square", _wrap_FloatSampleVector_square},
    { "sin", _wrap_FloatSampleVector_sin},
    { "cos", _wrap_FloatSampleVector_cos},
    { "tan", _wrap_FloatSampleVector_tan},
    { "asin", _wrap_FloatSampleVector_asin},
    { "acos", _wrap_FloatSampleVector_acos},
    { "atan", _wrap_FloatSampleVector_atan},
    { "sinh", _wrap_FloatSampleVector_sinh},
    { "cosh", _wrap_FloatSampleVector_cosh},
    { "tanh", _wrap_FloatSampleVector_tanh},
    { "ceil", _wrap_FloatSampleVector_ceil},
    { "floor", _wrap_FloatSampleVector_floor},
    { "round", _wrap_FloatSampleVector_round},
    { "println", _wrap_FloatSampleVector_println},
    { "__getitem", _wrap_FloatSampleVector___getitem},
    { "__setitem", _wrap_FloatSampleVector___setitem},
    {0,0}
};
static swig_lua_method swig_FloatSampleVector_meta[] = {
    { "__call", _wrap_FloatSampleVector___call},
    { "__eq", _wrap_FloatSampleVector___eq},
    { "__add", _wrap_FloatSampleVector___add},
    { "__sub", _wrap_FloatSampleVector___sub},
    { "__div", _wrap_FloatSampleVector___div},
    { "__mul", _wrap_FloatSampleVector___mul},
    { "__getitem", _wrap_FloatSampleVector___getitem},
    { "__setitem", _wrap_FloatSampleVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatSampleVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatSampleVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatSampleVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatSampleVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatSampleVector_Sf_SwigStatic = {
    "FloatSampleVector",
    swig_FloatSampleVector_Sf_SwigStatic_methods,
    swig_FloatSampleVector_Sf_SwigStatic_attributes,
    swig_FloatSampleVector_Sf_SwigStatic_constants,
    swig_FloatSampleVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatSampleVector_bases[] = {0};
static const char *swig_FloatSampleVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatSampleVector = { "FloatSampleVector", "FloatSampleVector", &SWIGTYPE_p_SoundWave__SampleVectorT_float_t,_proxy__wrap_new_FloatSampleVector, swig_delete_FloatSampleVector, swig_FloatSampleVector_methods, swig_FloatSampleVector_attributes, &swig_FloatSampleVector_Sf_SwigStatic, swig_FloatSampleVector_meta, swig_FloatSampleVector_bases, swig_FloatSampleVector_base_names };

static int _wrap_get_left_channel_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::get_left_channel< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::get_left_channel< float >",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("get_left_channel_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_left_channel< float >((std::vector< float > const &)*arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_left_channel_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::get_left_channel< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::get_left_channel< float >",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::get_left_channel< float >",2,"float const *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("get_left_channel_float",2,SWIGTYPE_p_float);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_left_channel< float >(arg1,(float const *)arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_left_channel_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::get_left_channel< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::get_left_channel< float >",1,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("get_left_channel_float",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_left_channel< float >((SoundWave::SampleVector< float > const &)*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_left_channel_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_get_left_channel_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_get_left_channel_float__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_left_channel_float__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'get_left_channel_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::get_left_channel< float >(std::vector< float > const &)\n"
    "    SoundWave::get_left_channel< float >(size_t,float const *)\n"
    "    SoundWave::get_left_channel< float >(SoundWave::SampleVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_get_right_channel_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::get_right_channel< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::get_right_channel< float >",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("get_right_channel_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_right_channel< float >((std::vector< float > const &)*arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_right_channel_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float **arg2 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::get_right_channel< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::get_right_channel< float >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::get_right_channel< float >",2,"float const *&");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("get_right_channel_float",2,SWIGTYPE_p_p_float);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_right_channel< float >(arg1,(float const *&)*arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_right_channel_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::get_right_channel< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::get_right_channel< float >",1,"SoundWave::SampleVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("get_right_channel_float",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_right_channel< float >((SoundWave::SampleVector< float > const &)*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_right_channel_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_get_right_channel_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_get_right_channel_float__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_right_channel_float__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'get_right_channel_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::get_right_channel< float >(std::vector< float > const &)\n"
    "    SoundWave::get_right_channel< float >(size_t,float const *&)\n"
    "    SoundWave::get_right_channel< float >(SoundWave::SampleVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_get_channel_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::get_channel< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::get_channel< float >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::get_channel< float >",2,"std::vector< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("get_channel_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_channel< float >(arg1,(std::vector< float > const &)*arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_channel_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::get_channel< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::get_channel< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::get_channel< float >",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::get_channel< float >",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("get_channel_float",3,SWIGTYPE_p_float);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_channel< float >(arg1,arg2,arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_channel_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::get_channel< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::get_channel< float >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::get_channel< float >",2,"SoundWave::SampleVector< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("get_channel_float",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR get_channel< float >(arg1,(SoundWave::SampleVector< float > const &)*arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_channel_float(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_channel_float__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_channel_float__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_get_channel_float__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'get_channel_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::get_channel< float >(size_t,std::vector< float > const &)\n"
    "    SoundWave::get_channel< float >(size_t,size_t,float *)\n"
    "    SoundWave::get_channel< float >(size_t,SoundWave::SampleVector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interleave_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SoundWave::ArrayVector< float > > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"std::vector< SoundWave::ArrayVector< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t,0))){
    SWIG_fail_ptr("interleave_float",1,SWIGTYPE_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >((std::vector< SoundWave::ArrayVector< float > > const &)*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("interleave_float",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< SoundWave::SampleVector< float > > *arg3 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"std::vector< SoundWave::SampleVector< float > > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_SoundWave__SampleVectorT_float_t_t,0))){
    SWIG_fail_ptr("interleave_float",3,SWIGTYPE_p_std__vectorT_SoundWave__SampleVectorT_float_t_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(std::vector< SoundWave::SampleVector< float > > const &)*arg3);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave_float__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< std::vector< float > > *arg3 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"std::vector< std::vector< float > > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("interleave_float",3,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(std::vector< std::vector< float > > const &)*arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave_float__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< float * > *arg3 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"std::vector< float * > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("interleave_float",3,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(std::vector< float * > const &)*arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave_float__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  float ***arg3 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"float const **&");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_p_float,0))){
    SWIG_fail_ptr("interleave_float",3,SWIGTYPE_p_p_p_float);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(float const **&)*arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave_float(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interleave_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interleave_float__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_SoundWave__SampleVectorT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interleave_float__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interleave_float__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_p_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interleave_float__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interleave_float__SWIG_5(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interleave_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::interleave< float >(std::vector< SoundWave::ArrayVector< float > > const &)\n"
    "    SoundWave::interleave< float >(SoundWave::SampleMatrix< float > &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,std::vector< SoundWave::SampleVector< float > > const &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,std::vector< std::vector< float > > const &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,std::vector< float * > const &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,float const **&)\n");
  lua_error(L);return 0;
}


static int _wrap_deinterleave_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SoundWave::ArrayVector< float > > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"std::vector< SoundWave::ArrayVector< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t,0))){
    SWIG_fail_ptr("deinterleave_float",1,SWIGTYPE_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >((std::vector< SoundWave::ArrayVector< float > > const &)*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("deinterleave_float",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< SoundWave::SampleVector< float > > *arg3 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"std::vector< SoundWave::SampleVector< float > > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_SoundWave__SampleVectorT_float_t_t,0))){
    SWIG_fail_ptr("deinterleave_float",3,SWIGTYPE_p_std__vectorT_SoundWave__SampleVectorT_float_t_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(std::vector< SoundWave::SampleVector< float > > const &)*arg3);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave_float__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< std::vector< float > > *arg3 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"std::vector< std::vector< float > > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t,0))){
    SWIG_fail_ptr("deinterleave_float",3,SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(std::vector< std::vector< float > > const &)*arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave_float__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< float * > *arg3 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"std::vector< float * > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_p_t,0))){
    SWIG_fail_ptr("deinterleave_float",3,SWIGTYPE_p_std__vectorT_float_p_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(std::vector< float * > const &)*arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave_float__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  float ***arg3 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::interleave< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::interleave< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::interleave< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::interleave< float >",3,"float const **&");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_p_float,0))){
    SWIG_fail_ptr("deinterleave_float",3,SWIGTYPE_p_p_p_float);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR interleave< float >(arg1,arg2,(float const **&)*arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_deinterleave_float(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_deinterleave_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_deinterleave_float__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_SoundWave__SampleVectorT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_deinterleave_float__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__vectorT_float_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_deinterleave_float__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_p_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_deinterleave_float__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_deinterleave_float__SWIG_5(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'deinterleave_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::interleave< float >(std::vector< SoundWave::ArrayVector< float > > const &)\n"
    "    SoundWave::interleave< float >(SoundWave::SampleMatrix< float > &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,std::vector< SoundWave::SampleVector< float > > const &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,std::vector< std::vector< float > > const &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,std::vector< float * > const &)\n"
    "    SoundWave::interleave< float >(size_t,size_t,float const **&)\n");
  lua_error(L);return 0;
}


static int _wrap_copy_vector_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("SoundWave::copy_vector< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::copy_vector< float >",1,"std::vector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::copy_vector< float >",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("copy_vector_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("copy_vector_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR copy_vector< float >(*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy_vector_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::copy_vector< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::copy_vector< float >",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::copy_vector< float >",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::copy_vector< float >",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("copy_vector_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("copy_vector_float",3,SWIGTYPE_p_float);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR copy_vector< float >(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy_vector_float(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copy_vector_float__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_copy_vector_float__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copy_vector_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::copy_vector< float >(std::vector< float > &,std::vector< float > &)\n"
    "    SoundWave::copy_vector< float >(std::vector< float > &,size_t,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_slice_vector_float(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  std::vector< float > *arg3 = 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::slice_vector< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::slice_vector< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::slice_vector< float >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::slice_vector< float >",3,"std::vector< float > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("slice_vector_float",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR slice_vector< float >(arg1,arg2,*arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copy_buffer_float(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::copy_buffer< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::copy_buffer< float >",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::copy_buffer< float >",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::copy_buffer< float >",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("copy_buffer_float",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("copy_buffer_float",3,SWIGTYPE_p_float);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR copy_buffer< float >(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slice_buffer_float(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::slice_buffer< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::slice_buffer< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::slice_buffer< float >",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::slice_buffer< float >",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("slice_buffer_float",3,SWIGTYPE_p_float);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR slice_buffer< float >(arg1,arg2,arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stereo_split_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("SoundWave::split_stereo< float >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::split_stereo< float >",1,"size_t");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundWave::split_stereo< float >",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::split_stereo< float >",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("SoundWave::split_stereo< float >",4,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("stereo_split_float",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("stereo_split_float",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("stereo_split_float",4,SWIGTYPE_p_float);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR split_stereo< float >(arg1,(float const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stereo_split_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("SoundWave::split_stereo< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::split_stereo< float >",1,"std::vector< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::split_stereo< float >",2,"std::vector< float > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SoundWave::split_stereo< float >",3,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stereo_split_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stereo_split_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stereo_split_float",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR split_stereo< float >((std::vector< float > const &)*arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stereo_split_float(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_stereo_split_float__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_stereo_split_float__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'stereo_split_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::split_stereo< float >(size_t,float const *,float *,float *)\n"
    "    SoundWave::split_stereo< float >(std::vector< float > const &,std::vector< float > &,std::vector< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_insert_front_float(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::insert_front< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::insert_front< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::insert_front< float >",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SoundWave::insert_front< float >",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("insert_front_float",3,SWIGTYPE_p_float);
  }
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR insert_front< float >(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_containsOnlyZeros_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::containsOnlyZeros< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::containsOnlyZeros< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("containsOnlyZeros_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (bool)SoundWave::SWIGTEMPLATEDISAMBIGUATOR containsOnlyZeros< float >(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isAllPositiveOrZero_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::isAllPositiveOrZero< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::isAllPositiveOrZero< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("isAllPositiveOrZero_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (bool)SoundWave::SWIGTEMPLATEDISAMBIGUATOR isAllPositiveOrZero< float >(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isAllNegativeOrZero_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::isAllNegativeOrZero< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::isAllNegativeOrZero< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("isAllNegativeOrZero_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (bool)SoundWave::SWIGTEMPLATEDISAMBIGUATOR isAllNegativeOrZero< float >(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_contains_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  float arg2 ;
  std::vector< float > *argp1 ;
  bool result;
  
  SWIG_check_num_args("SoundWave::contains< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::contains< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::contains< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("contains_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)SoundWave::SWIGTEMPLATEDISAMBIGUATOR contains< float >(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::max< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::max< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("max_float",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR max< float >(*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  float result;
  
  SWIG_check_num_args("SoundWave::max< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::max< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("max_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR max< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max_float(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_max_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_max_float__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'max_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::max< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::max< float >(std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_min_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::min< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::min< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("min_float",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR min< float >(*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  float result;
  
  SWIG_check_num_args("SoundWave::min< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::min< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("min_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR min< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min_float(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_min_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_min_float__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'min_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::min< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::min< float >(std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_maxIndex_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  int result;
  
  SWIG_check_num_args("SoundWave::maxIndex< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::maxIndex< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("maxIndex_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (int)SoundWave::SWIGTEMPLATEDISAMBIGUATOR maxIndex< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_minIndex_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  int result;
  
  SWIG_check_num_args("SoundWave::minIndex< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::minIndex< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("minIndex_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (int)SoundWave::SWIGTEMPLATEDISAMBIGUATOR minIndex< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_printVector_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  
  SWIG_check_num_args("SoundWave::printVector< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::printVector< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("printVector_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR printVector< float >(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getFirstElement_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  float result;
  
  SWIG_check_num_args("SoundWave::getFirstElement< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::getFirstElement< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("getFirstElement_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR getFirstElement< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getLastElement_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  float result;
  
  SWIG_check_num_args("SoundWave::getLastElement< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::getLastElement< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("getLastElement_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR getLastElement< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getEvenElements_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::getEvenElements< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::getEvenElements< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("getEvenElements_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR getEvenElements< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getOddElements_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::getOddElements< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::getOddElements< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("getOddElements_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR getOddElements< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getEveryNthElementStartingFromK_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::getEveryNthElementStartingFromK< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::getEveryNthElementStartingFromK< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::getEveryNthElementStartingFromK< float >",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::getEveryNthElementStartingFromK< float >",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("getEveryNthElementStartingFromK_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR getEveryNthElementStartingFromK< float >(arg1,arg2,arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fillVectorWith_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::fillVectorWith< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::fillVectorWith< float >",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::fillVectorWith< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("fillVectorWith_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR fillVectorWith< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_countOccurrencesOf_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  float arg2 ;
  std::vector< float > *argp1 ;
  int result;
  
  SWIG_check_num_args("SoundWave::countOccurrencesOf< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::countOccurrencesOf< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::countOccurrencesOf< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("countOccurrencesOf_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (int)SoundWave::SWIGTEMPLATEDISAMBIGUATOR countOccurrencesOf< float >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sum_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  float result;
  
  SWIG_check_num_args("SoundWave::sum< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sum< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("sum_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR sum< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_product_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::product< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::product< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("product_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR product< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mean_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::mean< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::mean< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("mean_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR mean< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_median_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("SoundWave::median< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::median< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("median_float",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = (float)SoundWave::SWIGTEMPLATEDISAMBIGUATOR median< float >(*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_median_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::median< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::median< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("median_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR median< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_median_float(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_median_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_median_float__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'median_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::median< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::median< float >(std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_variance_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::variance< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::variance< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("variance_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR variance< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_standardDeviation_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::standardDeviation< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::standardDeviation< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("standardDeviation_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR standardDeviation< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_norm1_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::norm1< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::norm1< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("norm1_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR norm1< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_norm2_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::norm2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::norm2< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("norm2_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR norm2< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_normP_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  double arg2 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::normP< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::normP< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::normP< float >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("normP_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR normP< float >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_magnitude_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  double result;
  
  SWIG_check_num_args("SoundWave::magnitude< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::magnitude< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("magnitude_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR magnitude< float >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_multiplyInPlace_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::multiplyInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::multiplyInPlace< float >",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::multiplyInPlace< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("multiplyInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR multiplyInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_multiplyInPlace_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp2 ;
  
  SWIG_check_num_args("SoundWave::multiplyInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::multiplyInPlace< float >",1,"std::vector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::multiplyInPlace< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("multiplyInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("multiplyInPlace_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR multiplyInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_multiplyInPlace_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_multiplyInPlace_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_multiplyInPlace_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'multiplyInPlace_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::multiplyInPlace< float >(std::vector< float > &,float)\n"
    "    SoundWave::multiplyInPlace< float >(std::vector< float > &,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_divideInPlace_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::divideInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::divideInPlace< float >",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::divideInPlace< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("divideInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR divideInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_divideInPlace_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp2 ;
  
  SWIG_check_num_args("SoundWave::divideInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::divideInPlace< float >",1,"std::vector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::divideInPlace< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("divideInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("divideInPlace_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR divideInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_divideInPlace_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_divideInPlace_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_divideInPlace_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'divideInPlace_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::divideInPlace< float >(std::vector< float > &,float)\n"
    "    SoundWave::divideInPlace< float >(std::vector< float > &,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_addInPlace_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::addInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::addInPlace< float >",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::addInPlace< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("addInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR addInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_addInPlace_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp2 ;
  
  SWIG_check_num_args("SoundWave::addInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::addInPlace< float >",1,"std::vector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::addInPlace< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("addInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("addInPlace_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR addInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_addInPlace_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_addInPlace_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_addInPlace_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'addInPlace_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::addInPlace< float >(std::vector< float > &,float)\n"
    "    SoundWave::addInPlace< float >(std::vector< float > &,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_subtractInPlace_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::subtractInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::subtractInPlace< float >",1,"std::vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::subtractInPlace< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("subtractInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR subtractInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_subtractInPlace_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp2 ;
  
  SWIG_check_num_args("SoundWave::subtractInPlace< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::subtractInPlace< float >",1,"std::vector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::subtractInPlace< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("subtractInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("subtractInPlace_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR subtractInPlace< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_subtractInPlace_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_subtractInPlace_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_subtractInPlace_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'subtractInPlace_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::subtractInPlace< float >(std::vector< float > &,float)\n"
    "    SoundWave::subtractInPlace< float >(std::vector< float > &,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_absInPlace_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SoundWave::absInPlace< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::absInPlace< float >",1,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("absInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR absInPlace< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squareInPlace_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SoundWave::squareInPlace< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::squareInPlace< float >",1,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("squareInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR squareInPlace< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squareRootInPlace_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SoundWave::squareRootInPlace< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::squareRootInPlace< float >",1,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("squareRootInPlace_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR squareRootInPlace< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sort_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SoundWave::sort< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sort< float >",1,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("sort_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR sort< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverse_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  
  SWIG_check_num_args("SoundWave::reverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::reverse< float >",1,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("reverse_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR reverse< float >(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_multiply_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  float arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::multiply< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::multiply< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::multiply< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("multiply_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR multiply< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_multiply_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::multiply< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::multiply< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::multiply< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("multiply_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("multiply_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR multiply< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_multiply_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_multiply_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_multiply_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'multiply_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::multiply< float >(std::vector< float >,float)\n"
    "    SoundWave::multiply< float >(std::vector< float >,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_divide_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  float arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::divide< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::divide< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::divide< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("divide_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR divide< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_divide_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::divide< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::divide< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::divide< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("divide_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("divide_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR divide< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_divide_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_divide_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_divide_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'divide_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::divide< float >(std::vector< float >,float)\n"
    "    SoundWave::divide< float >(std::vector< float >,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_add_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  float arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::add< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::add< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::add< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("add_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR add< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::add< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::add< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::add< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("add_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("add_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR add< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_add_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_add_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'add_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::add< float >(std::vector< float >,float)\n"
    "    SoundWave::add< float >(std::vector< float >,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_subtract_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  float arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::subtract< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::subtract< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::subtract< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("subtract_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (float)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR subtract< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_subtract_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::subtract< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::subtract< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::subtract< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("subtract_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("subtract_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR subtract< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_subtract_float(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_subtract_float__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_subtract_float__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'subtract_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::subtract< float >(std::vector< float >,float)\n"
    "    SoundWave::subtract< float >(std::vector< float >,std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_abs_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("abs_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs_float(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs_float__SWIG_9(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'abs_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::abs< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::abs< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::abs< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::abs< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::SampleMatrix< float > &)\n"
    "    SoundWave::abs< float >(std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_square_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("square_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square_float(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square_float__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'square_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::square< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::square< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::square< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::square< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::square< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::square< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::square< float >(SoundWave::SampleMatrix< float > &)\n"
    "    SoundWave::square< float >(std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_squareRoot_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::squareRoot< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::squareRoot< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("squareRoot_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR squareRoot< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scale_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  double arg2 ;
  double arg3 ;
  std::vector< float > *argp1 ;
  std::vector< double > result;
  
  SWIG_check_num_args("SoundWave::scale< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::scale< float >",1,"std::vector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::scale< float >",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::scale< float >",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("scale_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR scale< float >(arg1,arg2,arg3);
  {
    std::vector< double > * resultptr = new std::vector< double >((const std::vector< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_difference_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::difference< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::difference< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("difference_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR difference< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zeros_float(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::zeros< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::zeros< float >",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR zeros< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ones_float(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::ones< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::ones< float >",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ones< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_range_float__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::range< float >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::range< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::range< float >",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::range< float >",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR range< float >(arg1,arg2,arg3);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_range_float__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::range< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::range< float >",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR range< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_range_float__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::range< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::range< float >",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::range< float >",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR range< float >(arg1,arg2);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_range_float(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_range_float__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_range_float__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_range_float__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'range_float'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::range< float >(int,int,int)\n"
    "    SoundWave::range< float >(int)\n"
    "    SoundWave::range< float >(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_dotProduct_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::dotProduct< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::dotProduct< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::dotProduct< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("dotProduct_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("dotProduct_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR dotProduct< float >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_euclideanDistance_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::euclideanDistance< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::euclideanDistance< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::euclideanDistance< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("euclideanDistance_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("euclideanDistance_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR euclideanDistance< float >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosineSimilarity_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::cosineSimilarity< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosineSimilarity< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::cosineSimilarity< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("cosineSimilarity_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("cosineSimilarity_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosineSimilarity< float >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosineDistance_float(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > arg2 ;
  std::vector< float > *argp1 ;
  std::vector< float > *argp2 ;
  double result;
  
  SWIG_check_num_args("SoundWave::cosineDistance< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosineDistance< float >",1,"std::vector< float >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::cosineDistance< float >",2,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("cosineDistance_float",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("cosineDistance_float",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg2 = *argp2;
  
  result = (double)SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosineDistance< float >(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("absf",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_absf__SWIG_9(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::abs< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::abs< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::abs< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::abs< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::abs< float >(SoundWave::SampleMatrix< float > &)\n"
    "    SoundWave::abs< float >(std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_abs2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs2< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs2< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs2< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs2< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs2< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs2< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs2< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs2< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs2< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs2< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::abs2< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::abs2< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("abs2f",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR abs2< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs2f(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_abs2f__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'abs2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::abs2< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::abs2< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::abs2< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::abs2< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::abs2< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::abs2< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_inversef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::inverse< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR inverse< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::inverse< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR inverse< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::inverse< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR inverse< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::inverse< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR inverse< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::inverse< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR inverse< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::inverse< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::inverse< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("inversef",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR inverse< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inversef(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_inversef__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'inversef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::inverse< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::inverse< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::inverse< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::inverse< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::inverse< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::inverse< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_expf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::exp< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("expf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR exp< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_expf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'expf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::exp< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::exp< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::exp< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::exp< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::exp< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::exp< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::exp< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::exp< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::exp< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_logf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("logf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_logf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'logf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::log< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::log< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::log< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::log< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::log< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::log< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::log< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::log< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::log< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_log1pf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log1p< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log1p< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log1p< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log1p< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log1p< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log1p< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log1p< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log1p< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log1p< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log1p< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log1p< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log1p< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("log1pf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log1p< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log1pf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log1pf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::log1p< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::log1p< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::log1p< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::log1p< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::log1p< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::log1p< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::log1p< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_log10f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::log10< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("log10f",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR log10< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_log10f__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'log10f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::log10< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::log10< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::log10< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::log10< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::log10< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::log10< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::log10< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::log10< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::log10< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_powf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SoundWave::Scalar< float > *arg2 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::Scalar< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("powf",2,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SoundWave::Scalar< float > const &)*arg1,(SoundWave::Scalar< float > const &)*arg2);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SoundWave::ArrayVector< float > *arg2 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::ArrayVector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"SoundWave::ArrayVector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("powf",2,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,(SoundWave::ArrayVector< float > const &)*arg2);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  float arg2 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::ArrayVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,arg2);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  float arg2 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::ArrayMatrix< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,arg2);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  float arg2 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::Vector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,arg2);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  float arg2 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::Matrix< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SoundWave::Matrix< float > const &)*arg1,arg2);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  float arg2 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::ColVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,arg2);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  float arg2 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::ColMatrix< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >((SoundWave::ColMatrix< float > const &)*arg1,arg2);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > *arg2 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::SampleVector< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("powf",2,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,*arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  float arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::SampleVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::pow< float >",1,"SoundWave::SampleMatrix< float > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SoundWave::pow< float >",2,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("powf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("powf",2,SWIGTYPE_p_float);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR pow< float >(*arg1,*arg2);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powf__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powf__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powf__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_powf__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_powf__SWIG_10(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'powf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::pow< float >(SoundWave::Scalar< float > const &,SoundWave::Scalar< float > const &)\n"
    "    SoundWave::pow< float >(SoundWave::ArrayVector< float > &,SoundWave::ArrayVector< float > const &)\n"
    "    SoundWave::pow< float >(SoundWave::ArrayVector< float > &,float const)\n"
    "    SoundWave::pow< float >(SoundWave::ArrayMatrix< float > &,float const)\n"
    "    SoundWave::pow< float >(SoundWave::Vector< float > &,float const)\n"
    "    SoundWave::pow< float >(SoundWave::Matrix< float > const &,float const)\n"
    "    SoundWave::pow< float >(SoundWave::ColVector< float > &,float const)\n"
    "    SoundWave::pow< float >(SoundWave::ColMatrix< float > const &,float const)\n"
    "    SoundWave::pow< float >(SoundWave::SampleVector< float > &,SoundWave::SampleVector< float > &)\n"
    "    SoundWave::pow< float >(SoundWave::SampleVector< float > &,float)\n"
    "    SoundWave::pow< float >(SoundWave::SampleMatrix< float > &,float &)\n");
  lua_error(L);return 0;
}


static int _wrap_sqrtf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sqrt< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("sqrtf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sqrtf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sqrtf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::sqrt< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::sqrt< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::sqrt< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::sqrt< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::sqrt< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::sqrt< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::sqrt< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::sqrt< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::sqrt< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_rsqrtf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rsqrt< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rsqrt< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rsqrt< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rsqrt< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rsqrt< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::rsqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rsqrt< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("rsqrtf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rsqrt< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rsqrtf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rsqrtf__SWIG_5(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rsqrtf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::rsqrt< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::rsqrt< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::rsqrt< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::rsqrt< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::rsqrt< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::rsqrt< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_square__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > arg1 ;
  std::vector< float > *argp1 ;
  std::vector< float > result;
  
  SWIG_check_num_args("SoundWave::square< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::square< float >",1,"std::vector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("square",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  arg1 = *argp1;
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR square< float >(arg1);
  {
    std::vector< float > * resultptr = new std::vector< float >((const std::vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_square(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_11(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_12(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_13(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_14(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_square__SWIG_15(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'square'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::square< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::square< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::square< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::square< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::square< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::square< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::square< float >(SoundWave::SampleMatrix< float > &)\n"
    "    SoundWave::square< float >(std::vector< float >)\n");
  lua_error(L);return 0;
}


static int _wrap_cube__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cube< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cube< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cube< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cube< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cube< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cube< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cube< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cube< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cube< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cube(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cube__SWIG_9(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cube'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::cube< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::cube< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::cube< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::cube< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::cube< float >(SoundWave::ColMatrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sin< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("sinf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sin< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::sin< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::sin< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::sin< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::sin< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::sin< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::sin< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::sin< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::sin< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::sin< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cos< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("cosf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cos< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_cosf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cosf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::cos< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::cos< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::cos< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::cos< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::cos< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::cos< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::cos< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::cos< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::cos< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tan< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("tanf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tan< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::tan< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::tan< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::tan< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::tan< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::tan< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::tan< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::tan< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::tan< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::tan< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_asinf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asin< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("asinf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asin< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinf__SWIG_7(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'asinf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::asin< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::asin< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::asin< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::asin< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::asin< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::asin< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::asin< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::asin< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_acosf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acos< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("acosf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acos< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acosf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acosf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::acos< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::acos< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::acos< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::acos< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::acos< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::acos< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::acos< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::acos< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::acos< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_atanf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atan< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("atanf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atan< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atanf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::atan< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::atan< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::atan< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::atan< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::atan< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::atan< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::atan< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::atan< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::atan< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_sinhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::sinh< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("sinhf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR sinh< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sinhf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::sinh< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::sinh< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::sinh< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::sinh< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::sinh< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::sinh< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::sinh< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::sinh< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::sinh< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_coshf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::cosh< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("coshf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR cosh< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_coshf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'coshf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::cosh< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::cosh< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::cosh< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::cosh< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::cosh< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::cosh< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::cosh< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::cosh< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::cosh< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_tanhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayVector< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::ArrayVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SoundWave::ArrayVector< float > * resultptr = new SoundWave::ArrayVector< float >((const SoundWave::ArrayVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ArrayMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ArrayMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::ArrayMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SoundWave::ArrayMatrix< float > * resultptr = new SoundWave::ArrayMatrix< float >((const SoundWave::ArrayMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::tanh< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("tanhf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR tanh< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ArrayMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_tanhf__SWIG_8(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'tanhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::tanh< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::tanh< float >(SoundWave::ArrayVector< float > &)\n"
    "    SoundWave::tanh< float >(SoundWave::ArrayMatrix< float > &)\n"
    "    SoundWave::tanh< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::tanh< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::tanh< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::tanh< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::tanh< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::tanh< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_asinhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asinh< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asinh< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::asinh< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("asinhf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_asinhf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'asinhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::asinh< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::asinh< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::asinh< float >(SoundWave::ColMatrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_acoshf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acosh< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acosh< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::acosh< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("acoshf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_acoshf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'acoshf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::acosh< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::acosh< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::acosh< float >(SoundWave::ColMatrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_atanhf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atanh< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atanh< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::atanh< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("atanhf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_atanhf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atanhf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::atanh< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::atanh< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::atanh< float >(SoundWave::ColMatrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_floorf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::floor< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::floor< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR floor< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::floor< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::floor< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR floor< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::floor< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR floor< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::floor< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR floor< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::floor< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::floor< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("floorf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR floor< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_floorf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'floorf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::floor< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::floor< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::floor< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::floor< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::floor< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::floor< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::floor< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ceilf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::ceil< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::ceil< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ceil< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::ceil< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::ceil< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ceil< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::ceil< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ceil< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::ceil< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ceil< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::ceil< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::ceil< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("ceilf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR ceil< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ceilf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ceilf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::ceil< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::ceil< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::ceil< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::ceil< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::ceil< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::ceil< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::ceil< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_roundf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::round< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR round< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Vector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Vector< float > > result;
  
  SWIG_check_num_args("SoundWave::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::round< float >",1,"SoundWave::Vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__VectorT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SoundWave__VectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR round< float >(*arg1);
  {
    SoundWave::Vector< float > * resultptr = new SoundWave::Vector< float >((const SoundWave::Vector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__VectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::round< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR round< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColVector< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColVector< float > > result;
  
  SWIG_check_num_args("SoundWave::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::round< float >",1,"SoundWave::ColVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColVectorT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SoundWave__ColVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR round< float >(*arg1);
  {
    SoundWave::ColVector< float > * resultptr = new SoundWave::ColVector< float >((const SoundWave::ColVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::round< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR round< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::round< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR round< float >(*arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::SampleMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::round< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::round< float >",1,"SoundWave::SampleMatrix< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,0))){
    SWIG_fail_ptr("roundf",1,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR round< float >(*arg1);
  {
    SoundWave::SampleMatrix< float > * resultptr = new SoundWave::SampleMatrix< float >((const SoundWave::SampleMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__VectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_roundf__SWIG_6(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'roundf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::round< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::round< float >(SoundWave::Vector< float > &)\n"
    "    SoundWave::round< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::round< float >(SoundWave::ColVector< float > &)\n"
    "    SoundWave::round< float >(SoundWave::ColMatrix< float > const &)\n"
    "    SoundWave::round< float >(SoundWave::SampleVector< float > &)\n"
    "    SoundWave::round< float >(SoundWave::SampleMatrix< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_rintf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Scalar< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Scalar< float > > result;
  
  SWIG_check_num_args("SoundWave::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rint< float >",1,"SoundWave::Scalar< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ScalarT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SoundWave__ScalarT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SoundWave::Scalar< float > const &)*arg1);
  {
    SoundWave::Scalar< float > * resultptr = new SoundWave::Scalar< float >((const SoundWave::Scalar< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ScalarT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::Matrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::Matrix< float > > result;
  
  SWIG_check_num_args("SoundWave::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rint< float >",1,"SoundWave::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__MatrixT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SoundWave__MatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SoundWave::Matrix< float > const &)*arg1);
  {
    SoundWave::Matrix< float > * resultptr = new SoundWave::Matrix< float >((const SoundWave::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::ColMatrix< float > *arg1 = 0 ;
  SwigValueWrapper< SoundWave::ColMatrix< float > > result;
  
  SWIG_check_num_args("SoundWave::rint< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::rint< float >",1,"SoundWave::ColMatrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,0))){
    SWIG_fail_ptr("rintf",1,SWIGTYPE_p_SoundWave__ColMatrixT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR rint< float >((SoundWave::ColMatrix< float > const &)*arg1);
  {
    SoundWave::ColMatrix< float > * resultptr = new SoundWave::ColMatrix< float >((const SoundWave::ColMatrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__ColMatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ScalarT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__MatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__ColMatrixT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rintf__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rintf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::rint< float >(SoundWave::Scalar< float > const &)\n"
    "    SoundWave::rint< float >(SoundWave::Matrix< float > const &)\n"
    "    SoundWave::rint< float >(SoundWave::ColMatrix< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_sizef(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundWave::size< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::size< float >",1,"SoundWave::SampleVector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("sizef",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR size< float >(*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::random< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::random< float >",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::random< float >",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR random< float >(arg1,arg2);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SoundWave::SampleVector< float > result;
  
  SWIG_check_num_args("SoundWave::random< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SoundWave::random< float >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = SoundWave::SWIGTEMPLATEDISAMBIGUATOR random< float >(arg1);
  {
    SoundWave::SampleVector< float > * resultptr = new SoundWave::SampleVector< float >((const SoundWave::SampleVector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_randomf(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_randomf__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_randomf__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'randomf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::random< float >(size_t,size_t)\n"
    "    SoundWave::random< float >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_fillf(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("SoundWave::fill< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::fill< float >",1,"SoundWave::SampleVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::fill< float >",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("fillf",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR fill< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resizef__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundWave::resize< float >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::resize< float >",1,"SoundWave::SampleVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::resize< float >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundWave::resize< float >",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("resizef",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR resize< float >(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resizef__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundWave::SampleVector< float > *arg1 = 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundWave::resize< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("SoundWave::resize< float >",1,"SoundWave::SampleVector< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundWave::resize< float >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t,0))){
    SWIG_fail_ptr("resizef",1,SWIGTYPE_p_SoundWave__SampleVectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SoundWave::SWIGTEMPLATEDISAMBIGUATOR resize< float >(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resizef(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_resizef__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundWave__SampleVectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_resizef__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'resizef'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundWave::resize< float >(SoundWave::SampleVector< float > &,size_t,size_t)\n"
    "    SoundWave::resize< float >(SoundWave::SampleVector< float > &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cfreal(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::real< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfreal",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR real< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czreal(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::real< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::real< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czreal",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR real< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfimag(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::imag< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfimag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR imag< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czimag(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::imag< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::imag< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czimag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR imag< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfabs(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::abs< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfabs",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR abs< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czabs(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::abs< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::abs< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czabs",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR abs< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfarg(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::arg< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfarg",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR arg< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czarg(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::arg< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::arg< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czarg",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR arg< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfnorm(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float result;
  
  SWIG_check_num_args("std::norm< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfnorm",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)std::SWIGTEMPLATEDISAMBIGUATOR norm< float >((std::complex< float > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cznorm(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double result;
  
  SWIG_check_num_args("std::norm< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::norm< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cznorm",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)std::SWIGTEMPLATEDISAMBIGUATOR norm< double >((std::complex< double > const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfproj(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::proj< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfproj",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czproj(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::proj< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::proj< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czproj",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR proj< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpolar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::polar< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< float >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpolar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::polar< float >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< float >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< float >((float const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpolar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_cfpolar__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfpolar__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfpolar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< float >(float const &,float const &)\n"
    "    std::polar< float >(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_czpolar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< double >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::polar< double >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< double >((double const &)*arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpolar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::polar< double >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::polar< double >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = std::SWIGTEMPLATEDISAMBIGUATOR polar< double >((double const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpolar(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_czpolar__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_czpolar__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'czpolar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::polar< double >(double const &,double const &)\n"
    "    std::polar< double >(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfexp(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::exp< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::exp< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfexp",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR exp< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czexp(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::exp< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::exp< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czexp",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR exp< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cflog(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::log< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cflog",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czlog(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czlog",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cflog10(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::log10< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log10< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cflog10",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log10< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czlog10(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::log10< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::log10< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czlog10",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR log10< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< float >",1,"std::complex< float > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< float >",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< float >((std::complex< float > const &)*arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::pow< float >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< float >",1,"std::complex< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::pow< float >",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< float >((std::complex< float > const &)*arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  std::complex< float > *arg2 = 0 ;
  float temp1 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::pow< float >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::pow< float >",1,"float const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< float >",2,"std::complex< float > const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfpow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< float >((float const &)*arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfpow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfpow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cfpow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_cfpow__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cfpow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pow< float >(std::complex< float > const &,std::complex< float > const &)\n"
    "    std::pow< float >(std::complex< float > const &,float const &)\n"
    "    std::pow< float >(float const &,std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_czpow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< double >",1,"std::complex< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< double >",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< double >((std::complex< double > const &)*arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< double >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::pow< double >",1,"std::complex< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::pow< double >",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< double >((std::complex< double > const &)*arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  std::complex< double > *arg2 = 0 ;
  double temp1 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::pow< double >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::pow< double >",1,"double const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::pow< double >",2,"std::complex< double > const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czpow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR pow< double >((double const &)*arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czpow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_czpow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_czpow__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_czpow__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'czpow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pow< double >(std::complex< double > const &,std::complex< double > const &)\n"
    "    std::pow< double >(std::complex< double > const &,double const &)\n"
    "    std::pow< double >(double const &,std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cfsqrt(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sqrt< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sqrt< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfsqrt",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sqrt< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czsqrt(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sqrt< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sqrt< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czsqrt",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sqrt< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfsin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfsin",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czsin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sin< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sin< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czsin",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sin< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfcos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::cos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfcos",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czcos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cos< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cos< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czcos",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cos< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cftan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::tan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cftan",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cztan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tan< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tan< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cztan",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tan< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfasin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::asin< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfasin",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czasin(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asin< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asin< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czasin",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asin< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfacos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::acos< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfacos",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czacos(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acos< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acos< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czacos",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acos< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfatan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::atan< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfatan",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czatan(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atan< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atan< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czatan",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atan< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfsinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::sinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfsinh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czsinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::sinh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::sinh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czsinh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR sinh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfcosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::cosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfcosh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czcosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::cosh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::cosh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czcosh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR cosh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cftanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::tanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cftanh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cztanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::tanh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::tanh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("cztanh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR tanh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfasinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::asinh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfasinh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czasinh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::asinh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::asinh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czasinh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR asinh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfacosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::acosh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfacosh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czacosh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::acosh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::acosh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czacosh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR acosh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cfatanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::atanh< float >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< float >",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("cfatanh",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< float >((std::complex< float > const &)*arg1);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_czatanh(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::atanh< double >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::atanh< double >",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("czatanh",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std::SWIGTEMPLATEDISAMBIGUATOR atanh< double >((std::complex< double > const &)*arg1);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "get_left_channel_float", _wrap_get_left_channel_float},
    { "get_right_channel_float", _wrap_get_right_channel_float},
    { "get_channel_float", _wrap_get_channel_float},
    { "interleave_float", _wrap_interleave_float},
    { "deinterleave_float", _wrap_deinterleave_float},
    { "copy_vector_float", _wrap_copy_vector_float},
    { "slice_vector_float", _wrap_slice_vector_float},
    { "copy_buffer_float", _wrap_copy_buffer_float},
    { "slice_buffer_float", _wrap_slice_buffer_float},
    { "stereo_split_float", _wrap_stereo_split_float},
    { "insert_front_float", _wrap_insert_front_float},
    { "containsOnlyZeros_float", _wrap_containsOnlyZeros_float},
    { "isAllPositiveOrZero_float", _wrap_isAllPositiveOrZero_float},
    { "isAllNegativeOrZero_float", _wrap_isAllNegativeOrZero_float},
    { "contains_float", _wrap_contains_float},
    { "max_float", _wrap_max_float},
    { "min_float", _wrap_min_float},
    { "maxIndex_float", _wrap_maxIndex_float},
    { "minIndex_float", _wrap_minIndex_float},
    { "printVector_float", _wrap_printVector_float},
    { "getFirstElement_float", _wrap_getFirstElement_float},
    { "getLastElement_float", _wrap_getLastElement_float},
    { "getEvenElements_float", _wrap_getEvenElements_float},
    { "getOddElements_float", _wrap_getOddElements_float},
    { "getEveryNthElementStartingFromK_float", _wrap_getEveryNthElementStartingFromK_float},
    { "fillVectorWith_float", _wrap_fillVectorWith_float},
    { "countOccurrencesOf_float", _wrap_countOccurrencesOf_float},
    { "sum_float", _wrap_sum_float},
    { "product_float", _wrap_product_float},
    { "mean_float", _wrap_mean_float},
    { "median_float", _wrap_median_float},
    { "variance_float", _wrap_variance_float},
    { "standardDeviation_float", _wrap_standardDeviation_float},
    { "norm1_float", _wrap_norm1_float},
    { "norm2_float", _wrap_norm2_float},
    { "normP_float", _wrap_normP_float},
    { "magnitude_float", _wrap_magnitude_float},
    { "multiplyInPlace_float", _wrap_multiplyInPlace_float},
    { "divideInPlace_float", _wrap_divideInPlace_float},
    { "addInPlace_float", _wrap_addInPlace_float},
    { "subtractInPlace_float", _wrap_subtractInPlace_float},
    { "absInPlace_float", _wrap_absInPlace_float},
    { "squareInPlace_float", _wrap_squareInPlace_float},
    { "squareRootInPlace_float", _wrap_squareRootInPlace_float},
    { "sort_float", _wrap_sort_float},
    { "reverse_float", _wrap_reverse_float},
    { "multiply_float", _wrap_multiply_float},
    { "divide_float", _wrap_divide_float},
    { "add_float", _wrap_add_float},
    { "subtract_float", _wrap_subtract_float},
    { "abs_float", _wrap_abs_float},
    { "square_float", _wrap_square_float},
    { "squareRoot_float", _wrap_squareRoot_float},
    { "scale_float", _wrap_scale_float},
    { "difference_float", _wrap_difference_float},
    { "zeros_float", _wrap_zeros_float},
    { "ones_float", _wrap_ones_float},
    { "range_float", _wrap_range_float},
    { "dotProduct_float", _wrap_dotProduct_float},
    { "euclideanDistance_float", _wrap_euclideanDistance_float},
    { "cosineSimilarity_float", _wrap_cosineSimilarity_float},
    { "cosineDistance_float", _wrap_cosineDistance_float},
    { "absf", _wrap_absf},
    { "abs2f", _wrap_abs2f},
    { "inversef", _wrap_inversef},
    { "expf", _wrap_expf},
    { "logf", _wrap_logf},
    { "log1pf", _wrap_log1pf},
    { "log10f", _wrap_log10f},
    { "powf", _wrap_powf},
    { "sqrtf", _wrap_sqrtf},
    { "rsqrtf", _wrap_rsqrtf},
    { "square", _wrap_square},
    { "cube", _wrap_cube},
    { "sinf", _wrap_sinf},
    { "cosf", _wrap_cosf},
    { "tanf", _wrap_tanf},
    { "asinf", _wrap_asinf},
    { "acosf", _wrap_acosf},
    { "atanf", _wrap_atanf},
    { "sinhf", _wrap_sinhf},
    { "coshf", _wrap_coshf},
    { "tanhf", _wrap_tanhf},
    { "asinhf", _wrap_asinhf},
    { "acoshf", _wrap_acoshf},
    { "atanhf", _wrap_atanhf},
    { "floorf", _wrap_floorf},
    { "ceilf", _wrap_ceilf},
    { "roundf", _wrap_roundf},
    { "rintf", _wrap_rintf},
    { "sizef", _wrap_sizef},
    { "randomf", _wrap_randomf},
    { "fillf", _wrap_fillf},
    { "resizef", _wrap_resizef},
    { "cfreal", _wrap_cfreal},
    { "czreal", _wrap_czreal},
    { "cfimag", _wrap_cfimag},
    { "czimag", _wrap_czimag},
    { "cfabs", _wrap_cfabs},
    { "czabs", _wrap_czabs},
    { "cfarg", _wrap_cfarg},
    { "czarg", _wrap_czarg},
    { "cfnorm", _wrap_cfnorm},
    { "cznorm", _wrap_cznorm},
    { "cfproj", _wrap_cfproj},
    { "czproj", _wrap_czproj},
    { "cfpolar", _wrap_cfpolar},
    { "czpolar", _wrap_czpolar},
    { "cfexp", _wrap_cfexp},
    { "czexp", _wrap_czexp},
    { "cflog", _wrap_cflog},
    { "czlog", _wrap_czlog},
    { "cflog10", _wrap_cflog10},
    { "czlog10", _wrap_czlog10},
    { "cfpow", _wrap_cfpow},
    { "czpow", _wrap_czpow},
    { "cfsqrt", _wrap_cfsqrt},
    { "czsqrt", _wrap_czsqrt},
    { "cfsin", _wrap_cfsin},
    { "czsin", _wrap_czsin},
    { "cfcos", _wrap_cfcos},
    { "czcos", _wrap_czcos},
    { "cftan", _wrap_cftan},
    { "cztan", _wrap_cztan},
    { "cfasin", _wrap_cfasin},
    { "czasin", _wrap_czasin},
    { "cfacos", _wrap_cfacos},
    { "czacos", _wrap_czacos},
    { "cfatan", _wrap_cfatan},
    { "czatan", _wrap_czatan},
    { "cfsinh", _wrap_cfsinh},
    { "czsinh", _wrap_czsinh},
    { "cfcosh", _wrap_cfcosh},
    { "czcosh", _wrap_czcosh},
    { "cftanh", _wrap_cftanh},
    { "cztanh", _wrap_cztanh},
    { "cfasinh", _wrap_cfasinh},
    { "czasinh", _wrap_czasinh},
    { "cfacosh", _wrap_cfacosh},
    { "czacosh", _wrap_czacosh},
    { "cfatanh", _wrap_cfatanh},
    { "czatanh", _wrap_czatanh},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_fcomplex,
&_wrap_class_zcomplex,
&_wrap_class_float_vector,
&_wrap_class_double_vector,
&_wrap_class_fcomplex_vector,
&_wrap_class_zcomplex_vector,
&_wrap_class_int8_vector,
&_wrap_class_uint8_vector,
&_wrap_class_int16_vector,
&_wrap_class_uint16_vector,
&_wrap_class_int32_vector,
&_wrap_class_uint32_vector,
&_wrap_class_int64_vector,
&_wrap_class_uint64_vector,
&_wrap_class_FloatSampleVector,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "sample",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_SoundWave__ArrayMatrixT_float_t = {"_p_SoundWave__ArrayMatrixT_float_t", "SoundWave::ArrayMatrix< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__ArrayVectorT_float_t = {"_p_SoundWave__ArrayVectorT_float_t", "SoundWave::ArrayVector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__ColMatrixT_float_t = {"_p_SoundWave__ColMatrixT_float_t", "SoundWave::ColMatrix< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__ColVectorT_float_t = {"_p_SoundWave__ColVectorT_float_t", "SoundWave::ColVector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__EigenArrayT_float_t = {"_p_SoundWave__EigenArrayT_float_t", "SoundWave::EigenArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__MatrixT_float_t = {"_p_SoundWave__MatrixT_float_t", "SoundWave::Matrix< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__SampleMatrixT_float_t = {"_p_SoundWave__SampleMatrixT_float_t", "SoundWave::SampleMatrix< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__SampleVectorT_float_t = {"_p_SoundWave__SampleVectorT_float_t", "SoundWave::SampleVector< float > *", 0, 0, (void*)&_wrap_class_FloatSampleVector, 0};
static swig_type_info _swigt__p_SoundWave__ScalarT_float_t = {"_p_SoundWave__ScalarT_float_t", "SoundWave::Scalar< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundWave__VectorT_float_t = {"_p_SoundWave__VectorT_float_t", "SoundWave::Vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "SoundWave::SampleType *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_float = {"_p_p_p_float", "float ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_zcomplex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_fcomplex, 0};
static swig_type_info _swigt__p_std__vectorT_SoundWave__ArrayVectorT_float_t_t = {"_p_std__vectorT_SoundWave__ArrayVectorT_float_t_t", "std::vector< SoundWave::ArrayVector< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_SoundWave__SampleVectorT_float_t_t = {"_p_std__vectorT_SoundWave__SampleVectorT_float_t_t", "std::vector< SoundWave::SampleVector< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_double_vector, 0};
static swig_type_info _swigt__p_std__vectorT_float_p_t = {"_p_std__vectorT_float_p_t", "std::vector< float * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_float_vector, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_int32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_long_t = {"_p_std__vectorT_long_t", "std::vector< long > *", 0, 0, (void*)&_wrap_class_int64_vector, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *", 0, 0, (void*)&_wrap_class_int16_vector, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *", 0, 0, (void*)&_wrap_class_int8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_t = {"_p_std__vectorT_std__complexT_double_t_t", "std::vector< std::complex< double > > *", 0, 0, (void*)&_wrap_class_zcomplex_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_t = {"_p_std__vectorT_std__complexT_float_t_t", "std::vector< std::complex< float > > *", 0, 0, (void*)&_wrap_class_fcomplex_vector, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_float_t_t = {"_p_std__vectorT_std__vectorT_float_t_t", "std::vector< std::vector< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *", 0, 0, (void*)&_wrap_class_uint8_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_uint32_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_t = {"_p_std__vectorT_unsigned_long_t", "std::vector< unsigned long > *", 0, 0, (void*)&_wrap_class_uint64_vector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *", 0, 0, (void*)&_wrap_class_uint16_vector, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_SoundWave__ArrayMatrixT_float_t,
  &_swigt__p_SoundWave__ArrayVectorT_float_t,
  &_swigt__p_SoundWave__ColMatrixT_float_t,
  &_swigt__p_SoundWave__ColVectorT_float_t,
  &_swigt__p_SoundWave__EigenArrayT_float_t,
  &_swigt__p_SoundWave__MatrixT_float_t,
  &_swigt__p_SoundWave__SampleMatrixT_float_t,
  &_swigt__p_SoundWave__SampleVectorT_float_t,
  &_swigt__p_SoundWave__ScalarT_float_t,
  &_swigt__p_SoundWave__VectorT_float_t,
  &_swigt__p_difference_type,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_float,
  &_swigt__p_p_p_float,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__vectorT_SoundWave__ArrayVectorT_float_t_t,
  &_swigt__p_std__vectorT_SoundWave__SampleVectorT_float_t_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_p_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_t,
  &_swigt__p_std__vectorT_std__vectorT_float_t_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_SoundWave__ArrayMatrixT_float_t[] = {  {&_swigt__p_SoundWave__ArrayMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__ArrayVectorT_float_t[] = {  {&_swigt__p_SoundWave__ArrayVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__ColMatrixT_float_t[] = {  {&_swigt__p_SoundWave__ColMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__ColVectorT_float_t[] = {  {&_swigt__p_SoundWave__ColVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__EigenArrayT_float_t[] = {  {&_swigt__p_SoundWave__EigenArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__MatrixT_float_t[] = {  {&_swigt__p_SoundWave__MatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__SampleMatrixT_float_t[] = {  {&_swigt__p_SoundWave__SampleMatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__SampleVectorT_float_t[] = {  {&_swigt__p_SoundWave__SampleVectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__ScalarT_float_t[] = {  {&_swigt__p_SoundWave__ScalarT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundWave__VectorT_float_t[] = {  {&_swigt__p_SoundWave__VectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_float[] = {  {&_swigt__p_p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SoundWave__ArrayVectorT_float_t_t[] = {  {&_swigt__p_std__vectorT_SoundWave__ArrayVectorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SoundWave__SampleVectorT_float_t_t[] = {  {&_swigt__p_std__vectorT_SoundWave__SampleVectorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_p_t[] = {  {&_swigt__p_std__vectorT_float_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_t[] = {  {&_swigt__p_std__vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_float_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_SoundWave__ArrayMatrixT_float_t,
  _swigc__p_SoundWave__ArrayVectorT_float_t,
  _swigc__p_SoundWave__ColMatrixT_float_t,
  _swigc__p_SoundWave__ColVectorT_float_t,
  _swigc__p_SoundWave__EigenArrayT_float_t,
  _swigc__p_SoundWave__MatrixT_float_t,
  _swigc__p_SoundWave__SampleMatrixT_float_t,
  _swigc__p_SoundWave__SampleVectorT_float_t,
  _swigc__p_SoundWave__ScalarT_float_t,
  _swigc__p_SoundWave__VectorT_float_t,
  _swigc__p_difference_type,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_float,
  _swigc__p_p_p_float,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__vectorT_SoundWave__ArrayVectorT_float_t_t,
  _swigc__p_std__vectorT_SoundWave__SampleVectorT_float_t_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_p_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_std__complexT_double_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_t,
  _swigc__p_std__vectorT_std__vectorT_float_t_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

