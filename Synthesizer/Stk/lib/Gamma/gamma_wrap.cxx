/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Allpasses swig_types[0]
#define SWIGTYPE_p_AudioCallback swig_types[1]
#define SWIGTYPE_p_AudioIOData swig_types[2]
#define SWIGTYPE_p_Base swig_types[3]
#define SWIGTYPE_p_BiquadT_t swig_types[4]
#define SWIGTYPE_p_CSineT_double_t swig_types[5]
#define SWIGTYPE_p_CSineT_float_t swig_types[6]
#define SWIGTYPE_p_Combs swig_types[7]
#define SWIGTYPE_p_Complex swig_types[8]
#define SWIGTYPE_p_DecayT_float_t swig_types[9]
#define SWIGTYPE_p_DecayT_t swig_types[10]
#define SWIGTYPE_p_Domain swig_types[11]
#define SWIGTYPE_p_FILE swig_types[12]
#define SWIGTYPE_p_FilterType swig_types[13]
#define SWIGTYPE_p_HilbertT_float_t swig_types[14]
#define SWIGTYPE_p_LuaCallback swig_types[15]
#define SWIGTYPE_p_NoiseWhiteT_RNGMulCon_t swig_types[16]
#define SWIGTYPE_p_NoiseWhiteT_t swig_types[17]
#define SWIGTYPE_p_OnePoleT_float_t swig_types[18]
#define SWIGTYPE_p_SWIGLUA_REF swig_types[19]
#define SWIGTYPE_p_SawT_float_t swig_types[20]
#define SWIGTYPE_p_SineT_float_t swig_types[21]
#define SWIGTYPE_p_WindowType swig_types[22]
#define SWIGTYPE_p_complex swig_types[23]
#define SWIGTYPE_p_difference_type swig_types[24]
#define SWIGTYPE_p_double swig_types[25]
#define SWIGTYPE_p_f_r_gam__AudioIOData__void swig_types[26]
#define SWIGTYPE_p_float swig_types[27]
#define SWIGTYPE_p_gam__AMT_float_t swig_types[28]
#define SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t swig_types[29]
#define SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t swig_types[30]
#define SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t swig_types[31]
#define SWIGTYPE_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t swig_types[32]
#define SWIGTYPE_p_gam__ArrayPow2T_float_t swig_types[33]
#define SWIGTYPE_p_gam__ArrayT_float_t swig_types[34]
#define SWIGTYPE_p_gam__AudioCallback swig_types[35]
#define SWIGTYPE_p_gam__AudioDevice swig_types[36]
#define SWIGTYPE_p_gam__AudioIO swig_types[37]
#define SWIGTYPE_p_gam__AudioIOData swig_types[38]
#define SWIGTYPE_p_gam__Biquad3 swig_types[39]
#define SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t swig_types[40]
#define SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t swig_types[41]
#define SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t swig_types[42]
#define SWIGTYPE_p_gam__Burst swig_types[43]
#define SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t swig_types[44]
#define SWIGTYPE_p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t swig_types[45]
#define SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t swig_types[46]
#define SWIGTYPE_p_gam__ChebyNT_1_float_t swig_types[47]
#define SWIGTYPE_p_gam__ChebyNT_2_float_t swig_types[48]
#define SWIGTYPE_p_gam__ChebyNT_3_float_t swig_types[49]
#define SWIGTYPE_p_gam__ChebyNT_4_float_t swig_types[50]
#define SWIGTYPE_p_gam__ChebyNT_5_float_t swig_types[51]
#define SWIGTYPE_p_gam__ChebyNT_6_float_t swig_types[52]
#define SWIGTYPE_p_gam__ChebyNT_7_float_t swig_types[53]
#define SWIGTYPE_p_gam__ChebyNT_8_float_t swig_types[54]
#define SWIGTYPE_p_gam__ChebyNT_9_float_t swig_types[55]
#define SWIGTYPE_p_gam__ChirpT_float_t swig_types[56]
#define SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t swig_types[57]
#define SWIGTYPE_p_gam__ChorusT_float_t swig_types[58]
#define SWIGTYPE_p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t swig_types[59]
#define SWIGTYPE_p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t swig_types[60]
#define SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t swig_types[61]
#define SWIGTYPE_p_gam__ComplexT_float_t swig_types[62]
#define SWIGTYPE_p_gam__DFT swig_types[63]
#define SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t swig_types[64]
#define SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t swig_types[65]
#define SWIGTYPE_p_gam__DecayT_float_t swig_types[66]
#define SWIGTYPE_p_gam__Delay1T_float_t swig_types[67]
#define SWIGTYPE_p_gam__Delay2T_float_t swig_types[68]
#define SWIGTYPE_p_gam__DelayNT_float_t swig_types[69]
#define SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t swig_types[70]
#define SWIGTYPE_p_gam__DifferencerT_float_t swig_types[71]
#define SWIGTYPE_p_gam__DistT_2_float_t swig_types[72]
#define SWIGTYPE_p_gam__Domain swig_types[73]
#define SWIGTYPE_p_gam__Domain1 swig_types[74]
#define SWIGTYPE_p_gam__DomainObserver swig_types[75]
#define SWIGTYPE_p_gam__DoubleRingT_float_t swig_types[76]
#define SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t swig_types[77]
#define SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t swig_types[78]
#define SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t swig_types[79]
#define SWIGTYPE_p_gam__FreqShiftT_float_t swig_types[80]
#define SWIGTYPE_p_gam__HilbertT_float_float_t swig_types[81]
#define SWIGTYPE_p_gam__IndexMapT_float_t swig_types[82]
#define SWIGTYPE_p_gam__IntegratorT_float_float_t swig_types[83]
#define SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t swig_types[84]
#define SWIGTYPE_p_gam__Loop1P1ZT_float_t swig_types[85]
#define SWIGTYPE_p_gam__Loop1PT_float_t swig_types[86]
#define SWIGTYPE_p_gam__LoopGainT_float_t swig_types[87]
#define SWIGTYPE_p_gam__MaxAbsT_float_t swig_types[88]
#define SWIGTYPE_p_gam__MonoSynth swig_types[89]
#define SWIGTYPE_p_gam__MovingAvgT_float_t swig_types[90]
#define SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t swig_types[91]
#define SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t swig_types[92]
#define SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t swig_types[93]
#define SWIGTYPE_p_gam__NoisePinkT_RNGLinCon_t swig_types[94]
#define SWIGTYPE_p_gam__NoiseVioletT_RNGLinCon_t swig_types[95]
#define SWIGTYPE_p_gam__NoiseWhiteT_RNGLinCon_t swig_types[96]
#define SWIGTYPE_p_gam__NoiseWhiteT_gam__RNGMulCon_t swig_types[97]
#define SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t swig_types[98]
#define SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t swig_types[99]
#define SWIGTYPE_p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t swig_types[100]
#define SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t swig_types[101]
#define SWIGTYPE_p_gam__PCounter swig_types[102]
#define SWIGTYPE_p_gam__PanT_float_t swig_types[103]
#define SWIGTYPE_p_gam__Pluck swig_types[104]
#define SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t swig_types[105]
#define SWIGTYPE_p_gam__Recorder swig_types[106]
#define SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t swig_types[107]
#define SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t swig_types[108]
#define SWIGTYPE_p_gam__RingT_float_t swig_types[109]
#define SWIGTYPE_p_gam__STFT swig_types[110]
#define SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t swig_types[111]
#define SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t swig_types[112]
#define SWIGTYPE_p_gam__SilenceDetect swig_types[113]
#define SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t swig_types[114]
#define SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t swig_types[115]
#define SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t swig_types[116]
#define SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t swig_types[117]
#define SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t swig_types[118]
#define SWIGTYPE_p_gam__SliceT_float_t swig_types[119]
#define SWIGTYPE_p_gam__SlidingDFTT_float_t swig_types[120]
#define SWIGTYPE_p_gam__SlidingWindowT_float_t swig_types[121]
#define SWIGTYPE_p_gam__SoundFile swig_types[122]
#define SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t swig_types[123]
#define SWIGTYPE_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t swig_types[124]
#define SWIGTYPE_p_gam__ThresholdT_float_t swig_types[125]
#define SWIGTYPE_p_gam__Timer swig_types[126]
#define SWIGTYPE_p_gam__TransferFunc swig_types[127]
#define SWIGTYPE_p_gam__TransferFunc__DelayUnit swig_types[128]
#define SWIGTYPE_p_gam__VecT_2_double_t swig_types[129]
#define SWIGTYPE_p_gam__VecT_2_float_t swig_types[130]
#define SWIGTYPE_p_gam__VecT_3_double_t swig_types[131]
#define SWIGTYPE_p_gam__VecT_3_float_t swig_types[132]
#define SWIGTYPE_p_gam__VecT_4_double_t swig_types[133]
#define SWIGTYPE_p_gam__VecT_4_float_t swig_types[134]
#define SWIGTYPE_p_gam__Vowel swig_types[135]
#define SWIGTYPE_p_gam__ZeroCrossRateT_float_t swig_types[136]
#define SWIGTYPE_p_int swig_types[137]
#define SWIGTYPE_p_ipl__Type swig_types[138]
#define SWIGTYPE_p_long_long swig_types[139]
#define SWIGTYPE_p_p_float swig_types[140]
#define SWIGTYPE_p_phsInc__Loop swig_types[141]
#define SWIGTYPE_p_short swig_types[142]
#define SWIGTYPE_p_signed_char swig_types[143]
#define SWIGTYPE_p_size_type swig_types[144]
#define SWIGTYPE_p_std__complexT_double_t swig_types[145]
#define SWIGTYPE_p_std__string swig_types[146]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[147]
#define SWIGTYPE_p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t swig_types[148]
#define SWIGTYPE_p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t swig_types[149]
#define SWIGTYPE_p_unsigned_char swig_types[150]
#define SWIGTYPE_p_unsigned_int swig_types[151]
#define SWIGTYPE_p_unsigned_long_long swig_types[152]
#define SWIGTYPE_p_unsigned_short swig_types[153]
#define SWIGTYPE_p_value_type swig_types[154]
#define SWIGTYPE_p_void swig_types[155]
static swig_type_info *swig_types[157];
static swig_module_info swig_module = {swig_types, 156, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "gamma"
#define SWIG_init      luaopen_gamma
#define SWIG_init_user luaopen_gamma_user

#define SWIG_LUACODE   luaopen_gamma_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#define GAMMA_H_INC_ALL
#include "Gamma/Gamma.h"
#include "Gamma/Voices.h"
using namespace gam;
using namespace gam::phsInc;


#define GAMMA_H_INC_ALL
#include "Gamma/Gamma.h"
#include "Gamma/Voices.h"
using namespace gam;
using namespace gam::phsInc;


#include <stdint.h>		// Use the C99 official header


#include <vector>


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


typedef float SampleType;

SWIGINTERN float std_vector_Sl_SampleType_Sg____getitem____SWIG(std::vector< SampleType > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_SampleType_Sg____setitem____SWIG(std::vector< SampleType > *self,unsigned int idx,float val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

#include "Gamma/Access.h"

SWIGINTERN float gam_IndexMap_Sl_SampleType_Sg__get__SWIG_0(gam::IndexMap< SampleType > *self,gam::index_t i){ return (*self)(i); }
SWIGINTERN float gam_IndexMap_Sl_SampleType_Sg____getitem____SWIG(gam::IndexMap< SampleType > *self,float const &x){ return (*self)(x); }
SWIGINTERN gam::index_t gam_IndexMap_Sl_SampleType_Sg__get__SWIG_1(gam::IndexMap< SampleType > *self,float const &x,float &f){ return (*self)(x,f);}
SWIGINTERN gam::Slice< SampleType > gam_Slice_Sl_SampleType_Sg__get__SWIG_0(gam::Slice< SampleType > *self,int cnt,int str=1,int off=0){ return (*self)(cnt,str,off); }
SWIGINTERN float gam_Slice_Sl_SampleType_Sg____getitem____SWIG(gam::Slice< SampleType > *self,int i){ return (*self)[i]; }
SWIGINTERN void gam_Slice_Sl_SampleType_Sg____setitem____SWIG(gam::Slice< SampleType > *self,int i,float value){ (*self)[i] = value; }

#include "Gamma/Analysis.h"
#include <cassert>

SWIGINTERN float gam_EnvFollow_Sl_SampleType_Sg__Tick__SWIG(gam::EnvFollow< SampleType > *self,float i0){ return (*self)(i0); }
SWIGINTERN gam::OnePole< float,float,gam::GAM_DEFAULT_DOMAIN > &gam_EnvFollow_Sl_SampleType_Sg__get_filter__SWIG(gam::EnvFollow< SampleType > *self){ return self->lpf; }

#include "Gamma/Analysis.h"
#include <cassert>

SWIGINTERN bool gam_PCounter_Tick__SWIG(gam::PCounter *self){ return (*self)(); }

#include "Gamma/Analysis.h"
#include <cassert>

SWIGINTERN float gam_MaxAbs_Sl_SampleType_Sg__Tick__SWIG(gam::MaxAbs< SampleType > *self,float const &in){ return (*self)(in); }

#include "Gamma/Analysis.h"
#include <cassert>

SWIGINTERN bool gam_SilenceDetect_Tick__SWIG_0(gam::SilenceDetect *self,SampleType const &input,SampleType const &threshold=SampleType(0.001)){ return (*self)(input,threshold); }

#include "Gamma/Analysis.h"
#include <cassert>

SWIGINTERN float gam_Threshold_Sl_SampleType_Sg__Tick__SWIG(gam::Threshold< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Threshold_Sl_SampleType_Sg__Process__SWIG(gam::Threshold< SampleType > *self,float in,float hi,float lo){ return (*self)(in,hi,lo); }
SWIGINTERN gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > gam_Threshold_Sl_SampleType_Sg__get_lpf__SWIG(gam::Threshold< SampleType > *self){ return self->lpf; }
SWIGINTERN float gam_Threshold_Sl_SampleType_Sg__get_thresh__SWIG(gam::Threshold< SampleType > *self){ return self->thresh; }

#include "Gamma/Analysis.h"
#include <cassert>

SWIGINTERN float gam_ZeroCrossRate_Sl_SampleType_Sg__Tick__SWIG(gam::ZeroCrossRate< SampleType > *self,float input){ return (*self)(input); }

#include "Gamma/AudioIO.h"


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}


SWIGINTERN bool gam_AudioIOData_Tick__SWIG(gam::AudioIOData const *self){ return (*self)(); }

    class LuaCallback : public gam::AudioCallback
    {
    public:
        SWIGLUA_REF cb;

        LuaCallback(SWIGLUA_REF ref) : cb(ref), gam::AudioCallback() {}

        void onAudio(AudioIOData & ib) {
            // todo call the callback 
        }
    };


#include "Gamma/Containers.h"

SWIGINTERN float gam_DelayN_Sl_SampleType_Sg____getitem____SWIG(gam::DelayN< SampleType > *self,float const &input){ return (*self)(input); }

#include "Gamma/Conversion.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include "Gamma/DFT.h"

SWIGINTERN bool gam_DFT_Process__SWIG(gam::DFT *self,float input){ return (*self)(input); }
SWIGINTERN float gam_DFT_Tick__SWIG(gam::DFT *self){ return (*self)(); }
SWIGINTERN bool gam_STFT_Tick__SWIG(gam::STFT *self,float input){ return (*self)(input); }
SWIGINTERN float const *gam_SlidingWindow_Sl_SampleType_Sg__Get__SWIG(gam::SlidingWindow< SampleType > *self){ return (*self)(); }
SWIGINTERN bool gam_SlidingWindow_Sl_SampleType_Sg__Tick__SWIG(gam::SlidingWindow< SampleType > *self,float input){ return (*self)(input); }
SWIGINTERN bool gam_SlidingWindow_Sl_SampleType_Sg__Process__SWIG(gam::SlidingWindow< SampleType > *self,float *dst,float input){ return (*self)(dst,input); }

#include "Gamma/Delay.h"
#include "Gamma/Containers.h"

SWIGINTERN float gam_Comb_Sl_SampleType_Sg__Tick__SWIG(gam::Comb< SampleType > *self){ return (*self)(); }
SWIGINTERN float gam_Comb_Sl_SampleType_Sg__flter__SWIG(gam::Comb< SampleType > *self,float const &i0,float const &oN){ return (*self)(i0,oN); }
SWIGINTERN float gam_Comb_Sl_SampleType_Sg__filter__SWIG(gam::Comb< SampleType > *self,float const &i0){ return (*self)(i0); }

#include "Gamma/Domain.h"


#include "Gamma/Effects.h"

SWIGINTERN float gam_Biquad3_Tick__SWIG(gam::Biquad3 *self,float i0){ return (*self)(i0); }
SWIGINTERN gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > &gam_Biquad3_get_bq0__SWIG(gam::Biquad3 *self){ return self->bq0; }
SWIGINTERN gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > &gam_Biquad3_get_bq1__SWIG(gam::Biquad3 *self){ return self->bq1; }
SWIGINTERN gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > &gam_Biquad3_get_bq2__SWIG(gam::Biquad3 *self){ return self->bq2; }
SWIGINTERN float gam_Burst_bang__SWIG(gam::Burst *self){ return (*self)(); }
SWIGINTERN void gam_Burst_exec__SWIG(gam::Burst *self,float frq1,float frq2,float dec,float rst){ (*self)(frq1,frq2,dec,rst); }
SWIGINTERN gam::NoiseWhite< gam::RNGMulCon > &gam_Burst_get_src__SWIG(gam::Burst *self){ return self->src; }
SWIGINTERN gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > &gam_Burst_get_fil__SWIG(gam::Burst *self){ return self->fil; }
SWIGINTERN gam::Decay< float > &gam_Burst_get_env__SWIG(gam::Burst *self){ return self->env; }
SWIGINTERN float gam_MonoSynth_Tick__SWIG(gam::MonoSynth *self){ return (*self)(); }
SWIGINTERN gam::Saw< float,GAM_DEFAULT_DOMAIN > &gam_MonoSynth_get_osc__SWIG(gam::MonoSynth *self){ return self->osc; }
SWIGINTERN gam::Decay< float > &gam_MonoSynth_get_env__SWIG(gam::MonoSynth *self){ return self->env; }
SWIGINTERN gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > &gam_MonoSynth_get_opEnv__SWIG(gam::MonoSynth *self){ return self->opEnv; }
SWIGINTERN gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > &gam_MonoSynth_get_filter__SWIG(gam::MonoSynth *self){ return self->filter; }
SWIGINTERN float gam_Pluck_Tick__SWIG(gam::Pluck *self){ return (*self)(); }
SWIGINTERN float gam_Pluck_filter__SWIG(gam::Pluck *self,float in){ return (*self)(in); }
SWIGINTERN float gam_AM_Sl_SampleType_Sg__Tick__SWIG(gam::AM< SampleType > *self,float car,float mod){ return (*self)(car,mod); }
SWIGINTERN float gam_Chirp_Sl_SampleType_Sg__Tick__SWIG(gam::Chirp< SampleType > *self){ return (*self)(); }
SWIGINTERN void gam_Chirp_Sl_SampleType_Sg__Process__SWIG_0(gam::Chirp< SampleType > *self,float f1,float f2,float d,bool doReset=false){ return (*self)(f1,f2,d,doReset); }
SWIGINTERN gam::Sine< float,GAM_DEFAULT_DOMAIN > &gam_Chirp_Sl_SampleType_Sg__get_osc__SWIG(gam::Chirp< SampleType > *self){ return self->osc; }
SWIGINTERN gam::Decay< float > &gam_Chirp_Sl_SampleType_Sg__get_env__SWIG(gam::Chirp< SampleType > *self){ return self->env;}

#include <string.h>

SWIGINTERN float gam_ChebyN_Sl_1_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 1,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_2_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 2,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_3_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 3,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_4_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 4,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_5_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 5,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_6_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 6,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_7_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 7,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_8_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 8,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_ChebyN_Sl_9_Sc_SampleType_Sg____getitem____SWIG(gam::ChebyN< 9,SampleType > const *self,float i0){ return (*self)(i0); }
SWIGINTERN float gam_Chorus_Sl_SampleType_Sg__Tick__SWIG(gam::Chorus< SampleType > *self,float const &v){ return (*self)(v); }
SWIGINTERN void gam_Chorus_Sl_SampleType_Sg__Process__SWIG(gam::Chorus< SampleType > *self,float const &in,float &o1,float &o2){ return (*self)(in,o1,o2); }
SWIGINTERN void gam_Chorus_Sl_SampleType_Sg__filter_stereo__SWIG(gam::Chorus< SampleType > *self,gam::Vec< 2,SampleType > const &v){ (*self)(v); }
SWIGINTERN void gam_Chorus_Sl_SampleType_Sg__filter_samples__SWIG(gam::Chorus< SampleType > *self,float const &i1,float const &i2,float &o1,float &o2){ (*self)(i1,i2,o1,o2); }
SWIGINTERN gam::Comb< float,ipl::Cubic,gam::real,GAM_DEFAULT_DOMAIN > &gam_Chorus_Sl_SampleType_Sg__get_comb1__SWIG(gam::Chorus< SampleType > *self){ return self->comb1; }
SWIGINTERN gam::Comb< float,ipl::Cubic,gam::real,GAM_DEFAULT_DOMAIN > &gam_Chorus_Sl_SampleType_Sg__get_comb2__SWIG(gam::Chorus< SampleType > *self){ return self->comb2; }
SWIGINTERN gam::CSine< double,GAM_DEFAULT_DOMAIN > &gam_Chorus_Sl_SampleType_Sg__get_mod__SWIG(gam::Chorus< SampleType > *self){ return self->mod; }
SWIGINTERN float gam_FreqShift_Sl_SampleType_Sg__Tick__SWIG(gam::FreqShift< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN gam::CSine< float,GAM_DEFAULT_DOMAIN > gam_FreqShift_Sl_SampleType_Sg__get_mod__SWIG(gam::FreqShift< SampleType > *self){ return self->mod; }
SWIGINTERN gam::Hilbert< float,gam::real > gam_FreqShift_Sl_SampleType_Sg__get_hil__SWIG(gam::FreqShift< SampleType > *self){ return self->hil; }
SWIGINTERN gam::Vec< 2,float > gam_Pan_Sl_SampleType_Sg__Tick__SWIG(gam::Pan< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN void gam_Pan_Sl_SampleType_Sg__filter__SWIG(gam::Pan< SampleType > *self,float in,SampleType &out1,SampleType &out2){ (*self)(in,out1,out2); }
SWIGINTERN void gam_Pan_Sl_SampleType_Sg__filter_sample__SWIG(gam::Pan< SampleType > *self,float in1,float in2,SampleType &out1,SampleType &out2){ (*self)(in1,in2,out1,out2); }
SWIGINTERN float gam_Quantizer_Sl_SampleType_Sg__Tick__SWIG(gam::Quantizer< SampleType > *self,float in){ return (*self)(in); }

#include "Gamma/Filter.h"

SWIGINTERN float gam_AllPass1_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::AllPass1< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_BlockDC_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::BlockDC< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_BlockNyq_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::BlockNyq< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_AllPass2_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::AllPass2< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Notch_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::Notch< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Reson_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::Reson< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN gam::Complex< float > gam_Hilbert_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::Hilbert< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Integrator_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::Integrator< SampleType,SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Differencer_Sl_SampleType_Sg__Tick__SWIG(gam::Differencer< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_MovingAvg_Sl_SampleType_Sg__Tick__SWIG(gam::MovingAvg< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float const &gam_OnePole_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(gam::OnePole< SampleType,SampleType > *self){ return (*self)(); }
SWIGINTERN float const &gam_OnePole_Sl_SampleType_Sc_SampleType_Sg__Process__SWIG(gam::OnePole< SampleType,SampleType > *self,float in){ return (*self)(in); }

#include "Gamma/FormantData.h"


#include "Gamma/Noise.h"

SWIGINTERN float gam_NoiseBrown_Sl__Sg__Tick__SWIG(gam::NoiseBrown< > *self){ return (*self)(); }
SWIGINTERN float gam_NoisePink_Sl__Sg__Tick__SWIG(gam::NoisePink< > *self){ return (*self)(); }
SWIGINTERN float gam_NoiseWhite_Sl__Sg__Tick__SWIG(gam::NoiseWhite< > *self){ return (*self)(); }
SWIGINTERN float gam_NoiseBinary_Sl__Sg__Tick__SWIG(gam::NoiseBinary< > *self){ return (*self)(); }
SWIGINTERN float gam_NoiseViolet_Sl__Sg__Tick__SWIG(gam::NoiseViolet< > *self){ return (*self)(); }

#include "Gamma/Oscillator.h"

SWIGINTERN bool gam_Accum_Sl__Sg__Tick__SWIG(gam::Accum< > *self){ return (*self)(); }
SWIGINTERN float gam_Sweep_Sl__Sg__Tick__SWIG(gam::Sweep< > *self){ return (*self)(); }
SWIGINTERN float gam_Osc_Sl_SampleType_Sg__Tick__SWIG(gam::Osc< SampleType > *self){ return (*self)(); }
SWIGINTERN gam::CSine< float >::complex gam_CSine_Sl_SampleType_Sg__Tick__SWIG(gam::CSine< SampleType > *self){ return (*self)(); }
SWIGINTERN float gam_Sine_Sl_SampleType_Sg__Tick__SWIG_0(gam::Sine< SampleType > *self,float frq0=float(0)){ return (*self)(frq0); }
SWIGINTERN float gam_SineRs_Sl_SampleType_Sg__Tick__SWIG(gam::SineRs< SampleType > *self){ return (*self)(); }
SWIGINTERN float gam_SineDs_Sl_SampleType_Sg__Tick__SWIG(gam::SineDs< SampleType > *self){ return (*self)(); }
SWIGINTERN gam::Chirplet< float >::complex gam_Chirplet_Sl_SampleType_Sg__Tick__SWIG(gam::Chirplet< SampleType > *self){ return (*self)(); }
SWIGINTERN float gam_Saw_Sl_SampleType_Sg__Tick__SWIG_0(gam::Saw< SampleType > *self,float itg=0.999){ return (*self)(itg); }
SWIGINTERN float gam_Square_Sl_SampleType_Sg__Tick__SWIG_0(gam::Square< SampleType > *self,float itg=0.999){ return (*self)(itg); }
SWIGINTERN float gam_DSF_Sl_SampleType_Sg__Tick__SWIG(gam::DSF< SampleType > *self){ return (*self)(); }

#include "Gamma/Recorder.h"


#include "Gamma/Sample.h"


#include "Gamma/SamplePlayer.h"

SWIGINTERN float gam_SamplePlayer_Sl_SampleType_Sg__Tick__SWIG_0(gam::SamplePlayer< SampleType > *self,int channel=0){ return (*self)(channel); }

#include "Gamma/SoundFile.h"


#include "Gamma/Spatial.h"

SWIGINTERN float gam_LoopGain_Sl_SampleType_Sg__Tick__SWIG(gam::LoopGain< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Loop1P_Sl_SampleType_Sg__Tick__SWIG(gam::Loop1P< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Loop1P1Z_Sl_SampleType_Sg__Tick__SWIG(gam::Loop1P1Z< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_Echo_Sl_SampleType_Sg__Tick__SWIG(gam::Echo< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN gam::Complex< float > gam_EchoCSine_Sl_SampleType_Sg__Process__SWIG(gam::EchoCSine< SampleType > *self,float real,float imag){ return (*self)(real,imag); }
SWIGINTERN gam::Complex< float > gam_EchoCSine_Sl_SampleType_Sg__Tick__SWIG(gam::EchoCSine< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN float gam_ReverbMS_Sl_SampleType_Sg__Tick__SWIG(gam::ReverbMS< SampleType > *self,float in){ return (*self)(in); }
SWIGINTERN gam::Vec< 2,float > gam_Dist_Sl_2_Sc_SampleType_Sg__Tick__SWIG(gam::Dist< 2,SampleType > *self,float in){ return (*self)(in); }

#include "Gamma/TransferFunc.h"

SWIGINTERN gam::TransferFunc::Complex gam_TransferFunc_Tick__SWIG(gam::TransferFunc *self,double f){ return (*self)(f); }
SWIGINTERN gam::TransferFunc::Complex gam_TransferFunc_TickZ__SWIG(gam::TransferFunc *self,gam::TransferFunc::Complex z){ return (*self)(z); }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_sleep(lua_State* L) {
  int SWIG_arg = 0;
  gam::nsec_t arg1 ;
  
  SWIG_check_num_args("gam::sleep",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::sleep",1,"gam::nsec_t");
  arg1 = (gam::nsec_t)lua_tonumber(L, 1);
  gam::sleep(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sleepSec(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  
  SWIG_check_num_args("gam::sleepSec",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::sleepSec",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  gam::sleepSec(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sleepUntil(lua_State* L) {
  int SWIG_arg = 0;
  gam::nsec_t arg1 ;
  gam::nsec_t result;
  
  SWIG_check_num_args("gam::sleepUntil",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::sleepUntil",1,"gam::nsec_t");
  arg1 = (gam::nsec_t)lua_tonumber(L, 1);
  result = (gam::nsec_t)gam::sleepUntil(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_timeNow(lua_State* L) {
  int SWIG_arg = 0;
  gam::nsec_t result;
  
  SWIG_check_num_args("gam::timeNow",0,0)
  result = (gam::nsec_t)gam::timeNow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_toSec(lua_State* L) {
  int SWIG_arg = 0;
  gam::nsec_t arg1 ;
  double result;
  
  SWIG_check_num_args("gam::toSec",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::toSec",1,"gam::nsec_t");
  arg1 = (gam::nsec_t)lua_tonumber(L, 1);
  result = (double)gam::toSec(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_toNSec(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::nsec_t result;
  
  SWIG_check_num_args("gam::toNSec",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::toNSec",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::nsec_t)gam::toNSec(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_elapsed(lua_State* L) {
  int SWIG_arg = 0;
  gam::Timer *arg1 = (gam::Timer *) 0 ;
  gam::nsec_t result;
  
  SWIG_check_num_args("gam::Timer::elapsed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Timer::elapsed",1,"gam::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Timer,0))){
    SWIG_fail_ptr("Timer_elapsed",1,SWIGTYPE_p_gam__Timer);
  }
  
  result = (gam::nsec_t)(arg1)->elapsed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_elapsedSec(lua_State* L) {
  int SWIG_arg = 0;
  gam::Timer *arg1 = (gam::Timer *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::Timer::elapsedSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Timer::elapsedSec",1,"gam::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Timer,0))){
    SWIG_fail_ptr("Timer_elapsedSec",1,SWIGTYPE_p_gam__Timer);
  }
  
  result = (double)(arg1)->elapsedSec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_elapsedMSec(lua_State* L) {
  int SWIG_arg = 0;
  gam::Timer *arg1 = (gam::Timer *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::Timer::elapsedMSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Timer::elapsedMSec",1,"gam::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Timer,0))){
    SWIG_fail_ptr("Timer_elapsedMSec",1,SWIGTYPE_p_gam__Timer);
  }
  
  result = (double)(arg1)->elapsedMSec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_start(lua_State* L) {
  int SWIG_arg = 0;
  gam::Timer *arg1 = (gam::Timer *) 0 ;
  
  SWIG_check_num_args("gam::Timer::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Timer::start",1,"gam::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Timer,0))){
    SWIG_fail_ptr("Timer_start",1,SWIGTYPE_p_gam__Timer);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_stop(lua_State* L) {
  int SWIG_arg = 0;
  gam::Timer *arg1 = (gam::Timer *) 0 ;
  
  SWIG_check_num_args("gam::Timer::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Timer::stop",1,"gam::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Timer,0))){
    SWIG_fail_ptr("Timer_stop",1,SWIGTYPE_p_gam__Timer);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  gam::Timer *result = 0 ;
  
  SWIG_check_num_args("gam::Timer::Timer",0,0)
  result = (gam::Timer *)new gam::Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Timer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
gam::Timer *arg1 = (gam::Timer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Timer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Timer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_methods[]= {
    { "elapsed", _wrap_Timer_elapsed},
    { "elapsedSec", _wrap_Timer_elapsedSec},
    { "elapsedMSec", _wrap_Timer_elapsedMSec},
    { "start", _wrap_Timer_start},
    { "stop", _wrap_Timer_stop},
    {0,0}
};
static swig_lua_method swig_Timer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Timer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Timer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Timer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Timer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Timer_Sf_SwigStatic = {
    "Timer",
    swig_Timer_Sf_SwigStatic_methods,
    swig_Timer_Sf_SwigStatic_attributes,
    swig_Timer_Sf_SwigStatic_constants,
    swig_Timer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", "Timer", &SWIGTYPE_p_gam__Timer,_proxy__wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, &swig_Timer_Sf_SwigStatic, swig_Timer_meta, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_new_stdvector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SampleType >::vector",0,0)
  result = (std::vector< SampleType > *)new std::vector< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_stdvector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SampleType >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< SampleType >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< SampleType > *)new std::vector< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_stdvector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = 0 ;
  std::vector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SampleType >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< SampleType >::vector",1,"std::vector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_stdvector",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< SampleType > *)new std::vector< SampleType >((std::vector< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_stdvector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  std::vector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< SampleType >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< SampleType >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SampleType >::vector",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (std::vector< SampleType > *)new std::vector< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_stdvector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_stdvector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_stdvector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_stdvector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_stdvector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_stdvector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< SampleType >::vector()\n"
    "    std::vector< SampleType >::vector(unsigned int)\n"
    "    std::vector< SampleType >::vector(std::vector< SampleType > const &)\n"
    "    std::vector< SampleType >::vector(unsigned int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_stdvector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::size",1,"std::vector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< SampleType >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::max_size",1,"std::vector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (unsigned int)((std::vector< SampleType > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< SampleType >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::empty",1,"std::vector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< SampleType > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  
  SWIG_check_num_args("std::vector< SampleType >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::clear",1,"std::vector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::vector< SampleType >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::push_back",1,"std::vector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SampleType >::push_back",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  
  SWIG_check_num_args("std::vector< SampleType >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::pop_back",1,"std::vector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< SampleType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::front",1,"std::vector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< SampleType > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::vector< SampleType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::back",1,"std::vector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float)((std::vector< SampleType > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::__getitem__",1,"std::vector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SampleType >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (float)std_vector_Sl_SampleType_Sg____getitem____SWIG(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_stdvector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = (std::vector< SampleType > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< SampleType >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< SampleType >::__setitem__",1,"std::vector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< SampleType >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< SampleType >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("stdvector___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  try {
    std_vector_Sl_SampleType_Sg____setitem____SWIG(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_stdvector(void *obj) {
std::vector< SampleType > *arg1 = (std::vector< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_stdvector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_stdvector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_stdvector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_stdvector_methods[]= {
    { "size", _wrap_stdvector_size},
    { "max_size", _wrap_stdvector_max_size},
    { "empty", _wrap_stdvector_empty},
    { "clear", _wrap_stdvector_clear},
    { "push_back", _wrap_stdvector_push_back},
    { "pop_back", _wrap_stdvector_pop_back},
    { "front", _wrap_stdvector_front},
    { "back", _wrap_stdvector_back},
    { "__getitem", _wrap_stdvector___getitem},
    { "__setitem", _wrap_stdvector___setitem},
    {0,0}
};
static swig_lua_method swig_stdvector_meta[] = {
    { "__getitem", _wrap_stdvector___getitem},
    { "__setitem", _wrap_stdvector___setitem},
    {0,0}
};

static swig_lua_attribute swig_stdvector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_stdvector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_stdvector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_stdvector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_stdvector_Sf_SwigStatic = {
    "stdvector",
    swig_stdvector_Sf_SwigStatic_methods,
    swig_stdvector_Sf_SwigStatic_attributes,
    swig_stdvector_Sf_SwigStatic_constants,
    swig_stdvector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_stdvector_bases[] = {0};
static const char *swig_stdvector_base_names[] = {0};
static swig_lua_class _wrap_class_stdvector = { "stdvector", "stdvector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_stdvector, swig_delete_stdvector, swig_stdvector_methods, swig_stdvector_attributes, &swig_stdvector_Sf_SwigStatic, swig_stdvector_meta, swig_stdvector_bases, swig_stdvector_base_names };

static int _wrap_indexLast(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::indexLast",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::indexLast",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::indexLast",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)gam::indexLast(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_posToInd(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::index_t arg2 ;
  gam::index_t result;
  
  SWIG_check_num_args("gam::posToInd",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::posToInd",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::posToInd",2,"gam::index_t");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (gam::index_t)lua_tonumber(L, 2);
  result = (gam::index_t)gam::posToInd(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexMap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::index_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::IndexMap< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::IndexMap",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::IndexMap",1,"gam::index_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::IndexMap< SampleType >::IndexMap",2,"float const &");
  arg1 = (gam::index_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::IndexMap< SampleType > *)new gam::IndexMap< SampleType >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IndexMapT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexMap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::index_t arg1 ;
  gam::IndexMap< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::IndexMap",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::IndexMap",1,"gam::index_t");
  arg1 = (gam::index_t)lua_tonumber(L, 1);
  result = (gam::IndexMap< SampleType > *)new gam::IndexMap< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IndexMapT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexMap__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::IndexMap< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::IndexMap",0,0)
  result = (gam::IndexMap< SampleType > *)new gam::IndexMap< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IndexMapT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IndexMap(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IndexMap__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_IndexMap__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IndexMap__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IndexMap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::IndexMap< SampleType >::IndexMap(gam::index_t,float const &)\n"
    "    gam::IndexMap< SampleType >::IndexMap(gam::index_t)\n"
    "    gam::IndexMap< SampleType >::IndexMap()\n");
  lua_error(L);return 0;
}


static int _wrap_IndexMap___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::IndexMap< SampleType > *arg1 = (gam::IndexMap< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::index_t result;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::operator ()",1,"gam::IndexMap< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::IndexMap< SampleType >::operator ()",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IndexMapT_float_t,0))){
    SWIG_fail_ptr("IndexMap___call",1,SWIGTYPE_p_gam__IndexMapT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::index_t)((gam::IndexMap< SampleType > const *)arg1)->operator ()((float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexMap___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::IndexMap< SampleType > *arg1 = (gam::IndexMap< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  gam::index_t result;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::operator ()",1,"gam::IndexMap< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::IndexMap< SampleType >::operator ()",2,"float const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("gam::IndexMap< SampleType >::operator ()",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IndexMapT_float_t,0))){
    SWIG_fail_ptr("IndexMap___call",1,SWIGTYPE_p_gam__IndexMapT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("IndexMap___call",3,SWIGTYPE_p_float);
  }
  
  result = (gam::index_t)((gam::IndexMap< SampleType > const *)arg1)->operator ()((float const &)*arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexMap___call(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__IndexMapT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexMap___call__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__IndexMapT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IndexMap___call__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexMap___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::IndexMap< SampleType >::operator ()(float const &) const\n"
    "    gam::IndexMap< SampleType >::operator ()(float const &,float &) const\n");
  lua_error(L);return 0;
}


static int _wrap_IndexMap_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::IndexMap< SampleType > *arg1 = (gam::IndexMap< SampleType > *) 0 ;
  gam::index_t arg2 ;
  float result;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::get",1,"gam::IndexMap< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::IndexMap< SampleType >::get",2,"gam::index_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IndexMapT_float_t,0))){
    SWIG_fail_ptr("IndexMap_get",1,SWIGTYPE_p_gam__IndexMapT_float_t);
  }
  
  arg2 = (gam::index_t)lua_tonumber(L, 2);
  result = (float)gam_IndexMap_Sl_SampleType_Sg__get__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexMap___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::IndexMap< SampleType > *arg1 = (gam::IndexMap< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::__getitem__",1,"gam::IndexMap< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::IndexMap< SampleType >::__getitem__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IndexMapT_float_t,0))){
    SWIG_fail_ptr("IndexMap___getitem",1,SWIGTYPE_p_gam__IndexMapT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)gam_IndexMap_Sl_SampleType_Sg____getitem____SWIG(arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexMap_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::IndexMap< SampleType > *arg1 = (gam::IndexMap< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  gam::index_t result;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::get",1,"gam::IndexMap< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::IndexMap< SampleType >::get",2,"float const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("gam::IndexMap< SampleType >::get",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IndexMapT_float_t,0))){
    SWIG_fail_ptr("IndexMap_get",1,SWIGTYPE_p_gam__IndexMapT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("IndexMap_get",3,SWIGTYPE_p_float);
  }
  
  result = (gam::index_t)gam_IndexMap_Sl_SampleType_Sg__get__SWIG_1(arg1,(float const &)*arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IndexMap_get(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__IndexMapT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IndexMap_get__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__IndexMapT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IndexMap_get__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IndexMap_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::IndexMap< SampleType >::get(gam::index_t)\n"
    "    gam::IndexMap< SampleType >::get(float const &,float &)\n");
  lua_error(L);return 0;
}


static int _wrap_IndexMap_max(lua_State* L) {
  int SWIG_arg = 0;
  gam::IndexMap< SampleType > *arg1 = (gam::IndexMap< SampleType > *) 0 ;
  gam::index_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("gam::IndexMap< SampleType >::max",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::IndexMap< SampleType >::max",1,"gam::IndexMap< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::IndexMap< SampleType >::max",2,"gam::index_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::IndexMap< SampleType >::max",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IndexMapT_float_t,0))){
    SWIG_fail_ptr("IndexMap_max",1,SWIGTYPE_p_gam__IndexMapT_float_t);
  }
  
  arg2 = (gam::index_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->max(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IndexMap(void *obj) {
gam::IndexMap< SampleType > *arg1 = (gam::IndexMap< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_IndexMap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IndexMap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IndexMap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IndexMap_methods[]= {
    { "__call", _wrap_IndexMap___call},
    { "__getitem", _wrap_IndexMap___getitem},
    { "get", _wrap_IndexMap_get},
    { "max", _wrap_IndexMap_max},
    {0,0}
};
static swig_lua_method swig_IndexMap_meta[] = {
    { "__call", _wrap_IndexMap___call},
    { "__getitem", _wrap_IndexMap___getitem},
    {0,0}
};

static swig_lua_attribute swig_IndexMap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IndexMap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IndexMap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IndexMap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IndexMap_SwigStatic = {
    "IndexMap",
    swig_IndexMap_SwigStatic_methods,
    swig_IndexMap_SwigStatic_attributes,
    swig_IndexMap_SwigStatic_constants,
    swig_IndexMap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IndexMap_bases[] = {0};
static const char *swig_IndexMap_base_names[] = {0};
static swig_lua_class _wrap_class_IndexMap = { "IndexMap", "IndexMap", &SWIGTYPE_p_gam__IndexMapT_float_t,_proxy__wrap_new_IndexMap, swig_delete_IndexMap, swig_IndexMap_methods, swig_IndexMap_attributes, &swig_IndexMap_SwigStatic, swig_IndexMap_meta, swig_IndexMap_bases, swig_IndexMap_base_names };

static int _wrap_new_Slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::Slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Slice",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (gam::Slice< SampleType > *)new gam::Slice< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::Slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Slice",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (gam::Slice< SampleType > *)new gam::Slice< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Slice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::Slice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::Slice",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Slice",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::Slice< SampleType > *)new gam::Slice< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Slice__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Slice__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Slice< SampleType >::Slice(float *,int,int,int)\n"
    "    gam::Slice< SampleType >::Slice(float *,int,int)\n"
    "    gam::Slice< SampleType >::Slice(float *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Slice_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SwigValueWrapper< gam::Slice< float > > result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::get",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::get",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Slice< SampleType >::get",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Slice< SampleType >::get",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_get",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = gam_Slice_Sl_SampleType_Sg__get__SWIG_0(arg1,arg2,arg3,arg4);
  {
    gam::Slice< SampleType > * resultptr = new gam::Slice< SampleType >((const gam::Slice< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< gam::Slice< float > > result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::get",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Slice< SampleType >::get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_get",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = gam_Slice_Sl_SampleType_Sg__get__SWIG_0(arg1,arg2,arg3);
  {
    gam::Slice< SampleType > * resultptr = new gam::Slice< SampleType >((const gam::Slice< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_get__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  SwigValueWrapper< gam::Slice< float > > result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::get",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_get",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = gam_Slice_Sl_SampleType_Sg__get__SWIG_0(arg1,arg2);
  {
    gam::Slice< SampleType > * resultptr = new gam::Slice< SampleType >((const gam::Slice< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_get(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Slice_get__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Slice_get__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Slice_get__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Slice_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Slice< SampleType >::get(int,int,int)\n"
    "    gam::Slice< SampleType >::get(int,int)\n"
    "    gam::Slice< SampleType >::get(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Slice___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::__getitem__",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::__getitem__",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice___getitem",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)gam_Slice_Sl_SampleType_Sg____getitem____SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice___setitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::__setitem__",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::__setitem__",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Slice< SampleType >::__setitem__",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice___setitem",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  gam_Slice_Sl_SampleType_Sg____setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice___eq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::operator ==",1,"gam::Slice< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::operator ==",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice___eq",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)((gam::Slice< SampleType > const *)arg1)->operator ==((float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_reverse(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::reverse",1,"gam::Slice< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_reverse",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (gam::Slice< SampleType > *) &(arg1)->reverse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_reversed(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  SwigValueWrapper< gam::Slice< float > > result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::reversed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::reversed",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_reversed",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = ((gam::Slice< SampleType > const *)arg1)->reversed();
  {
    gam::Slice< SampleType > * resultptr = new gam::Slice< SampleType >((const gam::Slice< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::set",1,"gam::Slice< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::set",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_set",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::Slice< SampleType > *) &((gam::Slice< SampleType > const *)arg1)->set((float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::set",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::set",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_set",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (gam::Slice< SampleType > *) &((gam::Slice< SampleType > const *)arg1)->set();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_set(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Slice_set__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Slice_set__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Slice_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Slice< SampleType >::set(float const &) const\n"
    "    gam::Slice< SampleType >::set() const\n");
  lua_error(L);return 0;
}


static int _wrap_Slice_mean(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::mean",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_mean",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (float)((gam::Slice< SampleType > const *)arg1)->mean();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_sum(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::sum",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_sum",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (float)((gam::Slice< SampleType > const *)arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_count__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::count",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_count",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (int)((gam::Slice< SampleType > const *)arg1)->count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_offset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::offset",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_offset",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (int)((gam::Slice< SampleType > const *)arg1)->offset();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_stride__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::stride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::stride",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_stride",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (int)((gam::Slice< SampleType > const *)arg1)->stride();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_N(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::Slice< SampleType >::N",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::N",1,"gam::Slice< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_N",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  result = (int)((gam::Slice< SampleType > const *)arg1)->N();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_count__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::count",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::count",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_count",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::Slice< SampleType > *) &(arg1)->count(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_count(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Slice_count__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Slice_count__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Slice_count'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Slice< SampleType >::count() const\n"
    "    gam::Slice< SampleType >::count(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Slice_offset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::offset",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::offset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_offset",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::Slice< SampleType > *) &(arg1)->offset(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_offset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Slice_offset__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Slice_offset__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Slice_offset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Slice< SampleType >::offset() const\n"
    "    gam::Slice< SampleType >::offset(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Slice_stride__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) 0 ;
  int arg2 ;
  gam::Slice< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Slice< SampleType >::stride",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Slice< SampleType >::stride",1,"gam::Slice< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Slice< SampleType >::stride",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SliceT_float_t,0))){
    SWIG_fail_ptr("Slice_stride",1,SWIGTYPE_p_gam__SliceT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::Slice< SampleType > *) &(arg1)->stride(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SliceT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Slice_stride(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Slice_stride__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SliceT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Slice_stride__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Slice_stride'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Slice< SampleType >::stride() const\n"
    "    gam::Slice< SampleType >::stride(int)\n");
  lua_error(L);return 0;
}


static void swig_delete_Slice(void *obj) {
gam::Slice< SampleType > *arg1 = (gam::Slice< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Slice(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Slice);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Slice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Slice_methods[]= {
    { "get", _wrap_Slice_get},
    { "__getitem", _wrap_Slice___getitem},
    { "__setitem", _wrap_Slice___setitem},
    { "__eq", _wrap_Slice___eq},
    { "reverse", _wrap_Slice_reverse},
    { "reversed", _wrap_Slice_reversed},
    { "set", _wrap_Slice_set},
    { "mean", _wrap_Slice_mean},
    { "sum", _wrap_Slice_sum},
    { "N", _wrap_Slice_N},
    { "count", _wrap_Slice_count},
    { "offset", _wrap_Slice_offset},
    { "stride", _wrap_Slice_stride},
    {0,0}
};
static swig_lua_method swig_Slice_meta[] = {
    { "__getitem", _wrap_Slice___getitem},
    { "__setitem", _wrap_Slice___setitem},
    { "__eq", _wrap_Slice___eq},
    {0,0}
};

static swig_lua_attribute swig_Slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Slice_Sf_SwigStatic = {
    "Slice",
    swig_Slice_Sf_SwigStatic_methods,
    swig_Slice_Sf_SwigStatic_attributes,
    swig_Slice_Sf_SwigStatic_constants,
    swig_Slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Slice_bases[] = {0};
static const char *swig_Slice_base_names[] = {0};
static swig_lua_class _wrap_class_Slice = { "Slice", "Slice", &SWIGTYPE_p_gam__SliceT_float_t,_proxy__wrap_new_Slice, swig_delete_Slice, swig_Slice_methods, swig_Slice_attributes, &swig_Slice_Sf_SwigStatic, swig_Slice_meta, swig_Slice_bases, swig_Slice_base_names };

static int _wrap_slice__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  SwigValueWrapper< gam::Slice< float > > result;
  
  SWIG_check_num_args("gam::slice< SampleType >",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::slice< SampleType >",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::slice< SampleType >",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::slice< SampleType >",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::slice< SampleType >",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("slice",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = gam::SWIGTEMPLATEDISAMBIGUATOR slice< SampleType >(arg1,arg2,arg3,arg4);
  {
    gam::Slice< float > * resultptr = new gam::Slice< float >((const gam::Slice< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slice__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< gam::Slice< float > > result;
  
  SWIG_check_num_args("gam::slice< SampleType >",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::slice< SampleType >",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::slice< SampleType >",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::slice< SampleType >",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("slice",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = gam::SWIGTEMPLATEDISAMBIGUATOR slice< SampleType >(arg1,arg2,arg3);
  {
    gam::Slice< float > * resultptr = new gam::Slice< float >((const gam::Slice< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slice__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  SwigValueWrapper< gam::Slice< float > > result;
  
  SWIG_check_num_args("gam::slice< SampleType >",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::slice< SampleType >",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::slice< SampleType >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("slice",1,SWIGTYPE_p_float);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = gam::SWIGTEMPLATEDISAMBIGUATOR slice< SampleType >(arg1,arg2);
  {
    gam::Slice< float > * resultptr = new gam::Slice< float >((const gam::Slice< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__SliceT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_slice__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_slice__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_slice__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::slice< SampleType >(float *,int,int,int)\n"
    "    gam::slice< SampleType >(float *,int,int)\n"
    "    gam::slice< SampleType >(float *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_new_EnvFollow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::EnvFollow< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::EnvFollow",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::EnvFollow",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::EnvFollow< SampleType > *)new gam::EnvFollow< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EnvFollow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::EnvFollow",0,0)
  result = (gam::EnvFollow< SampleType > *)new gam::EnvFollow< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EnvFollow(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EnvFollow__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_EnvFollow__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EnvFollow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::EnvFollow< SampleType >::EnvFollow(float)\n"
    "    gam::EnvFollow< SampleType >::EnvFollow()\n");
  lua_error(L);return 0;
}


static int _wrap_EnvFollow___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::operator ()",1,"gam::EnvFollow< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EnvFollow< SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EnvFollow___call",1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvFollow_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::Tick",1,"gam::EnvFollow< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EnvFollow< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EnvFollow_Tick",1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_EnvFollow_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvFollow_get_filter(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) 0 ;
  gam::OnePole< float,float,gam::GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::get_filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::get_filter",1,"gam::EnvFollow< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EnvFollow_get_filter",1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::OnePole< float,float,gam::GAM_DEFAULT_DOMAIN > *) &gam_EnvFollow_Sl_SampleType_Sg__get_filter__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvFollow_value(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::value",1,"gam::EnvFollow< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EnvFollow_value",1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::EnvFollow< SampleType > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvFollow_lag(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) 0 ;
  float arg2 ;
  gam::EnvFollow< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::lag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::lag",1,"gam::EnvFollow< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EnvFollow< SampleType >::lag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EnvFollow_lag",1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::EnvFollow< SampleType > *) &(arg1)->lag(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvFollow_done__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::done",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::done",1,"gam::EnvFollow< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EnvFollow< SampleType >::done",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EnvFollow_done",1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)((gam::EnvFollow< SampleType > const *)arg1)->done(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvFollow_done__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::EnvFollow< SampleType >::done",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EnvFollow< SampleType >::done",1,"gam::EnvFollow< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EnvFollow_done",1,SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)((gam::EnvFollow< SampleType > const *)arg1)->done();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EnvFollow_done(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EnvFollow_done__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EnvFollow_done__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EnvFollow_done'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::EnvFollow< SampleType >::done(float) const\n"
    "    gam::EnvFollow< SampleType >::done() const\n");
  lua_error(L);return 0;
}


static void swig_delete_EnvFollow(void *obj) {
gam::EnvFollow< SampleType > *arg1 = (gam::EnvFollow< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_EnvFollow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EnvFollow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EnvFollow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EnvFollow_methods[]= {
    { "__call", _wrap_EnvFollow___call},
    { "Tick", _wrap_EnvFollow_Tick},
    { "get_filter", _wrap_EnvFollow_get_filter},
    { "value", _wrap_EnvFollow_value},
    { "lag", _wrap_EnvFollow_lag},
    { "done", _wrap_EnvFollow_done},
    {0,0}
};
static swig_lua_method swig_EnvFollow_meta[] = {
    { "__call", _wrap_EnvFollow___call},
    {0,0}
};

static swig_lua_attribute swig_EnvFollow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EnvFollow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EnvFollow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EnvFollow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EnvFollow_Sf_SwigStatic = {
    "EnvFollow",
    swig_EnvFollow_Sf_SwigStatic_methods,
    swig_EnvFollow_Sf_SwigStatic_attributes,
    swig_EnvFollow_Sf_SwigStatic_constants,
    swig_EnvFollow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EnvFollow_bases[] = {0};
static const char *swig_EnvFollow_base_names[] = {0};
static swig_lua_class _wrap_class_EnvFollow = { "EnvFollow", "EnvFollow", &SWIGTYPE_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_EnvFollow, swig_delete_EnvFollow, swig_EnvFollow_methods, swig_EnvFollow_attributes, &swig_EnvFollow_Sf_SwigStatic, swig_EnvFollow_meta, swig_EnvFollow_bases, swig_EnvFollow_base_names };

static int _wrap_new_PCounter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gam::PCounter *result = 0 ;
  
  SWIG_check_num_args("gam::PCounter::PCounter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::PCounter::PCounter",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (gam::PCounter *)new gam::PCounter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__PCounter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PCounter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::PCounter *result = 0 ;
  
  SWIG_check_num_args("gam::PCounter::PCounter",0,0)
  result = (gam::PCounter *)new gam::PCounter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__PCounter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PCounter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PCounter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PCounter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PCounter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::PCounter::PCounter(unsigned int)\n"
    "    gam::PCounter::PCounter()\n");
  lua_error(L);return 0;
}


static int _wrap_PCounter_period__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::PCounter *arg1 = (gam::PCounter *) 0 ;
  unsigned int arg2 ;
  gam::PCounter *result = 0 ;
  
  SWIG_check_num_args("gam::PCounter::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::PCounter::period",1,"gam::PCounter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::PCounter::period",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PCounter,0))){
    SWIG_fail_ptr("PCounter_period",1,SWIGTYPE_p_gam__PCounter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::PCounter *) &(arg1)->period(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__PCounter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCounter_period__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::PCounter *arg1 = (gam::PCounter *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::PCounter::period",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::PCounter::period",1,"gam::PCounter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PCounter,0))){
    SWIG_fail_ptr("PCounter_period",1,SWIGTYPE_p_gam__PCounter);
  }
  
  result = (unsigned int)((gam::PCounter const *)arg1)->period();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCounter_period(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__PCounter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PCounter_period__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__PCounter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PCounter_period__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PCounter_period'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::PCounter::period(unsigned int)\n"
    "    gam::PCounter::period() const\n");
  lua_error(L);return 0;
}


static int _wrap_PCounter_cycled(lua_State* L) {
  int SWIG_arg = 0;
  gam::PCounter *arg1 = (gam::PCounter *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::PCounter::cycled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::PCounter::cycled",1,"gam::PCounter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PCounter,0))){
    SWIG_fail_ptr("PCounter_cycled",1,SWIGTYPE_p_gam__PCounter);
  }
  
  result = (bool)((gam::PCounter const *)arg1)->cycled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCounter_count(lua_State* L) {
  int SWIG_arg = 0;
  gam::PCounter *arg1 = (gam::PCounter *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::PCounter::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::PCounter::count",1,"gam::PCounter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PCounter,0))){
    SWIG_fail_ptr("PCounter_count",1,SWIGTYPE_p_gam__PCounter);
  }
  
  result = (unsigned int)((gam::PCounter const *)arg1)->count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCounter_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::PCounter *arg1 = (gam::PCounter *) 0 ;
  gam::PCounter *result = 0 ;
  
  SWIG_check_num_args("gam::PCounter::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::PCounter::reset",1,"gam::PCounter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PCounter,0))){
    SWIG_fail_ptr("PCounter_reset",1,SWIGTYPE_p_gam__PCounter);
  }
  
  result = (gam::PCounter *) &(arg1)->reset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__PCounter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PCounter_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::PCounter *arg1 = (gam::PCounter *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::PCounter::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::PCounter::Tick",1,"gam::PCounter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PCounter,0))){
    SWIG_fail_ptr("PCounter_Tick",1,SWIGTYPE_p_gam__PCounter);
  }
  
  result = (bool)gam_PCounter_Tick__SWIG(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PCounter(void *obj) {
gam::PCounter *arg1 = (gam::PCounter *) obj;
delete arg1;
}
static int _proxy__wrap_new_PCounter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PCounter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PCounter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PCounter_methods[]= {
    { "period", _wrap_PCounter_period},
    { "cycled", _wrap_PCounter_cycled},
    { "count", _wrap_PCounter_count},
    { "reset", _wrap_PCounter_reset},
    { "Tick", _wrap_PCounter_Tick},
    {0,0}
};
static swig_lua_method swig_PCounter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PCounter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PCounter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PCounter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PCounter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PCounter_Sf_SwigStatic = {
    "PCounter",
    swig_PCounter_Sf_SwigStatic_methods,
    swig_PCounter_Sf_SwigStatic_attributes,
    swig_PCounter_Sf_SwigStatic_constants,
    swig_PCounter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PCounter_bases[] = {0};
static const char *swig_PCounter_base_names[] = {0};
static swig_lua_class _wrap_class_PCounter = { "PCounter", "PCounter", &SWIGTYPE_p_gam__PCounter,_proxy__wrap_new_PCounter, swig_delete_PCounter, swig_PCounter_methods, swig_PCounter_attributes, &swig_PCounter_Sf_SwigStatic, swig_PCounter_meta, swig_PCounter_bases, swig_PCounter_base_names };

static int _wrap_new_MaxAbs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  gam::MaxAbs< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::MaxAbs< SampleType >::MaxAbs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::MaxAbs< SampleType >::MaxAbs",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (gam::MaxAbs< SampleType > *)new gam::MaxAbs< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MaxAbsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaxAbs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::MaxAbs< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::MaxAbs< SampleType >::MaxAbs",0,0)
  result = (gam::MaxAbs< SampleType > *)new gam::MaxAbs< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MaxAbsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MaxAbs(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MaxAbs__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MaxAbs__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MaxAbs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::MaxAbs< SampleType >::MaxAbs(int)\n"
    "    gam::MaxAbs< SampleType >::MaxAbs()\n");
  lua_error(L);return 0;
}


static int _wrap_MaxAbs_value(lua_State* L) {
  int SWIG_arg = 0;
  gam::MaxAbs< SampleType > *arg1 = (gam::MaxAbs< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::MaxAbs< SampleType >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MaxAbs< SampleType >::value",1,"gam::MaxAbs< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MaxAbsT_float_t,0))){
    SWIG_fail_ptr("MaxAbs_value",1,SWIGTYPE_p_gam__MaxAbsT_float_t);
  }
  
  result = (float *) &((gam::MaxAbs< SampleType > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaxAbs_valueL(lua_State* L) {
  int SWIG_arg = 0;
  gam::MaxAbs< SampleType > *arg1 = (gam::MaxAbs< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::MaxAbs< SampleType >::valueL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MaxAbs< SampleType >::valueL",1,"gam::MaxAbs< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MaxAbsT_float_t,0))){
    SWIG_fail_ptr("MaxAbs_valueL",1,SWIGTYPE_p_gam__MaxAbsT_float_t);
  }
  
  result = (float *) &((gam::MaxAbs< SampleType > const *)arg1)->valueL();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MaxAbs_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::MaxAbs< SampleType > *arg1 = (gam::MaxAbs< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::MaxAbs< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MaxAbs< SampleType >::Tick",1,"gam::MaxAbs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MaxAbs< SampleType >::Tick",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MaxAbsT_float_t,0))){
    SWIG_fail_ptr("MaxAbs_Tick",1,SWIGTYPE_p_gam__MaxAbsT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)gam_MaxAbs_Sl_SampleType_Sg__Tick__SWIG(arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MaxAbs(void *obj) {
gam::MaxAbs< SampleType > *arg1 = (gam::MaxAbs< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MaxAbs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MaxAbs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MaxAbs_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MaxAbs_methods[]= {
    { "value", _wrap_MaxAbs_value},
    { "valueL", _wrap_MaxAbs_valueL},
    { "Tick", _wrap_MaxAbs_Tick},
    {0,0}
};
static swig_lua_method swig_MaxAbs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MaxAbs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MaxAbs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MaxAbs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MaxAbs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MaxAbs_Sf_SwigStatic = {
    "MaxAbs",
    swig_MaxAbs_Sf_SwigStatic_methods,
    swig_MaxAbs_Sf_SwigStatic_attributes,
    swig_MaxAbs_Sf_SwigStatic_constants,
    swig_MaxAbs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MaxAbs_bases[] = {0,0};
static const char *swig_MaxAbs_base_names[] = {"gam::PCounter *",0};
static swig_lua_class _wrap_class_MaxAbs = { "MaxAbs", "MaxAbs", &SWIGTYPE_p_gam__MaxAbsT_float_t,_proxy__wrap_new_MaxAbs, swig_delete_MaxAbs, swig_MaxAbs_methods, swig_MaxAbs_attributes, &swig_MaxAbs_Sf_SwigStatic, swig_MaxAbs_meta, swig_MaxAbs_bases, swig_MaxAbs_base_names };

static int _wrap_new_SilenceDetect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gam::SilenceDetect *result = 0 ;
  
  SWIG_check_num_args("gam::SilenceDetect::SilenceDetect",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SilenceDetect::SilenceDetect",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (gam::SilenceDetect *)new gam::SilenceDetect(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SilenceDetect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SilenceDetect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SilenceDetect *result = 0 ;
  
  SWIG_check_num_args("gam::SilenceDetect::SilenceDetect",0,0)
  result = (gam::SilenceDetect *)new gam::SilenceDetect();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SilenceDetect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SilenceDetect(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SilenceDetect__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SilenceDetect__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SilenceDetect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SilenceDetect::SilenceDetect(unsigned int)\n"
    "    gam::SilenceDetect::SilenceDetect()\n");
  lua_error(L);return 0;
}


static int _wrap_SilenceDetect_count(lua_State* L) {
  int SWIG_arg = 0;
  gam::SilenceDetect *arg1 = (gam::SilenceDetect *) 0 ;
  unsigned int arg2 ;
  gam::SilenceDetect *result = 0 ;
  
  SWIG_check_num_args("gam::SilenceDetect::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SilenceDetect::count",1,"gam::SilenceDetect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SilenceDetect::count",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SilenceDetect,0))){
    SWIG_fail_ptr("SilenceDetect_count",1,SWIGTYPE_p_gam__SilenceDetect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::SilenceDetect *) &(arg1)->count(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SilenceDetect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SilenceDetect_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::SilenceDetect *arg1 = (gam::SilenceDetect *) 0 ;
  
  SWIG_check_num_args("gam::SilenceDetect::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SilenceDetect::reset",1,"gam::SilenceDetect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SilenceDetect,0))){
    SWIG_fail_ptr("SilenceDetect_reset",1,SWIGTYPE_p_gam__SilenceDetect);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SilenceDetect_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SilenceDetect *arg1 = (gam::SilenceDetect *) 0 ;
  SampleType *arg2 = 0 ;
  SampleType *arg3 = 0 ;
  SampleType temp2 ;
  SampleType temp3 ;
  bool result;
  
  SWIG_check_num_args("gam::SilenceDetect::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SilenceDetect::Tick",1,"gam::SilenceDetect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SilenceDetect::Tick",2,"SampleType const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SilenceDetect::Tick",3,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SilenceDetect,0))){
    SWIG_fail_ptr("SilenceDetect_Tick",1,SWIGTYPE_p_gam__SilenceDetect);
  }
  
  temp2=(SampleType)lua_tonumber(L,2); arg2=&temp2;
  temp3=(SampleType)lua_tonumber(L,3); arg3=&temp3;
  result = (bool)gam_SilenceDetect_Tick__SWIG_0(arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SilenceDetect_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SilenceDetect *arg1 = (gam::SilenceDetect *) 0 ;
  SampleType *arg2 = 0 ;
  SampleType temp2 ;
  bool result;
  
  SWIG_check_num_args("gam::SilenceDetect::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SilenceDetect::Tick",1,"gam::SilenceDetect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SilenceDetect::Tick",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SilenceDetect,0))){
    SWIG_fail_ptr("SilenceDetect_Tick",1,SWIGTYPE_p_gam__SilenceDetect);
  }
  
  temp2=(SampleType)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)gam_SilenceDetect_Tick__SWIG_0(arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SilenceDetect_Tick(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SilenceDetect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SilenceDetect_Tick__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SilenceDetect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SilenceDetect_Tick__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SilenceDetect_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SilenceDetect::Tick(SampleType const &,SampleType const &)\n"
    "    gam::SilenceDetect::Tick(SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SilenceDetect_done(lua_State* L) {
  int SWIG_arg = 0;
  gam::SilenceDetect *arg1 = (gam::SilenceDetect *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SilenceDetect::done",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SilenceDetect::done",1,"gam::SilenceDetect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SilenceDetect,0))){
    SWIG_fail_ptr("SilenceDetect_done",1,SWIGTYPE_p_gam__SilenceDetect);
  }
  
  result = (bool)((gam::SilenceDetect const *)arg1)->done();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SilenceDetect(void *obj) {
gam::SilenceDetect *arg1 = (gam::SilenceDetect *) obj;
delete arg1;
}
static int _proxy__wrap_new_SilenceDetect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SilenceDetect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SilenceDetect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SilenceDetect_methods[]= {
    { "count", _wrap_SilenceDetect_count},
    { "reset", _wrap_SilenceDetect_reset},
    { "Tick", _wrap_SilenceDetect_Tick},
    { "done", _wrap_SilenceDetect_done},
    {0,0}
};
static swig_lua_method swig_SilenceDetect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SilenceDetect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SilenceDetect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SilenceDetect_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SilenceDetect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SilenceDetect_Sf_SwigStatic = {
    "SilenceDetect",
    swig_SilenceDetect_Sf_SwigStatic_methods,
    swig_SilenceDetect_Sf_SwigStatic_attributes,
    swig_SilenceDetect_Sf_SwigStatic_constants,
    swig_SilenceDetect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SilenceDetect_bases[] = {0};
static const char *swig_SilenceDetect_base_names[] = {0};
static swig_lua_class _wrap_class_SilenceDetect = { "SilenceDetect", "SilenceDetect", &SWIGTYPE_p_gam__SilenceDetect,_proxy__wrap_new_SilenceDetect, swig_delete_SilenceDetect, swig_SilenceDetect_methods, swig_SilenceDetect_attributes, &swig_SilenceDetect_Sf_SwigStatic, swig_SilenceDetect_meta, swig_SilenceDetect_bases, swig_SilenceDetect_base_names };

static int _wrap_new_Threshold__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Threshold< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Threshold< SampleType >::Threshold",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Threshold< SampleType >::Threshold",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Threshold< SampleType >::Threshold",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Threshold< SampleType > *)new gam::Threshold< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ThresholdT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Threshold__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Threshold< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Threshold< SampleType >::Threshold",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Threshold< SampleType >::Threshold",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Threshold< SampleType > *)new gam::Threshold< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ThresholdT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Threshold(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Threshold__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Threshold__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Threshold'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Threshold< SampleType >::Threshold(float,float)\n"
    "    gam::Threshold< SampleType >::Threshold(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Threshold_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Threshold< SampleType > *arg1 = (gam::Threshold< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Threshold< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Threshold< SampleType >::Tick",1,"gam::Threshold< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Threshold< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ThresholdT_float_t,0))){
    SWIG_fail_ptr("Threshold_Tick",1,SWIGTYPE_p_gam__ThresholdT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Threshold_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Threshold_Process(lua_State* L) {
  int SWIG_arg = 0;
  gam::Threshold< SampleType > *arg1 = (gam::Threshold< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  SWIG_check_num_args("gam::Threshold< SampleType >::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Threshold< SampleType >::Process",1,"gam::Threshold< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Threshold< SampleType >::Process",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Threshold< SampleType >::Process",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Threshold< SampleType >::Process",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ThresholdT_float_t,0))){
    SWIG_fail_ptr("Threshold_Process",1,SWIGTYPE_p_gam__ThresholdT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (float)gam_Threshold_Sl_SampleType_Sg__Process__SWIG(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Threshold_get_lpf(lua_State* L) {
  int SWIG_arg = 0;
  gam::Threshold< SampleType > *arg1 = (gam::Threshold< SampleType > *) 0 ;
  gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > result;
  
  SWIG_check_num_args("gam::Threshold< SampleType >::get_lpf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Threshold< SampleType >::get_lpf",1,"gam::Threshold< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ThresholdT_float_t,0))){
    SWIG_fail_ptr("Threshold_get_lpf",1,SWIGTYPE_p_gam__ThresholdT_float_t);
  }
  
  result = gam_Threshold_Sl_SampleType_Sg__get_lpf__SWIG(arg1);
  {
    gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > * resultptr = new gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN >((const gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Threshold_get_thresh(lua_State* L) {
  int SWIG_arg = 0;
  gam::Threshold< SampleType > *arg1 = (gam::Threshold< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Threshold< SampleType >::get_thresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Threshold< SampleType >::get_thresh",1,"gam::Threshold< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ThresholdT_float_t,0))){
    SWIG_fail_ptr("Threshold_get_thresh",1,SWIGTYPE_p_gam__ThresholdT_float_t);
  }
  
  result = (float)gam_Threshold_Sl_SampleType_Sg__get_thresh__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Threshold_inv(lua_State* L) {
  int SWIG_arg = 0;
  gam::Threshold< SampleType > *arg1 = (gam::Threshold< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Threshold< SampleType >::inv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Threshold< SampleType >::inv",1,"gam::Threshold< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Threshold< SampleType >::inv",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ThresholdT_float_t,0))){
    SWIG_fail_ptr("Threshold_inv",1,SWIGTYPE_p_gam__ThresholdT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->inv(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Threshold(void *obj) {
gam::Threshold< SampleType > *arg1 = (gam::Threshold< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Threshold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Threshold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Threshold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Threshold_methods[]= {
    { "Tick", _wrap_Threshold_Tick},
    { "Process", _wrap_Threshold_Process},
    { "get_lpf", _wrap_Threshold_get_lpf},
    { "get_thresh", _wrap_Threshold_get_thresh},
    { "inv", _wrap_Threshold_inv},
    {0,0}
};
static swig_lua_method swig_Threshold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Threshold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Threshold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Threshold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Threshold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Threshold_Sf_SwigStatic = {
    "Threshold",
    swig_Threshold_Sf_SwigStatic_methods,
    swig_Threshold_Sf_SwigStatic_attributes,
    swig_Threshold_Sf_SwigStatic_constants,
    swig_Threshold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Threshold_bases[] = {0};
static const char *swig_Threshold_base_names[] = {0};
static swig_lua_class _wrap_class_Threshold = { "Threshold", "Threshold", &SWIGTYPE_p_gam__ThresholdT_float_t,_proxy__wrap_new_Threshold, swig_delete_Threshold, swig_Threshold_methods, swig_Threshold_attributes, &swig_Threshold_Sf_SwigStatic, swig_Threshold_meta, swig_Threshold_bases, swig_Threshold_base_names };

static int _wrap_new_ZeroCrossRate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  gam::ZeroCrossRate< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ZeroCrossRate< SampleType >::ZeroCrossRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ZeroCrossRate< SampleType >::ZeroCrossRate",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (gam::ZeroCrossRate< SampleType > *)new gam::ZeroCrossRate< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ZeroCrossRateT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZeroCrossRate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ZeroCrossRate< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ZeroCrossRate< SampleType >::ZeroCrossRate",0,0)
  result = (gam::ZeroCrossRate< SampleType > *)new gam::ZeroCrossRate< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ZeroCrossRateT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZeroCrossRate(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ZeroCrossRate__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ZeroCrossRate__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZeroCrossRate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ZeroCrossRate< SampleType >::ZeroCrossRate(int)\n"
    "    gam::ZeroCrossRate< SampleType >::ZeroCrossRate()\n");
  lua_error(L);return 0;
}


static int _wrap_ZeroCrossRate_value(lua_State* L) {
  int SWIG_arg = 0;
  gam::ZeroCrossRate< SampleType > *arg1 = (gam::ZeroCrossRate< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::ZeroCrossRate< SampleType >::value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ZeroCrossRate< SampleType >::value",1,"gam::ZeroCrossRate< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ZeroCrossRateT_float_t,0))){
    SWIG_fail_ptr("ZeroCrossRate_value",1,SWIGTYPE_p_gam__ZeroCrossRateT_float_t);
  }
  
  result = (float)((gam::ZeroCrossRate< SampleType > const *)arg1)->value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZeroCrossRate_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::ZeroCrossRate< SampleType > *arg1 = (gam::ZeroCrossRate< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ZeroCrossRate< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ZeroCrossRate< SampleType >::Tick",1,"gam::ZeroCrossRate< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ZeroCrossRate< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ZeroCrossRateT_float_t,0))){
    SWIG_fail_ptr("ZeroCrossRate_Tick",1,SWIGTYPE_p_gam__ZeroCrossRateT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ZeroCrossRate_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ZeroCrossRate(void *obj) {
gam::ZeroCrossRate< SampleType > *arg1 = (gam::ZeroCrossRate< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZeroCrossRate(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZeroCrossRate);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZeroCrossRate_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ZeroCrossRate_methods[]= {
    { "value", _wrap_ZeroCrossRate_value},
    { "Tick", _wrap_ZeroCrossRate_Tick},
    {0,0}
};
static swig_lua_method swig_ZeroCrossRate_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZeroCrossRate_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZeroCrossRate_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZeroCrossRate_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZeroCrossRate_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZeroCrossRate_Sf_SwigStatic = {
    "ZeroCrossRate",
    swig_ZeroCrossRate_Sf_SwigStatic_methods,
    swig_ZeroCrossRate_Sf_SwigStatic_attributes,
    swig_ZeroCrossRate_Sf_SwigStatic_constants,
    swig_ZeroCrossRate_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZeroCrossRate_bases[] = {0,0};
static const char *swig_ZeroCrossRate_base_names[] = {"gam::PCounter *",0};
static swig_lua_class _wrap_class_ZeroCrossRate = { "ZeroCrossRate", "ZeroCrossRate", &SWIGTYPE_p_gam__ZeroCrossRateT_float_t,_proxy__wrap_new_ZeroCrossRate, swig_delete_ZeroCrossRate, swig_ZeroCrossRate_methods, swig_ZeroCrossRate_attributes, &swig_ZeroCrossRate_Sf_SwigStatic, swig_ZeroCrossRate_meta, swig_ZeroCrossRate_bases, swig_ZeroCrossRate_base_names };

static int _wrap_new_AudioDevice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  gam::AudioDevice *result = 0 ;
  
  SWIG_check_num_args("gam::AudioDevice::AudioDevice",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioDevice::AudioDevice",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (gam::AudioDevice *)new gam::AudioDevice(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioDevice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  gam::AudioDevice::StreamMode arg2 ;
  gam::AudioDevice *result = 0 ;
  
  SWIG_check_num_args("gam::AudioDevice::AudioDevice",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::AudioDevice::AudioDevice",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioDevice::AudioDevice",2,"gam::AudioDevice::StreamMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_AudioDevice",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (gam::AudioDevice::StreamMode)(int)lua_tonumber(L, 2);
  result = (gam::AudioDevice *)new gam::AudioDevice((std::string const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioDevice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  gam::AudioDevice *result = 0 ;
  
  SWIG_check_num_args("gam::AudioDevice::AudioDevice",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::AudioDevice::AudioDevice",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_AudioDevice",1,SWIGTYPE_p_std__string);
  }
  
  result = (gam::AudioDevice *)new gam::AudioDevice((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioDevice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevice(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AudioDevice__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AudioDevice__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AudioDevice__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AudioDevice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioDevice::AudioDevice(int)\n"
    "    gam::AudioDevice::AudioDevice(std::string const &,gam::AudioDevice::StreamMode)\n"
    "    gam::AudioDevice::AudioDevice(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioDevice_valid(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioDevice::valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::valid",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_valid",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (bool)((gam::AudioDevice const *)arg1)->valid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_id(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioDevice::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::id",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_id",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (int)((gam::AudioDevice const *)arg1)->id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_name(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gam::AudioDevice::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::name",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_name",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (char *)((gam::AudioDevice const *)arg1)->name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_channelsInMax(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioDevice::channelsInMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::channelsInMax",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_channelsInMax",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (int)((gam::AudioDevice const *)arg1)->channelsInMax();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_channelsOutMax(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioDevice::channelsOutMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::channelsOutMax",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_channelsOutMax",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (int)((gam::AudioDevice const *)arg1)->channelsOutMax();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_defaultSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::AudioDevice::defaultSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::defaultSampleRate",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_defaultSampleRate",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (double)((gam::AudioDevice const *)arg1)->defaultSampleRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_hasInput(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioDevice::hasInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::hasInput",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_hasInput",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (bool)((gam::AudioDevice const *)arg1)->hasInput();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_hasOutput(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioDevice::hasOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::hasOutput",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_hasOutput",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  result = (bool)((gam::AudioDevice const *)arg1)->hasOutput();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_print(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioDevice *arg1 = (gam::AudioDevice *) 0 ;
  
  SWIG_check_num_args("gam::AudioDevice::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioDevice::print",1,"gam::AudioDevice const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioDevice_print",1,SWIGTYPE_p_gam__AudioDevice);
  }
  
  ((gam::AudioDevice const *)arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_defaultInput(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< gam::AudioDevice > result;
  
  SWIG_check_num_args("gam::AudioDevice::defaultInput",0,0)
  result = gam::AudioDevice::defaultInput();
  {
    gam::AudioDevice * resultptr = new gam::AudioDevice((const gam::AudioDevice &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__AudioDevice,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_defaultOutput(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< gam::AudioDevice > result;
  
  SWIG_check_num_args("gam::AudioDevice::defaultOutput",0,0)
  result = gam::AudioDevice::defaultOutput();
  {
    gam::AudioDevice * resultptr = new gam::AudioDevice((const gam::AudioDevice &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__AudioDevice,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_numDevices(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("gam::AudioDevice::numDevices",0,0)
  result = (int)gam::AudioDevice::numDevices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevice_printAll(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("gam::AudioDevice::printAll",0,0)
  gam::AudioDevice::printAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioDevice(void *obj) {
gam::AudioDevice *arg1 = (gam::AudioDevice *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioDevice(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioDevice);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioDevice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioDevice_methods[]= {
    { "valid", _wrap_AudioDevice_valid},
    { "id", _wrap_AudioDevice_id},
    { "name", _wrap_AudioDevice_name},
    { "channelsInMax", _wrap_AudioDevice_channelsInMax},
    { "channelsOutMax", _wrap_AudioDevice_channelsOutMax},
    { "defaultSampleRate", _wrap_AudioDevice_defaultSampleRate},
    { "hasInput", _wrap_AudioDevice_hasInput},
    { "hasOutput", _wrap_AudioDevice_hasOutput},
    { "print", _wrap_AudioDevice_print},
    {0,0}
};
static swig_lua_method swig_AudioDevice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioDevice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioDevice_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("INPUT", gam::AudioDevice::INPUT)},
    {SWIG_LUA_CONSTTAB_INT("OUTPUT", gam::AudioDevice::OUTPUT)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioDevice_Sf_SwigStatic_methods[]= {
    { "defaultInput", _wrap_AudioDevice_defaultInput},
    { "defaultOutput", _wrap_AudioDevice_defaultOutput},
    { "numDevices", _wrap_AudioDevice_numDevices},
    { "printAll", _wrap_AudioDevice_printAll},
    {0,0}
};
static swig_lua_class* swig_AudioDevice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioDevice_Sf_SwigStatic = {
    "AudioDevice",
    swig_AudioDevice_Sf_SwigStatic_methods,
    swig_AudioDevice_Sf_SwigStatic_attributes,
    swig_AudioDevice_Sf_SwigStatic_constants,
    swig_AudioDevice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioDevice_bases[] = {0};
static const char *swig_AudioDevice_base_names[] = {0};
static swig_lua_class _wrap_class_AudioDevice = { "AudioDevice", "AudioDevice", &SWIGTYPE_p_gam__AudioDevice,_proxy__wrap_new_AudioDevice, swig_delete_AudioDevice, swig_AudioDevice_methods, swig_AudioDevice_attributes, &swig_AudioDevice_Sf_SwigStatic, swig_AudioDevice_meta, swig_AudioDevice_bases, swig_AudioDevice_base_names };

static int _wrap_new_AudioIOData(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  gam::AudioIOData *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::AudioIOData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::AudioIOData",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_AudioIOData");
  result = (gam::AudioIOData *)new gam::AudioIOData(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIOData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIOData::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::Tick",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_Tick",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (bool)gam_AudioIOData_Tick__SWIG((gam::AudioIOData const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_frame__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIOData::frame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::frame",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_frame",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (int)((gam::AudioIOData const *)arg1)->frame();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_bus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::bus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::bus",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::bus",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_bus",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &((gam::AudioIOData const *)arg1)->bus(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_bus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::bus",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::bus",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::bus",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::AudioIOData::bus",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_bus",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &((gam::AudioIOData const *)arg1)->bus(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_bus(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_bus__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioIOData_bus__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_bus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::bus(int) const\n"
    "    gam::AudioIOData::bus(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_busBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::busBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::busBuffer",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::busBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_busBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *)((gam::AudioIOData const *)arg1)->busBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_busBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::busBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::busBuffer",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_busBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (float *)((gam::AudioIOData const *)arg1)->busBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_busBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIOData_busBuffer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_busBuffer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_busBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::busBuffer(int) const\n"
    "    gam::AudioIOData::busBuffer() const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_c_in__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::in",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::in",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::in",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_c_in",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &((gam::AudioIOData const *)arg1)->in(arg2);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_c_in__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::in",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::in",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::in",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::AudioIOData::in",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_c_in",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &((gam::AudioIOData const *)arg1)->in(arg2,arg3);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_c_in(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_c_in__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioIOData_c_in__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_c_in'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::in(int) const\n"
    "    gam::AudioIOData::in(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_inBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::inBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::inBuffer",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::inBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_inBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *)((gam::AudioIOData const *)arg1)->inBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_inBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::inBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::inBuffer",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_inBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (float *)((gam::AudioIOData const *)arg1)->inBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_inBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIOData_inBuffer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_inBuffer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_inBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::inBuffer(int) const\n"
    "    gam::AudioIOData::inBuffer() const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_out__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::out",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::out",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_out",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &((gam::AudioIOData const *)arg1)->out(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_out__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::out",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::out",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::out",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::AudioIOData::out",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_out",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &((gam::AudioIOData const *)arg1)->out(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_out(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_out__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioIOData_out__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_out'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::out(int) const\n"
    "    gam::AudioIOData::out(int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_outBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::outBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::outBuffer",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::outBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_outBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *)((gam::AudioIOData const *)arg1)->outBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_outBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::outBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::outBuffer",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_outBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (float *)((gam::AudioIOData const *)arg1)->outBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_outBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIOData_outBuffer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_outBuffer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_outBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::outBuffer(int) const\n"
    "    gam::AudioIOData::outBuffer() const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("gam::AudioIOData::sum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::sum",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::sum",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::AudioIOData::sum",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_sum",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  ((gam::AudioIOData const *)arg1)->sum(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("gam::AudioIOData::sum",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::sum",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::sum",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::AudioIOData::sum",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::AudioIOData::sum",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_sum",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  ((gam::AudioIOData const *)arg1)->sum(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_sum(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioIOData_sum__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AudioIOData_sum__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::sum(float,int) const\n"
    "    gam::AudioIOData::sum(float,int,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_temp(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::temp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::temp",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::temp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_temp",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &((gam::AudioIOData const *)arg1)->temp(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_tempBuffer(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::tempBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::tempBuffer",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_tempBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (float *)((gam::AudioIOData const *)arg1)->tempBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_user__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::user",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_user",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (void *)((gam::AudioIOData const *)arg1)->user();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_channelsIn(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIOData::channelsIn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::channelsIn",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_channelsIn",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (int)((gam::AudioIOData const *)arg1)->channelsIn();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_channelsOut(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIOData::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::channelsOut",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_channelsOut",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (int)((gam::AudioIOData const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_channelsBus(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIOData::channelsBus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::channelsBus",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_channelsBus",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (int)((gam::AudioIOData const *)arg1)->channelsBus();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_channelsInDevice(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIOData::channelsInDevice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::channelsInDevice",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_channelsInDevice",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (int)((gam::AudioIOData const *)arg1)->channelsInDevice();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_channelsOutDevice(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIOData::channelsOutDevice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::channelsOutDevice",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_channelsOutDevice",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (int)((gam::AudioIOData const *)arg1)->channelsOutDevice();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_framesPerBuffer(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIOData::framesPerBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::framesPerBuffer",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_framesPerBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (int)((gam::AudioIOData const *)arg1)->framesPerBuffer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_framesPerSecond(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::AudioIOData::framesPerSecond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::framesPerSecond",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_framesPerSecond",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (double)((gam::AudioIOData const *)arg1)->framesPerSecond();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_fps(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::AudioIOData::fps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::fps",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_fps",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (double)((gam::AudioIOData const *)arg1)->fps();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_secondsPerBuffer(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::AudioIOData::secondsPerBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::secondsPerBuffer",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_secondsPerBuffer",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (double)((gam::AudioIOData const *)arg1)->secondsPerBuffer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_time__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::AudioIOData::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::time",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_time",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (double)((gam::AudioIOData const *)arg1)->time();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_time__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("gam::AudioIOData::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::time",1,"gam::AudioIOData const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::time",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_time",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((gam::AudioIOData const *)arg1)->time(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_time(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIOData_time__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_time__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_time'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::time() const\n"
    "    gam::AudioIOData::time(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_user__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::user",1,"gam::AudioIOData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::AudioIOData::user",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_user",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"AudioIOData_user");
  (arg1)->user(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_user(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIOData_user__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AudioIOData_user__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_user'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::user() const\n"
    "    gam::AudioIOData::user(void *)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_frame__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gam::AudioIOData::frame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::frame",1,"gam::AudioIOData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::frame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_frame",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->frame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_frame(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIOData_frame__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIOData, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIOData_frame__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIOData_frame'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIOData::frame() const\n"
    "    gam::AudioIOData::frame(int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIOData_zeroBus(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::zeroBus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::zeroBus",1,"gam::AudioIOData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_zeroBus",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  (arg1)->zeroBus();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_zeroOut(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::zeroOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::zeroOut",1,"gam::AudioIOData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_zeroOut",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  (arg1)->zeroOut();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_gain(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float arg2 ;
  gam::AudioIOData *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIOData::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::gain",1,"gam::AudioIOData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::gain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_gain",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::AudioIOData *) &(arg1)->gain(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIOData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_usingGain(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIOData::usingGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::usingGain",1,"gam::AudioIOData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_usingGain",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (bool)((gam::AudioIOData const *)arg1)->usingGain();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_mGain_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AudioIOData::mGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::mGain",1,"gam::AudioIOData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::mGain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_mGain_set",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_mGain_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AudioIOData::mGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::mGain",1,"gam::AudioIOData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_mGain_get",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (float) ((arg1)->mGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_mGainPrev_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AudioIOData::mGainPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::mGainPrev",1,"gam::AudioIOData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIOData::mGainPrev",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_mGainPrev_set",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->mGainPrev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIOData_mGainPrev_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIOData *arg1 = (gam::AudioIOData *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AudioIOData::mGainPrev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIOData::mGainPrev",1,"gam::AudioIOData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioIOData_mGainPrev_get",1,SWIGTYPE_p_gam__AudioIOData);
  }
  
  result = (float) ((arg1)->mGainPrev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioIOData(void *obj) {
gam::AudioIOData *arg1 = (gam::AudioIOData *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioIOData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioIOData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioIOData_attributes[] = {
    { "mGain", _wrap_AudioIOData_mGain_get, _wrap_AudioIOData_mGain_set },
    { "mGainPrev", _wrap_AudioIOData_mGainPrev_get, _wrap_AudioIOData_mGainPrev_set },
    {0,0,0}
};
static swig_lua_method swig_AudioIOData_methods[]= {
    { "Tick", _wrap_AudioIOData_Tick},
    { "bus", _wrap_AudioIOData_bus},
    { "busBuffer", _wrap_AudioIOData_busBuffer},
    { "c_in", _wrap_AudioIOData_c_in},
    { "inBuffer", _wrap_AudioIOData_inBuffer},
    { "out", _wrap_AudioIOData_out},
    { "outBuffer", _wrap_AudioIOData_outBuffer},
    { "sum", _wrap_AudioIOData_sum},
    { "temp", _wrap_AudioIOData_temp},
    { "tempBuffer", _wrap_AudioIOData_tempBuffer},
    { "channelsIn", _wrap_AudioIOData_channelsIn},
    { "channelsOut", _wrap_AudioIOData_channelsOut},
    { "channelsBus", _wrap_AudioIOData_channelsBus},
    { "channelsInDevice", _wrap_AudioIOData_channelsInDevice},
    { "channelsOutDevice", _wrap_AudioIOData_channelsOutDevice},
    { "framesPerBuffer", _wrap_AudioIOData_framesPerBuffer},
    { "framesPerSecond", _wrap_AudioIOData_framesPerSecond},
    { "fps", _wrap_AudioIOData_fps},
    { "secondsPerBuffer", _wrap_AudioIOData_secondsPerBuffer},
    { "time", _wrap_AudioIOData_time},
    { "user", _wrap_AudioIOData_user},
    { "frame", _wrap_AudioIOData_frame},
    { "zeroBus", _wrap_AudioIOData_zeroBus},
    { "zeroOut", _wrap_AudioIOData_zeroOut},
    { "gain", _wrap_AudioIOData_gain},
    { "usingGain", _wrap_AudioIOData_usingGain},
    {0,0}
};
static swig_lua_method swig_AudioIOData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioIOData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioIOData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioIOData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioIOData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioIOData_Sf_SwigStatic = {
    "AudioIOData",
    swig_AudioIOData_Sf_SwigStatic_methods,
    swig_AudioIOData_Sf_SwigStatic_attributes,
    swig_AudioIOData_Sf_SwigStatic_constants,
    swig_AudioIOData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioIOData_bases[] = {0};
static const char *swig_AudioIOData_base_names[] = {0};
static swig_lua_class _wrap_class_AudioIOData = { "AudioIOData", "AudioIOData", &SWIGTYPE_p_gam__AudioIOData,_proxy__wrap_new_AudioIOData, swig_delete_AudioIOData, swig_AudioIOData_methods, swig_AudioIOData_attributes, &swig_AudioIOData_Sf_SwigStatic, swig_AudioIOData_meta, swig_AudioIOData_bases, swig_AudioIOData_base_names };

static int _wrap_new_AudioIO__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  void (*arg3)(gam::AudioIOData &) = (void (*)(gam::AudioIOData &)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::AudioIO",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioIO::AudioIO",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::AudioIO",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("gam::AudioIO::AudioIO",3,"void (*)(gam::AudioIOData &)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("gam::AudioIO::AudioIO",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::AudioIO::AudioIO",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("gam::AudioIO::AudioIO",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_r_gam__AudioIOData__void,0))){
    SWIG_fail_ptr("new_AudioIO",3,SWIGTYPE_p_f_r_gam__AudioIOData__void);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_AudioIO");
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (gam::AudioIO *)new gam::AudioIO(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioIO__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  void (*arg3)(gam::AudioIOData &) = (void (*)(gam::AudioIOData &)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::AudioIO",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioIO::AudioIO",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::AudioIO",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("gam::AudioIO::AudioIO",3,"void (*)(gam::AudioIOData &)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("gam::AudioIO::AudioIO",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::AudioIO::AudioIO",5,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_r_gam__AudioIOData__void,0))){
    SWIG_fail_ptr("new_AudioIO",3,SWIGTYPE_p_f_r_gam__AudioIOData__void);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_AudioIO");
  arg5 = (int)lua_tonumber(L, 5);
  result = (gam::AudioIO *)new gam::AudioIO(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioIO__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  void (*arg3)(gam::AudioIOData &) = (void (*)(gam::AudioIOData &)) 0 ;
  void *arg4 = (void *) 0 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::AudioIO",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioIO::AudioIO",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::AudioIO",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("gam::AudioIO::AudioIO",3,"void (*)(gam::AudioIOData &)");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("gam::AudioIO::AudioIO",4,"void *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_r_gam__AudioIOData__void,0))){
    SWIG_fail_ptr("new_AudioIO",3,SWIGTYPE_p_f_r_gam__AudioIOData__void);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_AudioIO");
  result = (gam::AudioIO *)new gam::AudioIO(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioIO__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  void (*arg3)(gam::AudioIOData &) = (void (*)(gam::AudioIOData &)) 0 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::AudioIO",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioIO::AudioIO",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::AudioIO",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("gam::AudioIO::AudioIO",3,"void (*)(gam::AudioIOData &)");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_f_r_gam__AudioIOData__void,0))){
    SWIG_fail_ptr("new_AudioIO",3,SWIGTYPE_p_f_r_gam__AudioIOData__void);
  }
  
  result = (gam::AudioIO *)new gam::AudioIO(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioIO__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::AudioIO",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioIO::AudioIO",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::AudioIO",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::AudioIO *)new gam::AudioIO(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioIO__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::AudioIO",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioIO::AudioIO",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (gam::AudioIO *)new gam::AudioIO(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioIO__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::AudioIO",0,0)
  result = (gam::AudioIO *)new gam::AudioIO();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioIO(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AudioIO__SWIG_6(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AudioIO__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AudioIO__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_r_gam__AudioIOData__void, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_AudioIO__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_r_gam__AudioIOData__void, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_AudioIO__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_r_gam__AudioIOData__void, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_AudioIO__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_f_r_gam__AudioIOData__void, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_AudioIO__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AudioIO'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::AudioIO(int,double,void (*)(gam::AudioIOData &),void *,int,int)\n"
    "    gam::AudioIO::AudioIO(int,double,void (*)(gam::AudioIOData &),void *,int)\n"
    "    gam::AudioIO::AudioIO(int,double,void (*)(gam::AudioIOData &),void *)\n"
    "    gam::AudioIO::AudioIO(int,double,void (*)(gam::AudioIOData &))\n"
    "    gam::AudioIO::AudioIO(int,double)\n"
    "    gam::AudioIO::AudioIO(int)\n"
    "    gam::AudioIO::AudioIO()\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_channelsIn__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIO::channelsIn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::channelsIn",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_channelsIn",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (int)((gam::AudioIO const *)arg1)->channelsIn();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_channelsOut__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIO::channelsOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::channelsOut",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_channelsOut",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (int)((gam::AudioIO const *)arg1)->channelsOut();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_framesPerBuffer__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIO::framesPerBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::framesPerBuffer",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_framesPerBuffer",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (int)((gam::AudioIO const *)arg1)->framesPerBuffer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_framesPerSecond__SWIG_0_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::AudioIO::framesPerSecond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::framesPerSecond",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_framesPerSecond",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (double)((gam::AudioIO const *)arg1)->framesPerSecond();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_append(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  AudioCallback *arg2 = 0 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::append",1,"gam::AudioIO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::AudioIO::append",2,"AudioCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_append",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioCallback,0))){
    SWIG_fail_ptr("AudioIO_append",2,SWIGTYPE_p_AudioCallback);
  }
  
  result = (gam::AudioIO *) &(arg1)->append(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_prepend(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  AudioCallback *arg2 = 0 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::prepend",1,"gam::AudioIO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::AudioIO::prepend",2,"AudioCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_prepend",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioCallback,0))){
    SWIG_fail_ptr("AudioIO_prepend",2,SWIGTYPE_p_AudioCallback);
  }
  
  result = (gam::AudioIO *) &(arg1)->prepend(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_remove(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  AudioCallback *arg2 = 0 ;
  gam::AudioIO *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::remove",1,"gam::AudioIO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::AudioIO::remove",2,"AudioCallback &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_remove",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioCallback,0))){
    SWIG_fail_ptr("AudioIO_remove",2,SWIGTYPE_p_AudioCallback);
  }
  
  result = (gam::AudioIO *) &(arg1)->remove(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AudioIO,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_autoZeroOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::autoZeroOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::autoZeroOut",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_autoZeroOut",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (bool)((gam::AudioIO const *)arg1)->autoZeroOut();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_channels__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("gam::AudioIO::channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::channels",1,"gam::AudioIO const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::AudioIO::channels",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_channels",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((gam::AudioIO const *)arg1)->channels(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_clipOut__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::clipOut",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::clipOut",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_clipOut",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (bool)((gam::AudioIO const *)arg1)->clipOut();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_cpu(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::AudioIO::cpu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::cpu",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_cpu",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (double)((gam::AudioIO const *)arg1)->cpu();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_supportsFPS(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::supportsFPS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::supportsFPS",1,"gam::AudioIO const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::supportsFPS",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_supportsFPS",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)((gam::AudioIO const *)arg1)->supportsFPS(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_zeroNANs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::zeroNANs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::zeroNANs",1,"gam::AudioIO const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_zeroNANs",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (bool)((gam::AudioIO const *)arg1)->zeroNANs();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_processAudio(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  
  SWIG_check_num_args("gam::AudioIO::processAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::processAudio",1,"gam::AudioIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_processAudio",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  (arg1)->processAudio();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_open(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::open",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::open",1,"gam::AudioIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_open",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (bool)(arg1)->open();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_close(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::close",1,"gam::AudioIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_close",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_start(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::start",1,"gam::AudioIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_start",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (bool)(arg1)->start();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_stop(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::AudioIO::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::stop",1,"gam::AudioIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_stop",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  result = (bool)(arg1)->stop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_autoZeroOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::autoZeroOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::autoZeroOut",1,"gam::AudioIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::AudioIO::autoZeroOut",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_autoZeroOut",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->autoZeroOut(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_autoZeroOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIO_autoZeroOut__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_autoZeroOut__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_autoZeroOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::autoZeroOut() const\n"
    "    gam::AudioIO::autoZeroOut(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_channels__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("gam::AudioIO::channels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::channels",1,"gam::AudioIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::channels",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gam::AudioIO::channels",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_channels",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->channels(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_channels(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_channels__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioIO_channels__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_channels'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::channels(bool) const\n"
    "    gam::AudioIO::channels(int,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_channelsIn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::channelsIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::channelsIn",1,"gam::AudioIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::channelsIn",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_channelsIn",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->channelsIn(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_channelsIn(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIO_channelsIn__SWIG_0_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_channelsIn__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_channelsIn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::channelsIn() const\n"
    "    gam::AudioIO::channelsIn(int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_channelsOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::channelsOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::channelsOut",1,"gam::AudioIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::channelsOut",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_channelsOut",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->channelsOut(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_channelsOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIO_channelsOut__SWIG_0_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_channelsOut__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_channelsOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::channelsOut() const\n"
    "    gam::AudioIO::channelsOut(int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_channelsBus(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::channelsBus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::channelsBus",1,"gam::AudioIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::channelsBus",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_channelsBus",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->channelsBus(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_clipOut__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::clipOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::clipOut",1,"gam::AudioIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::AudioIO::clipOut",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_clipOut",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->clipOut(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_clipOut(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIO_clipOut__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_clipOut__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_clipOut'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::clipOut() const\n"
    "    gam::AudioIO::clipOut(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_device(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  gam::AudioDevice *arg2 = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::device",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::device",1,"gam::AudioIO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::AudioIO::device",2,"gam::AudioDevice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_device",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioIO_device",2,SWIGTYPE_p_gam__AudioDevice);
  }
  
  (arg1)->device((gam::AudioDevice const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_deviceIn(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  gam::AudioDevice *arg2 = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::deviceIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::deviceIn",1,"gam::AudioIO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::AudioIO::deviceIn",2,"gam::AudioDevice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_deviceIn",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioIO_deviceIn",2,SWIGTYPE_p_gam__AudioDevice);
  }
  
  (arg1)->deviceIn((gam::AudioDevice const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_deviceOut(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  gam::AudioDevice *arg2 = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::deviceOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::deviceOut",1,"gam::AudioIO *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::AudioIO::deviceOut",2,"gam::AudioDevice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_deviceOut",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__AudioDevice,0))){
    SWIG_fail_ptr("AudioIO_deviceOut",2,SWIGTYPE_p_gam__AudioDevice);
  }
  
  (arg1)->deviceOut((gam::AudioDevice const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_framesPerSecond__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::framesPerSecond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::framesPerSecond",1,"gam::AudioIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::framesPerSecond",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_framesPerSecond",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->framesPerSecond(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_framesPerSecond(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIO_framesPerSecond__SWIG_0_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_framesPerSecond__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_framesPerSecond'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::framesPerSecond() const\n"
    "    gam::AudioIO::framesPerSecond(double)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_framesPerBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::framesPerBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::framesPerBuffer",1,"gam::AudioIO *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AudioIO::framesPerBuffer",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_framesPerBuffer",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->framesPerBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_framesPerBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIO_framesPerBuffer__SWIG_0_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_framesPerBuffer__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_framesPerBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::framesPerBuffer() const\n"
    "    gam::AudioIO::framesPerBuffer(int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_zeroNANs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gam::AudioIO::zeroNANs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::zeroNANs",1,"gam::AudioIO *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::AudioIO::zeroNANs",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_zeroNANs",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->zeroNANs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_zeroNANs(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AudioIO_zeroNANs__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AudioIO, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioIO_zeroNANs__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioIO_zeroNANs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AudioIO::zeroNANs() const\n"
    "    gam::AudioIO::zeroNANs(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioIO_print(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioIO *arg1 = (gam::AudioIO *) 0 ;
  
  SWIG_check_num_args("gam::AudioIO::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioIO::print",1,"gam::AudioIO *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioIO,0))){
    SWIG_fail_ptr("AudioIO_print",1,SWIGTYPE_p_gam__AudioIO);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioIO_errorText(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gam::AudioIO::errorText",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AudioIO::errorText",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (char *)gam::AudioIO::errorText(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioIO(void *obj) {
gam::AudioIO *arg1 = (gam::AudioIO *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioIO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioIO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioIO_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioIO_methods[]= {
    { "append", _wrap_AudioIO_append},
    { "prepend", _wrap_AudioIO_prepend},
    { "remove", _wrap_AudioIO_remove},
    { "cpu", _wrap_AudioIO_cpu},
    { "supportsFPS", _wrap_AudioIO_supportsFPS},
    { "processAudio", _wrap_AudioIO_processAudio},
    { "open", _wrap_AudioIO_open},
    { "close", _wrap_AudioIO_close},
    { "start", _wrap_AudioIO_start},
    { "stop", _wrap_AudioIO_stop},
    { "autoZeroOut", _wrap_AudioIO_autoZeroOut},
    { "channels", _wrap_AudioIO_channels},
    { "channelsIn", _wrap_AudioIO_channelsIn},
    { "channelsOut", _wrap_AudioIO_channelsOut},
    { "channelsBus", _wrap_AudioIO_channelsBus},
    { "clipOut", _wrap_AudioIO_clipOut},
    { "device", _wrap_AudioIO_device},
    { "deviceIn", _wrap_AudioIO_deviceIn},
    { "deviceOut", _wrap_AudioIO_deviceOut},
    { "framesPerSecond", _wrap_AudioIO_framesPerSecond},
    { "framesPerBuffer", _wrap_AudioIO_framesPerBuffer},
    { "zeroNANs", _wrap_AudioIO_zeroNANs},
    { "print", _wrap_AudioIO_print},
    {0,0}
};
static swig_lua_method swig_AudioIO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioIO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioIO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioIO_Sf_SwigStatic_methods[]= {
    { "errorText", _wrap_AudioIO_errorText},
    {0,0}
};
static swig_lua_class* swig_AudioIO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioIO_Sf_SwigStatic = {
    "AudioIO",
    swig_AudioIO_Sf_SwigStatic_methods,
    swig_AudioIO_Sf_SwigStatic_attributes,
    swig_AudioIO_Sf_SwigStatic_constants,
    swig_AudioIO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioIO_bases[] = {0,0};
static const char *swig_AudioIO_base_names[] = {"gam::AudioIOData *",0};
static swig_lua_class _wrap_class_AudioIO = { "AudioIO", "AudioIO", &SWIGTYPE_p_gam__AudioIO,_proxy__wrap_new_AudioIO, swig_delete_AudioIO, swig_AudioIO_methods, swig_AudioIO_attributes, &swig_AudioIO_Sf_SwigStatic, swig_AudioIO_meta, swig_AudioIO_bases, swig_AudioIO_base_names };

static int _wrap_AudioCallback_onAudio(lua_State* L) {
  int SWIG_arg = 0;
  gam::AudioCallback *arg1 = (gam::AudioCallback *) 0 ;
  gam::AudioIOData *arg2 = 0 ;
  
  SWIG_check_num_args("gam::AudioCallback::onAudio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AudioCallback::onAudio",1,"gam::AudioCallback *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::AudioCallback::onAudio",2,"gam::AudioIOData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AudioCallback,0))){
    SWIG_fail_ptr("AudioCallback_onAudio",1,SWIGTYPE_p_gam__AudioCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__AudioIOData,0))){
    SWIG_fail_ptr("AudioCallback_onAudio",2,SWIGTYPE_p_gam__AudioIOData);
  }
  
  (arg1)->onAudio(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioCallback(void *obj) {
gam::AudioCallback *arg1 = (gam::AudioCallback *) obj;
delete arg1;
}
static swig_lua_attribute swig_AudioCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioCallback_methods[]= {
    { "onAudio", _wrap_AudioCallback_onAudio},
    {0,0}
};
static swig_lua_method swig_AudioCallback_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioCallback_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioCallback_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioCallback_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioCallback_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioCallback_Sf_SwigStatic = {
    "AudioCallback",
    swig_AudioCallback_Sf_SwigStatic_methods,
    swig_AudioCallback_Sf_SwigStatic_attributes,
    swig_AudioCallback_Sf_SwigStatic_constants,
    swig_AudioCallback_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioCallback_bases[] = {0};
static const char *swig_AudioCallback_base_names[] = {0};
static swig_lua_class _wrap_class_AudioCallback = { "AudioCallback", "AudioCallback", &SWIGTYPE_p_gam__AudioCallback,0, swig_delete_AudioCallback, swig_AudioCallback_methods, swig_AudioCallback_attributes, &swig_AudioCallback_Sf_SwigStatic, swig_AudioCallback_meta, swig_AudioCallback_bases, swig_AudioCallback_base_names };

static int _wrap_LuaCallback_cb_set(lua_State* L) {
  int SWIG_arg = 0;
  LuaCallback *arg1 = (LuaCallback *) 0 ;
  SWIGLUA_REF arg2 ;
  
  SWIG_check_num_args("LuaCallback::cb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaCallback::cb",1,"LuaCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaCallback,0))){
    SWIG_fail_ptr("LuaCallback_cb_set",1,SWIGTYPE_p_LuaCallback);
  }
  
  swiglua_ref_set(&arg2,L,2); 
  if (arg1) (arg1)->cb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaCallback_cb_get(lua_State* L) {
  int SWIG_arg = 0;
  LuaCallback *arg1 = (LuaCallback *) 0 ;
  SWIGLUA_REF result;
  
  SWIG_check_num_args("LuaCallback::cb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaCallback::cb",1,"LuaCallback *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaCallback,0))){
    SWIG_fail_ptr("LuaCallback_cb_get",1,SWIGTYPE_p_LuaCallback);
  }
  
  result =  ((arg1)->cb);
  if ((&result)->L!=0)  {
    swiglua_ref_get(&result);
  } else {
    lua_pushnil(L);
  }
  SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaCallback_onAudio(lua_State* L) {
  int SWIG_arg = 0;
  LuaCallback *arg1 = (LuaCallback *) 0 ;
  AudioIOData *arg2 = 0 ;
  
  SWIG_check_num_args("LuaCallback::onAudio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaCallback::onAudio",1,"LuaCallback *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaCallback::onAudio",2,"AudioIOData &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaCallback,0))){
    SWIG_fail_ptr("LuaCallback_onAudio",1,SWIGTYPE_p_LuaCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_AudioIOData,0))){
    SWIG_fail_ptr("LuaCallback_onAudio",2,SWIGTYPE_p_AudioIOData);
  }
  
  (arg1)->onAudio(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaCallback(void *obj) {
LuaCallback *arg1 = (LuaCallback *) obj;
delete arg1;
}
static swig_lua_attribute swig_LuaCallback_attributes[] = {
    { "cb", _wrap_LuaCallback_cb_get, _wrap_LuaCallback_cb_set },
    {0,0,0}
};
static swig_lua_method swig_LuaCallback_methods[]= {
    { "onAudio", _wrap_LuaCallback_onAudio},
    {0,0}
};
static swig_lua_method swig_LuaCallback_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LuaCallback_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LuaCallback_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LuaCallback_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LuaCallback_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LuaCallback_Sf_SwigStatic = {
    "LuaCallback",
    swig_LuaCallback_Sf_SwigStatic_methods,
    swig_LuaCallback_Sf_SwigStatic_attributes,
    swig_LuaCallback_Sf_SwigStatic_constants,
    swig_LuaCallback_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LuaCallback_bases[] = {0,0};
static const char *swig_LuaCallback_base_names[] = {"gam::AudioCallback *",0};
static swig_lua_class _wrap_class_LuaCallback = { "LuaCallback", "LuaCallback", &SWIGTYPE_p_LuaCallback,0, swig_delete_LuaCallback, swig_LuaCallback_methods, swig_LuaCallback_attributes, &swig_LuaCallback_Sf_SwigStatic, swig_LuaCallback_meta, swig_LuaCallback_bases, swig_LuaCallback_base_names };

static int _wrap_new_Array__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  gam::Array< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Array< SampleType >::Array",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Array< SampleType >::Array",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (gam::Array< SampleType > *)new gam::Array< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Array__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::Array< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Array< SampleType >::Array",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Array< SampleType >::Array",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Array< SampleType >::Array",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::Array< SampleType > *)new gam::Array< SampleType >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Array__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  uint32_t arg2 ;
  gam::Array< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Array< SampleType >::Array",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Array< SampleType >::Array",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Array< SampleType >::Array",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_Array",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (gam::Array< SampleType > *)new gam::Array< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Array__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Array< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Array< SampleType >::Array",0,0)
  result = (gam::Array< SampleType > *)new gam::Array< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Array__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::Array< SampleType > *arg1 = 0 ;
  gam::Array< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Array< SampleType >::Array",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::Array< SampleType >::Array",1,"gam::Array< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayT_float_t,0))){
    SWIG_fail_ptr("new_Array",1,SWIGTYPE_p_gam__ArrayT_float_t);
  }
  
  result = (gam::Array< SampleType > *)new gam::Array< SampleType >((gam::Array< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Array(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Array__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Array__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Array__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Array__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Array__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Array'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Array< SampleType >::Array(uint32_t)\n"
    "    gam::Array< SampleType >::Array(uint32_t,float const &)\n"
    "    gam::Array< SampleType >::Array(float *,uint32_t)\n"
    "    gam::Array< SampleType >::Array()\n"
    "    gam::Array< SampleType >::Array(gam::Array< SampleType > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Array(void *obj) {
gam::Array< SampleType > *arg1 = (gam::Array< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Array(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Array);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Array_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Array_methods[]= {
    {0,0}
};
static swig_lua_method swig_Array_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Array_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Array_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Array_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Array_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Array_Sf_SwigStatic = {
    "Array",
    swig_Array_Sf_SwigStatic_methods,
    swig_Array_Sf_SwigStatic_attributes,
    swig_Array_Sf_SwigStatic_constants,
    swig_Array_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Array_bases[] = {0};
static const char *swig_Array_base_names[] = {0};
static swig_lua_class _wrap_class_Array = { "Array", "Array", &SWIGTYPE_p_gam__ArrayT_float_t,_proxy__wrap_new_Array, swig_delete_Array, swig_Array_methods, swig_Array_attributes, &swig_Array_Sf_SwigStatic, swig_Array_meta, swig_Array_bases, swig_Array_base_names };

static int _wrap_new_ArrayPow2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  gam::ArrayPow2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::ArrayPow2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::ArrayPow2",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (gam::ArrayPow2< SampleType > *)new gam::ArrayPow2< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayPow2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArrayPow2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::ArrayPow2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::ArrayPow2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::ArrayPow2",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::ArrayPow2",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::ArrayPow2< SampleType > *)new gam::ArrayPow2< SampleType >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayPow2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArrayPow2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  uint32_t arg2 ;
  gam::ArrayPow2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::ArrayPow2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::ArrayPow2",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::ArrayPow2",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_ArrayPow2",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (gam::ArrayPow2< SampleType > *)new gam::ArrayPow2< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayPow2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArrayPow2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::ArrayPow2",0,0)
  result = (gam::ArrayPow2< SampleType > *)new gam::ArrayPow2< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayPow2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArrayPow2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = 0 ;
  gam::ArrayPow2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::ArrayPow2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::ArrayPow2",1,"gam::ArrayPow2< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("new_ArrayPow2",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  result = (gam::ArrayPow2< SampleType > *)new gam::ArrayPow2< SampleType >((gam::ArrayPow2< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayPow2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArrayPow2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ArrayPow2__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ArrayPow2T_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ArrayPow2__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ArrayPow2__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ArrayPow2__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ArrayPow2__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ArrayPow2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ArrayPow2< SampleType >::ArrayPow2(uint32_t)\n"
    "    gam::ArrayPow2< SampleType >::ArrayPow2(uint32_t,float const &)\n"
    "    gam::ArrayPow2< SampleType >::ArrayPow2(float *,uint32_t)\n"
    "    gam::ArrayPow2< SampleType >::ArrayPow2()\n"
    "    gam::ArrayPow2< SampleType >::ArrayPow2(gam::ArrayPow2< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ArrayPow2_fracBits(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::fracBits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::fracBits",1,"gam::ArrayPow2< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("ArrayPow2_fracBits",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  result = (uint32_t)((gam::ArrayPow2< SampleType > const *)arg1)->fracBits();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrayPow2_fraction(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) 0 ;
  uint32_t arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::fraction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::fraction",1,"gam::ArrayPow2< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::fraction",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("ArrayPow2_fraction",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (float)((gam::ArrayPow2< SampleType > const *)arg1)->fraction(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrayPow2_index(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::index",1,"gam::ArrayPow2< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::index",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("ArrayPow2_index",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (uint32_t)((gam::ArrayPow2< SampleType > const *)arg1)->index(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrayPow2_log2Size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::log2Size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::log2Size",1,"gam::ArrayPow2< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("ArrayPow2_log2Size",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  result = (uint32_t)((gam::ArrayPow2< SampleType > const *)arg1)->log2Size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrayPow2_oneIndex(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::oneIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::oneIndex",1,"gam::ArrayPow2< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("ArrayPow2_oneIndex",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  result = (uint32_t)((gam::ArrayPow2< SampleType > const *)arg1)->oneIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrayPow2_atPhase(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) 0 ;
  uint32_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::atPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::atPhase",1,"gam::ArrayPow2< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::atPhase",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("ArrayPow2_atPhase",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (float *) &((gam::ArrayPow2< SampleType > const *)arg1)->atPhase(arg2);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ArrayPow2_putPhase(lua_State* L) {
  int SWIG_arg = 0;
  gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) 0 ;
  uint32_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::ArrayPow2< SampleType >::putPhase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::putPhase",1,"gam::ArrayPow2< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::putPhase",2,"uint32_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::ArrayPow2< SampleType >::putPhase",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("ArrayPow2_putPhase",1,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->putPhase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArrayPow2(void *obj) {
gam::ArrayPow2< SampleType > *arg1 = (gam::ArrayPow2< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ArrayPow2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ArrayPow2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ArrayPow2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ArrayPow2_methods[]= {
    { "fracBits", _wrap_ArrayPow2_fracBits},
    { "fraction", _wrap_ArrayPow2_fraction},
    { "index", _wrap_ArrayPow2_index},
    { "log2Size", _wrap_ArrayPow2_log2Size},
    { "oneIndex", _wrap_ArrayPow2_oneIndex},
    { "atPhase", _wrap_ArrayPow2_atPhase},
    { "putPhase", _wrap_ArrayPow2_putPhase},
    {0,0}
};
static swig_lua_method swig_ArrayPow2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ArrayPow2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ArrayPow2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ArrayPow2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ArrayPow2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ArrayPow2_Sf_SwigStatic = {
    "ArrayPow2",
    swig_ArrayPow2_Sf_SwigStatic_methods,
    swig_ArrayPow2_Sf_SwigStatic_attributes,
    swig_ArrayPow2_Sf_SwigStatic_constants,
    swig_ArrayPow2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ArrayPow2_bases[] = {0};
static const char *swig_ArrayPow2_base_names[] = {0};
static swig_lua_class _wrap_class_ArrayPow2 = { "ArrayPow2", "ArrayPow2", &SWIGTYPE_p_gam__ArrayPow2T_float_t,_proxy__wrap_new_ArrayPow2, swig_delete_ArrayPow2, swig_ArrayPow2_methods, swig_ArrayPow2_attributes, &swig_ArrayPow2_Sf_SwigStatic, swig_ArrayPow2_meta, swig_ArrayPow2_bases, swig_ArrayPow2_base_names };

static int _wrap_new_Ring__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::Ring< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::Ring",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::Ring",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::Ring",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::Ring< SampleType > *)new gam::Ring< SampleType >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__RingT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ring__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  gam::Ring< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::Ring",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::Ring",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (gam::Ring< SampleType > *)new gam::Ring< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__RingT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ring__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::Ring",0,0)
  result = (gam::Ring< SampleType > *)new gam::Ring< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__RingT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ring(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Ring__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Ring__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Ring__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Ring'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Ring< SampleType >::Ring(uint32_t,float const &)\n"
    "    gam::Ring< SampleType >::Ring(uint32_t)\n"
    "    gam::Ring< SampleType >::Ring()\n");
  lua_error(L);return 0;
}


static int _wrap_Ring_readBack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::readBack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::readBack",1,"gam::Ring< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_readBack",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (float *) &(arg1)->readBack();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_readBack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::readBack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::readBack",1,"gam::Ring< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_readBack",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (float *) &((gam::Ring< SampleType > const *)arg1)->readBack();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_readBack(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Ring_readBack__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Ring_readBack__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Ring_readBack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Ring< SampleType >::readBack()\n"
    "    gam::Ring< SampleType >::readBack() const\n");
  lua_error(L);return 0;
}


static int _wrap_Ring_readFront__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::readFront",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::readFront",1,"gam::Ring< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_readFront",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (float *) &(arg1)->readFront();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_readFront__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::readFront",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::readFront",1,"gam::Ring< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_readFront",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (float *) &((gam::Ring< SampleType > const *)arg1)->readFront();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_readFront(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Ring_readFront__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Ring_readFront__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Ring_readFront'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Ring< SampleType >::readFront()\n"
    "    gam::Ring< SampleType >::readFront() const\n");
  lua_error(L);return 0;
}


static int _wrap_Ring_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  uint32_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::read",1,"gam::Ring< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::read",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_read",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->read(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  uint32_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::read",1,"gam::Ring< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::read",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_read",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (float *) &((gam::Ring< SampleType > const *)arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *arg2 = (float *) 0 ;
  uint32_t arg3 ;
  int32_t arg4 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::read",1,"gam::Ring< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::read",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Ring< SampleType >::read",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Ring< SampleType >::read",4,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_read",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Ring_read",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  arg4 = (int32_t)lua_tonumber(L, 4);
  ((gam::Ring< SampleType > const *)arg1)->read(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_read__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *arg2 = (float *) 0 ;
  uint32_t arg3 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::read",1,"gam::Ring< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::read",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Ring< SampleType >::read",3,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_read",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Ring_read",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  ((gam::Ring< SampleType > const *)arg1)->read(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Ring_read__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Ring_read__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Ring_read__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Ring_read__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Ring_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Ring< SampleType >::read(uint32_t)\n"
    "    gam::Ring< SampleType >::read(uint32_t) const\n"
    "    gam::Ring< SampleType >::read(float *,uint32_t,int32_t) const\n"
    "    gam::Ring< SampleType >::read(float *,uint32_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_Ring_readFrom(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *arg2 = (float *) 0 ;
  uint32_t arg3 ;
  int32_t arg4 ;
  uint32_t arg5 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::readFrom",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::readFrom",1,"gam::Ring< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::readFrom",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Ring< SampleType >::readFrom",3,"uint32_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Ring< SampleType >::readFrom",4,"int32_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::Ring< SampleType >::readFrom",5,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_readFrom",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Ring_readFrom",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  arg4 = (int32_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (uint32_t)lua_tonumber(L, 5);
  ((gam::Ring< SampleType > const *)arg1)->readFrom(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_pos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Ring< SampleType >::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::pos",1,"gam::Ring< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_pos",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (uint32_t)((gam::Ring< SampleType > const *)arg1)->pos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_reachedEnd(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Ring< SampleType >::reachedEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::reachedEnd",1,"gam::Ring< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_reachedEnd",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (bool)((gam::Ring< SampleType > const *)arg1)->reachedEnd();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_indexBack(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Ring< SampleType >::indexBack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::indexBack",1,"gam::Ring< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_indexBack",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (uint32_t)((gam::Ring< SampleType > const *)arg1)->indexBack();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_indexFront(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Ring< SampleType >::indexFront",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::indexFront",1,"gam::Ring< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_indexFront",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  result = (uint32_t)((gam::Ring< SampleType > const *)arg1)->indexFront();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_indexPrev(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Ring< SampleType >::indexPrev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::indexPrev",1,"gam::Ring< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::indexPrev",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_indexPrev",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (uint32_t)((gam::Ring< SampleType > const *)arg1)->indexPrev(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::operator ()",1,"gam::Ring< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::operator ()",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring___call",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->operator ()((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_pos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::pos",1,"gam::Ring< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::pos",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_pos",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  (arg1)->pos(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_pos(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Ring_pos__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__RingT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Ring_pos__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Ring_pos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Ring< SampleType >::pos() const\n"
    "    gam::Ring< SampleType >::pos(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Ring_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::reset",1,"gam::Ring< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_reset",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ring_writeClip(lua_State* L) {
  int SWIG_arg = 0;
  gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("gam::Ring< SampleType >::writeClip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Ring< SampleType >::writeClip",1,"gam::Ring< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Ring< SampleType >::writeClip",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__RingT_float_t,0))){
    SWIG_fail_ptr("Ring_writeClip",1,SWIGTYPE_p_gam__RingT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->writeClip((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ring(void *obj) {
gam::Ring< SampleType > *arg1 = (gam::Ring< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Ring(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Ring);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Ring_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Ring_methods[]= {
    { "readBack", _wrap_Ring_readBack},
    { "readFront", _wrap_Ring_readFront},
    { "read", _wrap_Ring_read},
    { "readFrom", _wrap_Ring_readFrom},
    { "reachedEnd", _wrap_Ring_reachedEnd},
    { "indexBack", _wrap_Ring_indexBack},
    { "indexFront", _wrap_Ring_indexFront},
    { "indexPrev", _wrap_Ring_indexPrev},
    { "__call", _wrap_Ring___call},
    { "pos", _wrap_Ring_pos},
    { "reset", _wrap_Ring_reset},
    { "writeClip", _wrap_Ring_writeClip},
    {0,0}
};
static swig_lua_method swig_Ring_meta[] = {
    { "__call", _wrap_Ring___call},
    {0,0}
};

static swig_lua_attribute swig_Ring_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Ring_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Ring_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Ring_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Ring_Sf_SwigStatic = {
    "Ring",
    swig_Ring_Sf_SwigStatic_methods,
    swig_Ring_Sf_SwigStatic_attributes,
    swig_Ring_Sf_SwigStatic_constants,
    swig_Ring_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Ring_bases[] = {0,0};
static const char *swig_Ring_base_names[] = {"gam::Array< SampleType > *",0};
static swig_lua_class _wrap_class_Ring = { "Ring", "Ring", &SWIGTYPE_p_gam__RingT_float_t,_proxy__wrap_new_Ring, swig_delete_Ring, swig_Ring_methods, swig_Ring_attributes, &swig_Ring_Sf_SwigStatic, swig_Ring_meta, swig_Ring_bases, swig_Ring_base_names };

static int _wrap_new_DoubleRing__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::DoubleRing< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DoubleRing< SampleType >::DoubleRing",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DoubleRing< SampleType >::DoubleRing",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DoubleRing< SampleType >::DoubleRing",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::DoubleRing< SampleType > *)new gam::DoubleRing< SampleType >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DoubleRingT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRing__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  gam::DoubleRing< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DoubleRing< SampleType >::DoubleRing",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DoubleRing< SampleType >::DoubleRing",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (gam::DoubleRing< SampleType > *)new gam::DoubleRing< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DoubleRingT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRing__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::DoubleRing< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DoubleRing< SampleType >::DoubleRing",0,0)
  result = (gam::DoubleRing< SampleType > *)new gam::DoubleRing< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DoubleRingT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DoubleRing(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DoubleRing__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DoubleRing__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DoubleRing__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DoubleRing'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DoubleRing< SampleType >::DoubleRing(uint32_t,float const &)\n"
    "    gam::DoubleRing< SampleType >::DoubleRing(uint32_t)\n"
    "    gam::DoubleRing< SampleType >::DoubleRing()\n");
  lua_error(L);return 0;
}


static int _wrap_DoubleRing_readBuf(lua_State* L) {
  int SWIG_arg = 0;
  gam::DoubleRing< SampleType > *arg1 = (gam::DoubleRing< SampleType > *) 0 ;
  gam::Array< float > *result = 0 ;
  
  SWIG_check_num_args("gam::DoubleRing< SampleType >::readBuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DoubleRing< SampleType >::readBuf",1,"gam::DoubleRing< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DoubleRingT_float_t,0))){
    SWIG_fail_ptr("DoubleRing_readBuf",1,SWIGTYPE_p_gam__DoubleRingT_float_t);
  }
  
  result = (gam::Array< float > *) &((gam::DoubleRing< SampleType > const *)arg1)->readBuf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRing_read(lua_State* L) {
  int SWIG_arg = 0;
  gam::DoubleRing< SampleType > *arg1 = (gam::DoubleRing< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::DoubleRing< SampleType >::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DoubleRing< SampleType >::read",1,"gam::DoubleRing< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DoubleRingT_float_t,0))){
    SWIG_fail_ptr("DoubleRing_read",1,SWIGTYPE_p_gam__DoubleRingT_float_t);
  }
  
  result = (float *)(arg1)->read();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRing_copy(lua_State* L) {
  int SWIG_arg = 0;
  gam::DoubleRing< SampleType > *arg1 = (gam::DoubleRing< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::DoubleRing< SampleType >::copy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DoubleRing< SampleType >::copy",1,"gam::DoubleRing< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DoubleRingT_float_t,0))){
    SWIG_fail_ptr("DoubleRing_copy",1,SWIGTYPE_p_gam__DoubleRingT_float_t);
  }
  
  result = (float *)(arg1)->copy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleRing_resize(lua_State* L) {
  int SWIG_arg = 0;
  gam::DoubleRing< SampleType > *arg1 = (gam::DoubleRing< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gam::DoubleRing< SampleType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DoubleRing< SampleType >::resize",1,"gam::DoubleRing< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DoubleRing< SampleType >::resize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DoubleRingT_float_t,0))){
    SWIG_fail_ptr("DoubleRing_resize",1,SWIGTYPE_p_gam__DoubleRingT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DoubleRing(void *obj) {
gam::DoubleRing< SampleType > *arg1 = (gam::DoubleRing< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DoubleRing(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DoubleRing);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DoubleRing_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DoubleRing_methods[]= {
    { "readBuf", _wrap_DoubleRing_readBuf},
    { "read", _wrap_DoubleRing_read},
    { "copy", _wrap_DoubleRing_copy},
    { "resize", _wrap_DoubleRing_resize},
    {0,0}
};
static swig_lua_method swig_DoubleRing_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DoubleRing_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DoubleRing_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DoubleRing_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DoubleRing_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DoubleRing_Sf_SwigStatic = {
    "DoubleRing",
    swig_DoubleRing_Sf_SwigStatic_methods,
    swig_DoubleRing_Sf_SwigStatic_attributes,
    swig_DoubleRing_Sf_SwigStatic_constants,
    swig_DoubleRing_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DoubleRing_bases[] = {0,0};
static const char *swig_DoubleRing_base_names[] = {"gam::Ring< SampleType > *",0};
static swig_lua_class _wrap_class_DoubleRing = { "DoubleRing", "DoubleRing", &SWIGTYPE_p_gam__DoubleRingT_float_t,_proxy__wrap_new_DoubleRing, swig_delete_DoubleRing, swig_DoubleRing_methods, swig_DoubleRing_attributes, &swig_DoubleRing_Sf_SwigStatic, swig_DoubleRing_meta, swig_DoubleRing_bases, swig_DoubleRing_base_names };

static int _wrap_new_DelayN__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DelayN< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DelayN< SampleType >::DelayN",0,0)
  result = (gam::DelayN< SampleType > *)new gam::DelayN< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DelayNT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayN__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::DelayN< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DelayN< SampleType >::DelayN",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DelayN< SampleType >::DelayN",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DelayN< SampleType >::DelayN",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::DelayN< SampleType > *)new gam::DelayN< SampleType >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DelayNT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayN__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  gam::DelayN< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DelayN< SampleType >::DelayN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DelayN< SampleType >::DelayN",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (gam::DelayN< SampleType > *)new gam::DelayN< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DelayNT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayN(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DelayN__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DelayN__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DelayN__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DelayN'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DelayN< SampleType >::DelayN()\n"
    "    gam::DelayN< SampleType >::DelayN(uint32_t,float const &)\n"
    "    gam::DelayN< SampleType >::DelayN(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_DelayN___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::DelayN< SampleType > *arg1 = (gam::DelayN< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::DelayN< SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DelayN< SampleType >::__getitem__",1,"gam::DelayN< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DelayN< SampleType >::__getitem__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayNT_float_t,0))){
    SWIG_fail_ptr("DelayN___getitem",1,SWIGTYPE_p_gam__DelayNT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)gam_DelayN_Sl_SampleType_Sg____getitem____SWIG(arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DelayN(void *obj) {
gam::DelayN< SampleType > *arg1 = (gam::DelayN< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DelayN(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DelayN);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DelayN_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DelayN_methods[]= {
    { "__getitem", _wrap_DelayN___getitem},
    {0,0}
};
static swig_lua_method swig_DelayN_meta[] = {
    { "__getitem", _wrap_DelayN___getitem},
    {0,0}
};

static swig_lua_attribute swig_DelayN_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DelayN_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DelayN_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DelayN_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DelayN_Sf_SwigStatic = {
    "DelayN",
    swig_DelayN_Sf_SwigStatic_methods,
    swig_DelayN_Sf_SwigStatic_attributes,
    swig_DelayN_Sf_SwigStatic_constants,
    swig_DelayN_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DelayN_bases[] = {0,0};
static const char *swig_DelayN_base_names[] = {"gam::Ring< SampleType > *",0};
static swig_lua_class _wrap_class_DelayN = { "DelayN", "DelayN", &SWIGTYPE_p_gam__DelayNT_float_t,_proxy__wrap_new_DelayN, swig_delete_DelayN, swig_DelayN_methods, swig_DelayN_attributes, &swig_DelayN_Sf_SwigStatic, swig_DelayN_meta, swig_DelayN_bases, swig_DelayN_base_names };

static int _wrap_bits(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::bits",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gam::bits",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (uint32_t)gam::bits((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bitsToUInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::bitsToUInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gam::bitsToUInt",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (uint32_t)gam::bitsToUInt((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blockSubnormal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  
  SWIG_check_num_args("gam::blockSubnormal",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::blockSubnormal",1,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("blockSubnormal",1,SWIGTYPE_p_float);
  }
  
  gam::blockSubnormal(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blockSubnormal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  
  SWIG_check_num_args("gam::blockSubnormal",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::blockSubnormal",1,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("blockSubnormal",1,SWIGTYPE_p_double);
  }
  
  gam::blockSubnormal(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blockSubnormal(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_blockSubnormal__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_blockSubnormal__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'blockSubnormal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::blockSubnormal(float &)\n"
    "    gam::blockSubnormal(double &)\n");
  lua_error(L);return 0;
}


static int _wrap_castIntRound(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int32_t result;
  
  SWIG_check_num_args("gam::castIntRound",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::castIntRound",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (int32_t)gam::castIntRound(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatExponent(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::floatExponent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::floatExponent",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (uint32_t)gam::floatExponent(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatMantissa(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("gam::floatMantissa",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::floatMantissa",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)gam::floatMantissa(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatToInt(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int32_t result;
  
  SWIG_check_num_args("gam::floatToInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::floatToInt",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (int32_t)gam::floatToInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatToUInt(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::floatToUInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::floatToUInt",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (uint32_t)gam::floatToUInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fraction(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  float result;
  
  SWIG_check_num_args("gam::fraction",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::fraction",1,"uint32_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::fraction",2,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (float)gam::fraction(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intToUnit(lua_State* L) {
  int SWIG_arg = 0;
  int16_t arg1 ;
  float result;
  
  SWIG_check_num_args("gam::intToUnit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::intToUnit",1,"int16_t");
  arg1 = (int16_t)lua_tonumber(L, 1);
  result = (float)gam::intToUnit(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_punUF__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float result;
  
  SWIG_check_num_args("gam::punUF",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::punUF",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (float)gam::punUF(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_punFU__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::punFU",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::punFU",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (uint32_t)gam::punFU(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_punFI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int32_t result;
  
  SWIG_check_num_args("gam::punFI",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::punFI",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (int32_t)gam::punFI(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_punFI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int64_t result;
  
  SWIG_check_num_args("gam::punFI",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::punFI",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (int64_t)gam::punFI(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_punFI(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_punFI__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_punFI__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'punFI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::punFI(float)\n"
    "    gam::punFI(double)\n");
  lua_error(L);return 0;
}


static int _wrap_punFU__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  uint64_t result;
  
  SWIG_check_num_args("gam::punFU",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::punFU",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (uint64_t)gam::punFU(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_punFU(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_punFU__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_punFU__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'punFU'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::punFU(float)\n"
    "    gam::punFU(double)\n");
  lua_error(L);return 0;
}


static int _wrap_punUF__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint64_t arg1 ;
  double result;
  
  SWIG_check_num_args("gam::punUF",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::punUF",1,"uint64_t");
  arg1 = (uint64_t)lua_tonumber(L, 1);
  result = (double)gam::punUF(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_punUF(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_punUF__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_punUF__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'punUF'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::punUF(uint32_t)\n"
    "    gam::punUF(uint64_t)\n");
  lua_error(L);return 0;
}


static int _wrap_punIF(lua_State* L) {
  int SWIG_arg = 0;
  int64_t arg1 ;
  double result;
  
  SWIG_check_num_args("gam::punIF",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::punIF",1,"int64_t");
  arg1 = (int64_t)lua_tonumber(L, 1);
  result = (double)gam::punIF(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_split(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int32_t *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("gam::split",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::split",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::split",2,"int32_t &");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("split",2,SWIGTYPE_p_int);
  }
  
  result = (float)gam::split(arg1,*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unitToUInt(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::unitToUInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::unitToUInt",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (uint32_t)gam::unitToUInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unitToUInt2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::unitToUInt2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::unitToUInt2",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (uint32_t)gam::unitToUInt2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unitToUInt8(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint8_t result;
  
  SWIG_check_num_args("gam::unitToUInt8",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::unitToUInt8",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (uint8_t)gam::unitToUInt8(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_castIntTrunc(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  long result;
  
  SWIG_check_num_args("gam::castIntTrunc< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::castIntTrunc< SampleType >",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (long)gam::SWIGTEMPLATEDISAMBIGUATOR castIntTrunc< SampleType >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uintToUnit(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float result;
  
  SWIG_check_num_args("gam::uintToUnit< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::uintToUnit< SampleType >",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (float)gam::SWIGTEMPLATEDISAMBIGUATOR uintToUnit< SampleType >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uintToUnitS(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  float result;
  
  SWIG_check_num_args("gam::uintToUnitS< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::uintToUnitS< SampleType >",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (float)gam::SWIGTEMPLATEDISAMBIGUATOR uintToUnitS< SampleType >(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFT__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  gam::SpectralType arg3 ;
  unsigned int arg4 ;
  gam::DFT *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::DFT",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DFT::DFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DFT::DFT",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::DFT::DFT",3,"gam::SpectralType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::DFT::DFT",4,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (gam::SpectralType)(int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (gam::DFT *)new gam::DFT(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFT__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  gam::SpectralType arg3 ;
  gam::DFT *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::DFT",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DFT::DFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DFT::DFT",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::DFT::DFT",3,"gam::SpectralType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (gam::SpectralType)(int)lua_tonumber(L, 3);
  result = (gam::DFT *)new gam::DFT(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFT__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  gam::DFT *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::DFT",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DFT::DFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DFT::DFT",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::DFT *)new gam::DFT(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFT__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gam::DFT *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::DFT",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DFT::DFT",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (gam::DFT *)new gam::DFT(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFT__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::DFT",0,0)
  result = (gam::DFT *)new gam::DFT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DFT(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DFT__SWIG_4(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DFT__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DFT__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DFT__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DFT__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DFT'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DFT::DFT(unsigned int,unsigned int,gam::SpectralType,unsigned int)\n"
    "    gam::DFT::DFT(unsigned int,unsigned int,gam::SpectralType)\n"
    "    gam::DFT::DFT(unsigned int,unsigned int)\n"
    "    gam::DFT::DFT(unsigned int)\n"
    "    gam::DFT::DFT()\n");
  lua_error(L);return 0;
}


static int _wrap_DFT_spectrumType(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  gam::SpectralType arg2 ;
  gam::DFT *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::spectrumType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::spectrumType",1,"gam::DFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DFT::spectrumType",2,"gam::SpectralType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_spectrumType",1,SWIGTYPE_p_gam__DFT);
  }
  
  arg2 = (gam::SpectralType)(int)lua_tonumber(L, 2);
  result = (gam::DFT *) &(arg1)->spectrumType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DFT,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_precise(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  bool arg2 ;
  gam::DFT *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::precise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::precise",1,"gam::DFT *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::DFT::precise",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_precise",1,SWIGTYPE_p_gam__DFT);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (gam::DFT *) &(arg1)->precise(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DFT,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_resize(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("gam::DFT::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::resize",1,"gam::DFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DFT::resize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::DFT::resize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_resize",1,SWIGTYPE_p_gam__DFT);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_freqRes(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DFT::freqRes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::freqRes",1,"gam::DFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_freqRes",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (float)((gam::DFT const *)arg1)->freqRes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_overlap(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DFT::overlap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::overlap",1,"gam::DFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_overlap",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (float)((gam::DFT const *)arg1)->overlap();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_overlapping(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::DFT::overlapping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::overlapping",1,"gam::DFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_overlapping",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (bool)((gam::DFT const *)arg1)->overlapping();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_sizeHop(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::DFT::sizeHop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::sizeHop",1,"gam::DFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_sizeHop",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (unsigned int)((gam::DFT const *)arg1)->sizeHop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_sizePad(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::DFT::sizePad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::sizePad",1,"gam::DFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_sizePad",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (unsigned int)((gam::DFT const *)arg1)->sizePad();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_sizeWin(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::DFT::sizeWin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::sizeWin",1,"gam::DFT const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_sizeWin",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (unsigned int)((gam::DFT const *)arg1)->sizeWin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_domainHop(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  Domain *result = 0 ;
  
  SWIG_check_num_args("gam::DFT::domainHop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::domainHop",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_domainHop",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (Domain *) &(arg1)->domainHop();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Domain,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_Process(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::DFT::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::Process",1,"gam::DFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DFT::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_Process",1,SWIGTYPE_p_gam__DFT);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)gam_DFT_Process__SWIG(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DFT::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::Tick",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_Tick",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (float)gam_DFT_Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_forward__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("gam::DFT::forward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::forward",1,"gam::DFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::DFT::forward",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_forward",1,SWIGTYPE_p_gam__DFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DFT_forward",2,SWIGTYPE_p_float);
  }
  
  (arg1)->forward((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_forward__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  
  SWIG_check_num_args("gam::DFT::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::forward",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_forward",1,SWIGTYPE_p_gam__DFT);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_forward(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DFT_forward__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DFT_forward__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DFT_forward'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DFT::forward(float const *)\n"
    "    gam::DFT::forward()\n");
  lua_error(L);return 0;
}


static int _wrap_DFT_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("gam::DFT::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::inverse",1,"gam::DFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::DFT::inverse",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_inverse",1,SWIGTYPE_p_gam__DFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DFT_inverse",2,SWIGTYPE_p_float);
  }
  
  (arg1)->inverse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  
  SWIG_check_num_args("gam::DFT::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::inverse",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_inverse",1,SWIGTYPE_p_gam__DFT);
  }
  
  (arg1)->inverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_inverse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DFT_inverse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DFT_inverse__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DFT_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DFT::inverse(float *)\n"
    "    gam::DFT::inverse()\n");
  lua_error(L);return 0;
}


static int _wrap_DFT_inverseOnNext(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::DFT::inverseOnNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::inverseOnNext",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_inverseOnNext",1,SWIGTYPE_p_gam__DFT);
  }
  
  result = (bool)(arg1)->inverseOnNext();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_spctToRect(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  
  SWIG_check_num_args("gam::DFT::spctToRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::spctToRect",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_spctToRect",1,SWIGTYPE_p_gam__DFT);
  }
  
  (arg1)->spctToRect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_spctToPolar(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  
  SWIG_check_num_args("gam::DFT::spctToPolar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::spctToPolar",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_spctToPolar",1,SWIGTYPE_p_gam__DFT);
  }
  
  (arg1)->spctToPolar();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::DFT::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::onDomainChange",1,"gam::DFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DFT::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_onDomainChange",1,SWIGTYPE_p_gam__DFT);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("gam::DFT::print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::print",1,"gam::DFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::DFT::print",2,"FILE *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("gam::DFT::print",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_print",1,SWIGTYPE_p_gam__DFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("DFT_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->print(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("gam::DFT::print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::print",1,"gam::DFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::DFT::print",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_print",1,SWIGTYPE_p_gam__DFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("DFT_print",2,SWIGTYPE_p_FILE);
  }
  
  (arg1)->print(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_print__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::DFT *arg1 = (gam::DFT *) 0 ;
  
  SWIG_check_num_args("gam::DFT::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DFT::print",1,"gam::DFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DFT,0))){
    SWIG_fail_ptr("DFT_print",1,SWIGTYPE_p_gam__DFT);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFT_print(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DFT_print__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DFT_print__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_DFT_print__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DFT_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DFT::print(FILE *,char const *)\n"
    "    gam::DFT::print(FILE *)\n"
    "    gam::DFT::print()\n");
  lua_error(L);return 0;
}


static void swig_delete_DFT(void *obj) {
gam::DFT *arg1 = (gam::DFT *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DFT_methods[]= {
    { "spectrumType", _wrap_DFT_spectrumType},
    { "precise", _wrap_DFT_precise},
    { "resize", _wrap_DFT_resize},
    { "freqRes", _wrap_DFT_freqRes},
    { "overlap", _wrap_DFT_overlap},
    { "overlapping", _wrap_DFT_overlapping},
    { "sizeHop", _wrap_DFT_sizeHop},
    { "sizePad", _wrap_DFT_sizePad},
    { "sizeWin", _wrap_DFT_sizeWin},
    { "domainHop", _wrap_DFT_domainHop},
    { "Process", _wrap_DFT_Process},
    { "Tick", _wrap_DFT_Tick},
    { "forward", _wrap_DFT_forward},
    { "inverse", _wrap_DFT_inverse},
    { "inverseOnNext", _wrap_DFT_inverseOnNext},
    { "spctToRect", _wrap_DFT_spctToRect},
    { "spctToPolar", _wrap_DFT_spctToPolar},
    { "onDomainChange", _wrap_DFT_onDomainChange},
    { "print", _wrap_DFT_print},
    {0,0}
};
static swig_lua_method swig_DFT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFT_Sf_SwigStatic = {
    "DFT",
    swig_DFT_Sf_SwigStatic_methods,
    swig_DFT_Sf_SwigStatic_attributes,
    swig_DFT_Sf_SwigStatic_constants,
    swig_DFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFT_bases[] = {0};
static const char *swig_DFT_base_names[] = {0};
static swig_lua_class _wrap_class_DFT = { "DFT", "DFT", &SWIGTYPE_p_gam__DFT,_proxy__wrap_new_DFT, swig_delete_DFT, swig_DFT_methods, swig_DFT_attributes, &swig_DFT_Sf_SwigStatic, swig_DFT_meta, swig_DFT_bases, swig_DFT_base_names };

static int _wrap_new_STFT__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  WindowType arg4 ;
  gam::SpectralType arg5 ;
  unsigned int arg6 ;
  WindowType *argp4 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::STFT",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::STFT::STFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::STFT",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::STFT::STFT",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gam::STFT::STFT",4,"WindowType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::STFT::STFT",5,"gam::SpectralType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("gam::STFT::STFT",6,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_WindowType,0))){
    SWIG_fail_ptr("new_STFT",4,SWIGTYPE_p_WindowType);
  }
  arg4 = *argp4;
  
  arg5 = (gam::SpectralType)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (unsigned int)lua_tonumber(L, 6);
  result = (gam::STFT *)new gam::STFT(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STFT__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  WindowType arg4 ;
  gam::SpectralType arg5 ;
  WindowType *argp4 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::STFT",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::STFT::STFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::STFT",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::STFT::STFT",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gam::STFT::STFT",4,"WindowType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::STFT::STFT",5,"gam::SpectralType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_WindowType,0))){
    SWIG_fail_ptr("new_STFT",4,SWIGTYPE_p_WindowType);
  }
  arg4 = *argp4;
  
  arg5 = (gam::SpectralType)(int)lua_tonumber(L, 5);
  result = (gam::STFT *)new gam::STFT(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STFT__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  WindowType arg4 ;
  WindowType *argp4 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::STFT",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::STFT::STFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::STFT",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::STFT::STFT",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gam::STFT::STFT",4,"WindowType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_WindowType,0))){
    SWIG_fail_ptr("new_STFT",4,SWIGTYPE_p_WindowType);
  }
  arg4 = *argp4;
  
  result = (gam::STFT *)new gam::STFT(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STFT__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::STFT",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::STFT::STFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::STFT",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::STFT::STFT",3,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (gam::STFT *)new gam::STFT(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STFT__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::STFT",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::STFT::STFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::STFT",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::STFT *)new gam::STFT(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STFT__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::STFT",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::STFT::STFT",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (gam::STFT *)new gam::STFT(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STFT__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::STFT",0,0)
  result = (gam::STFT *)new gam::STFT();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_STFT(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_STFT__SWIG_6(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_STFT__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_STFT__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_STFT__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_WindowType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_STFT__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_WindowType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_STFT__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_WindowType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_STFT__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_STFT'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::STFT::STFT(unsigned int,unsigned int,unsigned int,WindowType,gam::SpectralType,unsigned int)\n"
    "    gam::STFT::STFT(unsigned int,unsigned int,unsigned int,WindowType,gam::SpectralType)\n"
    "    gam::STFT::STFT(unsigned int,unsigned int,unsigned int,WindowType)\n"
    "    gam::STFT::STFT(unsigned int,unsigned int,unsigned int)\n"
    "    gam::STFT::STFT(unsigned int,unsigned int)\n"
    "    gam::STFT::STFT(unsigned int)\n"
    "    gam::STFT::STFT()\n");
  lua_error(L);return 0;
}


static int _wrap_STFT___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::STFT::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::operator ()",1,"gam::STFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT___call",1,SWIGTYPE_p_gam__STFT);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)(arg1)->operator ()(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::STFT::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::Tick",1,"gam::STFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_Tick",1,SWIGTYPE_p_gam__STFT);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)gam_STFT_Tick__SWIG(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_forward__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("gam::STFT::forward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::forward",1,"gam::STFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::STFT::forward",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_forward",1,SWIGTYPE_p_gam__STFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("STFT_forward",2,SWIGTYPE_p_float);
  }
  
  (arg1)->forward((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_forward__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  
  SWIG_check_num_args("gam::STFT::forward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::forward",1,"gam::STFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_forward",1,SWIGTYPE_p_gam__STFT);
  }
  
  (arg1)->forward();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_forward(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__STFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_STFT_forward__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__STFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_STFT_forward__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'STFT_forward'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::STFT::forward(float const *)\n"
    "    gam::STFT::forward()\n");
  lua_error(L);return 0;
}


static int _wrap_STFT_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("gam::STFT::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::inverse",1,"gam::STFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::STFT::inverse",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_inverse",1,SWIGTYPE_p_gam__STFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("STFT_inverse",2,SWIGTYPE_p_float);
  }
  
  (arg1)->inverse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  
  SWIG_check_num_args("gam::STFT::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::inverse",1,"gam::STFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_inverse",1,SWIGTYPE_p_gam__STFT);
  }
  
  (arg1)->inverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_inverse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__STFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_STFT_inverse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__STFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_STFT_inverse__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'STFT_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::STFT::inverse(float *)\n"
    "    gam::STFT::inverse()\n");
  lua_error(L);return 0;
}


static int _wrap_STFT_resize(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("gam::STFT::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::resize",1,"gam::STFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::resize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::STFT::resize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_resize",1,SWIGTYPE_p_gam__STFT);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_inverseWindowing(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  bool arg2 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::inverseWindowing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::inverseWindowing",1,"gam::STFT *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::STFT::inverseWindowing",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_inverseWindowing",1,SWIGTYPE_p_gam__STFT);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (gam::STFT *) &(arg1)->inverseWindowing(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_rotateForward(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  bool arg2 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::rotateForward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::rotateForward",1,"gam::STFT *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::STFT::rotateForward",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_rotateForward",1,SWIGTYPE_p_gam__STFT);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (gam::STFT *) &(arg1)->rotateForward(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_sizeHop(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  unsigned int arg2 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::sizeHop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::sizeHop",1,"gam::STFT *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::STFT::sizeHop",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_sizeHop",1,SWIGTYPE_p_gam__STFT);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::STFT *) &(arg1)->sizeHop(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_windowType(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  WindowType arg2 ;
  WindowType *argp2 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::windowType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::windowType",1,"gam::STFT *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::STFT::windowType",2,"WindowType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_windowType",1,SWIGTYPE_p_gam__STFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_WindowType,0))){
    SWIG_fail_ptr("STFT_windowType",2,SWIGTYPE_p_WindowType);
  }
  arg2 = *argp2;
  
  result = (gam::STFT *) &(arg1)->windowType(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_unitsHop(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::STFT::unitsHop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::unitsHop",1,"gam::STFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_unitsHop",1,SWIGTYPE_p_gam__STFT);
  }
  
  result = (double)(arg1)->unitsHop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_phases(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::phases",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::phases",1,"gam::STFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_phases",1,SWIGTYPE_p_gam__STFT);
  }
  
  result = (float *)(arg1)->phases();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_accumPhases(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::accumPhases",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::accumPhases",1,"gam::STFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_accumPhases",1,SWIGTYPE_p_gam__STFT);
  }
  
  result = (double *)(arg1)->accumPhases();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_resetPhases(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  gam::STFT *result = 0 ;
  
  SWIG_check_num_args("gam::STFT::resetPhases",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::resetPhases",1,"gam::STFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_resetPhases",1,SWIGTYPE_p_gam__STFT);
  }
  
  result = (gam::STFT *) &(arg1)->resetPhases();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__STFT,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("gam::STFT::print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::print",1,"gam::STFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::STFT::print",2,"FILE *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("gam::STFT::print",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_print",1,SWIGTYPE_p_gam__STFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("STFT_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->print(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("gam::STFT::print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::print",1,"gam::STFT *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::STFT::print",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_print",1,SWIGTYPE_p_gam__STFT);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("STFT_print",2,SWIGTYPE_p_FILE);
  }
  
  (arg1)->print(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_print__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::STFT *arg1 = (gam::STFT *) 0 ;
  
  SWIG_check_num_args("gam::STFT::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::STFT::print",1,"gam::STFT *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__STFT,0))){
    SWIG_fail_ptr("STFT_print",1,SWIGTYPE_p_gam__STFT);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STFT_print(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__STFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_STFT_print__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__STFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_STFT_print__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__STFT, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_STFT_print__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'STFT_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::STFT::print(FILE *,char const *)\n"
    "    gam::STFT::print(FILE *)\n"
    "    gam::STFT::print()\n");
  lua_error(L);return 0;
}


static void swig_delete_STFT(void *obj) {
gam::STFT *arg1 = (gam::STFT *) obj;
delete arg1;
}
static int _proxy__wrap_new_STFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_STFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_STFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_STFT_methods[]= {
    { "__call", _wrap_STFT___call},
    { "Tick", _wrap_STFT_Tick},
    { "forward", _wrap_STFT_forward},
    { "inverse", _wrap_STFT_inverse},
    { "resize", _wrap_STFT_resize},
    { "inverseWindowing", _wrap_STFT_inverseWindowing},
    { "rotateForward", _wrap_STFT_rotateForward},
    { "sizeHop", _wrap_STFT_sizeHop},
    { "windowType", _wrap_STFT_windowType},
    { "unitsHop", _wrap_STFT_unitsHop},
    { "phases", _wrap_STFT_phases},
    { "accumPhases", _wrap_STFT_accumPhases},
    { "resetPhases", _wrap_STFT_resetPhases},
    { "print", _wrap_STFT_print},
    {0,0}
};
static swig_lua_method swig_STFT_meta[] = {
    { "__call", _wrap_STFT___call},
    {0,0}
};

static swig_lua_attribute swig_STFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_STFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_STFT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_STFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_STFT_Sf_SwigStatic = {
    "STFT",
    swig_STFT_Sf_SwigStatic_methods,
    swig_STFT_Sf_SwigStatic_attributes,
    swig_STFT_Sf_SwigStatic_constants,
    swig_STFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_STFT_bases[] = {0,0};
static const char *swig_STFT_base_names[] = {"gam::DFT *",0};
static swig_lua_class _wrap_class_STFT = { "STFT", "STFT", &SWIGTYPE_p_gam__STFT,_proxy__wrap_new_STFT, swig_delete_STFT, swig_STFT_methods, swig_STFT_attributes, &swig_STFT_Sf_SwigStatic, swig_STFT_meta, swig_STFT_bases, swig_STFT_base_names };

static int _wrap_new_SlidingWindow(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  gam::SlidingWindow< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::SlidingWindow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::SlidingWindow",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::SlidingWindow",2,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::SlidingWindow< SampleType > *)new gam::SlidingWindow< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SlidingWindowT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_resize(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::resize",1,"gam::SlidingWindow< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::resize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::resize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_resize",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_sizeHop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::sizeHop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::sizeHop",1,"gam::SlidingWindow< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::sizeHop",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_sizeHop",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->sizeHop(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_sizeWin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::sizeWin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::sizeWin",1,"gam::SlidingWindow< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::sizeWin",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_sizeWin",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->sizeWin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_sizeHop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::sizeHop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::sizeHop",1,"gam::SlidingWindow< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_sizeHop",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  result = (unsigned int)((gam::SlidingWindow< SampleType > const *)arg1)->sizeHop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_sizeHop(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SlidingWindowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SlidingWindow_sizeHop__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SlidingWindowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SlidingWindow_sizeHop__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SlidingWindow_sizeHop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SlidingWindow< SampleType >::sizeHop(unsigned int)\n"
    "    gam::SlidingWindow< SampleType >::sizeHop() const\n");
  lua_error(L);return 0;
}


static int _wrap_SlidingWindow_sizeWin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::sizeWin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::sizeWin",1,"gam::SlidingWindow< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_sizeWin",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  result = (unsigned int)((gam::SlidingWindow< SampleType > const *)arg1)->sizeWin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_sizeWin(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SlidingWindowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SlidingWindow_sizeWin__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SlidingWindowT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SlidingWindow_sizeWin__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SlidingWindow_sizeWin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SlidingWindow< SampleType >::sizeWin(unsigned int)\n"
    "    gam::SlidingWindow< SampleType >::sizeWin() const\n");
  lua_error(L);return 0;
}


static int _wrap_SlidingWindow_window(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::window",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::window",1,"gam::SlidingWindow< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_window",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  result = (float *)(arg1)->window();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_Get(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::Get",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::Get",1,"gam::SlidingWindow< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_Get",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  result = (float *)gam_SlidingWindow_Sl_SampleType_Sg__Get__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::Tick",1,"gam::SlidingWindow< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_Tick",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)gam_SlidingWindow_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingWindow_Process(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("gam::SlidingWindow< SampleType >::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::Process",1,"gam::SlidingWindow< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::Process",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SlidingWindow< SampleType >::Process",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingWindowT_float_t,0))){
    SWIG_fail_ptr("SlidingWindow_Process",1,SWIGTYPE_p_gam__SlidingWindowT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SlidingWindow_Process",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)gam_SlidingWindow_Sl_SampleType_Sg__Process__SWIG(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SlidingWindow(void *obj) {
gam::SlidingWindow< SampleType > *arg1 = (gam::SlidingWindow< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SlidingWindow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SlidingWindow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SlidingWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SlidingWindow_methods[]= {
    { "resize", _wrap_SlidingWindow_resize},
    { "sizeHop", _wrap_SlidingWindow_sizeHop},
    { "sizeWin", _wrap_SlidingWindow_sizeWin},
    { "window", _wrap_SlidingWindow_window},
    { "Get", _wrap_SlidingWindow_Get},
    { "Tick", _wrap_SlidingWindow_Tick},
    { "Process", _wrap_SlidingWindow_Process},
    {0,0}
};
static swig_lua_method swig_SlidingWindow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SlidingWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SlidingWindow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SlidingWindow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SlidingWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SlidingWindow_Sf_SwigStatic = {
    "SlidingWindow",
    swig_SlidingWindow_Sf_SwigStatic_methods,
    swig_SlidingWindow_Sf_SwigStatic_attributes,
    swig_SlidingWindow_Sf_SwigStatic_constants,
    swig_SlidingWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SlidingWindow_bases[] = {0};
static const char *swig_SlidingWindow_base_names[] = {0};
static swig_lua_class _wrap_class_SlidingWindow = { "SlidingWindow", "SlidingWindow", &SWIGTYPE_p_gam__SlidingWindowT_float_t,_proxy__wrap_new_SlidingWindow, swig_delete_SlidingWindow, swig_SlidingWindow_methods, swig_SlidingWindow_attributes, &swig_SlidingWindow_Sf_SwigStatic, swig_SlidingWindow_meta, swig_SlidingWindow_bases, swig_SlidingWindow_base_names };

static int _wrap_new_SlidingDFT(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  gam::SlidingDFT< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SlidingDFT< SampleType >::SlidingDFT",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::SlidingDFT",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::SlidingDFT",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::SlidingDFT",3,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (gam::SlidingDFT< SampleType > *)new gam::SlidingDFT< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SlidingDFTT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingDFT_forward(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingDFT< SampleType > *arg1 = (gam::SlidingDFT< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SlidingDFT< SampleType >::forward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::forward",1,"gam::SlidingDFT< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::forward",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingDFTT_float_t,0))){
    SWIG_fail_ptr("SlidingDFT_forward",1,SWIGTYPE_p_gam__SlidingDFTT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->forward(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingDFT_interval(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingDFT< SampleType > *arg1 = (gam::SlidingDFT< SampleType > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  gam::SlidingDFT< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SlidingDFT< SampleType >::interval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::interval",1,"gam::SlidingDFT< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::interval",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::interval",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingDFTT_float_t,0))){
    SWIG_fail_ptr("SlidingDFT_interval",1,SWIGTYPE_p_gam__SlidingDFTT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (gam::SlidingDFT< SampleType > *) &(arg1)->interval(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SlidingDFTT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SlidingDFT_resize(lua_State* L) {
  int SWIG_arg = 0;
  gam::SlidingDFT< SampleType > *arg1 = (gam::SlidingDFT< SampleType > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("gam::SlidingDFT< SampleType >::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::resize",1,"gam::SlidingDFT< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::resize",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::resize",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SlidingDFT< SampleType >::resize",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SlidingDFTT_float_t,0))){
    SWIG_fail_ptr("SlidingDFT_resize",1,SWIGTYPE_p_gam__SlidingDFTT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (arg1)->resize(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SlidingDFT(void *obj) {
gam::SlidingDFT< SampleType > *arg1 = (gam::SlidingDFT< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SlidingDFT(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SlidingDFT);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SlidingDFT_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SlidingDFT_methods[]= {
    { "forward", _wrap_SlidingDFT_forward},
    { "interval", _wrap_SlidingDFT_interval},
    { "resize", _wrap_SlidingDFT_resize},
    {0,0}
};
static swig_lua_method swig_SlidingDFT_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SlidingDFT_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SlidingDFT_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SlidingDFT_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SlidingDFT_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SlidingDFT_Sf_SwigStatic = {
    "SlidingDFT",
    swig_SlidingDFT_Sf_SwigStatic_methods,
    swig_SlidingDFT_Sf_SwigStatic_attributes,
    swig_SlidingDFT_Sf_SwigStatic_constants,
    swig_SlidingDFT_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SlidingDFT_bases[] = {0};
static const char *swig_SlidingDFT_base_names[] = {0};
static swig_lua_class _wrap_class_SlidingDFT = { "SlidingDFT", "SlidingDFT", &SWIGTYPE_p_gam__SlidingDFTT_float_t,_proxy__wrap_new_SlidingDFT, swig_delete_SlidingDFT, swig_SlidingDFT_methods, swig_SlidingDFT_attributes, &swig_SlidingDFT_Sf_SwigStatic, swig_SlidingDFT_meta, swig_SlidingDFT_bases, swig_SlidingDFT_base_names };

static int _wrap_new_Delay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::Delay",0,0)
  result = (gam::Delay< SampleType > *)new gam::Delay< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Delay< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::Delay",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::Delay",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Delay< SampleType > *)new gam::Delay< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Delay< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::Delay",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::Delay",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::Delay",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Delay< SampleType > *)new gam::Delay< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Delay__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Delay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Delay__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Delay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::Delay()\n"
    "    gam::Delay< SampleType >::Delay(float)\n"
    "    gam::Delay< SampleType >::Delay(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_delay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delay",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::delay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delay",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->delay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delaySamples__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delaySamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delaySamples",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::delaySamples",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delaySamples",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  (arg1)->delaySamples(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delaySamplesR__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delaySamplesR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delaySamplesR",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::delaySamplesR",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delaySamplesR",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->delaySamplesR(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delayUnit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delayUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delayUnit",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::delayUnit",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delayUnit",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->delayUnit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::freq",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_freq",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_ipolType(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  ipl::Type arg2 ;
  ipl::Type *argp2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::ipolType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::ipolType",1,"gam::Delay< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::ipolType",2,"ipl::Type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_ipolType",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ipl__Type,0))){
    SWIG_fail_ptr("Delay_ipolType",2,SWIGTYPE_p_ipl__Type);
  }
  arg2 = *argp2;
  
  (arg1)->ipolType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_maxDelay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::maxDelay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::maxDelay",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::maxDelay",2,"float");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("gam::Delay< SampleType >::maxDelay",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_maxDelay",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->maxDelay(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_maxDelay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::maxDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::maxDelay",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::maxDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_maxDelay",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->maxDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::operator ()",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::operator ()",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay___call",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)(arg1)->operator ()((float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::operator ()",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay___call",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Delay< SampleType > const *)arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay___call(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Delay___call__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay___call__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::operator ()(float const &)\n"
    "    gam::Delay< SampleType >::operator ()() const\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_read(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::read",1,"gam::Delay< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::read",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_read",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::Delay< SampleType > const *)arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_write(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::write",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::write",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_write",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->write((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delay",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delay",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Delay< SampleType > const *)arg1)->delay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Delay_delay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay_delay__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay_delay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::delay(float)\n"
    "    gam::Delay< SampleType >::delay() const\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_delaySamples__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delaySamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delaySamples",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delaySamples",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)((gam::Delay< SampleType > const *)arg1)->delaySamples();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delaySamples(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Delay_delaySamples__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay_delaySamples__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay_delaySamples'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::delaySamples(uint32_t)\n"
    "    gam::Delay< SampleType >::delaySamples() const\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_delaySamplesR__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delaySamplesR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delaySamplesR",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delaySamplesR",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Delay< SampleType > const *)arg1)->delaySamplesR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delaySamplesR(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Delay_delaySamplesR__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay_delaySamplesR__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay_delaySamplesR'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::delaySamplesR(float)\n"
    "    gam::Delay< SampleType >::delaySamplesR() const\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_delayUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delayUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delayUnit",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delayUnit",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Delay< SampleType > const *)arg1)->delayUnit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_delayUnit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Delay_delayUnit__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay_delayUnit__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay_delayUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::delayUnit(float)\n"
    "    gam::Delay< SampleType >::delayUnit() const\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_delayIndex(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::delayIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::delayIndex",1,"gam::Delay< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::delayIndex",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_delayIndex",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (uint32_t)((gam::Delay< SampleType > const *)arg1)->delayIndex(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::freq",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_freq",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Delay< SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Delay_freq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay_freq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::freq(float)\n"
    "    gam::Delay< SampleType >::freq() const\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_indexBack(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::indexBack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::indexBack",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_indexBack",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)((gam::Delay< SampleType > const *)arg1)->indexBack();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_maxDelay__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Delay< SampleType >::maxDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::maxDelay",1,"gam::Delay< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_maxDelay",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Delay< SampleType > const *)arg1)->maxDelay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_maxDelay(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Delay_maxDelay__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Delay_maxDelay__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Delay_maxDelay__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Delay_maxDelay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay< SampleType >::maxDelay(float,bool)\n"
    "    gam::Delay< SampleType >::maxDelay(float)\n"
    "    gam::Delay< SampleType >::maxDelay() const\n");
  lua_error(L);return 0;
}


static int _wrap_Delay_onResize(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::onResize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::onResize",1,"gam::Delay< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_onResize",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->onResize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::onDomainChange",1,"gam::Delay< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_onDomainChange",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Delay_print(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Delay< SampleType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Delay< SampleType >::print",1,"gam::Delay< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Delay_print",1,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Delay(void *obj) {
gam::Delay< SampleType > *arg1 = (gam::Delay< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Delay(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Delay);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Delay_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Delay_methods[]= {
    { "ipolType", _wrap_Delay_ipolType},
    { "__call", _wrap_Delay___call},
    { "read", _wrap_Delay_read},
    { "write", _wrap_Delay_write},
    { "delay", _wrap_Delay_delay},
    { "delaySamples", _wrap_Delay_delaySamples},
    { "delaySamplesR", _wrap_Delay_delaySamplesR},
    { "delayUnit", _wrap_Delay_delayUnit},
    { "delayIndex", _wrap_Delay_delayIndex},
    { "freq", _wrap_Delay_freq},
    { "indexBack", _wrap_Delay_indexBack},
    { "maxDelay", _wrap_Delay_maxDelay},
    { "onResize", _wrap_Delay_onResize},
    { "onDomainChange", _wrap_Delay_onDomainChange},
    { "print", _wrap_Delay_print},
    {0,0}
};
static swig_lua_method swig_Delay_meta[] = {
    { "__call", _wrap_Delay___call},
    {0,0}
};

static swig_lua_attribute swig_Delay_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Delay_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Delay_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Delay_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Delay_Sf_SwigStatic = {
    "Delay",
    swig_Delay_Sf_SwigStatic_methods,
    swig_Delay_Sf_SwigStatic_attributes,
    swig_Delay_Sf_SwigStatic_constants,
    swig_Delay_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Delay_bases[] = {0};
static const char *swig_Delay_base_names[] = {0};
static swig_lua_class _wrap_class_Delay = { "Delay", "Delay", &SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Delay, swig_delete_Delay, swig_Delay_methods, swig_Delay_attributes, &swig_Delay_Sf_SwigStatic, swig_Delay_meta, swig_Delay_bases, swig_Delay_base_names };

static int _wrap_new_Multitap(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  unsigned int arg2 ;
  gam::Multitap< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Multitap< SampleType >::Multitap",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Multitap< SampleType >::Multitap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Multitap< SampleType >::Multitap",2,"unsigned int");
  arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::Multitap< SampleType > *)new gam::Multitap< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multitap_taps__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Multitap< SampleType > *arg1 = (gam::Multitap< SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::Multitap< SampleType >::taps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Multitap< SampleType >::taps",1,"gam::Multitap< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Multitap_taps",1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (unsigned int)((gam::Multitap< SampleType > const *)arg1)->taps();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multitap_read(lua_State* L) {
  int SWIG_arg = 0;
  gam::Multitap< SampleType > *arg1 = (gam::Multitap< SampleType > *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Multitap< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Multitap< SampleType >::read",1,"gam::Multitap< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Multitap< SampleType >::read",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Multitap_read",1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)((gam::Multitap< SampleType > const *)arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multitap_delay(lua_State* L) {
  int SWIG_arg = 0;
  gam::Multitap< SampleType > *arg1 = (gam::Multitap< SampleType > *) 0 ;
  float arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("gam::Multitap< SampleType >::delay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Multitap< SampleType >::delay",1,"gam::Multitap< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Multitap< SampleType >::delay",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Multitap< SampleType >::delay",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Multitap_delay",1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->delay(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multitap_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Multitap< SampleType > *arg1 = (gam::Multitap< SampleType > *) 0 ;
  float arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("gam::Multitap< SampleType >::freq",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Multitap< SampleType >::freq",1,"gam::Multitap< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Multitap< SampleType >::freq",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Multitap< SampleType >::freq",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Multitap_freq",1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->freq(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multitap_taps__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Multitap< SampleType > *arg1 = (gam::Multitap< SampleType > *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("gam::Multitap< SampleType >::taps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Multitap< SampleType >::taps",1,"gam::Multitap< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Multitap< SampleType >::taps",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Multitap_taps",1,SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->taps(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Multitap_taps(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Multitap_taps__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Multitap_taps__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Multitap_taps'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Multitap< SampleType >::taps() const\n"
    "    gam::Multitap< SampleType >::taps(unsigned int)\n");
  lua_error(L);return 0;
}


static void swig_delete_Multitap(void *obj) {
gam::Multitap< SampleType > *arg1 = (gam::Multitap< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Multitap(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Multitap);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Multitap_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Multitap_methods[]= {
    { "read", _wrap_Multitap_read},
    { "delay", _wrap_Multitap_delay},
    { "freq", _wrap_Multitap_freq},
    { "taps", _wrap_Multitap_taps},
    {0,0}
};
static swig_lua_method swig_Multitap_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Multitap_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Multitap_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Multitap_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Multitap_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Multitap_SwigStatic = {
    "Multitap",
    swig_Multitap_SwigStatic_methods,
    swig_Multitap_SwigStatic_attributes,
    swig_Multitap_SwigStatic_constants,
    swig_Multitap_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Multitap_bases[] = {0,0};
static const char *swig_Multitap_base_names[] = {"gam::Delay< SampleType > *",0};
static swig_lua_class _wrap_class_Multitap = { "Multitap", "Multitap", &SWIGTYPE_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Multitap, swig_delete_Multitap, swig_Multitap_methods, swig_Multitap_attributes, &swig_Multitap_SwigStatic, swig_Multitap_meta, swig_Multitap_bases, swig_Multitap_base_names };

static int _wrap_new_Delay1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::Delay1< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay1< SampleType >::Delay1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Delay1< SampleType >::Delay1",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::Delay1< SampleType > *)new gam::Delay1< SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Delay1T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay1< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay1< SampleType >::Delay1",0,0)
  result = (gam::Delay1< SampleType > *)new gam::Delay1< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Delay1T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay1(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Delay1__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Delay1__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Delay1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay1< SampleType >::Delay1(float const &)\n"
    "    gam::Delay1< SampleType >::Delay1()\n");
  lua_error(L);return 0;
}


static void swig_delete_Delay1(void *obj) {
gam::Delay1< SampleType > *arg1 = (gam::Delay1< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Delay1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Delay1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Delay1_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Delay1_methods[]= {
    {0,0}
};
static swig_lua_method swig_Delay1_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Delay1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Delay1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Delay1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Delay1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Delay1_Sf_SwigStatic = {
    "Delay1",
    swig_Delay1_Sf_SwigStatic_methods,
    swig_Delay1_Sf_SwigStatic_attributes,
    swig_Delay1_Sf_SwigStatic_constants,
    swig_Delay1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Delay1_bases[] = {0};
static const char *swig_Delay1_base_names[] = {0};
static swig_lua_class _wrap_class_Delay1 = { "Delay1", "Delay1", &SWIGTYPE_p_gam__Delay1T_float_t,_proxy__wrap_new_Delay1, swig_delete_Delay1, swig_Delay1_methods, swig_Delay1_attributes, &swig_Delay1_Sf_SwigStatic, swig_Delay1_meta, swig_Delay1_bases, swig_Delay1_base_names };

static int _wrap_new_Delay2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::Delay2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay2< SampleType >::Delay2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Delay2< SampleType >::Delay2",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::Delay2< SampleType > *)new gam::Delay2< SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Delay2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Delay2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay2< SampleType >::Delay2",0,0)
  result = (gam::Delay2< SampleType > *)new gam::Delay2< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Delay2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  gam::Delay2< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Delay2< SampleType >::Delay2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Delay2< SampleType >::Delay2",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Delay2< SampleType >::Delay2",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::Delay2< SampleType > *)new gam::Delay2< SampleType >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Delay2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Delay2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Delay2__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Delay2__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Delay2__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Delay2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Delay2< SampleType >::Delay2(float const &)\n"
    "    gam::Delay2< SampleType >::Delay2()\n"
    "    gam::Delay2< SampleType >::Delay2(float const &,float const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Delay2(void *obj) {
gam::Delay2< SampleType > *arg1 = (gam::Delay2< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Delay2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Delay2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Delay2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Delay2_methods[]= {
    {0,0}
};
static swig_lua_method swig_Delay2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Delay2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Delay2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Delay2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Delay2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Delay2_Sf_SwigStatic = {
    "Delay2",
    swig_Delay2_Sf_SwigStatic_methods,
    swig_Delay2_Sf_SwigStatic_attributes,
    swig_Delay2_Sf_SwigStatic_constants,
    swig_Delay2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Delay2_bases[] = {0};
static const char *swig_Delay2_base_names[] = {0};
static swig_lua_class _wrap_class_Delay2 = { "Delay2", "Delay2", &SWIGTYPE_p_gam__Delay2T_float_t,_proxy__wrap_new_Delay2, swig_delete_Delay2, swig_Delay2_methods, swig_Delay2_attributes, &swig_Delay2_Sf_SwigStatic, swig_Delay2_meta, swig_Delay2_bases, swig_Delay2_base_names };

static int _wrap_new_Comb__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::Comb",0,0)
  result = (gam::Comb< SampleType > *)new gam::Comb< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comb__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  gam::Comb< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::Comb",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",3,"float const &");
  arg1 = (float)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (gam::Comb< SampleType > *)new gam::Comb< SampleType >(arg1,(float const &)*arg2,(float const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comb__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  gam::Comb< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::Comb",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",2,"float const &");
  arg1 = (float)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (gam::Comb< SampleType > *)new gam::Comb< SampleType >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comb__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Comb< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::Comb",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Comb< SampleType > *)new gam::Comb< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comb__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float temp3 ;
  float temp4 ;
  gam::Comb< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::Comb",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",3,"float const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Comb< SampleType >::Comb",4,"float const &");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  temp4=(float)lua_tonumber(L,4); arg4=&temp4;
  result = (gam::Comb< SampleType > *)new gam::Comb< SampleType >(arg1,arg2,(float const &)*arg3,(float const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Comb(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Comb__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Comb__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Comb__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Comb__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Comb__SWIG_4(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Comb'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Comb< SampleType >::Comb()\n"
    "    gam::Comb< SampleType >::Comb(float,float const &,float const &)\n"
    "    gam::Comb< SampleType >::Comb(float,float const &)\n"
    "    gam::Comb< SampleType >::Comb(float)\n"
    "    gam::Comb< SampleType >::Comb(float,float,float const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Comb_decay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::decay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::decay",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::decay",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::decay",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_decay",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->decay(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_decay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::decay",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::decay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_decay",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->decay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_decay(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Comb_decay__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Comb_decay__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Comb_decay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Comb< SampleType >::decay(float,float)\n"
    "    gam::Comb< SampleType >::decay(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Comb_allPass(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::allPass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::allPass",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::allPass",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_allPass",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->allPass((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_fbk__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::fbk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::fbk",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::fbk",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_fbk",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->fbk((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_ffd__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::ffd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::ffd",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::ffd",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_ffd",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->ffd((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_feeds(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::feeds",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::feeds",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::feeds",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::feeds",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_feeds",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->feeds((float const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float temp3 ;
  float temp4 ;
  
  SWIG_check_num_args("gam::Comb< SampleType >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::set",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::set",3,"float const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Comb< SampleType >::set",4,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_set",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  temp4=(float)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->set(arg2,(float const &)*arg3,(float const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::operator ()",1,"gam::Comb< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb___call",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::operator ()",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::operator ()",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb___call",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)(arg1)->operator ()((float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb___call__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::operator ()",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::operator ()",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::operator ()",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb___call",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)(arg1)->operator ()((float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb___call(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Comb___call__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Comb___call__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Comb___call__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Comb___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Comb< SampleType >::operator ()()\n"
    "    gam::Comb< SampleType >::operator ()(float const &)\n"
    "    gam::Comb< SampleType >::operator ()(float const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Comb_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::Tick",1,"gam::Comb< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_Tick",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_Comb_Sl_SampleType_Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_flter(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::flter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::flter",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::flter",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::flter",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_flter",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)gam_Comb_Sl_SampleType_Sg__flter__SWIG(arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_filter(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::filter",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::filter",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_filter",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)gam_Comb_Sl_SampleType_Sg__filter__SWIG(arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_circulateFbk(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::circulateFbk",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::circulateFbk",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::circulateFbk",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Comb< SampleType >::circulateFbk",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_circulateFbk",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)(arg1)->circulateFbk((float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_nextFbk(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::nextFbk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::nextFbk",1,"gam::Comb< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Comb< SampleType >::nextFbk",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_nextFbk",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)(arg1)->nextFbk((float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_norm(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::norm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::norm",1,"gam::Comb< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_norm",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Comb< SampleType > const *)arg1)->norm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_normFbk(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::normFbk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::normFbk",1,"gam::Comb< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_normFbk",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Comb< SampleType > const *)arg1)->normFbk();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_normFfd(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::normFfd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::normFfd",1,"gam::Comb< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_normFfd",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Comb< SampleType > const *)arg1)->normFfd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_ffd__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::ffd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::ffd",1,"gam::Comb< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_ffd",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Comb< SampleType > const *)arg1)->ffd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_ffd(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Comb_ffd__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Comb_ffd__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Comb_ffd'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Comb< SampleType >::ffd(float const &)\n"
    "    gam::Comb< SampleType >::ffd() const\n");
  lua_error(L);return 0;
}


static int _wrap_Comb_fbk__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Comb< SampleType >::fbk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Comb< SampleType >::fbk",1,"gam::Comb< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Comb_fbk",1,SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Comb< SampleType > const *)arg1)->fbk();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_fbk(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Comb_fbk__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Comb_fbk__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Comb_fbk'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Comb< SampleType >::fbk(float const &)\n"
    "    gam::Comb< SampleType >::fbk() const\n");
  lua_error(L);return 0;
}


static void swig_delete_Comb(void *obj) {
gam::Comb< SampleType > *arg1 = (gam::Comb< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Comb(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Comb);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Comb_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Comb_methods[]= {
    { "decay", _wrap_Comb_decay},
    { "allPass", _wrap_Comb_allPass},
    { "feeds", _wrap_Comb_feeds},
    { "set", _wrap_Comb_set},
    { "__call", _wrap_Comb___call},
    { "Tick", _wrap_Comb_Tick},
    { "flter", _wrap_Comb_flter},
    { "filter", _wrap_Comb_filter},
    { "circulateFbk", _wrap_Comb_circulateFbk},
    { "nextFbk", _wrap_Comb_nextFbk},
    { "norm", _wrap_Comb_norm},
    { "normFbk", _wrap_Comb_normFbk},
    { "normFfd", _wrap_Comb_normFfd},
    { "ffd", _wrap_Comb_ffd},
    { "fbk", _wrap_Comb_fbk},
    {0,0}
};
static swig_lua_method swig_Comb_meta[] = {
    { "__call", _wrap_Comb___call},
    {0,0}
};

static swig_lua_attribute swig_Comb_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Comb_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Comb_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Comb_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Comb_Sf_SwigStatic = {
    "Comb",
    swig_Comb_Sf_SwigStatic_methods,
    swig_Comb_Sf_SwigStatic_attributes,
    swig_Comb_Sf_SwigStatic_constants,
    swig_Comb_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Comb_bases[] = {0,0};
static const char *swig_Comb_base_names[] = {"gam::Delay< SampleType > *",0};
static swig_lua_class _wrap_class_Comb = { "Comb", "Comb", &SWIGTYPE_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Comb, swig_delete_Comb, swig_Comb_methods, swig_Comb_attributes, &swig_Comb_Sf_SwigStatic, swig_Comb_meta, swig_Comb_bases, swig_Comb_base_names };

static int _wrap_Domain1_spu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *arg1 = (gam::Domain1 *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::Domain1::spu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain1::spu",1,"gam::Domain1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain1,0))){
    SWIG_fail_ptr("Domain1_spu",1,SWIGTYPE_p_gam__Domain1);
  }
  
  result = (double)((gam::Domain1 const *)arg1)->spu();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain1_ups__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *arg1 = (gam::Domain1 *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::Domain1::ups",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain1::ups",1,"gam::Domain1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain1,0))){
    SWIG_fail_ptr("Domain1_ups",1,SWIGTYPE_p_gam__Domain1);
  }
  
  result = (double)((gam::Domain1 const *)arg1)->ups();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain1_domain(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *arg1 = (gam::Domain1 *) 0 ;
  gam::Domain1 *result = 0 ;
  
  SWIG_check_num_args("gam::Domain1::domain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain1::domain",1,"gam::Domain1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain1,0))){
    SWIG_fail_ptr("Domain1_domain",1,SWIGTYPE_p_gam__Domain1);
  }
  
  result = (gam::Domain1 *)((gam::Domain1 const *)arg1)->domain();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Domain1,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain1_hasBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *arg1 = (gam::Domain1 *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Domain1::hasBeenSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain1::hasBeenSet",1,"gam::Domain1 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain1,0))){
    SWIG_fail_ptr("Domain1_hasBeenSet",1,SWIGTYPE_p_gam__Domain1);
  }
  
  result = (bool)((gam::Domain1 const *)arg1)->hasBeenSet();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain1_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *arg1 = (gam::Domain1 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Domain1::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain1::onDomainChange",1,"gam::Domain1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Domain1::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain1,0))){
    SWIG_fail_ptr("Domain1_onDomainChange",1,SWIGTYPE_p_gam__Domain1);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain1_spu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *arg1 = (gam::Domain1 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Domain1::spu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain1::spu",1,"gam::Domain1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Domain1::spu",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain1,0))){
    SWIG_fail_ptr("Domain1_spu",1,SWIGTYPE_p_gam__Domain1);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->spu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain1_spu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Domain1_spu__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Domain1_spu__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Domain1_spu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Domain1::spu() const\n"
    "    gam::Domain1::spu(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Domain1_ups__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *arg1 = (gam::Domain1 *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Domain1::ups",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain1::ups",1,"gam::Domain1 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Domain1::ups",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain1,0))){
    SWIG_fail_ptr("Domain1_ups",1,SWIGTYPE_p_gam__Domain1);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->ups(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain1_ups(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Domain1_ups__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain1, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Domain1_ups__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Domain1_ups'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Domain1::ups() const\n"
    "    gam::Domain1::ups(double)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Domain1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain1 *result = 0 ;
  
  SWIG_check_num_args("gam::Domain1::Domain1",0,0)
  result = (gam::Domain1 *)new gam::Domain1();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Domain1,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Domain1(void *obj) {
gam::Domain1 *arg1 = (gam::Domain1 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Domain1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Domain1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Domain1_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Domain1_methods[]= {
    { "domain", _wrap_Domain1_domain},
    { "hasBeenSet", _wrap_Domain1_hasBeenSet},
    { "onDomainChange", _wrap_Domain1_onDomainChange},
    { "spu", _wrap_Domain1_spu},
    { "ups", _wrap_Domain1_ups},
    {0,0}
};
static swig_lua_method swig_Domain1_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Domain1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Domain1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Domain1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Domain1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Domain1_Sf_SwigStatic = {
    "Domain1",
    swig_Domain1_Sf_SwigStatic_methods,
    swig_Domain1_Sf_SwigStatic_attributes,
    swig_Domain1_Sf_SwigStatic_constants,
    swig_Domain1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Domain1_bases[] = {0};
static const char *swig_Domain1_base_names[] = {0};
static swig_lua_class _wrap_class_Domain1 = { "Domain1", "Domain1", &SWIGTYPE_p_gam__Domain1,_proxy__wrap_new_Domain1, swig_delete_Domain1, swig_Domain1_methods, swig_Domain1_attributes, &swig_Domain1_Sf_SwigStatic, swig_Domain1_meta, swig_Domain1_bases, swig_Domain1_base_names };

static int _wrap_new_DomainObserver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DomainObserver *result = 0 ;
  
  SWIG_check_num_args("gam::DomainObserver::DomainObserver",0,0)
  result = (gam::DomainObserver *)new gam::DomainObserver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DomainObserver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DomainObserver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DomainObserver *arg1 = 0 ;
  gam::DomainObserver *result = 0 ;
  
  SWIG_check_num_args("gam::DomainObserver::DomainObserver",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::DomainObserver::DomainObserver",1,"gam::DomainObserver const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DomainObserver,0))){
    SWIG_fail_ptr("new_DomainObserver",1,SWIGTYPE_p_gam__DomainObserver);
  }
  
  result = (gam::DomainObserver *)new gam::DomainObserver((gam::DomainObserver const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DomainObserver,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DomainObserver(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DomainObserver__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DomainObserver, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DomainObserver__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DomainObserver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DomainObserver::DomainObserver()\n"
    "    gam::DomainObserver::DomainObserver(gam::DomainObserver const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DomainObserver_spu(lua_State* L) {
  int SWIG_arg = 0;
  gam::DomainObserver *arg1 = (gam::DomainObserver *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::DomainObserver::spu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DomainObserver::spu",1,"gam::DomainObserver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DomainObserver,0))){
    SWIG_fail_ptr("DomainObserver_spu",1,SWIGTYPE_p_gam__DomainObserver);
  }
  
  result = (double)((gam::DomainObserver const *)arg1)->spu();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DomainObserver_ups(lua_State* L) {
  int SWIG_arg = 0;
  gam::DomainObserver *arg1 = (gam::DomainObserver *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::DomainObserver::ups",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DomainObserver::ups",1,"gam::DomainObserver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DomainObserver,0))){
    SWIG_fail_ptr("DomainObserver_ups",1,SWIGTYPE_p_gam__DomainObserver);
  }
  
  result = (double)((gam::DomainObserver const *)arg1)->ups();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DomainObserver_domain__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DomainObserver *arg1 = (gam::DomainObserver *) 0 ;
  Domain *result = 0 ;
  
  SWIG_check_num_args("gam::DomainObserver::domain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DomainObserver::domain",1,"gam::DomainObserver const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DomainObserver,0))){
    SWIG_fail_ptr("DomainObserver_domain",1,SWIGTYPE_p_gam__DomainObserver);
  }
  
  result = (Domain *)((gam::DomainObserver const *)arg1)->domain();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Domain,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DomainObserver_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::DomainObserver *arg1 = (gam::DomainObserver *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::DomainObserver::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DomainObserver::onDomainChange",1,"gam::DomainObserver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DomainObserver::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DomainObserver,0))){
    SWIG_fail_ptr("DomainObserver_onDomainChange",1,SWIGTYPE_p_gam__DomainObserver);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DomainObserver_domain__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DomainObserver *arg1 = (gam::DomainObserver *) 0 ;
  Domain *arg2 = 0 ;
  
  SWIG_check_num_args("gam::DomainObserver::domain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DomainObserver::domain",1,"gam::DomainObserver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::DomainObserver::domain",2,"Domain &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DomainObserver,0))){
    SWIG_fail_ptr("DomainObserver_domain",1,SWIGTYPE_p_gam__DomainObserver);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Domain,0))){
    SWIG_fail_ptr("DomainObserver_domain",2,SWIGTYPE_p_Domain);
  }
  
  (arg1)->domain(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DomainObserver_domain(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DomainObserver, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DomainObserver_domain__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DomainObserver, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Domain, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DomainObserver_domain__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DomainObserver_domain'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DomainObserver::domain() const\n"
    "    gam::DomainObserver::domain(Domain &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DomainObserver(void *obj) {
gam::DomainObserver *arg1 = (gam::DomainObserver *) obj;
delete arg1;
}
static int _proxy__wrap_new_DomainObserver(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DomainObserver);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DomainObserver_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DomainObserver_methods[]= {
    { "spu", _wrap_DomainObserver_spu},
    { "ups", _wrap_DomainObserver_ups},
    { "onDomainChange", _wrap_DomainObserver_onDomainChange},
    { "domain", _wrap_DomainObserver_domain},
    {0,0}
};
static swig_lua_method swig_DomainObserver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DomainObserver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DomainObserver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DomainObserver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DomainObserver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DomainObserver_Sf_SwigStatic = {
    "DomainObserver",
    swig_DomainObserver_Sf_SwigStatic_methods,
    swig_DomainObserver_Sf_SwigStatic_attributes,
    swig_DomainObserver_Sf_SwigStatic_constants,
    swig_DomainObserver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DomainObserver_bases[] = {0};
static const char *swig_DomainObserver_base_names[] = {0};
static swig_lua_class _wrap_class_DomainObserver = { "DomainObserver", "DomainObserver", &SWIGTYPE_p_gam__DomainObserver,_proxy__wrap_new_DomainObserver, swig_delete_DomainObserver, swig_DomainObserver_methods, swig_DomainObserver_attributes, &swig_DomainObserver_Sf_SwigStatic, swig_DomainObserver_meta, swig_DomainObserver_bases, swig_DomainObserver_base_names };

static int _wrap_new_Domain__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *result = 0 ;
  
  SWIG_check_num_args("gam::Domain::Domain",0,0)
  result = (gam::Domain *)new gam::Domain();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Domain,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Domain__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::Domain *result = 0 ;
  
  SWIG_check_num_args("gam::Domain::Domain",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Domain::Domain",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::Domain *)new gam::Domain(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Domain,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Domain(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Domain__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Domain__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Domain'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Domain::Domain()\n"
    "    gam::Domain::Domain(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Domain_notifyObservers(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *arg1 = (gam::Domain *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Domain::notifyObservers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain::notifyObservers",1,"gam::Domain *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Domain::notifyObservers",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain,0))){
    SWIG_fail_ptr("Domain_notifyObservers",1,SWIGTYPE_p_gam__Domain);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->notifyObservers(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain_spu__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *arg1 = (gam::Domain *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Domain::spu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain::spu",1,"gam::Domain *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Domain::spu",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain,0))){
    SWIG_fail_ptr("Domain_spu",1,SWIGTYPE_p_gam__Domain);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->spu(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain_ups__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *arg1 = (gam::Domain *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Domain::ups",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain::ups",1,"gam::Domain *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Domain::ups",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain,0))){
    SWIG_fail_ptr("Domain_ups",1,SWIGTYPE_p_gam__Domain);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->ups(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain_hasBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *arg1 = (gam::Domain *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Domain::hasBeenSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain::hasBeenSet",1,"gam::Domain const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain,0))){
    SWIG_fail_ptr("Domain_hasBeenSet",1,SWIGTYPE_p_gam__Domain);
  }
  
  result = (bool)((gam::Domain const *)arg1)->hasBeenSet();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain_spu__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *arg1 = (gam::Domain *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::Domain::spu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain::spu",1,"gam::Domain const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain,0))){
    SWIG_fail_ptr("Domain_spu",1,SWIGTYPE_p_gam__Domain);
  }
  
  result = (double)((gam::Domain const *)arg1)->spu();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain_spu(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Domain_spu__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Domain_spu__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Domain_spu'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Domain::spu(double)\n"
    "    gam::Domain::spu() const\n");
  lua_error(L);return 0;
}


static int _wrap_Domain_ups__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *arg1 = (gam::Domain *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::Domain::ups",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain::ups",1,"gam::Domain const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain,0))){
    SWIG_fail_ptr("Domain_ups",1,SWIGTYPE_p_gam__Domain);
  }
  
  result = (double)((gam::Domain const *)arg1)->ups();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain_ups(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Domain_ups__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Domain, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Domain_ups__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Domain_ups'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Domain::ups(double)\n"
    "    gam::Domain::ups() const\n");
  lua_error(L);return 0;
}


static int _wrap_Domain_print(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *arg1 = (gam::Domain *) 0 ;
  
  SWIG_check_num_args("gam::Domain::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Domain::print",1,"gam::Domain const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Domain,0))){
    SWIG_fail_ptr("Domain_print",1,SWIGTYPE_p_gam__Domain);
  }
  
  ((gam::Domain const *)arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Domain_master(lua_State* L) {
  int SWIG_arg = 0;
  gam::Domain *result = 0 ;
  
  SWIG_check_num_args("gam::Domain::master",0,0)
  result = (gam::Domain *) &gam::Domain::master();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Domain,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Domain(void *obj) {
gam::Domain *arg1 = (gam::Domain *) obj;
delete arg1;
}
static int _proxy__wrap_new_Domain(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Domain);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Domain_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Domain_methods[]= {
    { "notifyObservers", _wrap_Domain_notifyObservers},
    { "hasBeenSet", _wrap_Domain_hasBeenSet},
    { "spu", _wrap_Domain_spu},
    { "ups", _wrap_Domain_ups},
    { "print", _wrap_Domain_print},
    {0,0}
};
static swig_lua_method swig_Domain_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Domain_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Domain_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Domain_Sf_SwigStatic_methods[]= {
    { "master", _wrap_Domain_master},
    {0,0}
};
static swig_lua_class* swig_Domain_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Domain_Sf_SwigStatic = {
    "Domain",
    swig_Domain_Sf_SwigStatic_methods,
    swig_Domain_Sf_SwigStatic_attributes,
    swig_Domain_Sf_SwigStatic_constants,
    swig_Domain_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Domain_bases[] = {0};
static const char *swig_Domain_base_names[] = {0};
static swig_lua_class _wrap_class_Domain = { "Domain", "Domain", &SWIGTYPE_p_gam__Domain,_proxy__wrap_new_Domain, swig_delete_Domain, swig_Domain_methods, swig_Domain_attributes, &swig_Domain_Sf_SwigStatic, swig_Domain_meta, swig_Domain_bases, swig_Domain_base_names };

static int _wrap_sampleRate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  
  SWIG_check_num_args("gam::sampleRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::sampleRate",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  gam::sampleRate(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sampleRate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("gam::sampleRate",0,0)
  result = (double)gam::sampleRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sampleRate(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_sampleRate__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_sampleRate__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sampleRate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::sampleRate(double)\n"
    "    gam::sampleRate()\n");
  lua_error(L);return 0;
}


static int _wrap_new_Biquad3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  FilterType arg5 ;
  FilterType *argp5 ;
  gam::Biquad3 *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad3::Biquad3",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Biquad3::Biquad3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad3::Biquad3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad3::Biquad3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Biquad3::Biquad3",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("gam::Biquad3::Biquad3",5,"FilterType");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_FilterType,0))){
    SWIG_fail_ptr("new_Biquad3",5,SWIGTYPE_p_FilterType);
  }
  arg5 = *argp5;
  
  result = (gam::Biquad3 *)new gam::Biquad3(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Biquad3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::Biquad3 *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad3::Biquad3",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Biquad3::Biquad3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad3::Biquad3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad3::Biquad3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Biquad3::Biquad3",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::Biquad3 *)new gam::Biquad3(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Biquad3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::Biquad3 *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad3::Biquad3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Biquad3::Biquad3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad3::Biquad3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad3::Biquad3",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Biquad3 *)new gam::Biquad3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Biquad3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad3(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Biquad3__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Biquad3__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_FilterType, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_Biquad3__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Biquad3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad3::Biquad3(float,float,float,float,FilterType)\n"
    "    gam::Biquad3::Biquad3(float,float,float,float)\n"
    "    gam::Biquad3::Biquad3(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad3_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gam::Biquad3::freq",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::freq",1,"gam::Biquad3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad3::freq",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad3::freq",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Biquad3::freq",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_freq",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->freq(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Biquad3::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::Tick",1,"gam::Biquad3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad3::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_Tick",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Biquad3_Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_get_bq0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad3::get_bq0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::get_bq0",1,"gam::Biquad3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_get_bq0",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  result = (gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_Biquad3_get_bq0__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_get_bq1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad3::get_bq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::get_bq1",1,"gam::Biquad3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_get_bq1",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  result = (gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_Biquad3_get_bq1__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_get_bq2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad3::get_bq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::get_bq2",1,"gam::Biquad3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_get_bq2",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  result = (gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_Biquad3_get_bq2__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_bq0_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  Biquad< > arg2 ;
  Biquad< > *argp2 ;
  
  SWIG_check_num_args("gam::Biquad3::bq0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::bq0",1,"gam::Biquad3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Biquad3::bq0",2,"Biquad< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_bq0_set",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BiquadT_t,0))){
    SWIG_fail_ptr("Biquad3_bq0_set",2,SWIGTYPE_p_BiquadT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bq0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_bq0_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  Biquad< > result;
  
  SWIG_check_num_args("gam::Biquad3::bq0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::bq0",1,"gam::Biquad3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_bq0_get",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  result =  ((arg1)->bq0);
  {
    Biquad< > * resultptr = new Biquad< >((const Biquad< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BiquadT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_bq1_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  Biquad< > arg2 ;
  Biquad< > *argp2 ;
  
  SWIG_check_num_args("gam::Biquad3::bq1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::bq1",1,"gam::Biquad3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Biquad3::bq1",2,"Biquad< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_bq1_set",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BiquadT_t,0))){
    SWIG_fail_ptr("Biquad3_bq1_set",2,SWIGTYPE_p_BiquadT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bq1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_bq1_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  Biquad< > result;
  
  SWIG_check_num_args("gam::Biquad3::bq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::bq1",1,"gam::Biquad3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_bq1_get",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  result =  ((arg1)->bq1);
  {
    Biquad< > * resultptr = new Biquad< >((const Biquad< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BiquadT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_bq2_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  Biquad< > arg2 ;
  Biquad< > *argp2 ;
  
  SWIG_check_num_args("gam::Biquad3::bq2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::bq2",1,"gam::Biquad3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Biquad3::bq2",2,"Biquad< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_bq2_set",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BiquadT_t,0))){
    SWIG_fail_ptr("Biquad3_bq2_set",2,SWIGTYPE_p_BiquadT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->bq2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad3_bq2_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad3 *arg1 = (gam::Biquad3 *) 0 ;
  Biquad< > result;
  
  SWIG_check_num_args("gam::Biquad3::bq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad3::bq2",1,"gam::Biquad3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Biquad3,0))){
    SWIG_fail_ptr("Biquad3_bq2_get",1,SWIGTYPE_p_gam__Biquad3);
  }
  
  result =  ((arg1)->bq2);
  {
    Biquad< > * resultptr = new Biquad< >((const Biquad< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BiquadT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad3(void *obj) {
gam::Biquad3 *arg1 = (gam::Biquad3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad3_attributes[] = {
    { "bq0", _wrap_Biquad3_bq0_get, _wrap_Biquad3_bq0_set },
    { "bq1", _wrap_Biquad3_bq1_get, _wrap_Biquad3_bq1_set },
    { "bq2", _wrap_Biquad3_bq2_get, _wrap_Biquad3_bq2_set },
    {0,0,0}
};
static swig_lua_method swig_Biquad3_methods[]= {
    { "freq", _wrap_Biquad3_freq},
    { "Tick", _wrap_Biquad3_Tick},
    { "get_bq0", _wrap_Biquad3_get_bq0},
    { "get_bq1", _wrap_Biquad3_get_bq1},
    { "get_bq2", _wrap_Biquad3_get_bq2},
    {0,0}
};
static swig_lua_method swig_Biquad3_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad3_Sf_SwigStatic = {
    "Biquad3",
    swig_Biquad3_Sf_SwigStatic_methods,
    swig_Biquad3_Sf_SwigStatic_attributes,
    swig_Biquad3_Sf_SwigStatic_constants,
    swig_Biquad3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad3_bases[] = {0};
static const char *swig_Biquad3_base_names[] = {0};
static swig_lua_class _wrap_class_Biquad3 = { "Biquad3", "Biquad3", &SWIGTYPE_p_gam__Biquad3,_proxy__wrap_new_Biquad3, swig_delete_Biquad3, swig_Biquad3_methods, swig_Biquad3_attributes, &swig_Biquad3_Sf_SwigStatic, swig_Biquad3_meta, swig_Biquad3_bases, swig_Biquad3_base_names };

static int _wrap_new_Burst__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::Burst *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::Burst",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Burst::Burst",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Burst::Burst",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Burst::Burst",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Burst::Burst",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::Burst *)new gam::Burst(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Burst,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Burst__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::Burst *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::Burst",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Burst::Burst",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Burst::Burst",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Burst::Burst",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Burst *)new gam::Burst(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Burst,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Burst__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Burst *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::Burst",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Burst::Burst",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Burst::Burst",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Burst *)new gam::Burst(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Burst,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Burst__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Burst *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::Burst",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Burst::Burst",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Burst *)new gam::Burst(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Burst,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Burst__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::Burst",0,0)
  result = (gam::Burst *)new gam::Burst();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Burst,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Burst(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Burst__SWIG_4(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Burst__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Burst__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Burst__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Burst__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Burst'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Burst::Burst(float,float,float,float)\n"
    "    gam::Burst::Burst(float,float,float)\n"
    "    gam::Burst::Burst(float,float)\n"
    "    gam::Burst::Burst(float)\n"
    "    gam::Burst::Burst()\n");
  lua_error(L);return 0;
}


static int _wrap_Burst_bang(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Burst::bang",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::bang",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_bang",1,SWIGTYPE_p_gam__Burst);
  }
  
  result = (float)gam_Burst_bang__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_exec(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("gam::Burst::exec",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::exec",1,"gam::Burst *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Burst::exec",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Burst::exec",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Burst::exec",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::Burst::exec",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_exec",1,SWIGTYPE_p_gam__Burst);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  gam_Burst_exec__SWIG(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_get_src(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  gam::NoiseWhite< gam::RNGMulCon > *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::get_src",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::get_src",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_get_src",1,SWIGTYPE_p_gam__Burst);
  }
  
  result = (gam::NoiseWhite< gam::RNGMulCon > *) &gam_Burst_get_src__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseWhiteT_gam__RNGMulCon_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_get_fil(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::get_fil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::get_fil",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_get_fil",1,SWIGTYPE_p_gam__Burst);
  }
  
  result = (gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_Burst_get_fil__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_get_env(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  gam::Decay< float > *result = 0 ;
  
  SWIG_check_num_args("gam::Burst::get_env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::get_env",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_get_env",1,SWIGTYPE_p_gam__Burst);
  }
  
  result = (gam::Decay< float > *) &gam_Burst_get_env__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DecayT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  
  SWIG_check_num_args("gam::Burst::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::reset",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_reset",1,SWIGTYPE_p_gam__Burst);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_freq1_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Burst::freq1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::freq1",1,"gam::Burst *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Burst::freq1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_freq1_set",1,SWIGTYPE_p_gam__Burst);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_freq1_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Burst::freq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::freq1",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_freq1_get",1,SWIGTYPE_p_gam__Burst);
  }
  
  result = (float) ((arg1)->freq1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_freq2_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Burst::freq2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::freq2",1,"gam::Burst *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Burst::freq2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_freq2_set",1,SWIGTYPE_p_gam__Burst);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_freq2_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Burst::freq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::freq2",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_freq2_get",1,SWIGTYPE_p_gam__Burst);
  }
  
  result = (float) ((arg1)->freq2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Burst::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::amp",1,"gam::Burst *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Burst::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_amp_set",1,SWIGTYPE_p_gam__Burst);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Burst::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::amp",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_amp_get",1,SWIGTYPE_p_gam__Burst);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_src_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  NoiseWhite< RNGMulCon > arg2 ;
  NoiseWhite< RNGMulCon > *argp2 ;
  
  SWIG_check_num_args("gam::Burst::src",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::src",1,"gam::Burst *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Burst::src",2,"NoiseWhite< RNGMulCon >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_src_set",1,SWIGTYPE_p_gam__Burst);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_NoiseWhiteT_RNGMulCon_t,0))){
    SWIG_fail_ptr("Burst_src_set",2,SWIGTYPE_p_NoiseWhiteT_RNGMulCon_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->src = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_src_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  NoiseWhite< RNGMulCon > result;
  
  SWIG_check_num_args("gam::Burst::src",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::src",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_src_get",1,SWIGTYPE_p_gam__Burst);
  }
  
  result =  ((arg1)->src);
  {
    NoiseWhite< RNGMulCon > * resultptr = new NoiseWhite< RNGMulCon >((const NoiseWhite< RNGMulCon > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NoiseWhiteT_RNGMulCon_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_fil_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  Biquad< > arg2 ;
  Biquad< > *argp2 ;
  
  SWIG_check_num_args("gam::Burst::fil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::fil",1,"gam::Burst *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Burst::fil",2,"Biquad< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_fil_set",1,SWIGTYPE_p_gam__Burst);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BiquadT_t,0))){
    SWIG_fail_ptr("Burst_fil_set",2,SWIGTYPE_p_BiquadT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fil = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_fil_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  Biquad< > result;
  
  SWIG_check_num_args("gam::Burst::fil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::fil",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_fil_get",1,SWIGTYPE_p_gam__Burst);
  }
  
  result =  ((arg1)->fil);
  {
    Biquad< > * resultptr = new Biquad< >((const Biquad< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BiquadT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_env_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  Decay< float > arg2 ;
  Decay< float > *argp2 ;
  
  SWIG_check_num_args("gam::Burst::env",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::env",1,"gam::Burst *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Burst::env",2,"Decay< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_env_set",1,SWIGTYPE_p_gam__Burst);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_DecayT_float_t,0))){
    SWIG_fail_ptr("Burst_env_set",2,SWIGTYPE_p_DecayT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->env = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Burst_env_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Burst *arg1 = (gam::Burst *) 0 ;
  Decay< float > result;
  
  SWIG_check_num_args("gam::Burst::env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Burst::env",1,"gam::Burst *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Burst,0))){
    SWIG_fail_ptr("Burst_env_get",1,SWIGTYPE_p_gam__Burst);
  }
  
  result =  ((arg1)->env);
  {
    Decay< float > * resultptr = new Decay< float >((const Decay< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DecayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Burst(void *obj) {
gam::Burst *arg1 = (gam::Burst *) obj;
delete arg1;
}
static int _proxy__wrap_new_Burst(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Burst);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Burst_attributes[] = {
    { "freq1", _wrap_Burst_freq1_get, _wrap_Burst_freq1_set },
    { "freq2", _wrap_Burst_freq2_get, _wrap_Burst_freq2_set },
    { "amp", _wrap_Burst_amp_get, _wrap_Burst_amp_set },
    { "src", _wrap_Burst_src_get, _wrap_Burst_src_set },
    { "fil", _wrap_Burst_fil_get, _wrap_Burst_fil_set },
    { "env", _wrap_Burst_env_get, _wrap_Burst_env_set },
    {0,0,0}
};
static swig_lua_method swig_Burst_methods[]= {
    { "bang", _wrap_Burst_bang},
    { "exec", _wrap_Burst_exec},
    { "get_src", _wrap_Burst_get_src},
    { "get_fil", _wrap_Burst_get_fil},
    { "get_env", _wrap_Burst_get_env},
    { "reset", _wrap_Burst_reset},
    {0,0}
};
static swig_lua_method swig_Burst_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Burst_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Burst_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Burst_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Burst_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Burst_Sf_SwigStatic = {
    "Burst",
    swig_Burst_Sf_SwigStatic_methods,
    swig_Burst_Sf_SwigStatic_attributes,
    swig_Burst_Sf_SwigStatic_constants,
    swig_Burst_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Burst_bases[] = {0};
static const char *swig_Burst_base_names[] = {0};
static swig_lua_class _wrap_class_Burst = { "Burst", "Burst", &SWIGTYPE_p_gam__Burst,_proxy__wrap_new_Burst, swig_delete_Burst, swig_Burst_methods, swig_Burst_attributes, &swig_Burst_Sf_SwigStatic, swig_Burst_meta, swig_Burst_bases, swig_Burst_base_names };

static int _wrap_new_MonoSynth__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  gam::MonoSynth *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::MonoSynth",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (gam::MonoSynth *)new gam::MonoSynth(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MonoSynth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoSynth__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::MonoSynth *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::MonoSynth",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::MonoSynth *)new gam::MonoSynth(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MonoSynth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoSynth__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::MonoSynth *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::MonoSynth",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::MonoSynth *)new gam::MonoSynth(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MonoSynth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoSynth__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::MonoSynth *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::MonoSynth",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::MonoSynth *)new gam::MonoSynth(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MonoSynth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoSynth__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::MonoSynth *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::MonoSynth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::MonoSynth::MonoSynth",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::MonoSynth *)new gam::MonoSynth(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MonoSynth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoSynth__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::MonoSynth",0,0)
  result = (gam::MonoSynth *)new gam::MonoSynth();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MonoSynth,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MonoSynth(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MonoSynth__SWIG_5(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MonoSynth__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_MonoSynth__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_MonoSynth__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MonoSynth__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_MonoSynth__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MonoSynth'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::MonoSynth::MonoSynth(float,float,float,float,float)\n"
    "    gam::MonoSynth::MonoSynth(float,float,float,float)\n"
    "    gam::MonoSynth::MonoSynth(float,float,float)\n"
    "    gam::MonoSynth::MonoSynth(float,float)\n"
    "    gam::MonoSynth::MonoSynth(float)\n"
    "    gam::MonoSynth::MonoSynth()\n");
  lua_error(L);return 0;
}


static int _wrap_MonoSynth_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::MonoSynth::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::Tick",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_Tick",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result = (float)gam_MonoSynth_Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_get_osc(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  gam::Saw< float,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::get_osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::get_osc",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_get_osc",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result = (gam::Saw< float,GAM_DEFAULT_DOMAIN > *) &gam_MonoSynth_get_osc__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_get_env(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  gam::Decay< float > *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::get_env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::get_env",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_get_env",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result = (gam::Decay< float > *) &gam_MonoSynth_get_env__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DecayT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_get_opEnv(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::get_opEnv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::get_opEnv",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_get_opEnv",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result = (gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_MonoSynth_get_opEnv__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_get_filter(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::get_filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::get_filter",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_get_filter",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result = (gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_MonoSynth_get_filter__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::MonoSynth::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::freq",1,"gam::MonoSynth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MonoSynth::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_freq",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  
  SWIG_check_num_args("gam::MonoSynth::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::reset",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_reset",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  Saw< float > arg2 ;
  Saw< float > *argp2 ;
  
  SWIG_check_num_args("gam::MonoSynth::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::osc",1,"gam::MonoSynth *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::MonoSynth::osc",2,"Saw< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_osc_set",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SawT_float_t,0))){
    SWIG_fail_ptr("MonoSynth_osc_set",2,SWIGTYPE_p_SawT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  Saw< float > result;
  
  SWIG_check_num_args("gam::MonoSynth::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::osc",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_osc_get",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result =  ((arg1)->osc);
  {
    Saw< float > * resultptr = new Saw< float >((const Saw< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SawT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  Biquad< > arg2 ;
  Biquad< > *argp2 ;
  
  SWIG_check_num_args("gam::MonoSynth::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::filter",1,"gam::MonoSynth *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::MonoSynth::filter",2,"Biquad< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_filter_set",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BiquadT_t,0))){
    SWIG_fail_ptr("MonoSynth_filter_set",2,SWIGTYPE_p_BiquadT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  Biquad< > result;
  
  SWIG_check_num_args("gam::MonoSynth::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::filter",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_filter_get",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result =  ((arg1)->filter);
  {
    Biquad< > * resultptr = new Biquad< >((const Biquad< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BiquadT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_env_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  Decay< float > arg2 ;
  Decay< float > *argp2 ;
  
  SWIG_check_num_args("gam::MonoSynth::env",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::env",1,"gam::MonoSynth *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::MonoSynth::env",2,"Decay< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_env_set",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_DecayT_float_t,0))){
    SWIG_fail_ptr("MonoSynth_env_set",2,SWIGTYPE_p_DecayT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->env = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_env_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  Decay< float > result;
  
  SWIG_check_num_args("gam::MonoSynth::env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::env",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_env_get",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result =  ((arg1)->env);
  {
    Decay< float > * resultptr = new Decay< float >((const Decay< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DecayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_opEnv_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  OnePole< float > arg2 ;
  OnePole< float > *argp2 ;
  
  SWIG_check_num_args("gam::MonoSynth::opEnv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::opEnv",1,"gam::MonoSynth *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::MonoSynth::opEnv",2,"OnePole< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_opEnv_set",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_OnePoleT_float_t,0))){
    SWIG_fail_ptr("MonoSynth_opEnv_set",2,SWIGTYPE_p_OnePoleT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->opEnv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_opEnv_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  OnePole< float > result;
  
  SWIG_check_num_args("gam::MonoSynth::opEnv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::opEnv",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_opEnv_get",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result =  ((arg1)->opEnv);
  {
    OnePole< float > * resultptr = new OnePole< float >((const OnePole< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_OnePoleT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_ctf1_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::MonoSynth::ctf1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::ctf1",1,"gam::MonoSynth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MonoSynth::ctf1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_ctf1_set",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ctf1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_ctf1_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::MonoSynth::ctf1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::ctf1",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_ctf1_get",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result = (float) ((arg1)->ctf1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_ctf2_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::MonoSynth::ctf2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::ctf2",1,"gam::MonoSynth *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MonoSynth::ctf2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_ctf2_set",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ctf2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoSynth_ctf2_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::MonoSynth *arg1 = (gam::MonoSynth *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::MonoSynth::ctf2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MonoSynth::ctf2",1,"gam::MonoSynth *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MonoSynth,0))){
    SWIG_fail_ptr("MonoSynth_ctf2_get",1,SWIGTYPE_p_gam__MonoSynth);
  }
  
  result = (float) ((arg1)->ctf2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MonoSynth(void *obj) {
gam::MonoSynth *arg1 = (gam::MonoSynth *) obj;
delete arg1;
}
static int _proxy__wrap_new_MonoSynth(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MonoSynth);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MonoSynth_attributes[] = {
    { "osc", _wrap_MonoSynth_osc_get, _wrap_MonoSynth_osc_set },
    { "filter", _wrap_MonoSynth_filter_get, _wrap_MonoSynth_filter_set },
    { "env", _wrap_MonoSynth_env_get, _wrap_MonoSynth_env_set },
    { "opEnv", _wrap_MonoSynth_opEnv_get, _wrap_MonoSynth_opEnv_set },
    { "ctf1", _wrap_MonoSynth_ctf1_get, _wrap_MonoSynth_ctf1_set },
    { "ctf2", _wrap_MonoSynth_ctf2_get, _wrap_MonoSynth_ctf2_set },
    {0,0,0}
};
static swig_lua_method swig_MonoSynth_methods[]= {
    { "Tick", _wrap_MonoSynth_Tick},
    { "get_osc", _wrap_MonoSynth_get_osc},
    { "get_env", _wrap_MonoSynth_get_env},
    { "get_opEnv", _wrap_MonoSynth_get_opEnv},
    { "get_filter", _wrap_MonoSynth_get_filter},
    { "freq", _wrap_MonoSynth_freq},
    { "reset", _wrap_MonoSynth_reset},
    {0,0}
};
static swig_lua_method swig_MonoSynth_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MonoSynth_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MonoSynth_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MonoSynth_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MonoSynth_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MonoSynth_Sf_SwigStatic = {
    "MonoSynth",
    swig_MonoSynth_Sf_SwigStatic_methods,
    swig_MonoSynth_Sf_SwigStatic_attributes,
    swig_MonoSynth_Sf_SwigStatic_constants,
    swig_MonoSynth_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MonoSynth_bases[] = {0};
static const char *swig_MonoSynth_base_names[] = {0};
static swig_lua_class _wrap_class_MonoSynth = { "MonoSynth", "MonoSynth", &SWIGTYPE_p_gam__MonoSynth,_proxy__wrap_new_MonoSynth, swig_delete_MonoSynth, swig_MonoSynth_methods, swig_MonoSynth_attributes, &swig_MonoSynth_Sf_SwigStatic, swig_MonoSynth_meta, swig_MonoSynth_bases, swig_MonoSynth_base_names };

static int _wrap_new_Pluck__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  gam::Pluck *result = 0 ;
  
  SWIG_check_num_args("gam::Pluck::Pluck",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Pluck::Pluck",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pluck::Pluck",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::Pluck *)new gam::Pluck(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Pluck,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pluck__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::Pluck *result = 0 ;
  
  SWIG_check_num_args("gam::Pluck::Pluck",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Pluck::Pluck",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::Pluck *)new gam::Pluck(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Pluck,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pluck__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *result = 0 ;
  
  SWIG_check_num_args("gam::Pluck::Pluck",0,0)
  result = (gam::Pluck *)new gam::Pluck();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Pluck,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pluck(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pluck__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pluck__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Pluck__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Pluck'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Pluck::Pluck(double,double)\n"
    "    gam::Pluck::Pluck(double)\n"
    "    gam::Pluck::Pluck()\n");
  lua_error(L);return 0;
}


static int _wrap_Pluck_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Pluck::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::Tick",1,"gam::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_Tick",1,SWIGTYPE_p_gam__Pluck);
  }
  
  result = (float)gam_Pluck_Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_filter(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Pluck::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::filter",1,"gam::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pluck::filter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_filter",1,SWIGTYPE_p_gam__Pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Pluck_filter__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  
  SWIG_check_num_args("gam::Pluck::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::reset",1,"gam::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_reset",1,SWIGTYPE_p_gam__Pluck);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Pluck::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::freq",1,"gam::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pluck::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_freq",1,SWIGTYPE_p_gam__Pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_noise_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  NoiseWhite< > arg2 ;
  NoiseWhite< > *argp2 ;
  
  SWIG_check_num_args("gam::Pluck::noise",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::noise",1,"gam::Pluck *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Pluck::noise",2,"NoiseWhite< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_noise_set",1,SWIGTYPE_p_gam__Pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_NoiseWhiteT_t,0))){
    SWIG_fail_ptr("Pluck_noise_set",2,SWIGTYPE_p_NoiseWhiteT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->noise = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_noise_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  NoiseWhite< > result;
  
  SWIG_check_num_args("gam::Pluck::noise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::noise",1,"gam::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_noise_get",1,SWIGTYPE_p_gam__Pluck);
  }
  
  result =  ((arg1)->noise);
  {
    NoiseWhite< > * resultptr = new NoiseWhite< >((const NoiseWhite< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NoiseWhiteT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_env_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  Decay< > arg2 ;
  Decay< > *argp2 ;
  
  SWIG_check_num_args("gam::Pluck::env",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::env",1,"gam::Pluck *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Pluck::env",2,"Decay< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_env_set",1,SWIGTYPE_p_gam__Pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_DecayT_t,0))){
    SWIG_fail_ptr("Pluck_env_set",2,SWIGTYPE_p_DecayT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->env = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_env_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  Decay< > result;
  
  SWIG_check_num_args("gam::Pluck::env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::env",1,"gam::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_env_get",1,SWIGTYPE_p_gam__Pluck);
  }
  
  result =  ((arg1)->env);
  {
    Decay< > * resultptr = new Decay< >((const Decay< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DecayT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_fil_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  Biquad< > arg2 ;
  Biquad< > *argp2 ;
  
  SWIG_check_num_args("gam::Pluck::fil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::fil",1,"gam::Pluck *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Pluck::fil",2,"Biquad< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_fil_set",1,SWIGTYPE_p_gam__Pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_BiquadT_t,0))){
    SWIG_fail_ptr("Pluck_fil_set",2,SWIGTYPE_p_BiquadT_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->fil = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_fil_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pluck *arg1 = (gam::Pluck *) 0 ;
  Biquad< > result;
  
  SWIG_check_num_args("gam::Pluck::fil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pluck::fil",1,"gam::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Pluck,0))){
    SWIG_fail_ptr("Pluck_fil_get",1,SWIGTYPE_p_gam__Pluck);
  }
  
  result =  ((arg1)->fil);
  {
    Biquad< > * resultptr = new Biquad< >((const Biquad< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_BiquadT_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pluck(void *obj) {
gam::Pluck *arg1 = (gam::Pluck *) obj;
delete arg1;
}
static int _proxy__wrap_new_Pluck(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Pluck);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Pluck_attributes[] = {
    { "noise", _wrap_Pluck_noise_get, _wrap_Pluck_noise_set },
    { "env", _wrap_Pluck_env_get, _wrap_Pluck_env_set },
    { "fil", _wrap_Pluck_fil_get, _wrap_Pluck_fil_set },
    {0,0,0}
};
static swig_lua_method swig_Pluck_methods[]= {
    { "Tick", _wrap_Pluck_Tick},
    { "filter", _wrap_Pluck_filter},
    { "reset", _wrap_Pluck_reset},
    { "freq", _wrap_Pluck_freq},
    {0,0}
};
static swig_lua_method swig_Pluck_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Pluck_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Pluck_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Pluck_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Pluck_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Pluck_Sf_SwigStatic = {
    "Pluck",
    swig_Pluck_Sf_SwigStatic_methods,
    swig_Pluck_Sf_SwigStatic_attributes,
    swig_Pluck_Sf_SwigStatic_constants,
    swig_Pluck_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Pluck_bases[] = {0};
static const char *swig_Pluck_base_names[] = {0};
static swig_lua_class _wrap_class_Pluck = { "Pluck", "Pluck", &SWIGTYPE_p_gam__Pluck,_proxy__wrap_new_Pluck, swig_delete_Pluck, swig_Pluck_methods, swig_Pluck_attributes, &swig_Pluck_Sf_SwigStatic, swig_Pluck_meta, swig_Pluck_bases, swig_Pluck_base_names };

static int _wrap_new_AM__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::AM< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AM< SampleType >::AM",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AM< SampleType >::AM",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::AM< SampleType > *)new gam::AM< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AMT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AM__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AM< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AM< SampleType >::AM",0,0)
  result = (gam::AM< SampleType > *)new gam::AM< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AMT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AM(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AM__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AM__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AM'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AM< SampleType >::AM(float)\n"
    "    gam::AM< SampleType >::AM()\n");
  lua_error(L);return 0;
}


static int _wrap_AM_depth(lua_State* L) {
  int SWIG_arg = 0;
  gam::AM< SampleType > *arg1 = (gam::AM< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AM< SampleType >::depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AM< SampleType >::depth",1,"gam::AM< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AM< SampleType >::depth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AMT_float_t,0))){
    SWIG_fail_ptr("AM_depth",1,SWIGTYPE_p_gam__AMT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->depth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AM_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::AM< SampleType > *arg1 = (gam::AM< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("gam::AM< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AM< SampleType >::Tick",1,"gam::AM< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AM< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::AM< SampleType >::Tick",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AMT_float_t,0))){
    SWIG_fail_ptr("AM_Tick",1,SWIGTYPE_p_gam__AMT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)gam_AM_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AM(void *obj) {
gam::AM< SampleType > *arg1 = (gam::AM< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AM(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AM);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AM_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AM_methods[]= {
    { "depth", _wrap_AM_depth},
    { "Tick", _wrap_AM_Tick},
    {0,0}
};
static swig_lua_method swig_AM_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AM_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AM_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AM_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AM_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AM_Sf_SwigStatic = {
    "AM",
    swig_AM_Sf_SwigStatic_methods,
    swig_AM_Sf_SwigStatic_attributes,
    swig_AM_Sf_SwigStatic_constants,
    swig_AM_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AM_bases[] = {0};
static const char *swig_AM_base_names[] = {0};
static swig_lua_class _wrap_class_AM = { "AM", "AM", &SWIGTYPE_p_gam__AMT_float_t,_proxy__wrap_new_AM, swig_delete_AM, swig_AM_methods, swig_AM_attributes, &swig_AM_Sf_SwigStatic, swig_AM_meta, swig_AM_bases, swig_AM_base_names };

static int _wrap_new_Chirp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::Chirp< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::Chirp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::Chirp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::Chirp",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirp< SampleType >::Chirp",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Chirp< SampleType > *)new gam::Chirp< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Chirp< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::Chirp",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::Chirp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::Chirp",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chirp< SampleType > *)new gam::Chirp< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Chirp< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::Chirp",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::Chirp",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Chirp< SampleType > *)new gam::Chirp< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::Chirp",0,0)
  result = (gam::Chirp< SampleType > *)new gam::Chirp< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Chirp__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Chirp__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Chirp__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Chirp__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chirp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Chirp< SampleType >::Chirp(float,float,float)\n"
    "    gam::Chirp< SampleType >::Chirp(float,float)\n"
    "    gam::Chirp< SampleType >::Chirp(float)\n"
    "    gam::Chirp< SampleType >::Chirp()\n");
  lua_error(L);return 0;
}


static int _wrap_Chirp___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::operator ()",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp___call",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::Tick",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_Tick",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result = (float)gam_Chirp_Sl_SampleType_Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::Process",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",1,"gam::Chirp< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_Process",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  gam_Chirp_Sl_SampleType_Sg__Process__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",1,"gam::Chirp< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Chirp< SampleType >::Process",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_Process",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  gam_Chirp_Sl_SampleType_Sg__Process__SWIG_0(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_Process(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Chirp_Process__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Chirp_Process__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chirp_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Chirp< SampleType >::Process(float,float,float,bool)\n"
    "    gam::Chirp< SampleType >::Process(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Chirp_get_osc(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  gam::Sine< float,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::get_osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::get_osc",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_get_osc",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result = (gam::Sine< float,GAM_DEFAULT_DOMAIN > *) &gam_Chirp_Sl_SampleType_Sg__get_osc__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_get_env(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  gam::Decay< float > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::get_env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::get_env",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_get_env",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result = (gam::Decay< float > *) &gam_Chirp_Sl_SampleType_Sg__get_env__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DecayT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_decay(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::decay",1,"gam::Chirp< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::decay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_decay",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->decay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::freq",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::freq",1,"gam::Chirp< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::freq",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirp< SampleType >::freq",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_freq",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->freq(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::reset",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_reset",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_osc_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  Sine< float > arg2 ;
  Sine< float > *argp2 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::osc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::osc",1,"gam::Chirp< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::osc",2,"Sine< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_osc_set",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SineT_float_t,0))){
    SWIG_fail_ptr("Chirp_osc_set",2,SWIGTYPE_p_SineT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->osc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_osc_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  Sine< float > result;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::osc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::osc",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_osc_get",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result =  ((arg1)->osc);
  {
    Sine< float > * resultptr = new Sine< float >((const Sine< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SineT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_env_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  Decay< float > arg2 ;
  Decay< float > *argp2 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::env",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::env",1,"gam::Chirp< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::env",2,"Decay< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_env_set",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_DecayT_float_t,0))){
    SWIG_fail_ptr("Chirp_env_set",2,SWIGTYPE_p_DecayT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->env = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_env_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  Decay< float > result;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::env",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::env",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_env_get",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result =  ((arg1)->env);
  {
    Decay< float > * resultptr = new Decay< float >((const Decay< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DecayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_freq1_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::freq1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::freq1",1,"gam::Chirp< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::freq1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_freq1_set",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_freq1_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::freq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::freq1",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_freq1_get",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result = (float) ((arg1)->freq1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_freq2_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::freq2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::freq2",1,"gam::Chirp< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirp< SampleType >::freq2",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_freq2_set",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirp_freq2_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Chirp< SampleType >::freq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirp< SampleType >::freq2",1,"gam::Chirp< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpT_float_t,0))){
    SWIG_fail_ptr("Chirp_freq2_get",1,SWIGTYPE_p_gam__ChirpT_float_t);
  }
  
  result = (float) ((arg1)->freq2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Chirp(void *obj) {
gam::Chirp< SampleType > *arg1 = (gam::Chirp< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chirp(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chirp);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chirp_attributes[] = {
    { "osc", _wrap_Chirp_osc_get, _wrap_Chirp_osc_set },
    { "env", _wrap_Chirp_env_get, _wrap_Chirp_env_set },
    { "freq1", _wrap_Chirp_freq1_get, _wrap_Chirp_freq1_set },
    { "freq2", _wrap_Chirp_freq2_get, _wrap_Chirp_freq2_set },
    {0,0,0}
};
static swig_lua_method swig_Chirp_methods[]= {
    { "__call", _wrap_Chirp___call},
    { "Tick", _wrap_Chirp_Tick},
    { "Process", _wrap_Chirp_Process},
    { "get_osc", _wrap_Chirp_get_osc},
    { "get_env", _wrap_Chirp_get_env},
    { "decay", _wrap_Chirp_decay},
    { "freq", _wrap_Chirp_freq},
    { "reset", _wrap_Chirp_reset},
    {0,0}
};
static swig_lua_method swig_Chirp_meta[] = {
    { "__call", _wrap_Chirp___call},
    {0,0}
};

static swig_lua_attribute swig_Chirp_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chirp_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chirp_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chirp_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chirp_SwigStatic = {
    "Chirp",
    swig_Chirp_SwigStatic_methods,
    swig_Chirp_SwigStatic_attributes,
    swig_Chirp_SwigStatic_constants,
    swig_Chirp_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chirp_bases[] = {0};
static const char *swig_Chirp_base_names[] = {0};
static swig_lua_class _wrap_class_Chirp = { "Chirp", "Chirp", &SWIGTYPE_p_gam__ChirpT_float_t,_proxy__wrap_new_Chirp, swig_delete_Chirp, swig_Chirp_methods, swig_Chirp_attributes, &swig_Chirp_SwigStatic, swig_Chirp_meta, swig_Chirp_bases, swig_Chirp_base_names };

static int _wrap_Cheby1_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::c",1,"gam::ChebyN< 1,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::c",2,"float [1]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1_c_set",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby1_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby1_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::c",1,"gam::ChebyN< 1,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1_c_get",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 1,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 1,SampleType > *)new gam::ChebyN< 1,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_1_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 1,SampleType > *)new gam::ChebyN< 1,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_1_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby1(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby1__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby1__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 1,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 1,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby1___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::operator ()",1,"gam::ChebyN< 1,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1___call",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 1,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby1___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::__getitem__",1,"gam::ChebyN< 1,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1___getitem",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_1_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 1,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby1_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::wet",1,"gam::ChebyN< 1,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1_wet",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 1,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby1_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::size",1,"gam::ChebyN< 1,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1_size",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 1,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby1_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::coef",1,"gam::ChebyN< 1,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1_coef",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby1_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 1,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::set",1,"gam::ChebyN< 1,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1_set",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby1_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 1,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_1_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby1_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) 0 ;
  gam::ChebyN< 1,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 1,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 1,SampleType >::zero",1,"gam::ChebyN< 1,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_1_float_t,0))){
    SWIG_fail_ptr("Cheby1_zero",1,SWIGTYPE_p_gam__ChebyNT_1_float_t);
  }
  
  result = (gam::ChebyN< 1,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_1_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby1(void *obj) {
gam::ChebyN< 1,SampleType > *arg1 = (gam::ChebyN< 1,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby1_attributes[] = {
    { "c", _wrap_Cheby1_c_get, _wrap_Cheby1_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby1_methods[]= {
    { "__call", _wrap_Cheby1___call},
    { "__getitem", _wrap_Cheby1___getitem},
    { "wet", _wrap_Cheby1_wet},
    { "size", _wrap_Cheby1_size},
    { "coef", _wrap_Cheby1_coef},
    { "set", _wrap_Cheby1_set},
    { "zero", _wrap_Cheby1_zero},
    {0,0}
};
static swig_lua_method swig_Cheby1_meta[] = {
    { "__call", _wrap_Cheby1___call},
    { "__getitem", _wrap_Cheby1___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby1_Sf_SwigStatic = {
    "Cheby1",
    swig_Cheby1_Sf_SwigStatic_methods,
    swig_Cheby1_Sf_SwigStatic_attributes,
    swig_Cheby1_Sf_SwigStatic_constants,
    swig_Cheby1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby1_bases[] = {0};
static const char *swig_Cheby1_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby1 = { "Cheby1", "Cheby1", &SWIGTYPE_p_gam__ChebyNT_1_float_t,_proxy__wrap_new_Cheby1, swig_delete_Cheby1, swig_Cheby1_methods, swig_Cheby1_attributes, &swig_Cheby1_Sf_SwigStatic, swig_Cheby1_meta, swig_Cheby1_bases, swig_Cheby1_base_names };

static int _wrap_Cheby2_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::c",1,"gam::ChebyN< 2,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::c",2,"float [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2_c_set",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby2_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby2_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::c",1,"gam::ChebyN< 2,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2_c_get",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 2,SampleType > *)new gam::ChebyN< 2,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_2_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 2,SampleType > *)new gam::ChebyN< 2,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_2_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby2(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby2__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby2__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 2,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 2,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby2___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::operator ()",1,"gam::ChebyN< 2,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2___call",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 2,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby2___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::__getitem__",1,"gam::ChebyN< 2,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2___getitem",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_2_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 2,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby2_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::wet",1,"gam::ChebyN< 2,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2_wet",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 2,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby2_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::size",1,"gam::ChebyN< 2,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2_size",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 2,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby2_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::coef",1,"gam::ChebyN< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2_coef",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby2_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::set",1,"gam::ChebyN< 2,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2_set",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby2_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 2,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby2_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) 0 ;
  gam::ChebyN< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 2,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 2,SampleType >::zero",1,"gam::ChebyN< 2,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_2_float_t,0))){
    SWIG_fail_ptr("Cheby2_zero",1,SWIGTYPE_p_gam__ChebyNT_2_float_t);
  }
  
  result = (gam::ChebyN< 2,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby2(void *obj) {
gam::ChebyN< 2,SampleType > *arg1 = (gam::ChebyN< 2,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby2_attributes[] = {
    { "c", _wrap_Cheby2_c_get, _wrap_Cheby2_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby2_methods[]= {
    { "__call", _wrap_Cheby2___call},
    { "__getitem", _wrap_Cheby2___getitem},
    { "wet", _wrap_Cheby2_wet},
    { "size", _wrap_Cheby2_size},
    { "coef", _wrap_Cheby2_coef},
    { "set", _wrap_Cheby2_set},
    { "zero", _wrap_Cheby2_zero},
    {0,0}
};
static swig_lua_method swig_Cheby2_meta[] = {
    { "__call", _wrap_Cheby2___call},
    { "__getitem", _wrap_Cheby2___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby2_Sf_SwigStatic = {
    "Cheby2",
    swig_Cheby2_Sf_SwigStatic_methods,
    swig_Cheby2_Sf_SwigStatic_attributes,
    swig_Cheby2_Sf_SwigStatic_constants,
    swig_Cheby2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby2_bases[] = {0};
static const char *swig_Cheby2_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby2 = { "Cheby2", "Cheby2", &SWIGTYPE_p_gam__ChebyNT_2_float_t,_proxy__wrap_new_Cheby2, swig_delete_Cheby2, swig_Cheby2_methods, swig_Cheby2_attributes, &swig_Cheby2_Sf_SwigStatic, swig_Cheby2_meta, swig_Cheby2_bases, swig_Cheby2_base_names };

static int _wrap_Cheby3_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::c",1,"gam::ChebyN< 3,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::c",2,"float [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3_c_set",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby3_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby3_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::c",1,"gam::ChebyN< 3,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3_c_get",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 3,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 3,SampleType > *)new gam::ChebyN< 3,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_3_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 3,SampleType > *)new gam::ChebyN< 3,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_3_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby3(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby3__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby3__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 3,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 3,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby3___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::operator ()",1,"gam::ChebyN< 3,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3___call",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 3,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby3___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::__getitem__",1,"gam::ChebyN< 3,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3___getitem",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_3_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 3,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby3_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::wet",1,"gam::ChebyN< 3,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3_wet",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 3,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby3_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::size",1,"gam::ChebyN< 3,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3_size",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 3,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby3_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::coef",1,"gam::ChebyN< 3,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3_coef",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby3_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 3,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::set",1,"gam::ChebyN< 3,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3_set",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby3_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 3,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_3_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby3_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) 0 ;
  gam::ChebyN< 3,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 3,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 3,SampleType >::zero",1,"gam::ChebyN< 3,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_3_float_t,0))){
    SWIG_fail_ptr("Cheby3_zero",1,SWIGTYPE_p_gam__ChebyNT_3_float_t);
  }
  
  result = (gam::ChebyN< 3,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_3_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby3(void *obj) {
gam::ChebyN< 3,SampleType > *arg1 = (gam::ChebyN< 3,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby3_attributes[] = {
    { "c", _wrap_Cheby3_c_get, _wrap_Cheby3_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby3_methods[]= {
    { "__call", _wrap_Cheby3___call},
    { "__getitem", _wrap_Cheby3___getitem},
    { "wet", _wrap_Cheby3_wet},
    { "size", _wrap_Cheby3_size},
    { "coef", _wrap_Cheby3_coef},
    { "set", _wrap_Cheby3_set},
    { "zero", _wrap_Cheby3_zero},
    {0,0}
};
static swig_lua_method swig_Cheby3_meta[] = {
    { "__call", _wrap_Cheby3___call},
    { "__getitem", _wrap_Cheby3___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby3_Sf_SwigStatic = {
    "Cheby3",
    swig_Cheby3_Sf_SwigStatic_methods,
    swig_Cheby3_Sf_SwigStatic_attributes,
    swig_Cheby3_Sf_SwigStatic_constants,
    swig_Cheby3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby3_bases[] = {0};
static const char *swig_Cheby3_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby3 = { "Cheby3", "Cheby3", &SWIGTYPE_p_gam__ChebyNT_3_float_t,_proxy__wrap_new_Cheby3, swig_delete_Cheby3, swig_Cheby3_methods, swig_Cheby3_attributes, &swig_Cheby3_Sf_SwigStatic, swig_Cheby3_meta, swig_Cheby3_bases, swig_Cheby3_base_names };

static int _wrap_Cheby4_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::c",1,"gam::ChebyN< 4,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::c",2,"float [4]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4_c_set",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby4_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby4_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::c",1,"gam::ChebyN< 4,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4_c_get",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby4__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 4,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 4,SampleType > *)new gam::ChebyN< 4,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_4_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby4__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 4,SampleType > *)new gam::ChebyN< 4,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_4_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby4(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby4__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby4__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby4'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 4,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 4,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby4___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::operator ()",1,"gam::ChebyN< 4,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4___call",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 4,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby4___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::__getitem__",1,"gam::ChebyN< 4,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4___getitem",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_4_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 4,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby4_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::wet",1,"gam::ChebyN< 4,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4_wet",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 4,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby4_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::size",1,"gam::ChebyN< 4,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4_size",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 4,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby4_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::coef",1,"gam::ChebyN< 4,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4_coef",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby4_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 4,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::set",1,"gam::ChebyN< 4,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4_set",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby4_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 4,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_4_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby4_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) 0 ;
  gam::ChebyN< 4,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 4,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 4,SampleType >::zero",1,"gam::ChebyN< 4,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_4_float_t,0))){
    SWIG_fail_ptr("Cheby4_zero",1,SWIGTYPE_p_gam__ChebyNT_4_float_t);
  }
  
  result = (gam::ChebyN< 4,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_4_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby4(void *obj) {
gam::ChebyN< 4,SampleType > *arg1 = (gam::ChebyN< 4,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby4_attributes[] = {
    { "c", _wrap_Cheby4_c_get, _wrap_Cheby4_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby4_methods[]= {
    { "__call", _wrap_Cheby4___call},
    { "__getitem", _wrap_Cheby4___getitem},
    { "wet", _wrap_Cheby4_wet},
    { "size", _wrap_Cheby4_size},
    { "coef", _wrap_Cheby4_coef},
    { "set", _wrap_Cheby4_set},
    { "zero", _wrap_Cheby4_zero},
    {0,0}
};
static swig_lua_method swig_Cheby4_meta[] = {
    { "__call", _wrap_Cheby4___call},
    { "__getitem", _wrap_Cheby4___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby4_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby4_Sf_SwigStatic = {
    "Cheby4",
    swig_Cheby4_Sf_SwigStatic_methods,
    swig_Cheby4_Sf_SwigStatic_attributes,
    swig_Cheby4_Sf_SwigStatic_constants,
    swig_Cheby4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby4_bases[] = {0};
static const char *swig_Cheby4_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby4 = { "Cheby4", "Cheby4", &SWIGTYPE_p_gam__ChebyNT_4_float_t,_proxy__wrap_new_Cheby4, swig_delete_Cheby4, swig_Cheby4_methods, swig_Cheby4_attributes, &swig_Cheby4_Sf_SwigStatic, swig_Cheby4_meta, swig_Cheby4_bases, swig_Cheby4_base_names };

static int _wrap_Cheby5_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::c",1,"gam::ChebyN< 5,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::c",2,"float [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5_c_set",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby5_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby5_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::c",1,"gam::ChebyN< 5,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5_c_get",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby5__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 5,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 5,SampleType > *)new gam::ChebyN< 5,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_5_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby5__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 5,SampleType > *)new gam::ChebyN< 5,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_5_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby5(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby5__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby5__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby5'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 5,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 5,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby5___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::operator ()",1,"gam::ChebyN< 5,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5___call",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 5,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby5___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::__getitem__",1,"gam::ChebyN< 5,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5___getitem",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_5_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 5,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby5_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::wet",1,"gam::ChebyN< 5,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5_wet",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 5,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby5_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::size",1,"gam::ChebyN< 5,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5_size",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 5,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby5_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::coef",1,"gam::ChebyN< 5,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5_coef",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby5_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 5,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::set",1,"gam::ChebyN< 5,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5_set",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby5_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 5,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_5_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby5_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) 0 ;
  gam::ChebyN< 5,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 5,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 5,SampleType >::zero",1,"gam::ChebyN< 5,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_5_float_t,0))){
    SWIG_fail_ptr("Cheby5_zero",1,SWIGTYPE_p_gam__ChebyNT_5_float_t);
  }
  
  result = (gam::ChebyN< 5,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_5_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby5(void *obj) {
gam::ChebyN< 5,SampleType > *arg1 = (gam::ChebyN< 5,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby5(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby5);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby5_attributes[] = {
    { "c", _wrap_Cheby5_c_get, _wrap_Cheby5_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby5_methods[]= {
    { "__call", _wrap_Cheby5___call},
    { "__getitem", _wrap_Cheby5___getitem},
    { "wet", _wrap_Cheby5_wet},
    { "size", _wrap_Cheby5_size},
    { "coef", _wrap_Cheby5_coef},
    { "set", _wrap_Cheby5_set},
    { "zero", _wrap_Cheby5_zero},
    {0,0}
};
static swig_lua_method swig_Cheby5_meta[] = {
    { "__call", _wrap_Cheby5___call},
    { "__getitem", _wrap_Cheby5___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby5_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby5_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby5_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby5_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby5_Sf_SwigStatic = {
    "Cheby5",
    swig_Cheby5_Sf_SwigStatic_methods,
    swig_Cheby5_Sf_SwigStatic_attributes,
    swig_Cheby5_Sf_SwigStatic_constants,
    swig_Cheby5_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby5_bases[] = {0};
static const char *swig_Cheby5_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby5 = { "Cheby5", "Cheby5", &SWIGTYPE_p_gam__ChebyNT_5_float_t,_proxy__wrap_new_Cheby5, swig_delete_Cheby5, swig_Cheby5_methods, swig_Cheby5_attributes, &swig_Cheby5_Sf_SwigStatic, swig_Cheby5_meta, swig_Cheby5_bases, swig_Cheby5_base_names };

static int _wrap_Cheby6_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::c",1,"gam::ChebyN< 6,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::c",2,"float [6]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6_c_set",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby6_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby6_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::c",1,"gam::ChebyN< 6,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6_c_get",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby6__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 6,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 6,SampleType > *)new gam::ChebyN< 6,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_6_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby6__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 6,SampleType > *)new gam::ChebyN< 6,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_6_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby6(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby6__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby6__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby6'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 6,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 6,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby6___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::operator ()",1,"gam::ChebyN< 6,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6___call",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 6,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby6___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::__getitem__",1,"gam::ChebyN< 6,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6___getitem",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_6_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 6,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby6_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::wet",1,"gam::ChebyN< 6,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6_wet",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 6,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby6_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::size",1,"gam::ChebyN< 6,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6_size",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 6,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby6_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::coef",1,"gam::ChebyN< 6,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6_coef",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby6_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 6,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::set",1,"gam::ChebyN< 6,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6_set",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby6_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 6,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_6_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby6_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) 0 ;
  gam::ChebyN< 6,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 6,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 6,SampleType >::zero",1,"gam::ChebyN< 6,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_6_float_t,0))){
    SWIG_fail_ptr("Cheby6_zero",1,SWIGTYPE_p_gam__ChebyNT_6_float_t);
  }
  
  result = (gam::ChebyN< 6,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_6_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby6(void *obj) {
gam::ChebyN< 6,SampleType > *arg1 = (gam::ChebyN< 6,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby6(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby6);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby6_attributes[] = {
    { "c", _wrap_Cheby6_c_get, _wrap_Cheby6_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby6_methods[]= {
    { "__call", _wrap_Cheby6___call},
    { "__getitem", _wrap_Cheby6___getitem},
    { "wet", _wrap_Cheby6_wet},
    { "size", _wrap_Cheby6_size},
    { "coef", _wrap_Cheby6_coef},
    { "set", _wrap_Cheby6_set},
    { "zero", _wrap_Cheby6_zero},
    {0,0}
};
static swig_lua_method swig_Cheby6_meta[] = {
    { "__call", _wrap_Cheby6___call},
    { "__getitem", _wrap_Cheby6___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby6_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby6_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby6_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby6_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby6_Sf_SwigStatic = {
    "Cheby6",
    swig_Cheby6_Sf_SwigStatic_methods,
    swig_Cheby6_Sf_SwigStatic_attributes,
    swig_Cheby6_Sf_SwigStatic_constants,
    swig_Cheby6_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby6_bases[] = {0};
static const char *swig_Cheby6_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby6 = { "Cheby6", "Cheby6", &SWIGTYPE_p_gam__ChebyNT_6_float_t,_proxy__wrap_new_Cheby6, swig_delete_Cheby6, swig_Cheby6_methods, swig_Cheby6_attributes, &swig_Cheby6_Sf_SwigStatic, swig_Cheby6_meta, swig_Cheby6_bases, swig_Cheby6_base_names };

static int _wrap_Cheby7_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::c",1,"gam::ChebyN< 7,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::c",2,"float [7]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7_c_set",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby7_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby7_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::c",1,"gam::ChebyN< 7,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7_c_get",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby7__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 7,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 7,SampleType > *)new gam::ChebyN< 7,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_7_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby7__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 7,SampleType > *)new gam::ChebyN< 7,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_7_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby7(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby7__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby7__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby7'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 7,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 7,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby7___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::operator ()",1,"gam::ChebyN< 7,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7___call",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 7,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby7___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::__getitem__",1,"gam::ChebyN< 7,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7___getitem",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_7_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 7,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby7_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::wet",1,"gam::ChebyN< 7,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7_wet",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 7,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby7_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::size",1,"gam::ChebyN< 7,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7_size",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 7,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby7_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::coef",1,"gam::ChebyN< 7,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7_coef",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby7_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 7,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::set",1,"gam::ChebyN< 7,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7_set",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby7_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 7,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_7_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby7_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) 0 ;
  gam::ChebyN< 7,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 7,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 7,SampleType >::zero",1,"gam::ChebyN< 7,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_7_float_t,0))){
    SWIG_fail_ptr("Cheby7_zero",1,SWIGTYPE_p_gam__ChebyNT_7_float_t);
  }
  
  result = (gam::ChebyN< 7,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_7_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby7(void *obj) {
gam::ChebyN< 7,SampleType > *arg1 = (gam::ChebyN< 7,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby7(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby7);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby7_attributes[] = {
    { "c", _wrap_Cheby7_c_get, _wrap_Cheby7_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby7_methods[]= {
    { "__call", _wrap_Cheby7___call},
    { "__getitem", _wrap_Cheby7___getitem},
    { "wet", _wrap_Cheby7_wet},
    { "size", _wrap_Cheby7_size},
    { "coef", _wrap_Cheby7_coef},
    { "set", _wrap_Cheby7_set},
    { "zero", _wrap_Cheby7_zero},
    {0,0}
};
static swig_lua_method swig_Cheby7_meta[] = {
    { "__call", _wrap_Cheby7___call},
    { "__getitem", _wrap_Cheby7___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby7_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby7_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby7_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby7_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby7_Sf_SwigStatic = {
    "Cheby7",
    swig_Cheby7_Sf_SwigStatic_methods,
    swig_Cheby7_Sf_SwigStatic_attributes,
    swig_Cheby7_Sf_SwigStatic_constants,
    swig_Cheby7_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby7_bases[] = {0};
static const char *swig_Cheby7_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby7 = { "Cheby7", "Cheby7", &SWIGTYPE_p_gam__ChebyNT_7_float_t,_proxy__wrap_new_Cheby7, swig_delete_Cheby7, swig_Cheby7_methods, swig_Cheby7_attributes, &swig_Cheby7_Sf_SwigStatic, swig_Cheby7_meta, swig_Cheby7_bases, swig_Cheby7_base_names };

static int _wrap_Cheby8_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::c",1,"gam::ChebyN< 8,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::c",2,"float [8]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8_c_set",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby8_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby8_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::c",1,"gam::ChebyN< 8,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8_c_get",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby8__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 8,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 8,SampleType > *)new gam::ChebyN< 8,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_8_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby8__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 8,SampleType > *)new gam::ChebyN< 8,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_8_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby8(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby8__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby8__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby8'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 8,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 8,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby8___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::operator ()",1,"gam::ChebyN< 8,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8___call",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 8,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby8___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::__getitem__",1,"gam::ChebyN< 8,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8___getitem",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_8_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 8,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby8_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::wet",1,"gam::ChebyN< 8,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8_wet",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 8,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby8_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::size",1,"gam::ChebyN< 8,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8_size",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 8,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby8_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::coef",1,"gam::ChebyN< 8,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8_coef",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby8_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 8,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::set",1,"gam::ChebyN< 8,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8_set",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby8_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 8,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_8_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby8_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) 0 ;
  gam::ChebyN< 8,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 8,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 8,SampleType >::zero",1,"gam::ChebyN< 8,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_8_float_t,0))){
    SWIG_fail_ptr("Cheby8_zero",1,SWIGTYPE_p_gam__ChebyNT_8_float_t);
  }
  
  result = (gam::ChebyN< 8,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_8_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby8(void *obj) {
gam::ChebyN< 8,SampleType > *arg1 = (gam::ChebyN< 8,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby8(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby8);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby8_attributes[] = {
    { "c", _wrap_Cheby8_c_get, _wrap_Cheby8_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby8_methods[]= {
    { "__call", _wrap_Cheby8___call},
    { "__getitem", _wrap_Cheby8___getitem},
    { "wet", _wrap_Cheby8_wet},
    { "size", _wrap_Cheby8_size},
    { "coef", _wrap_Cheby8_coef},
    { "set", _wrap_Cheby8_set},
    { "zero", _wrap_Cheby8_zero},
    {0,0}
};
static swig_lua_method swig_Cheby8_meta[] = {
    { "__call", _wrap_Cheby8___call},
    { "__getitem", _wrap_Cheby8___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby8_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby8_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby8_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby8_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby8_Sf_SwigStatic = {
    "Cheby8",
    swig_Cheby8_Sf_SwigStatic_methods,
    swig_Cheby8_Sf_SwigStatic_attributes,
    swig_Cheby8_Sf_SwigStatic_constants,
    swig_Cheby8_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby8_bases[] = {0};
static const char *swig_Cheby8_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby8 = { "Cheby8", "Cheby8", &SWIGTYPE_p_gam__ChebyNT_8_float_t,_proxy__wrap_new_Cheby8, swig_delete_Cheby8, swig_Cheby8_methods, swig_Cheby8_attributes, &swig_Cheby8_Sf_SwigStatic, swig_Cheby8_meta, swig_Cheby8_bases, swig_Cheby8_base_names };

static int _wrap_Cheby9_c_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  float *arg2 ;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::c",1,"gam::ChebyN< 9,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::c",2,"float [9]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9_c_set",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby9_c_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    float *b = (float *) arg1->c;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((float *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby9_c_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::c",1,"gam::ChebyN< 9,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9_c_get",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  result = (float *)(float *) ((arg1)->c);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby9__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  gam::ChebyN< 9,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::ChebyN",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::ChebyN",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (gam::ChebyN< 9,SampleType > *)new gam::ChebyN< 9,SampleType >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_9_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby9__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::ChebyN",0,0)
  result = (gam::ChebyN< 9,SampleType > *)new gam::ChebyN< 9,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_9_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Cheby9(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Cheby9__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Cheby9__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Cheby9'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ChebyN< 9,SampleType >::ChebyN(float const &)\n"
    "    gam::ChebyN< 9,SampleType >::ChebyN()\n");
  lua_error(L);return 0;
}


static int _wrap_Cheby9___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::operator ()",1,"gam::ChebyN< 9,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9___call",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 9,SampleType > const *)arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby9___getitem(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::__getitem__",1,"gam::ChebyN< 9,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::__getitem__",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9___getitem",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ChebyN_Sl_9_Sc_SampleType_Sg____getitem____SWIG((gam::ChebyN< 9,float > const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby9_wet(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::wet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::wet",1,"gam::ChebyN< 9,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::wet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9_wet",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((gam::ChebyN< 9,SampleType > const *)arg1)->wet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby9_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::size",1,"gam::ChebyN< 9,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9_size",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  result = (unsigned int)((gam::ChebyN< 9,SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby9_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::coef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::coef",1,"gam::ChebyN< 9,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::coef",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9_coef",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float *) &(arg1)->coef(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby9_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  gam::ChebyN< 9,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::set",1,"gam::ChebyN< 9,SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::set",2,"SampleType const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9_set",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Cheby9_set",2,SWIGTYPE_p_float);
  }
  
  result = (gam::ChebyN< 9,SampleType > *) &(arg1)->set((SampleType const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_9_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cheby9_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) 0 ;
  gam::ChebyN< 9,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ChebyN< 9,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ChebyN< 9,SampleType >::zero",1,"gam::ChebyN< 9,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChebyNT_9_float_t,0))){
    SWIG_fail_ptr("Cheby9_zero",1,SWIGTYPE_p_gam__ChebyNT_9_float_t);
  }
  
  result = (gam::ChebyN< 9,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChebyNT_9_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cheby9(void *obj) {
gam::ChebyN< 9,SampleType > *arg1 = (gam::ChebyN< 9,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cheby9(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cheby9);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cheby9_attributes[] = {
    { "c", _wrap_Cheby9_c_get, _wrap_Cheby9_c_set },
    {0,0,0}
};
static swig_lua_method swig_Cheby9_methods[]= {
    { "__call", _wrap_Cheby9___call},
    { "__getitem", _wrap_Cheby9___getitem},
    { "wet", _wrap_Cheby9_wet},
    { "size", _wrap_Cheby9_size},
    { "coef", _wrap_Cheby9_coef},
    { "set", _wrap_Cheby9_set},
    { "zero", _wrap_Cheby9_zero},
    {0,0}
};
static swig_lua_method swig_Cheby9_meta[] = {
    { "__call", _wrap_Cheby9___call},
    { "__getitem", _wrap_Cheby9___getitem},
    {0,0}
};

static swig_lua_attribute swig_Cheby9_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cheby9_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cheby9_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cheby9_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cheby9_Sf_SwigStatic = {
    "Cheby9",
    swig_Cheby9_Sf_SwigStatic_methods,
    swig_Cheby9_Sf_SwigStatic_attributes,
    swig_Cheby9_Sf_SwigStatic_constants,
    swig_Cheby9_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cheby9_bases[] = {0};
static const char *swig_Cheby9_base_names[] = {0};
static swig_lua_class _wrap_class_Cheby9 = { "Cheby9", "Cheby9", &SWIGTYPE_p_gam__ChebyNT_9_float_t,_proxy__wrap_new_Cheby9, swig_delete_Cheby9, swig_Cheby9_methods, swig_Cheby9_attributes, &swig_Cheby9_Sf_SwigStatic, swig_Cheby9_meta, swig_Cheby9_bases, swig_Cheby9_base_names };

static int _wrap_new_Chorus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Chorus",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (gam::Chorus< SampleType > *)new gam::Chorus< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Chorus",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::Chorus< SampleType > *)new gam::Chorus< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Chorus",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Chorus< SampleType > *)new gam::Chorus< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Chorus",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chorus< SampleType > *)new gam::Chorus< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Chorus",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::Chorus",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Chorus< SampleType > *)new gam::Chorus< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Chorus",0,0)
  result = (gam::Chorus< SampleType > *)new gam::Chorus< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chorus(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Chorus__SWIG_5(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Chorus__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Chorus__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Chorus__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Chorus__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Chorus__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chorus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Chorus< SampleType >::Chorus(float,float,float,float,float)\n"
    "    gam::Chorus< SampleType >::Chorus(float,float,float,float)\n"
    "    gam::Chorus< SampleType >::Chorus(float,float,float)\n"
    "    gam::Chorus< SampleType >::Chorus(float,float)\n"
    "    gam::Chorus< SampleType >::Chorus(float)\n"
    "    gam::Chorus< SampleType >::Chorus()\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_maxDelay(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float arg2 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::maxDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::maxDelay",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::maxDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_maxDelay",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chorus< SampleType > *) &(arg1)->maxDelay(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_delay(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float arg2 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::delay",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::delay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_delay",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chorus< SampleType > *) &(arg1)->delay(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_fbk(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float arg2 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::fbk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::fbk",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::fbk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_fbk",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chorus< SampleType > *) &(arg1)->fbk(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_ffd(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float arg2 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::ffd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::ffd",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::ffd",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_ffd",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chorus< SampleType > *) &(arg1)->ffd(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float arg2 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::freq",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_freq",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chorus< SampleType > *) &(arg1)->freq(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_depth(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float arg2 ;
  gam::Chorus< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::depth",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::depth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_depth",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chorus< SampleType > *) &(arg1)->depth(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChorusT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::Tick",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::Tick",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_Tick",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)gam_Chorus_Sl_SampleType_Sg__Tick__SWIG(arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_Process(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::Process",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::Process",2,"float const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("gam::Chorus< SampleType >::Process",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gam::Chorus< SampleType >::Process",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_Process",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Chorus_Process",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Chorus_Process",4,SWIGTYPE_p_float);
  }
  
  gam_Chorus_Sl_SampleType_Sg__Process__SWIG(arg1,(float const &)*arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_filter_stereo(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  gam::Vec< 2,SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::filter_stereo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::filter_stereo",1,"gam::Chorus< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::filter_stereo",2,"gam::Vec< 2,SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_filter_stereo",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__VecT_2_float_t,0))){
    SWIG_fail_ptr("Chorus_filter_stereo",2,SWIGTYPE_p_gam__VecT_2_float_t);
  }
  
  gam_Chorus_Sl_SampleType_Sg__filter_stereo__SWIG(arg1,(gam::Vec< 2,float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_filter_samples(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float temp2 ;
  float temp3 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::filter_samples",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::filter_samples",1,"gam::Chorus< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::filter_samples",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chorus< SampleType >::filter_samples",3,"float const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gam::Chorus< SampleType >::filter_samples",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("gam::Chorus< SampleType >::filter_samples",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_filter_samples",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Chorus_filter_samples",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Chorus_filter_samples",5,SWIGTYPE_p_float);
  }
  
  gam_Chorus_Sl_SampleType_Sg__filter_samples__SWIG(arg1,(float const &)*arg2,(float const &)*arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_get_comb1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  gam::Comb< float,ipl::Cubic,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::get_comb1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::get_comb1",1,"gam::Chorus< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_get_comb1",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  result = (gam::Comb< float,ipl::Cubic,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_Chorus_Sl_SampleType_Sg__get_comb1__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_get_comb2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  gam::Comb< float,ipl::Cubic,gam::real,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::get_comb2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::get_comb2",1,"gam::Chorus< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_get_comb2",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  result = (gam::Comb< float,ipl::Cubic,gam::real,GAM_DEFAULT_DOMAIN > *) &gam_Chorus_Sl_SampleType_Sg__get_comb2__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_get_mod(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  gam::CSine< double,GAM_DEFAULT_DOMAIN > *result = 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::get_mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::get_mod",1,"gam::Chorus< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_get_mod",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  result = (gam::CSine< double,GAM_DEFAULT_DOMAIN > *) &gam_Chorus_Sl_SampleType_Sg__get_mod__SWIG(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_modulate(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::modulate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::modulate",1,"gam::Chorus< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_modulate",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  (arg1)->modulate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  CSine< double > arg2 ;
  CSine< double > *argp2 ;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::mod",1,"gam::Chorus< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Chorus< SampleType >::mod",2,"CSine< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_mod_set",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CSineT_double_t,0))){
    SWIG_fail_ptr("Chorus_mod_set",2,SWIGTYPE_p_CSineT_double_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) 0 ;
  CSine< double > result;
  
  SWIG_check_num_args("gam::Chorus< SampleType >::mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chorus< SampleType >::mod",1,"gam::Chorus< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChorusT_float_t,0))){
    SWIG_fail_ptr("Chorus_mod_get",1,SWIGTYPE_p_gam__ChorusT_float_t);
  }
  
  result =  ((arg1)->mod);
  {
    CSine< double > * resultptr = new CSine< double >((const CSine< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CSineT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Chorus(void *obj) {
gam::Chorus< SampleType > *arg1 = (gam::Chorus< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chorus(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chorus);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chorus_attributes[] = {
    { "mod", _wrap_Chorus_mod_get, _wrap_Chorus_mod_set },
    {0,0,0}
};
static swig_lua_method swig_Chorus_methods[]= {
    { "maxDelay", _wrap_Chorus_maxDelay},
    { "delay", _wrap_Chorus_delay},
    { "fbk", _wrap_Chorus_fbk},
    { "ffd", _wrap_Chorus_ffd},
    { "freq", _wrap_Chorus_freq},
    { "depth", _wrap_Chorus_depth},
    { "Tick", _wrap_Chorus_Tick},
    { "Process", _wrap_Chorus_Process},
    { "filter_stereo", _wrap_Chorus_filter_stereo},
    { "filter_samples", _wrap_Chorus_filter_samples},
    { "get_comb1", _wrap_Chorus_get_comb1},
    { "get_comb2", _wrap_Chorus_get_comb2},
    { "get_mod", _wrap_Chorus_get_mod},
    { "modulate", _wrap_Chorus_modulate},
    {0,0}
};
static swig_lua_method swig_Chorus_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chorus_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chorus_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chorus_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chorus_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chorus_Sf_SwigStatic = {
    "Chorus",
    swig_Chorus_Sf_SwigStatic_methods,
    swig_Chorus_Sf_SwigStatic_attributes,
    swig_Chorus_Sf_SwigStatic_constants,
    swig_Chorus_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chorus_bases[] = {0};
static const char *swig_Chorus_base_names[] = {0};
static swig_lua_class _wrap_class_Chorus = { "Chorus", "Chorus", &SWIGTYPE_p_gam__ChorusT_float_t,_proxy__wrap_new_Chorus, swig_delete_Chorus, swig_Chorus_methods, swig_Chorus_attributes, &swig_Chorus_Sf_SwigStatic, swig_Chorus_meta, swig_Chorus_bases, swig_Chorus_base_names };

static int _wrap_new_FreqShift__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::FreqShift< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::FreqShift",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::FreqShift",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::FreqShift< SampleType > *)new gam::FreqShift< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__FreqShiftT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FreqShift__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::FreqShift",0,0)
  result = (gam::FreqShift< SampleType > *)new gam::FreqShift< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__FreqShiftT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FreqShift(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FreqShift__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FreqShift__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FreqShift'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::FreqShift< SampleType >::FreqShift(float)\n"
    "    gam::FreqShift< SampleType >::FreqShift()\n");
  lua_error(L);return 0;
}


static int _wrap_FreqShift_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::Tick",1,"gam::FreqShift< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::FreqShift< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_Tick",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_FreqShift_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreqShift_get_mod(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  gam::CSine< float,GAM_DEFAULT_DOMAIN > result;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::get_mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::get_mod",1,"gam::FreqShift< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_get_mod",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  result = gam_FreqShift_Sl_SampleType_Sg__get_mod__SWIG(arg1);
  {
    gam::CSine< float,GAM_DEFAULT_DOMAIN > * resultptr = new gam::CSine< float,GAM_DEFAULT_DOMAIN >((const gam::CSine< float,GAM_DEFAULT_DOMAIN > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreqShift_get_hil(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  gam::Hilbert< float,gam::real > result;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::get_hil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::get_hil",1,"gam::FreqShift< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_get_hil",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  result = gam_FreqShift_Sl_SampleType_Sg__get_hil__SWIG(arg1);
  {
    gam::Hilbert< float,gam::real > * resultptr = new gam::Hilbert< float,gam::real >((const gam::Hilbert< float,gam::real > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__HilbertT_float_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreqShift_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  float arg2 ;
  gam::FreqShift< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::freq",1,"gam::FreqShift< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::FreqShift< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_freq",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::FreqShift< SampleType > *) &(arg1)->freq(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__FreqShiftT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreqShift_mod_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  CSine< float > arg2 ;
  CSine< float > *argp2 ;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::mod",1,"gam::FreqShift< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::FreqShift< SampleType >::mod",2,"CSine< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_mod_set",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CSineT_float_t,0))){
    SWIG_fail_ptr("FreqShift_mod_set",2,SWIGTYPE_p_CSineT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreqShift_mod_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  CSine< float > result;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::mod",1,"gam::FreqShift< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_mod_get",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  result =  ((arg1)->mod);
  {
    CSine< float > * resultptr = new CSine< float >((const CSine< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CSineT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreqShift_hil_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  Hilbert< float > arg2 ;
  Hilbert< float > *argp2 ;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::hil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::hil",1,"gam::FreqShift< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::FreqShift< SampleType >::hil",2,"Hilbert< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_hil_set",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_HilbertT_float_t,0))){
    SWIG_fail_ptr("FreqShift_hil_set",2,SWIGTYPE_p_HilbertT_float_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->hil = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FreqShift_hil_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) 0 ;
  Hilbert< float > result;
  
  SWIG_check_num_args("gam::FreqShift< SampleType >::hil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::FreqShift< SampleType >::hil",1,"gam::FreqShift< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__FreqShiftT_float_t,0))){
    SWIG_fail_ptr("FreqShift_hil_get",1,SWIGTYPE_p_gam__FreqShiftT_float_t);
  }
  
  result =  ((arg1)->hil);
  {
    Hilbert< float > * resultptr = new Hilbert< float >((const Hilbert< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_HilbertT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FreqShift(void *obj) {
gam::FreqShift< SampleType > *arg1 = (gam::FreqShift< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FreqShift(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FreqShift);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FreqShift_attributes[] = {
    { "mod", _wrap_FreqShift_mod_get, _wrap_FreqShift_mod_set },
    { "hil", _wrap_FreqShift_hil_get, _wrap_FreqShift_hil_set },
    {0,0,0}
};
static swig_lua_method swig_FreqShift_methods[]= {
    { "Tick", _wrap_FreqShift_Tick},
    { "get_mod", _wrap_FreqShift_get_mod},
    { "get_hil", _wrap_FreqShift_get_hil},
    { "freq", _wrap_FreqShift_freq},
    {0,0}
};
static swig_lua_method swig_FreqShift_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FreqShift_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FreqShift_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FreqShift_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FreqShift_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FreqShift_Sf_SwigStatic = {
    "FreqShift",
    swig_FreqShift_Sf_SwigStatic_methods,
    swig_FreqShift_Sf_SwigStatic_attributes,
    swig_FreqShift_Sf_SwigStatic_constants,
    swig_FreqShift_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FreqShift_bases[] = {0};
static const char *swig_FreqShift_base_names[] = {0};
static swig_lua_class _wrap_class_FreqShift = { "FreqShift", "FreqShift", &SWIGTYPE_p_gam__FreqShiftT_float_t,_proxy__wrap_new_FreqShift, swig_delete_FreqShift, swig_FreqShift_methods, swig_FreqShift_attributes, &swig_FreqShift_Sf_SwigStatic, swig_FreqShift_meta, swig_FreqShift_bases, swig_FreqShift_base_names };

static int _wrap_new_Pan__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Pan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Pan< SampleType >::Pan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Pan< SampleType >::Pan",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Pan< SampleType > *)new gam::Pan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__PanT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pan__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Pan< SampleType >::Pan",0,0)
  result = (gam::Pan< SampleType > *)new gam::Pan< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__PanT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Pan(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Pan__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Pan__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Pan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Pan< SampleType >::Pan(float)\n"
    "    gam::Pan< SampleType >::Pan()\n");
  lua_error(L);return 0;
}


static int _wrap_Pan_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pan< SampleType > *arg1 = (gam::Pan< SampleType > *) 0 ;
  float arg2 ;
  SwigValueWrapper< gam::Vec< 2,float > > result;
  
  SWIG_check_num_args("gam::Pan< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pan< SampleType >::Tick",1,"gam::Pan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pan< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PanT_float_t,0))){
    SWIG_fail_ptr("Pan_Tick",1,SWIGTYPE_p_gam__PanT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = gam_Pan_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  {
    gam::Vec< 2,float > * resultptr = new gam::Vec< 2,float >((const gam::Vec< 2,float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__VecT_2_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pan_filter(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pan< SampleType > *arg1 = (gam::Pan< SampleType > *) 0 ;
  float arg2 ;
  SampleType *arg3 = 0 ;
  SampleType *arg4 = 0 ;
  
  SWIG_check_num_args("gam::Pan< SampleType >::filter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pan< SampleType >::filter",1,"gam::Pan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pan< SampleType >::filter",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("gam::Pan< SampleType >::filter",3,"SampleType &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gam::Pan< SampleType >::filter",4,"SampleType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PanT_float_t,0))){
    SWIG_fail_ptr("Pan_filter",1,SWIGTYPE_p_gam__PanT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pan_filter",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pan_filter",4,SWIGTYPE_p_float);
  }
  
  gam_Pan_Sl_SampleType_Sg__filter__SWIG(arg1,arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pan_filter_sample(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pan< SampleType > *arg1 = (gam::Pan< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  SampleType *arg4 = 0 ;
  SampleType *arg5 = 0 ;
  
  SWIG_check_num_args("gam::Pan< SampleType >::filter_sample",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pan< SampleType >::filter_sample",1,"gam::Pan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pan< SampleType >::filter_sample",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Pan< SampleType >::filter_sample",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("gam::Pan< SampleType >::filter_sample",4,"SampleType &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("gam::Pan< SampleType >::filter_sample",5,"SampleType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PanT_float_t,0))){
    SWIG_fail_ptr("Pan_filter_sample",1,SWIGTYPE_p_gam__PanT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pan_filter_sample",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pan_filter_sample",5,SWIGTYPE_p_float);
  }
  
  gam_Pan_Sl_SampleType_Sg__filter_sample__SWIG(arg1,arg2,arg3,*arg4,*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pan_pos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pan< SampleType > *arg1 = (gam::Pan< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Pan< SampleType >::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pan< SampleType >::pos",1,"gam::Pan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pan< SampleType >::pos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PanT_float_t,0))){
    SWIG_fail_ptr("Pan_pos",1,SWIGTYPE_p_gam__PanT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->pos(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pan_pos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pan< SampleType > *arg1 = (gam::Pan< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::Pan< SampleType >::pos",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pan< SampleType >::pos",1,"gam::Pan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pan< SampleType >::pos",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Pan< SampleType >::pos",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PanT_float_t,0))){
    SWIG_fail_ptr("Pan_pos",1,SWIGTYPE_p_gam__PanT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->pos(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pan_pos(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__PanT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Pan_pos__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__PanT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Pan_pos__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pan_pos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Pan< SampleType >::pos(float)\n"
    "    gam::Pan< SampleType >::pos(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Pan_posL(lua_State* L) {
  int SWIG_arg = 0;
  gam::Pan< SampleType > *arg1 = (gam::Pan< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Pan< SampleType >::posL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Pan< SampleType >::posL",1,"gam::Pan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Pan< SampleType >::posL",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__PanT_float_t,0))){
    SWIG_fail_ptr("Pan_posL",1,SWIGTYPE_p_gam__PanT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->posL(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pan(void *obj) {
gam::Pan< SampleType > *arg1 = (gam::Pan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Pan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Pan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Pan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Pan_methods[]= {
    { "Tick", _wrap_Pan_Tick},
    { "filter", _wrap_Pan_filter},
    { "filter_sample", _wrap_Pan_filter_sample},
    { "pos", _wrap_Pan_pos},
    { "posL", _wrap_Pan_posL},
    {0,0}
};
static swig_lua_method swig_Pan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Pan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Pan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Pan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Pan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Pan_Sf_SwigStatic = {
    "Pan",
    swig_Pan_Sf_SwigStatic_methods,
    swig_Pan_Sf_SwigStatic_attributes,
    swig_Pan_Sf_SwigStatic_constants,
    swig_Pan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Pan_bases[] = {0};
static const char *swig_Pan_base_names[] = {0};
static swig_lua_class _wrap_class_Pan = { "Pan", "Pan", &SWIGTYPE_p_gam__PanT_float_t,_proxy__wrap_new_Pan, swig_delete_Pan, swig_Pan_methods, swig_Pan_attributes, &swig_Pan_Sf_SwigStatic, swig_Pan_meta, swig_Pan_bases, swig_Pan_base_names };

static int _wrap_new_Quantizer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  float arg2 ;
  gam::Quantizer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::Quantizer",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Quantizer< SampleType >::Quantizer",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Quantizer< SampleType >::Quantizer",2,"float");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Quantizer< SampleType > *)new gam::Quantizer< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quantizer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::Quantizer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::Quantizer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Quantizer< SampleType >::Quantizer",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::Quantizer< SampleType > *)new gam::Quantizer< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quantizer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Quantizer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::Quantizer",0,0)
  result = (gam::Quantizer< SampleType > *)new gam::Quantizer< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quantizer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quantizer__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Quantizer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Quantizer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quantizer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Quantizer< SampleType >::Quantizer(double,float)\n"
    "    gam::Quantizer< SampleType >::Quantizer(double)\n"
    "    gam::Quantizer< SampleType >::Quantizer()\n");
  lua_error(L);return 0;
}


static int _wrap_Quantizer_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Quantizer< SampleType > *arg1 = (gam::Quantizer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Quantizer< SampleType >::freq",1,"gam::Quantizer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Quantizer< SampleType >::freq",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Quantizer_freq",1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quantizer_period(lua_State* L) {
  int SWIG_arg = 0;
  gam::Quantizer< SampleType > *arg1 = (gam::Quantizer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Quantizer< SampleType >::period",1,"gam::Quantizer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Quantizer< SampleType >::period",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Quantizer_period",1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->period(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quantizer_step(lua_State* L) {
  int SWIG_arg = 0;
  gam::Quantizer< SampleType > *arg1 = (gam::Quantizer< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::step",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Quantizer< SampleType >::step",1,"gam::Quantizer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Quantizer< SampleType >::step",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Quantizer_step",1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->step(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quantizer_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Quantizer< SampleType > *arg1 = (gam::Quantizer< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Quantizer< SampleType >::Tick",1,"gam::Quantizer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Quantizer< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Quantizer_Tick",1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Quantizer_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quantizer_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::Quantizer< SampleType > *arg1 = (gam::Quantizer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Quantizer< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Quantizer< SampleType >::onDomainChange",1,"gam::Quantizer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Quantizer< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Quantizer_onDomainChange",1,SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quantizer(void *obj) {
gam::Quantizer< SampleType > *arg1 = (gam::Quantizer< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Quantizer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Quantizer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Quantizer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Quantizer_methods[]= {
    { "freq", _wrap_Quantizer_freq},
    { "period", _wrap_Quantizer_period},
    { "step", _wrap_Quantizer_step},
    { "Tick", _wrap_Quantizer_Tick},
    { "onDomainChange", _wrap_Quantizer_onDomainChange},
    {0,0}
};
static swig_lua_method swig_Quantizer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Quantizer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Quantizer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Quantizer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Quantizer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Quantizer_Sf_SwigStatic = {
    "Quantizer",
    swig_Quantizer_Sf_SwigStatic_methods,
    swig_Quantizer_Sf_SwigStatic_attributes,
    swig_Quantizer_Sf_SwigStatic_constants,
    swig_Quantizer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Quantizer_bases[] = {0};
static const char *swig_Quantizer_base_names[] = {0};
static swig_lua_class _wrap_class_Quantizer = { "Quantizer", "Quantizer", &SWIGTYPE_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Quantizer, swig_delete_Quantizer, swig_Quantizer_methods, swig_Quantizer_attributes, &swig_Quantizer_Sf_SwigStatic, swig_Quantizer_meta, swig_Quantizer_bases, swig_Quantizer_base_names };

static int _wrap_new_AllPass1__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::AllPass1< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::AllPass1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::AllPass1",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::AllPass1< SampleType,SampleType > *)new gam::AllPass1< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AllPass1__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::AllPass1",0,0)
  result = (gam::AllPass1< SampleType,SampleType > *)new gam::AllPass1< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AllPass1(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AllPass1__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AllPass1__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AllPass1'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AllPass1< SampleType,SampleType >::AllPass1(float)\n"
    "    gam::AllPass1< SampleType,SampleType >::AllPass1()\n");
  lua_error(L);return 0;
}


static int _wrap_AllPass1_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::freq",1,"gam::AllPass1< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_freq",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPass1_freqF(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::freqF",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::freqF",1,"gam::AllPass1< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::freqF",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_freqF",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freqF(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPass1_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::zero",1,"gam::AllPass1< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_zero",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPass1_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::Tick",1,"gam::AllPass1< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_Tick",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_AllPass1_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPass1_high(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::high",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::high",1,"gam::AllPass1< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::high",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_high",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->high(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPass1_low(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::low",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::low",1,"gam::AllPass1< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::low",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_low",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->low(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPass1_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::freq",1,"gam::AllPass1< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_freq",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AllPass1_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AllPass1_freq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AllPass1_freq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AllPass1_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AllPass1< SampleType,SampleType >::freq(float)\n"
    "    gam::AllPass1< SampleType,SampleType >::freq()\n");
  lua_error(L);return 0;
}


static int _wrap_AllPass1_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::AllPass1< SampleType,SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::onDomainChange",1,"gam::AllPass1< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass1< SampleType,SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass1_onDomainChange",1,SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AllPass1(void *obj) {
gam::AllPass1< SampleType,SampleType > *arg1 = (gam::AllPass1< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AllPass1(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AllPass1);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AllPass1_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AllPass1_methods[]= {
    { "freqF", _wrap_AllPass1_freqF},
    { "zero", _wrap_AllPass1_zero},
    { "Tick", _wrap_AllPass1_Tick},
    { "high", _wrap_AllPass1_high},
    { "low", _wrap_AllPass1_low},
    { "freq", _wrap_AllPass1_freq},
    { "onDomainChange", _wrap_AllPass1_onDomainChange},
    {0,0}
};
static swig_lua_method swig_AllPass1_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AllPass1_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AllPass1_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AllPass1_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AllPass1_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AllPass1_Sf_SwigStatic = {
    "AllPass1",
    swig_AllPass1_Sf_SwigStatic_methods,
    swig_AllPass1_Sf_SwigStatic_attributes,
    swig_AllPass1_Sf_SwigStatic_constants,
    swig_AllPass1_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AllPass1_bases[] = {0};
static const char *swig_AllPass1_base_names[] = {0};
static swig_lua_class _wrap_class_AllPass1 = { "AllPass1", "AllPass1", &SWIGTYPE_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_AllPass1, swig_delete_AllPass1, swig_AllPass1_methods, swig_AllPass1_attributes, &swig_AllPass1_Sf_SwigStatic, swig_AllPass1_meta, swig_AllPass1_bases, swig_AllPass1_base_names };

static int _wrap_new_Biquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::FilterType arg3 ;
  float arg4 ;
  gam::Biquad< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::Biquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",3,"gam::FilterType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (gam::FilterType)(int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::Biquad< SampleType,SampleType > *)new gam::Biquad< SampleType,SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::FilterType arg3 ;
  gam::Biquad< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::Biquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",3,"gam::FilterType");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (gam::FilterType)(int)lua_tonumber(L, 3);
  result = (gam::Biquad< SampleType,SampleType > *)new gam::Biquad< SampleType,SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Biquad< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::Biquad",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Biquad< SampleType,SampleType > *)new gam::Biquad< SampleType,SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Biquad< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::Biquad",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::Biquad",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Biquad< SampleType,SampleType > *)new gam::Biquad< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::Biquad",0,0)
  result = (gam::Biquad< SampleType,SampleType > *)new gam::Biquad< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Biquad__SWIG_4(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Biquad__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Biquad__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Biquad__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Biquad__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Biquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::Biquad(float,float,gam::FilterType,float)\n"
    "    gam::Biquad< SampleType,SampleType >::Biquad(float,float,gam::FilterType)\n"
    "    gam::Biquad< SampleType,SampleType >::Biquad(float,float)\n"
    "    gam::Biquad< SampleType,SampleType >::Biquad(float)\n"
    "    gam::Biquad< SampleType,SampleType >::Biquad()\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_a__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::a",1,"gam::Biquad< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_a",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *)((gam::Biquad< SampleType,SampleType > const *)arg1)->a();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_a__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::a",1,"gam::Biquad< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_a",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *)(arg1)->a();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_a(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_a__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_a__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_a'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::a() const\n"
    "    gam::Biquad< SampleType,SampleType >::a()\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_b__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::b",1,"gam::Biquad< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_b",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *)((gam::Biquad< SampleType,SampleType > const *)arg1)->b();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_b__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::b",1,"gam::Biquad< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_b",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *)(arg1)->b();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_b(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_b__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_b__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_b'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::b() const\n"
    "    gam::Biquad< SampleType,SampleType >::b()\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_coef(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::coef",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::coef",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::coef",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::coef",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::coef",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::coef",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::coef",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_coef",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->coef(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::freq",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_freq",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_res__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::res",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::res",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_res",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->res(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_level__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::level",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::level",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_level",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->level(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::set",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_set",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  gam::FilterType arg4 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::set",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::set",4,"gam::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_set",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (gam::FilterType)(int)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_set(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Biquad_set__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Biquad_set__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::set(float,float)\n"
    "    gam::Biquad< SampleType,SampleType >::set(float,float,gam::FilterType)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_type__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  gam::FilterType arg2 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::type",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::type",2,"gam::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_type",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (gam::FilterType)(int)lua_tonumber(L, 2);
  (arg1)->type(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::zero",1,"gam::Biquad< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_zero",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::operator ()",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad___call",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_nextBP(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::nextBP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::nextBP",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::nextBP",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_nextBP",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->nextBP(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::freq",1,"gam::Biquad< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_freq",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Biquad< SampleType,SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_freq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Biquad_freq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::freq(float)\n"
    "    gam::Biquad< SampleType,SampleType >::freq() const\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_res__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::res",1,"gam::Biquad< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_res",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Biquad< SampleType,SampleType > const *)arg1)->res();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_res(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_res__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Biquad_res__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_res'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::res(float)\n"
    "    gam::Biquad< SampleType,SampleType >::res() const\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_level__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::level",1,"gam::Biquad< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_level",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Biquad< SampleType,SampleType > const *)arg1)->level();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_level(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_level__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Biquad_level__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_level'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::level(float)\n"
    "    gam::Biquad< SampleType,SampleType >::level() const\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_type__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  gam::FilterType result;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::type",1,"gam::Biquad< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_type",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::FilterType)((gam::Biquad< SampleType,SampleType > const *)arg1)->type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_type(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Biquad_type__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Biquad_type__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_type'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Biquad< SampleType,SampleType >::type(gam::FilterType)\n"
    "    gam::Biquad< SampleType,SampleType >::type() const\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Biquad< SampleType,SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::onDomainChange",1,"gam::Biquad< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Biquad< SampleType,SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Biquad_onDomainChange",1,SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
gam::Biquad< SampleType,SampleType > *arg1 = (gam::Biquad< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "a", _wrap_Biquad_a},
    { "b", _wrap_Biquad_b},
    { "coef", _wrap_Biquad_coef},
    { "set", _wrap_Biquad_set},
    { "zero", _wrap_Biquad_zero},
    { "__call", _wrap_Biquad___call},
    { "nextBP", _wrap_Biquad_nextBP},
    { "freq", _wrap_Biquad_freq},
    { "res", _wrap_Biquad_res},
    { "level", _wrap_Biquad_level},
    { "type", _wrap_Biquad_type},
    { "onDomainChange", _wrap_Biquad_onDomainChange},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    { "__call", _wrap_Biquad___call},
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0};
static const char *swig_Biquad_base_names[] = {0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_new_BlockDC__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::BlockDC< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::BlockDC< SampleType,SampleType >::BlockDC",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::BlockDC",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::BlockDC< SampleType,SampleType > *)new gam::BlockDC< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlockDC__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockDC< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::BlockDC< SampleType,SampleType >::BlockDC",0,0)
  result = (gam::BlockDC< SampleType,SampleType > *)new gam::BlockDC< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlockDC(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BlockDC__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BlockDC__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BlockDC'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::BlockDC< SampleType,SampleType >::BlockDC(float)\n"
    "    gam::BlockDC< SampleType,SampleType >::BlockDC()\n");
  lua_error(L);return 0;
}


static int _wrap_BlockDC___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockDC< SampleType,SampleType > *arg1 = (gam::BlockDC< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::BlockDC< SampleType,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::operator ()",1,"gam::BlockDC< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("BlockDC___call",1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlockDC_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockDC< SampleType,SampleType > *arg1 = (gam::BlockDC< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::BlockDC< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::Tick",1,"gam::BlockDC< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("BlockDC_Tick",1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_BlockDC_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlockDC_width(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockDC< SampleType,SampleType > *arg1 = (gam::BlockDC< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::BlockDC< SampleType,SampleType >::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::width",1,"gam::BlockDC< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("BlockDC_width",1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->width(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlockDC_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockDC< SampleType,SampleType > *arg1 = (gam::BlockDC< SampleType,SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::BlockDC< SampleType,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::zero",1,"gam::BlockDC< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("BlockDC_zero",1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlockDC_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockDC< SampleType,SampleType > *arg1 = (gam::BlockDC< SampleType,SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::BlockDC< SampleType,SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::onDomainChange",1,"gam::BlockDC< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::BlockDC< SampleType,SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("BlockDC_onDomainChange",1,SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BlockDC(void *obj) {
gam::BlockDC< SampleType,SampleType > *arg1 = (gam::BlockDC< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlockDC(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlockDC);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlockDC_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BlockDC_methods[]= {
    { "__call", _wrap_BlockDC___call},
    { "Tick", _wrap_BlockDC_Tick},
    { "width", _wrap_BlockDC_width},
    { "zero", _wrap_BlockDC_zero},
    { "onDomainChange", _wrap_BlockDC_onDomainChange},
    {0,0}
};
static swig_lua_method swig_BlockDC_meta[] = {
    { "__call", _wrap_BlockDC___call},
    {0,0}
};

static swig_lua_attribute swig_BlockDC_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlockDC_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlockDC_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlockDC_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlockDC_Sf_SwigStatic = {
    "BlockDC",
    swig_BlockDC_Sf_SwigStatic_methods,
    swig_BlockDC_Sf_SwigStatic_attributes,
    swig_BlockDC_Sf_SwigStatic_constants,
    swig_BlockDC_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlockDC_bases[] = {0};
static const char *swig_BlockDC_base_names[] = {0};
static swig_lua_class _wrap_class_BlockDC = { "BlockDC", "BlockDC", &SWIGTYPE_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_BlockDC, swig_delete_BlockDC, swig_BlockDC_methods, swig_BlockDC_attributes, &swig_BlockDC_Sf_SwigStatic, swig_BlockDC_meta, swig_BlockDC_bases, swig_BlockDC_base_names };

static int _wrap_new_BlockNyq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::BlockNyq< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::BlockNyq< SampleType,SampleType >::BlockNyq",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::BlockNyq< SampleType,SampleType >::BlockNyq",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::BlockNyq< SampleType,SampleType > *)new gam::BlockNyq< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlockNyq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockNyq< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::BlockNyq< SampleType,SampleType >::BlockNyq",0,0)
  result = (gam::BlockNyq< SampleType,SampleType > *)new gam::BlockNyq< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BlockNyq(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BlockNyq__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BlockNyq__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BlockNyq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::BlockNyq< SampleType,SampleType >::BlockNyq(float)\n"
    "    gam::BlockNyq< SampleType,SampleType >::BlockNyq()\n");
  lua_error(L);return 0;
}


static int _wrap_BlockNyq_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockNyq< SampleType,SampleType > *arg1 = (gam::BlockNyq< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::BlockNyq< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::BlockNyq< SampleType,SampleType >::Tick",1,"gam::BlockNyq< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::BlockNyq< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("BlockNyq_Tick",1,SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_BlockNyq_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlockNyq_width(lua_State* L) {
  int SWIG_arg = 0;
  gam::BlockNyq< SampleType,SampleType > *arg1 = (gam::BlockNyq< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::BlockNyq< SampleType,SampleType >::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::BlockNyq< SampleType,SampleType >::width",1,"gam::BlockNyq< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::BlockNyq< SampleType,SampleType >::width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("BlockNyq_width",1,SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->width(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BlockNyq(void *obj) {
gam::BlockNyq< SampleType,SampleType > *arg1 = (gam::BlockNyq< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlockNyq(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlockNyq);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlockNyq_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BlockNyq_methods[]= {
    { "Tick", _wrap_BlockNyq_Tick},
    { "width", _wrap_BlockNyq_width},
    {0,0}
};
static swig_lua_method swig_BlockNyq_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlockNyq_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlockNyq_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlockNyq_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlockNyq_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlockNyq_Sf_SwigStatic = {
    "BlockNyq",
    swig_BlockNyq_Sf_SwigStatic_methods,
    swig_BlockNyq_Sf_SwigStatic_attributes,
    swig_BlockNyq_Sf_SwigStatic_constants,
    swig_BlockNyq_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlockNyq_bases[] = {0,0};
static const char *swig_BlockNyq_base_names[] = {"gam::BlockDC< SampleType,SampleType > *",0};
static swig_lua_class _wrap_class_BlockNyq = { "BlockNyq", "BlockNyq", &SWIGTYPE_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_BlockNyq, swig_delete_BlockNyq, swig_BlockNyq_methods, swig_BlockNyq_attributes, &swig_BlockNyq_Sf_SwigStatic, swig_BlockNyq_meta, swig_BlockNyq_bases, swig_BlockNyq_base_names };

static int _wrap_new_AllPass2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::AllPass2< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AllPass2< SampleType,SampleType >::AllPass2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AllPass2< SampleType,SampleType >::AllPass2",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass2< SampleType,SampleType >::AllPass2",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::AllPass2< SampleType,SampleType > *)new gam::AllPass2< SampleType,SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AllPass2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::AllPass2< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AllPass2< SampleType,SampleType >::AllPass2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AllPass2< SampleType,SampleType >::AllPass2",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::AllPass2< SampleType,SampleType > *)new gam::AllPass2< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AllPass2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass2< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AllPass2< SampleType,SampleType >::AllPass2",0,0)
  result = (gam::AllPass2< SampleType,SampleType > *)new gam::AllPass2< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AllPass2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AllPass2__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AllPass2__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AllPass2__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AllPass2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AllPass2< SampleType,SampleType >::AllPass2(float,float)\n"
    "    gam::AllPass2< SampleType,SampleType >::AllPass2(float)\n"
    "    gam::AllPass2< SampleType,SampleType >::AllPass2()\n");
  lua_error(L);return 0;
}


static int _wrap_AllPass2_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::AllPass2< SampleType,SampleType > *arg1 = (gam::AllPass2< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::AllPass2< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AllPass2< SampleType,SampleType >::Tick",1,"gam::AllPass2< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AllPass2< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AllPass2_Tick",1,SWIGTYPE_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_AllPass2_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AllPass2(void *obj) {
gam::AllPass2< SampleType,SampleType > *arg1 = (gam::AllPass2< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AllPass2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AllPass2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AllPass2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AllPass2_methods[]= {
    { "Tick", _wrap_AllPass2_Tick},
    {0,0}
};
static swig_lua_method swig_AllPass2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AllPass2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AllPass2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AllPass2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AllPass2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AllPass2_Sf_SwigStatic = {
    "AllPass2",
    swig_AllPass2_Sf_SwigStatic_methods,
    swig_AllPass2_Sf_SwigStatic_attributes,
    swig_AllPass2_Sf_SwigStatic_constants,
    swig_AllPass2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AllPass2_bases[] = {0};
static const char *swig_AllPass2_base_names[] = {0};
static swig_lua_class _wrap_class_AllPass2 = { "AllPass2", "AllPass2", &SWIGTYPE_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_AllPass2, swig_delete_AllPass2, swig_AllPass2_methods, swig_AllPass2_attributes, &swig_AllPass2_Sf_SwigStatic, swig_AllPass2_meta, swig_AllPass2_bases, swig_AllPass2_base_names };

static int _wrap_new_Notch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Notch< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Notch< SampleType,SampleType >::Notch",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::Notch",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::Notch",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Notch< SampleType,SampleType > *)new gam::Notch< SampleType,SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Notch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Notch< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Notch< SampleType,SampleType >::Notch",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::Notch",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Notch< SampleType,SampleType > *)new gam::Notch< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Notch__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Notch< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Notch< SampleType,SampleType >::Notch",0,0)
  result = (gam::Notch< SampleType,SampleType > *)new gam::Notch< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Notch(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Notch__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Notch__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Notch__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Notch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Notch< SampleType,SampleType >::Notch(float,float)\n"
    "    gam::Notch< SampleType,SampleType >::Notch(float)\n"
    "    gam::Notch< SampleType,SampleType >::Notch()\n");
  lua_error(L);return 0;
}


static int _wrap_Notch_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Notch< SampleType,SampleType > *arg1 = (gam::Notch< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Notch< SampleType,SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::freq",1,"gam::Notch< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Notch_freq",1,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Notch_width(lua_State* L) {
  int SWIG_arg = 0;
  gam::Notch< SampleType,SampleType > *arg1 = (gam::Notch< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Notch< SampleType,SampleType >::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::width",1,"gam::Notch< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Notch_width",1,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->width(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Notch_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Notch< SampleType,SampleType > *arg1 = (gam::Notch< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Notch< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::Tick",1,"gam::Notch< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Notch< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Notch_Tick",1,SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Notch_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Notch(void *obj) {
gam::Notch< SampleType,SampleType > *arg1 = (gam::Notch< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Notch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Notch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Notch_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Notch_methods[]= {
    { "freq", _wrap_Notch_freq},
    { "width", _wrap_Notch_width},
    { "Tick", _wrap_Notch_Tick},
    {0,0}
};
static swig_lua_method swig_Notch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Notch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Notch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Notch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Notch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Notch_Sf_SwigStatic = {
    "Notch",
    swig_Notch_Sf_SwigStatic_methods,
    swig_Notch_Sf_SwigStatic_attributes,
    swig_Notch_Sf_SwigStatic_constants,
    swig_Notch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Notch_bases[] = {0};
static const char *swig_Notch_base_names[] = {0};
static swig_lua_class _wrap_class_Notch = { "Notch", "Notch", &SWIGTYPE_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Notch, swig_delete_Notch, swig_Notch_methods, swig_Notch_attributes, &swig_Notch_Sf_SwigStatic, swig_Notch_meta, swig_Notch_bases, swig_Notch_base_names };

static int _wrap_new_Reson__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Reson< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::Reson",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::Reson",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::Reson",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Reson< SampleType,SampleType > *)new gam::Reson< SampleType,SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Reson__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Reson< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::Reson",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::Reson",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Reson< SampleType,SampleType > *)new gam::Reson< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Reson__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Reson< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::Reson",0,0)
  result = (gam::Reson< SampleType,SampleType > *)new gam::Reson< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Reson(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Reson__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Reson__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Reson__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Reson'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Reson< SampleType,SampleType >::Reson(float,float)\n"
    "    gam::Reson< SampleType,SampleType >::Reson(float)\n"
    "    gam::Reson< SampleType,SampleType >::Reson()\n");
  lua_error(L);return 0;
}


static int _wrap_Reson_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Reson< SampleType,SampleType > *arg1 = (gam::Reson< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::freq",1,"gam::Reson< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Reson_freq",1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Reson_width(lua_State* L) {
  int SWIG_arg = 0;
  gam::Reson< SampleType,SampleType > *arg1 = (gam::Reson< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::width",1,"gam::Reson< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::width",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Reson_width",1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->width(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Reson_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::Reson< SampleType,SampleType > *arg1 = (gam::Reson< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::set",1,"gam::Reson< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Reson_set",1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Reson___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::Reson< SampleType,SampleType > *arg1 = (gam::Reson< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::operator ()",1,"gam::Reson< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Reson___call",1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Reson_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Reson< SampleType,SampleType > *arg1 = (gam::Reson< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Reson< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::Tick",1,"gam::Reson< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Reson< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Reson_Tick",1,SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Reson_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Reson(void *obj) {
gam::Reson< SampleType,SampleType > *arg1 = (gam::Reson< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Reson(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Reson);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Reson_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Reson_methods[]= {
    { "freq", _wrap_Reson_freq},
    { "width", _wrap_Reson_width},
    { "set", _wrap_Reson_set},
    { "__call", _wrap_Reson___call},
    { "Tick", _wrap_Reson_Tick},
    {0,0}
};
static swig_lua_method swig_Reson_meta[] = {
    { "__call", _wrap_Reson___call},
    {0,0}
};

static swig_lua_attribute swig_Reson_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Reson_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Reson_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Reson_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Reson_Sf_SwigStatic = {
    "Reson",
    swig_Reson_Sf_SwigStatic_methods,
    swig_Reson_Sf_SwigStatic_attributes,
    swig_Reson_Sf_SwigStatic_constants,
    swig_Reson_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Reson_bases[] = {0};
static const char *swig_Reson_base_names[] = {0};
static swig_lua_class _wrap_class_Reson = { "Reson", "Reson", &SWIGTYPE_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Reson, swig_delete_Reson, swig_Reson_methods, swig_Reson_attributes, &swig_Reson_Sf_SwigStatic, swig_Reson_meta, swig_Reson_bases, swig_Reson_base_names };

static int _wrap_new_Hilbert(lua_State* L) {
  int SWIG_arg = 0;
  gam::Hilbert< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Hilbert< SampleType,SampleType >::Hilbert",0,0)
  result = (gam::Hilbert< SampleType,SampleType > *)new gam::Hilbert< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__HilbertT_float_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hilbert_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Hilbert< SampleType,SampleType > *arg1 = (gam::Hilbert< SampleType,SampleType > *) 0 ;
  float arg2 ;
  SwigValueWrapper< gam::Complex< float > > result;
  
  SWIG_check_num_args("gam::Hilbert< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Hilbert< SampleType,SampleType >::Tick",1,"gam::Hilbert< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Hilbert< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__HilbertT_float_float_t,0))){
    SWIG_fail_ptr("Hilbert_Tick",1,SWIGTYPE_p_gam__HilbertT_float_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = gam_Hilbert_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  {
    gam::Complex< float > * resultptr = new gam::Complex< float >((const gam::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hilbert_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::Hilbert< SampleType,SampleType > *arg1 = (gam::Hilbert< SampleType,SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Hilbert< SampleType,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Hilbert< SampleType,SampleType >::zero",1,"gam::Hilbert< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__HilbertT_float_float_t,0))){
    SWIG_fail_ptr("Hilbert_zero",1,SWIGTYPE_p_gam__HilbertT_float_float_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Hilbert(void *obj) {
gam::Hilbert< SampleType,SampleType > *arg1 = (gam::Hilbert< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Hilbert(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Hilbert);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Hilbert_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Hilbert_methods[]= {
    { "Tick", _wrap_Hilbert_Tick},
    { "zero", _wrap_Hilbert_zero},
    {0,0}
};
static swig_lua_method swig_Hilbert_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Hilbert_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Hilbert_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Hilbert_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Hilbert_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Hilbert_Sf_SwigStatic = {
    "Hilbert",
    swig_Hilbert_Sf_SwigStatic_methods,
    swig_Hilbert_Sf_SwigStatic_attributes,
    swig_Hilbert_Sf_SwigStatic_constants,
    swig_Hilbert_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Hilbert_bases[] = {0};
static const char *swig_Hilbert_base_names[] = {0};
static swig_lua_class _wrap_class_Hilbert = { "Hilbert", "Hilbert", &SWIGTYPE_p_gam__HilbertT_float_float_t,_proxy__wrap_new_Hilbert, swig_delete_Hilbert, swig_Hilbert_methods, swig_Hilbert_attributes, &swig_Hilbert_Sf_SwigStatic, swig_Hilbert_meta, swig_Hilbert_bases, swig_Hilbert_base_names };

static int _wrap_new_Integrator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Integrator< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Integrator< SampleType,SampleType >::Integrator",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::Integrator",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::Integrator",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Integrator< SampleType,SampleType > *)new gam::Integrator< SampleType,SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IntegratorT_float_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Integrator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Integrator< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Integrator< SampleType,SampleType >::Integrator",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::Integrator",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Integrator< SampleType,SampleType > *)new gam::Integrator< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IntegratorT_float_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Integrator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Integrator< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Integrator< SampleType,SampleType >::Integrator",0,0)
  result = (gam::Integrator< SampleType,SampleType > *)new gam::Integrator< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IntegratorT_float_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Integrator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Integrator__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Integrator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Integrator__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Integrator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Integrator< SampleType,SampleType >::Integrator(float,float)\n"
    "    gam::Integrator< SampleType,SampleType >::Integrator(float)\n"
    "    gam::Integrator< SampleType,SampleType >::Integrator()\n");
  lua_error(L);return 0;
}


static int _wrap_Integrator_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Integrator< SampleType,SampleType > *arg1 = (gam::Integrator< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Integrator< SampleType,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::Tick",1,"gam::Integrator< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IntegratorT_float_float_t,0))){
    SWIG_fail_ptr("Integrator_Tick",1,SWIGTYPE_p_gam__IntegratorT_float_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Integrator_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Integrator_leak(lua_State* L) {
  int SWIG_arg = 0;
  gam::Integrator< SampleType,SampleType > *arg1 = (gam::Integrator< SampleType,SampleType > *) 0 ;
  float arg2 ;
  gam::Integrator< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Integrator< SampleType,SampleType >::leak",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::leak",1,"gam::Integrator< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::leak",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IntegratorT_float_float_t,0))){
    SWIG_fail_ptr("Integrator_leak",1,SWIGTYPE_p_gam__IntegratorT_float_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Integrator< SampleType,SampleType > *) &(arg1)->leak(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IntegratorT_float_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Integrator_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::Integrator< SampleType,SampleType > *arg1 = (gam::Integrator< SampleType,SampleType > *) 0 ;
  gam::Integrator< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Integrator< SampleType,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Integrator< SampleType,SampleType >::zero",1,"gam::Integrator< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__IntegratorT_float_float_t,0))){
    SWIG_fail_ptr("Integrator_zero",1,SWIGTYPE_p_gam__IntegratorT_float_float_t);
  }
  
  result = (gam::Integrator< SampleType,SampleType > *) &(arg1)->zero();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__IntegratorT_float_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Integrator(void *obj) {
gam::Integrator< SampleType,SampleType > *arg1 = (gam::Integrator< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Integrator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Integrator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Integrator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Integrator_methods[]= {
    { "Tick", _wrap_Integrator_Tick},
    { "leak", _wrap_Integrator_leak},
    { "zero", _wrap_Integrator_zero},
    {0,0}
};
static swig_lua_method swig_Integrator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Integrator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Integrator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Integrator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Integrator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Integrator_Sf_SwigStatic = {
    "Integrator",
    swig_Integrator_Sf_SwigStatic_methods,
    swig_Integrator_Sf_SwigStatic_attributes,
    swig_Integrator_Sf_SwigStatic_constants,
    swig_Integrator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Integrator_bases[] = {0};
static const char *swig_Integrator_base_names[] = {0};
static swig_lua_class _wrap_class_Integrator = { "Integrator", "Integrator", &SWIGTYPE_p_gam__IntegratorT_float_float_t,_proxy__wrap_new_Integrator, swig_delete_Integrator, swig_Integrator_methods, swig_Integrator_attributes, &swig_Integrator_Sf_SwigStatic, swig_Integrator_meta, swig_Integrator_bases, swig_Integrator_base_names };

static int _wrap_Differencer_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Differencer< SampleType > *arg1 = (gam::Differencer< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Differencer< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Differencer< SampleType >::Tick",1,"gam::Differencer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Differencer< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DifferencerT_float_t,0))){
    SWIG_fail_ptr("Differencer_Tick",1,SWIGTYPE_p_gam__DifferencerT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Differencer_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Differencer(lua_State* L) {
  int SWIG_arg = 0;
  gam::Differencer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Differencer< SampleType >::Differencer",0,0)
  result = (gam::Differencer< SampleType > *)new gam::Differencer< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DifferencerT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Differencer(void *obj) {
gam::Differencer< SampleType > *arg1 = (gam::Differencer< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Differencer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Differencer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Differencer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Differencer_methods[]= {
    { "Tick", _wrap_Differencer_Tick},
    {0,0}
};
static swig_lua_method swig_Differencer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Differencer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Differencer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Differencer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Differencer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Differencer_Sf_SwigStatic = {
    "Differencer",
    swig_Differencer_Sf_SwigStatic_methods,
    swig_Differencer_Sf_SwigStatic_attributes,
    swig_Differencer_Sf_SwigStatic_constants,
    swig_Differencer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Differencer_bases[] = {0};
static const char *swig_Differencer_base_names[] = {0};
static swig_lua_class _wrap_class_Differencer = { "Differencer", "Differencer", &SWIGTYPE_p_gam__DifferencerT_float_t,_proxy__wrap_new_Differencer, swig_delete_Differencer, swig_Differencer_methods, swig_Differencer_attributes, &swig_Differencer_Sf_SwigStatic, swig_Differencer_meta, swig_Differencer_bases, swig_Differencer_base_names };

static int _wrap_new_MovingAvg__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::MovingAvg< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::MovingAvg< SampleType >::MovingAvg",0,0)
  result = (gam::MovingAvg< SampleType > *)new gam::MovingAvg< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MovingAvgT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MovingAvg__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gam::MovingAvg< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::MovingAvg< SampleType >::MovingAvg",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::MovingAvg< SampleType >::MovingAvg",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (gam::MovingAvg< SampleType > *)new gam::MovingAvg< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__MovingAvgT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MovingAvg(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MovingAvg__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MovingAvg__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MovingAvg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::MovingAvg< SampleType >::MovingAvg()\n"
    "    gam::MovingAvg< SampleType >::MovingAvg(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_MovingAvg_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::MovingAvg< SampleType > *arg1 = (gam::MovingAvg< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::MovingAvg< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MovingAvg< SampleType >::Tick",1,"gam::MovingAvg< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::MovingAvg< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MovingAvgT_float_t,0))){
    SWIG_fail_ptr("MovingAvg_Tick",1,SWIGTYPE_p_gam__MovingAvgT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_MovingAvg_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MovingAvg_onResize(lua_State* L) {
  int SWIG_arg = 0;
  gam::MovingAvg< SampleType > *arg1 = (gam::MovingAvg< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::MovingAvg< SampleType >::onResize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::MovingAvg< SampleType >::onResize",1,"gam::MovingAvg< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__MovingAvgT_float_t,0))){
    SWIG_fail_ptr("MovingAvg_onResize",1,SWIGTYPE_p_gam__MovingAvgT_float_t);
  }
  
  (arg1)->onResize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MovingAvg(void *obj) {
gam::MovingAvg< SampleType > *arg1 = (gam::MovingAvg< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MovingAvg(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MovingAvg);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MovingAvg_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MovingAvg_methods[]= {
    { "Tick", _wrap_MovingAvg_Tick},
    { "onResize", _wrap_MovingAvg_onResize},
    {0,0}
};
static swig_lua_method swig_MovingAvg_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MovingAvg_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MovingAvg_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MovingAvg_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MovingAvg_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MovingAvg_Sf_SwigStatic = {
    "MovingAvg",
    swig_MovingAvg_Sf_SwigStatic_methods,
    swig_MovingAvg_Sf_SwigStatic_attributes,
    swig_MovingAvg_Sf_SwigStatic_constants,
    swig_MovingAvg_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MovingAvg_bases[] = {0,0};
static const char *swig_MovingAvg_base_names[] = {"gam::DelayN< SampleType > *",0};
static swig_lua_class _wrap_class_MovingAvg = { "MovingAvg", "MovingAvg", &SWIGTYPE_p_gam__MovingAvgT_float_t,_proxy__wrap_new_MovingAvg, swig_delete_MovingAvg, swig_MovingAvg_methods, swig_MovingAvg_attributes, &swig_MovingAvg_Sf_SwigStatic, swig_MovingAvg_meta, swig_MovingAvg_bases, swig_MovingAvg_base_names };

static int _wrap_new_OnePole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::FilterType arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  gam::OnePole< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::OnePole",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::OnePole",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::OnePole",2,"gam::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::OnePole",3,"float const &");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (gam::FilterType)(int)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (gam::OnePole< SampleType,SampleType > *)new gam::OnePole< SampleType,SampleType >(arg1,arg2,(float const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::FilterType arg2 ;
  gam::OnePole< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::OnePole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::OnePole",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::OnePole",2,"gam::FilterType");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (gam::FilterType)(int)lua_tonumber(L, 2);
  result = (gam::OnePole< SampleType,SampleType > *)new gam::OnePole< SampleType,SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::OnePole< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::OnePole",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::OnePole",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::OnePole< SampleType,SampleType > *)new gam::OnePole< SampleType,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::OnePole",0,0)
  result = (gam::OnePole< SampleType,SampleType > *)new gam::OnePole< SampleType,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnePole(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OnePole__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OnePole__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_OnePole__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_OnePole__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OnePole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::OnePole< SampleType,SampleType >::OnePole(float,gam::FilterType,float const &)\n"
    "    gam::OnePole< SampleType,SampleType >::OnePole(float,gam::FilterType)\n"
    "    gam::OnePole< SampleType,SampleType >::OnePole(float)\n"
    "    gam::OnePole< SampleType,SampleType >::OnePole()\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::freq",1,"gam::OnePole< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_freq",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *) &((gam::OnePole< SampleType,SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_type(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  gam::FilterType arg2 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::type",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::type",2,"gam::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_type",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (gam::FilterType)(int)lua_tonumber(L, 2);
  (arg1)->type(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::freq",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_freq",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OnePole_freq__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OnePole_freq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OnePole_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::OnePole< SampleType,SampleType >::freq() const\n"
    "    gam::OnePole< SampleType,SampleType >::freq(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_lag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::lag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::lag",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::lag",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::lag",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_lag",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->lag(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_lag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::lag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::lag",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::lag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_lag",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->lag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_lag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OnePole_lag__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_OnePole_lag__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OnePole_lag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::OnePole< SampleType,SampleType >::lag(float,float)\n"
    "    gam::OnePole< SampleType,SampleType >::lag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_smooth(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::smooth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::smooth",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::smooth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_smooth",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->smooth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_zero(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::zero",1,"gam::OnePole< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_zero",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::reset",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::reset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_reset",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::reset",1,"gam::OnePole< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_reset",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OnePole_reset__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OnePole_reset__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OnePole_reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::OnePole< SampleType,SampleType >::reset(float)\n"
    "    gam::OnePole< SampleType,SampleType >::reset()\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::Tick",1,"gam::OnePole< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_Tick",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *) &gam_OnePole_Sl_SampleType_Sc_SampleType_Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_Process(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::Process",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_Process",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float *) &gam_OnePole_Sl_SampleType_Sc_SampleType_Sg__Process__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_last(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::last",1,"gam::OnePole< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_last",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *) &((gam::OnePole< SampleType,SampleType > const *)arg1)->last();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_stored__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::stored",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::stored",1,"gam::OnePole< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_stored",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *) &((gam::OnePole< SampleType,SampleType > const *)arg1)->stored();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_stored__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::stored",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::stored",1,"gam::OnePole< SampleType,SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_stored",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float *) &(arg1)->stored();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_stored(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OnePole_stored__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OnePole_stored__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OnePole_stored'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::OnePole< SampleType,SampleType >::stored() const\n"
    "    gam::OnePole< SampleType,SampleType >::stored()\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_zeroing__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::zeroing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::zeroing",1,"gam::OnePole< SampleType,SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::zeroing",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_zeroing",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)((gam::OnePole< SampleType,SampleType > const *)arg1)->zeroing(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_zeroing__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::zeroing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::zeroing",1,"gam::OnePole< SampleType,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_zeroing",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)((gam::OnePole< SampleType,SampleType > const *)arg1)->zeroing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePole_zeroing(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_OnePole_zeroing__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_OnePole_zeroing__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OnePole_zeroing'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::OnePole< SampleType,SampleType >::zeroing(float) const\n"
    "    gam::OnePole< SampleType,SampleType >::zeroing() const\n");
  lua_error(L);return 0;
}


static int _wrap_OnePole_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::OnePole< SampleType,SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::onDomainChange",1,"gam::OnePole< SampleType,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::OnePole< SampleType,SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("OnePole_onDomainChange",1,SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnePole(void *obj) {
gam::OnePole< SampleType,SampleType > *arg1 = (gam::OnePole< SampleType,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnePole(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnePole);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnePole_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OnePole_methods[]= {
    { "type", _wrap_OnePole_type},
    { "freq", _wrap_OnePole_freq},
    { "lag", _wrap_OnePole_lag},
    { "smooth", _wrap_OnePole_smooth},
    { "zero", _wrap_OnePole_zero},
    { "reset", _wrap_OnePole_reset},
    { "Tick", _wrap_OnePole_Tick},
    { "Process", _wrap_OnePole_Process},
    { "last", _wrap_OnePole_last},
    { "stored", _wrap_OnePole_stored},
    { "zeroing", _wrap_OnePole_zeroing},
    { "onDomainChange", _wrap_OnePole_onDomainChange},
    {0,0}
};
static swig_lua_method swig_OnePole_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnePole_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnePole_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnePole_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnePole_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnePole_Sf_SwigStatic = {
    "OnePole",
    swig_OnePole_Sf_SwigStatic_methods,
    swig_OnePole_Sf_SwigStatic_attributes,
    swig_OnePole_Sf_SwigStatic_constants,
    swig_OnePole_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnePole_bases[] = {0};
static const char *swig_OnePole_base_names[] = {0};
static swig_lua_class _wrap_class_OnePole = { "OnePole", "OnePole", &SWIGTYPE_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_OnePole, swig_delete_OnePole, swig_OnePole_methods, swig_OnePole_attributes, &swig_OnePole_Sf_SwigStatic, swig_OnePole_meta, swig_OnePole_bases, swig_OnePole_base_names };

static int _wrap_Vowel_amp(lua_State* L) {
  int SWIG_arg = 0;
  gam::Vowel::Voice arg1 ;
  gam::Vowel::Phoneme arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("gam::Vowel::amp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Vowel::amp",1,"gam::Vowel::Voice");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Vowel::amp",2,"gam::Vowel::Phoneme");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Vowel::amp",3,"int");
  arg1 = (gam::Vowel::Voice)(int)lua_tonumber(L, 1);
  arg2 = (gam::Vowel::Phoneme)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)gam::Vowel::amp(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vowel_dB(lua_State* L) {
  int SWIG_arg = 0;
  gam::Vowel::Voice arg1 ;
  gam::Vowel::Phoneme arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("gam::Vowel::dB",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Vowel::dB",1,"gam::Vowel::Voice");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Vowel::dB",2,"gam::Vowel::Phoneme");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Vowel::dB",3,"int");
  arg1 = (gam::Vowel::Voice)(int)lua_tonumber(L, 1);
  arg2 = (gam::Vowel::Phoneme)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)gam::Vowel::dB(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vowel_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Vowel::Voice arg1 ;
  gam::Vowel::Phoneme arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("gam::Vowel::freq",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Vowel::freq",1,"gam::Vowel::Voice");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Vowel::freq",2,"gam::Vowel::Phoneme");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Vowel::freq",3,"int");
  arg1 = (gam::Vowel::Voice)(int)lua_tonumber(L, 1);
  arg2 = (gam::Vowel::Phoneme)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)gam::Vowel::freq(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vowel_pitch(lua_State* L) {
  int SWIG_arg = 0;
  gam::Vowel::Voice arg1 ;
  gam::Vowel::Phoneme arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("gam::Vowel::pitch",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Vowel::pitch",1,"gam::Vowel::Voice");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Vowel::pitch",2,"gam::Vowel::Phoneme");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Vowel::pitch",3,"int");
  arg1 = (gam::Vowel::Voice)(int)lua_tonumber(L, 1);
  arg2 = (gam::Vowel::Phoneme)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)gam::Vowel::pitch(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vowel(lua_State* L) {
  int SWIG_arg = 0;
  gam::Vowel *result = 0 ;
  
  SWIG_check_num_args("gam::Vowel::Vowel",0,0)
  result = (gam::Vowel *)new gam::Vowel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Vowel,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vowel(void *obj) {
gam::Vowel *arg1 = (gam::Vowel *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vowel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vowel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vowel_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vowel_methods[]= {
    {0,0}
};
static swig_lua_method swig_Vowel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Vowel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vowel_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MAN", gam::Vowel::MAN)},
    {SWIG_LUA_CONSTTAB_INT("WOMAN", gam::Vowel::WOMAN)},
    {SWIG_LUA_CONSTTAB_INT("CHILD", gam::Vowel::CHILD)},
    {SWIG_LUA_CONSTTAB_INT("NUM_VOICES", gam::Vowel::NUM_VOICES)},
    {SWIG_LUA_CONSTTAB_INT("HEED", gam::Vowel::HEED)},
    {SWIG_LUA_CONSTTAB_INT("HID", gam::Vowel::HID)},
    {SWIG_LUA_CONSTTAB_INT("HEAD", gam::Vowel::HEAD)},
    {SWIG_LUA_CONSTTAB_INT("HAD", gam::Vowel::HAD)},
    {SWIG_LUA_CONSTTAB_INT("HOD", gam::Vowel::HOD)},
    {SWIG_LUA_CONSTTAB_INT("HAWED", gam::Vowel::HAWED)},
    {SWIG_LUA_CONSTTAB_INT("HOOD", gam::Vowel::HOOD)},
    {SWIG_LUA_CONSTTAB_INT("WHOD", gam::Vowel::WHOD)},
    {SWIG_LUA_CONSTTAB_INT("HUD", gam::Vowel::HUD)},
    {SWIG_LUA_CONSTTAB_INT("HEARD", gam::Vowel::HEARD)},
    {SWIG_LUA_CONSTTAB_INT("NUM_PHONEMES", gam::Vowel::NUM_PHONEMES)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vowel_Sf_SwigStatic_methods[]= {
    { "amp", _wrap_Vowel_amp},
    { "dB", _wrap_Vowel_dB},
    { "freq", _wrap_Vowel_freq},
    { "pitch", _wrap_Vowel_pitch},
    {0,0}
};
static swig_lua_class* swig_Vowel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vowel_Sf_SwigStatic = {
    "Vowel",
    swig_Vowel_Sf_SwigStatic_methods,
    swig_Vowel_Sf_SwigStatic_attributes,
    swig_Vowel_Sf_SwigStatic_constants,
    swig_Vowel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vowel_bases[] = {0};
static const char *swig_Vowel_base_names[] = {0};
static swig_lua_class _wrap_class_Vowel = { "Vowel", "Vowel", &SWIGTYPE_p_gam__Vowel,_proxy__wrap_new_Vowel, swig_delete_Vowel, swig_Vowel_methods, swig_Vowel_attributes, &swig_Vowel_Sf_SwigStatic, swig_Vowel_meta, swig_Vowel_bases, swig_Vowel_base_names };

static int _wrap_new_NoiseBrown__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  uint32_t arg5 ;
  gam::NoiseBrown< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::NoiseBrown",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",5,"uint32_t");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (uint32_t)lua_tonumber(L, 5);
  result = (gam::NoiseBrown< > *)new gam::NoiseBrown< >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBrown__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::NoiseBrown< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::NoiseBrown",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::NoiseBrown< > *)new gam::NoiseBrown< >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBrown__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::NoiseBrown< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::NoiseBrown",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::NoiseBrown< > *)new gam::NoiseBrown< >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBrown__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::NoiseBrown< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::NoiseBrown",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::NoiseBrown< > *)new gam::NoiseBrown< >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBrown__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::NoiseBrown< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::NoiseBrown",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::NoiseBrown",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::NoiseBrown< > *)new gam::NoiseBrown< >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBrown__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::NoiseBrown",0,0)
  result = (gam::NoiseBrown< > *)new gam::NoiseBrown< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBrown(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NoiseBrown__SWIG_5(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_NoiseBrown__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NoiseBrown__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_NoiseBrown__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NoiseBrown__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NoiseBrown__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NoiseBrown'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::NoiseBrown< >::NoiseBrown(float,float,float,float,uint32_t)\n"
    "    gam::NoiseBrown< >::NoiseBrown(float,float,float,float)\n"
    "    gam::NoiseBrown< >::NoiseBrown(float,float,float)\n"
    "    gam::NoiseBrown< >::NoiseBrown(float,float)\n"
    "    gam::NoiseBrown< >::NoiseBrown(float)\n"
    "    gam::NoiseBrown< >::NoiseBrown()\n");
  lua_error(L);return 0;
}


static int _wrap_NoiseBrown_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseBrown< >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::Tick",1,"gam::NoiseBrown< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_Tick",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  result = (float)gam_NoiseBrown_Sl__Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_val_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::val",1,"gam::NoiseBrown< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::val",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_val_set",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_val_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseBrown< >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::val",1,"gam::NoiseBrown< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_val_get",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  result = (float) ((arg1)->val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_step_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::step",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::step",1,"gam::NoiseBrown< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::step",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_step_set",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->step = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_step_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseBrown< >::step",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::step",1,"gam::NoiseBrown< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_step_get",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  result = (float) ((arg1)->step);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_min_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::min",1,"gam::NoiseBrown< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::min",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_min_set",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_min_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseBrown< >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::min",1,"gam::NoiseBrown< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_min_get",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  result = (float) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_max_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::NoiseBrown< >::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::max",1,"gam::NoiseBrown< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBrown< >::max",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_max_set",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBrown_max_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseBrown< >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBrown< >::max",1,"gam::NoiseBrown< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBrown_max_get",1,SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t);
  }
  
  result = (float) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseBrown(void *obj) {
gam::NoiseBrown< > *arg1 = (gam::NoiseBrown< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseBrown(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseBrown);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseBrown_attributes[] = {
    { "val", _wrap_NoiseBrown_val_get, _wrap_NoiseBrown_val_set },
    { "step", _wrap_NoiseBrown_step_get, _wrap_NoiseBrown_step_set },
    { "min", _wrap_NoiseBrown_min_get, _wrap_NoiseBrown_min_set },
    { "max", _wrap_NoiseBrown_max_get, _wrap_NoiseBrown_max_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseBrown_methods[]= {
    { "Tick", _wrap_NoiseBrown_Tick},
    {0,0}
};
static swig_lua_method swig_NoiseBrown_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseBrown_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseBrown_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseBrown_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseBrown_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseBrown_Sf_SwigStatic = {
    "NoiseBrown",
    swig_NoiseBrown_Sf_SwigStatic_methods,
    swig_NoiseBrown_Sf_SwigStatic_attributes,
    swig_NoiseBrown_Sf_SwigStatic_constants,
    swig_NoiseBrown_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseBrown_bases[] = {0};
static const char *swig_NoiseBrown_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseBrown = { "NoiseBrown", "NoiseBrown", &SWIGTYPE_p_gam__NoiseBrownT_RNGLinCon_t,_proxy__wrap_new_NoiseBrown, swig_delete_NoiseBrown, swig_NoiseBrown_methods, swig_NoiseBrown_attributes, &swig_NoiseBrown_Sf_SwigStatic, swig_NoiseBrown_meta, swig_NoiseBrown_bases, swig_NoiseBrown_base_names };

static int _wrap_new_NoisePink__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoisePink< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoisePink< >::NoisePink",0,0)
  result = (gam::NoisePink< > *)new gam::NoisePink< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoisePinkT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoisePink__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  gam::NoisePink< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoisePink< >::NoisePink",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoisePink< >::NoisePink",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (gam::NoisePink< > *)new gam::NoisePink< >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoisePinkT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoisePink(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NoisePink__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_NoisePink__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NoisePink'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::NoisePink< >::NoisePink()\n"
    "    gam::NoisePink< >::NoisePink(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NoisePink_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoisePink< > *arg1 = (gam::NoisePink< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoisePink< >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoisePink< >::Tick",1,"gam::NoisePink< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoisePinkT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoisePink_Tick",1,SWIGTYPE_p_gam__NoisePinkT_RNGLinCon_t);
  }
  
  result = (float)gam_NoisePink_Sl__Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoisePink(void *obj) {
gam::NoisePink< > *arg1 = (gam::NoisePink< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoisePink(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoisePink);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoisePink_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NoisePink_methods[]= {
    { "Tick", _wrap_NoisePink_Tick},
    {0,0}
};
static swig_lua_method swig_NoisePink_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoisePink_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoisePink_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoisePink_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoisePink_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoisePink_Sf_SwigStatic = {
    "NoisePink",
    swig_NoisePink_Sf_SwigStatic_methods,
    swig_NoisePink_Sf_SwigStatic_attributes,
    swig_NoisePink_Sf_SwigStatic_constants,
    swig_NoisePink_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoisePink_bases[] = {0};
static const char *swig_NoisePink_base_names[] = {0};
static swig_lua_class _wrap_class_NoisePink = { "NoisePink", "NoisePink", &SWIGTYPE_p_gam__NoisePinkT_RNGLinCon_t,_proxy__wrap_new_NoisePink, swig_delete_NoisePink, swig_NoisePink_methods, swig_NoisePink_attributes, &swig_NoisePink_Sf_SwigStatic, swig_NoisePink_meta, swig_NoisePink_bases, swig_NoisePink_base_names };

static int _wrap_NoiseWhite_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseWhite< > *arg1 = (gam::NoiseWhite< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseWhite< >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseWhite< >::Tick",1,"gam::NoiseWhite< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseWhiteT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseWhite_Tick",1,SWIGTYPE_p_gam__NoiseWhiteT_RNGLinCon_t);
  }
  
  result = (float)gam_NoiseWhite_Sl__Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseWhite(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseWhite< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseWhite< >::NoiseWhite",0,0)
  result = (gam::NoiseWhite< > *)new gam::NoiseWhite< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseWhiteT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseWhite(void *obj) {
gam::NoiseWhite< > *arg1 = (gam::NoiseWhite< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseWhite(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseWhite);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseWhite_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NoiseWhite_methods[]= {
    { "Tick", _wrap_NoiseWhite_Tick},
    {0,0}
};
static swig_lua_method swig_NoiseWhite_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseWhite_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseWhite_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseWhite_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseWhite_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseWhite_Sf_SwigStatic = {
    "NoiseWhite",
    swig_NoiseWhite_Sf_SwigStatic_methods,
    swig_NoiseWhite_Sf_SwigStatic_attributes,
    swig_NoiseWhite_Sf_SwigStatic_constants,
    swig_NoiseWhite_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseWhite_bases[] = {0};
static const char *swig_NoiseWhite_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseWhite = { "NoiseWhite", "NoiseWhite", &SWIGTYPE_p_gam__NoiseWhiteT_RNGLinCon_t,_proxy__wrap_new_NoiseWhite, swig_delete_NoiseWhite, swig_NoiseWhite_methods, swig_NoiseWhite_attributes, &swig_NoiseWhite_Sf_SwigStatic, swig_NoiseWhite_meta, swig_NoiseWhite_bases, swig_NoiseWhite_base_names };

static int _wrap_new_NoiseBinary__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint32_t arg2 ;
  gam::NoiseBinary< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBinary< >::NoiseBinary",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoiseBinary< >::NoiseBinary",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBinary< >::NoiseBinary",2,"uint32_t");
  arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (gam::NoiseBinary< > *)new gam::NoiseBinary< >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBinary__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::NoiseBinary< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBinary< >::NoiseBinary",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::NoiseBinary< >::NoiseBinary",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::NoiseBinary< > *)new gam::NoiseBinary< >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBinary__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBinary< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseBinary< >::NoiseBinary",0,0)
  result = (gam::NoiseBinary< > *)new gam::NoiseBinary< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseBinary(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NoiseBinary__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_NoiseBinary__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NoiseBinary__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NoiseBinary'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::NoiseBinary< >::NoiseBinary(float,uint32_t)\n"
    "    gam::NoiseBinary< >::NoiseBinary(float)\n"
    "    gam::NoiseBinary< >::NoiseBinary()\n");
  lua_error(L);return 0;
}


static int _wrap_NoiseBinary_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBinary< > *arg1 = (gam::NoiseBinary< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseBinary< >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBinary< >::Tick",1,"gam::NoiseBinary< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBinary_Tick",1,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t);
  }
  
  result = (float)gam_NoiseBinary_Sl__Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBinary_amp_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBinary< > *arg1 = (gam::NoiseBinary< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::NoiseBinary< >::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBinary< >::amp",1,"gam::NoiseBinary< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::NoiseBinary< >::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBinary_amp_set",1,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->amp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NoiseBinary_amp_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseBinary< > *arg1 = (gam::NoiseBinary< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseBinary< >::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseBinary< >::amp",1,"gam::NoiseBinary< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseBinary_amp_get",1,SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t);
  }
  
  result = (float) ((arg1)->amp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseBinary(void *obj) {
gam::NoiseBinary< > *arg1 = (gam::NoiseBinary< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseBinary(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseBinary);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseBinary_attributes[] = {
    { "amp", _wrap_NoiseBinary_amp_get, _wrap_NoiseBinary_amp_set },
    {0,0,0}
};
static swig_lua_method swig_NoiseBinary_methods[]= {
    { "Tick", _wrap_NoiseBinary_Tick},
    {0,0}
};
static swig_lua_method swig_NoiseBinary_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseBinary_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseBinary_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseBinary_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseBinary_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseBinary_Sf_SwigStatic = {
    "NoiseBinary",
    swig_NoiseBinary_Sf_SwigStatic_methods,
    swig_NoiseBinary_Sf_SwigStatic_attributes,
    swig_NoiseBinary_Sf_SwigStatic_constants,
    swig_NoiseBinary_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseBinary_bases[] = {0};
static const char *swig_NoiseBinary_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseBinary = { "NoiseBinary", "NoiseBinary", &SWIGTYPE_p_gam__NoiseBinaryT_RNGLinCon_t,_proxy__wrap_new_NoiseBinary, swig_delete_NoiseBinary, swig_NoiseBinary_methods, swig_NoiseBinary_attributes, &swig_NoiseBinary_Sf_SwigStatic, swig_NoiseBinary_meta, swig_NoiseBinary_bases, swig_NoiseBinary_base_names };

static int _wrap_NoiseViolet_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseViolet< > *arg1 = (gam::NoiseViolet< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::NoiseViolet< >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::NoiseViolet< >::Tick",1,"gam::NoiseViolet< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__NoiseVioletT_RNGLinCon_t,0))){
    SWIG_fail_ptr("NoiseViolet_Tick",1,SWIGTYPE_p_gam__NoiseVioletT_RNGLinCon_t);
  }
  
  result = (float)gam_NoiseViolet_Sl__Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NoiseViolet(lua_State* L) {
  int SWIG_arg = 0;
  gam::NoiseViolet< > *result = 0 ;
  
  SWIG_check_num_args("gam::NoiseViolet< >::NoiseViolet",0,0)
  result = (gam::NoiseViolet< > *)new gam::NoiseViolet< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__NoiseVioletT_RNGLinCon_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NoiseViolet(void *obj) {
gam::NoiseViolet< > *arg1 = (gam::NoiseViolet< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_NoiseViolet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NoiseViolet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NoiseViolet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NoiseViolet_methods[]= {
    { "Tick", _wrap_NoiseViolet_Tick},
    {0,0}
};
static swig_lua_method swig_NoiseViolet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NoiseViolet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NoiseViolet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NoiseViolet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NoiseViolet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NoiseViolet_Sf_SwigStatic = {
    "NoiseViolet",
    swig_NoiseViolet_Sf_SwigStatic_methods,
    swig_NoiseViolet_Sf_SwigStatic_attributes,
    swig_NoiseViolet_Sf_SwigStatic_constants,
    swig_NoiseViolet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NoiseViolet_bases[] = {0};
static const char *swig_NoiseViolet_base_names[] = {0};
static swig_lua_class _wrap_class_NoiseViolet = { "NoiseViolet", "NoiseViolet", &SWIGTYPE_p_gam__NoiseVioletT_RNGLinCon_t,_proxy__wrap_new_NoiseViolet, swig_delete_NoiseViolet, swig_NoiseViolet_methods, swig_NoiseViolet_attributes, &swig_NoiseViolet_Sf_SwigStatic, swig_NoiseViolet_meta, swig_NoiseViolet_bases, swig_NoiseViolet_base_names };

static int _wrap_new_Accum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Accum< > *result = 0 ;
  
  SWIG_check_num_args("gam::Accum< >::Accum",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Accum< >::Accum",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::Accum",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Accum< > *)new gam::Accum< >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Accum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Accum< > *result = 0 ;
  
  SWIG_check_num_args("gam::Accum< >::Accum",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Accum< >::Accum",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Accum< > *)new gam::Accum< >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Accum__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *result = 0 ;
  
  SWIG_check_num_args("gam::Accum< >::Accum",0,0)
  result = (gam::Accum< > *)new gam::Accum< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Accum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Accum__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Accum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Accum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Accum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Accum< >::Accum(float,float)\n"
    "    gam::Accum< >::Accum(float)\n"
    "    gam::Accum< >::Accum()\n");
  lua_error(L);return 0;
}


static int _wrap_Accum_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::freq",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_freq",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_freqI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::freqI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::freqI",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::freqI",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_freqI",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  (arg1)->freqI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_freqAdd(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::freqAdd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::freqAdd",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::freqAdd",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_freqAdd",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freqAdd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_freqMul(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::freqMul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::freqMul",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::freqMul",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_freqMul",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freqMul(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_phase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::phase",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::phase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_phase",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->phase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_phaseMax(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  
  SWIG_check_num_args("gam::Accum< >::phaseMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::phaseMax",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_phaseMax",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->phaseMax();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_phaseAdd(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::phaseAdd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::phaseAdd",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::phaseAdd",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_phaseAdd",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->phaseAdd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_period__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::period",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::period",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_period",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->period(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  
  SWIG_check_num_args("gam::Accum< >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::reset",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_reset",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_finish(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  
  SWIG_check_num_args("gam::Accum< >::finish",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::finish",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_finish",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->finish();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_phsInc(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  phsInc::Loop *result = 0 ;
  
  SWIG_check_num_args("gam::Accum< >::phsInc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::phsInc",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_phsInc",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (phsInc::Loop *) &(arg1)->phsInc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_phsInc__Loop,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_done(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Accum< >::done",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::done",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_done",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)((gam::Accum< > const *)arg1)->done();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_cycled(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Accum< >::cycled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::cycled",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_cycled",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)((gam::Accum< > const *)arg1)->cycled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Accum< >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::freq",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_freq",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Accum< > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Accum_freq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Accum_freq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Accum_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Accum< >::freq(float)\n"
    "    gam::Accum< >::freq() const\n");
  lua_error(L);return 0;
}


static int _wrap_Accum_freqI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Accum< >::freqI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::freqI",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_freqI",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)((gam::Accum< > const *)arg1)->freqI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_freqI(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Accum_freqI__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Accum_freqI__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Accum_freqI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Accum< >::freqI(uint32_t)\n"
    "    gam::Accum< >::freqI() const\n");
  lua_error(L);return 0;
}


static int _wrap_Accum_freqUnit(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Accum< >::freqUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::freqUnit",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_freqUnit",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Accum< > const *)arg1)->freqUnit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_period__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Accum< >::period",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::period",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_period",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Accum< > const *)arg1)->period();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_period(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Accum_period__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Accum_period__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Accum_period'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Accum< >::period(float)\n"
    "    gam::Accum< >::period() const\n");
  lua_error(L);return 0;
}


static int _wrap_Accum_phase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Accum< >::phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::phase",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_phase",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Accum< > const *)arg1)->phase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_phase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Accum_phase__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Accum_phase__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Accum_phase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Accum< >::phase(float)\n"
    "    gam::Accum< >::phase() const\n");
  lua_error(L);return 0;
}


static int _wrap_Accum_phaseI(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Accum< >::phaseI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::phaseI",1,"gam::Accum< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_phaseI",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)((gam::Accum< > const *)arg1)->phaseI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Accum< >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::Tick",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_Tick",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)gam_Accum_Sl__Sg__Tick__SWIG(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_nextPhase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Accum< >::nextPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::nextPhase",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_nextPhase",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)(arg1)->nextPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_nextPhase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  float arg2 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Accum< >::nextPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::nextPhase",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::nextPhase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_nextPhase",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (uint32_t)(arg1)->nextPhase(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_nextPhase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Accum_nextPhase__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Accum_nextPhase__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Accum_nextPhase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Accum< >::nextPhase()\n"
    "    gam::Accum< >::nextPhase(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Accum_cycles(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::Accum< >::cycles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::cycles",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_cycles",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)(arg1)->cycles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_cycle(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Accum< >::cycle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::cycle",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_cycle",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)(arg1)->cycle();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_once(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Accum< >::once",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::once",1,"gam::Accum< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_once",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)(arg1)->once();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_seq(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::Accum< >::seq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::seq",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::seq",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_seq",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seq(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Accum_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::Accum< > *arg1 = (gam::Accum< > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Accum< >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Accum< >::onDomainChange",1,"gam::Accum< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Accum< >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Accum_onDomainChange",1,SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Accum(void *obj) {
gam::Accum< > *arg1 = (gam::Accum< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Accum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Accum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Accum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Accum_methods[]= {
    { "freqAdd", _wrap_Accum_freqAdd},
    { "freqMul", _wrap_Accum_freqMul},
    { "phaseMax", _wrap_Accum_phaseMax},
    { "phaseAdd", _wrap_Accum_phaseAdd},
    { "reset", _wrap_Accum_reset},
    { "finish", _wrap_Accum_finish},
    { "phsInc", _wrap_Accum_phsInc},
    { "done", _wrap_Accum_done},
    { "cycled", _wrap_Accum_cycled},
    { "freq", _wrap_Accum_freq},
    { "freqI", _wrap_Accum_freqI},
    { "freqUnit", _wrap_Accum_freqUnit},
    { "period", _wrap_Accum_period},
    { "phase", _wrap_Accum_phase},
    { "phaseI", _wrap_Accum_phaseI},
    { "Tick", _wrap_Accum_Tick},
    { "nextPhase", _wrap_Accum_nextPhase},
    { "cycles", _wrap_Accum_cycles},
    { "cycle", _wrap_Accum_cycle},
    { "once", _wrap_Accum_once},
    { "seq", _wrap_Accum_seq},
    { "onDomainChange", _wrap_Accum_onDomainChange},
    {0,0}
};
static swig_lua_method swig_Accum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Accum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Accum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Accum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Accum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Accum_Sf_SwigStatic = {
    "Accum",
    swig_Accum_Sf_SwigStatic_methods,
    swig_Accum_Sf_SwigStatic_attributes,
    swig_Accum_Sf_SwigStatic_constants,
    swig_Accum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Accum_bases[] = {0};
static const char *swig_Accum_base_names[] = {0};
static swig_lua_class _wrap_class_Accum = { "Accum", "Accum", &SWIGTYPE_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Accum, swig_delete_Accum, swig_Accum_methods, swig_Accum_attributes, &swig_Accum_Sf_SwigStatic, swig_Accum_meta, swig_Accum_bases, swig_Accum_base_names };

static int _wrap_new_Sweep__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Sweep< > *result = 0 ;
  
  SWIG_check_num_args("gam::Sweep< >::Sweep",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Sweep< >::Sweep",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Sweep< >::Sweep",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Sweep< > *)new gam::Sweep< >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sweep__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Sweep< > *result = 0 ;
  
  SWIG_check_num_args("gam::Sweep< >::Sweep",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Sweep< >::Sweep",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Sweep< > *)new gam::Sweep< >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sweep__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Sweep< > *result = 0 ;
  
  SWIG_check_num_args("gam::Sweep< >::Sweep",0,0)
  result = (gam::Sweep< > *)new gam::Sweep< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sweep(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sweep__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sweep__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Sweep__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sweep'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Sweep< >::Sweep(float,float)\n"
    "    gam::Sweep< >::Sweep(float)\n"
    "    gam::Sweep< >::Sweep()\n");
  lua_error(L);return 0;
}


static int _wrap_Sweep_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Sweep< > *arg1 = (gam::Sweep< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Sweep< >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Sweep< >::Tick",1,"gam::Sweep< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Sweep_Tick",1,SWIGTYPE_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_Sweep_Sl__Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sweep(void *obj) {
gam::Sweep< > *arg1 = (gam::Sweep< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sweep(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sweep);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sweep_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sweep_methods[]= {
    { "Tick", _wrap_Sweep_Tick},
    {0,0}
};
static swig_lua_method swig_Sweep_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sweep_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sweep_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sweep_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sweep_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sweep_SwigStatic = {
    "Sweep",
    swig_Sweep_SwigStatic_methods,
    swig_Sweep_SwigStatic_attributes,
    swig_Sweep_SwigStatic_constants,
    swig_Sweep_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sweep_bases[] = {0,0};
static const char *swig_Sweep_base_names[] = {"gam::Accum< > *",0};
static swig_lua_class _wrap_class_Sweep = { "Sweep", "Sweep", &SWIGTYPE_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Sweep, swig_delete_Sweep, swig_Sweep_methods, swig_Sweep_attributes, &swig_Sweep_SwigStatic, swig_Sweep_meta, swig_Sweep_bases, swig_Sweep_base_names };

static int _wrap_new_AccumPhase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::AccumPhase< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::AccumPhase",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::AccumPhase",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::AccumPhase",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::AccumPhase< SampleType >::AccumPhase",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::AccumPhase< SampleType > *)new gam::AccumPhase< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccumPhase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::AccumPhase< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::AccumPhase",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::AccumPhase",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::AccumPhase",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::AccumPhase< SampleType > *)new gam::AccumPhase< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccumPhase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::AccumPhase< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::AccumPhase",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::AccumPhase",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::AccumPhase< SampleType > *)new gam::AccumPhase< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccumPhase__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::AccumPhase",0,0)
  result = (gam::AccumPhase< SampleType > *)new gam::AccumPhase< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccumPhase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AccumPhase__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AccumPhase__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_AccumPhase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_AccumPhase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AccumPhase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AccumPhase< SampleType >::AccumPhase(float,float,float)\n"
    "    gam::AccumPhase< SampleType >::AccumPhase(float,float)\n"
    "    gam::AccumPhase< SampleType >::AccumPhase(float)\n"
    "    gam::AccumPhase< SampleType >::AccumPhase()\n");
  lua_error(L);return 0;
}


static int _wrap_AccumPhase_nextPhase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::nextPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::nextPhase",1,"gam::AccumPhase< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_nextPhase",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->nextPhase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_nextPhase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::nextPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::nextPhase",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::nextPhase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_nextPhase",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->nextPhase(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_nextPhase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AccumPhase_nextPhase__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AccumPhase_nextPhase__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AccumPhase_nextPhase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AccumPhase< SampleType >::nextPhase()\n"
    "    gam::AccumPhase< SampleType >::nextPhase(float)\n");
  lua_error(L);return 0;
}


static int _wrap_AccumPhase_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freq",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_freq",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_freqAdd(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::freqAdd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freqAdd",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freqAdd",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_freqAdd",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freqAdd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_freqMul(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::freqMul",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freqMul",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freqMul",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_freqMul",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freqMul(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_period__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::period",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::period",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_period",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->period(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_phase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::phase",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::phase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_phase",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->phase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_phaseAdd(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::phaseAdd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::phaseAdd",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::phaseAdd",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_phaseAdd",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->phaseAdd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_radius__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::radius",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::radius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_radius",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->radius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freq",1,"gam::AccumPhase< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_freq",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::AccumPhase< SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AccumPhase_freq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AccumPhase_freq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AccumPhase_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AccumPhase< SampleType >::freq(float)\n"
    "    gam::AccumPhase< SampleType >::freq() const\n");
  lua_error(L);return 0;
}


static int _wrap_AccumPhase_freqUnit(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::freqUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::freqUnit",1,"gam::AccumPhase< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_freqUnit",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::AccumPhase< SampleType > const *)arg1)->freqUnit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_period__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::period",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::period",1,"gam::AccumPhase< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_period",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::AccumPhase< SampleType > const *)arg1)->period();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_period(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AccumPhase_period__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AccumPhase_period__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AccumPhase_period'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AccumPhase< SampleType >::period(float)\n"
    "    gam::AccumPhase< SampleType >::period() const\n");
  lua_error(L);return 0;
}


static int _wrap_AccumPhase_phase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::phase",1,"gam::AccumPhase< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_phase",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::AccumPhase< SampleType > const *)arg1)->phase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_phase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AccumPhase_phase__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AccumPhase_phase__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AccumPhase_phase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AccumPhase< SampleType >::phase(float)\n"
    "    gam::AccumPhase< SampleType >::phase() const\n");
  lua_error(L);return 0;
}


static int _wrap_AccumPhase_radius__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::radius",1,"gam::AccumPhase< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_radius",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::AccumPhase< SampleType > const *)arg1)->radius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_radius(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AccumPhase_radius__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AccumPhase_radius__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AccumPhase_radius'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AccumPhase< SampleType >::radius(float)\n"
    "    gam::AccumPhase< SampleType >::radius() const\n");
  lua_error(L);return 0;
}


static int _wrap_AccumPhase_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::onDomainChange",1,"gam::AccumPhase< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_onDomainChange",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::print",1,"gam::AccumPhase< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::print",2,"FILE *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("gam::AccumPhase< SampleType >::print",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_print",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("AccumPhase_print",2,SWIGTYPE_p_FILE);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->print(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::print",1,"gam::AccumPhase< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::AccumPhase< SampleType >::print",2,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_print",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("AccumPhase_print",2,SWIGTYPE_p_FILE);
  }
  
  (arg1)->print(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_print__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::AccumPhase< SampleType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::AccumPhase< SampleType >::print",1,"gam::AccumPhase< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("AccumPhase_print",1,SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccumPhase_print(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AccumPhase_print__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AccumPhase_print__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AccumPhase_print__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AccumPhase_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::AccumPhase< SampleType >::print(FILE *,char const *)\n"
    "    gam::AccumPhase< SampleType >::print(FILE *)\n"
    "    gam::AccumPhase< SampleType >::print()\n");
  lua_error(L);return 0;
}


static void swig_delete_AccumPhase(void *obj) {
gam::AccumPhase< SampleType > *arg1 = (gam::AccumPhase< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccumPhase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccumPhase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccumPhase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AccumPhase_methods[]= {
    { "nextPhase", _wrap_AccumPhase_nextPhase},
    { "freqAdd", _wrap_AccumPhase_freqAdd},
    { "freqMul", _wrap_AccumPhase_freqMul},
    { "phaseAdd", _wrap_AccumPhase_phaseAdd},
    { "freq", _wrap_AccumPhase_freq},
    { "freqUnit", _wrap_AccumPhase_freqUnit},
    { "period", _wrap_AccumPhase_period},
    { "phase", _wrap_AccumPhase_phase},
    { "radius", _wrap_AccumPhase_radius},
    { "onDomainChange", _wrap_AccumPhase_onDomainChange},
    { "print", _wrap_AccumPhase_print},
    {0,0}
};
static swig_lua_method swig_AccumPhase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccumPhase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccumPhase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccumPhase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccumPhase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccumPhase_Sf_SwigStatic = {
    "AccumPhase",
    swig_AccumPhase_Sf_SwigStatic_methods,
    swig_AccumPhase_Sf_SwigStatic_attributes,
    swig_AccumPhase_Sf_SwigStatic_constants,
    swig_AccumPhase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccumPhase_bases[] = {0};
static const char *swig_AccumPhase_base_names[] = {0};
static swig_lua_class _wrap_class_AccumPhase = { "AccumPhase", "AccumPhase", &SWIGTYPE_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_AccumPhase, swig_delete_AccumPhase, swig_AccumPhase_methods, swig_AccumPhase_attributes, &swig_AccumPhase_Sf_SwigStatic, swig_AccumPhase_meta, swig_AccumPhase_bases, swig_AccumPhase_base_names };

static int _wrap_new_Osc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::Osc",0,0)
  result = (gam::Osc< SampleType > *)new gam::Osc< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Osc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  uint32_t arg3 ;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::Osc",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",3,"uint32_t");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (uint32_t)lua_tonumber(L, 3);
  result = (gam::Osc< SampleType > *)new gam::Osc< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Osc__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::Osc",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Osc< SampleType > *)new gam::Osc< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Osc__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::Osc",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Osc< SampleType > *)new gam::Osc< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Osc__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::ArrayPow2< float > *arg3 = 0 ;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::Osc",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("gam::Osc< SampleType >::Osc",3,"gam::ArrayPow2< float > &");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_gam__ArrayPow2T_float_t,0))){
    SWIG_fail_ptr("new_Osc",3,SWIGTYPE_p_gam__ArrayPow2T_float_t);
  }
  
  result = (gam::Osc< SampleType > *)new gam::Osc< SampleType >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Osc(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Osc__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Osc__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Osc__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_gam__ArrayPow2T_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Osc__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Osc__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Osc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Osc< SampleType >::Osc()\n"
    "    gam::Osc< SampleType >::Osc(float,float,uint32_t)\n"
    "    gam::Osc< SampleType >::Osc(float,float)\n"
    "    gam::Osc< SampleType >::Osc(float)\n"
    "    gam::Osc< SampleType >::Osc(float,float,gam::ArrayPow2< float > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Osc_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Osc< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::Tick",1,"gam::Osc< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_Tick",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_Osc_Sl_SampleType_Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_val(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Osc< SampleType >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::val",1,"gam::Osc< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_val",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Osc< SampleType > const *)arg1)->val();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_atPhaseI(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  uint32_t arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Osc< SampleType >::atPhaseI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::atPhaseI",1,"gam::Osc< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Osc< SampleType >::atPhaseI",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_atPhaseI",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (float)((gam::Osc< SampleType > const *)arg1)->atPhaseI(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_addSine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::addSine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",1,"gam::Osc< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_addSine",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (gam::Osc< SampleType > *) &(arg1)->addSine(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_addSine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::addSine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",1,"gam::Osc< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_addSine",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (gam::Osc< SampleType > *) &(arg1)->addSine(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_addSine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  double arg2 ;
  gam::Osc< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::addSine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",1,"gam::Osc< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Osc< SampleType >::addSine",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_addSine",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::Osc< SampleType > *) &(arg1)->addSine(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_addSine(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Osc_addSine__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Osc_addSine__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Osc_addSine__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Osc_addSine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Osc< SampleType >::addSine(double,double,double)\n"
    "    gam::Osc< SampleType >::addSine(double,double)\n"
    "    gam::Osc< SampleType >::addSine(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Osc_table__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  gam::ArrayPow2< float > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::table",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::table",1,"gam::Osc< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_table",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::ArrayPow2< float > *) &(arg1)->table();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayPow2T_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_table__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) 0 ;
  gam::ArrayPow2< float > *result = 0 ;
  
  SWIG_check_num_args("gam::Osc< SampleType >::table",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Osc< SampleType >::table",1,"gam::Osc< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Osc_table",1,SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::ArrayPow2< float > *) &((gam::Osc< SampleType > const *)arg1)->table();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ArrayPow2T_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Osc_table(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Osc_table__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Osc_table__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Osc_table'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Osc< SampleType >::table()\n"
    "    gam::Osc< SampleType >::table() const\n");
  lua_error(L);return 0;
}


static void swig_delete_Osc(void *obj) {
gam::Osc< SampleType > *arg1 = (gam::Osc< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Osc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Osc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Osc_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Osc_methods[]= {
    { "Tick", _wrap_Osc_Tick},
    { "val", _wrap_Osc_val},
    { "atPhaseI", _wrap_Osc_atPhaseI},
    { "addSine", _wrap_Osc_addSine},
    { "table", _wrap_Osc_table},
    {0,0}
};
static swig_lua_method swig_Osc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Osc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Osc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Osc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Osc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Osc_Sf_SwigStatic = {
    "Osc",
    swig_Osc_Sf_SwigStatic_methods,
    swig_Osc_Sf_SwigStatic_attributes,
    swig_Osc_Sf_SwigStatic_constants,
    swig_Osc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Osc_bases[] = {0,0,0};
static const char *swig_Osc_base_names[] = {"gam::Accum< > *","gam::ArrayPow2< SampleType > *",0};
static swig_lua_class _wrap_class_Osc = { "Osc", "Osc", &SWIGTYPE_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Osc, swig_delete_Osc, swig_Osc_methods, swig_Osc_attributes, &swig_Osc_Sf_SwigStatic, swig_Osc_meta, swig_Osc_bases, swig_Osc_base_names };

static int _wrap_new_CSine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::CSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::CSine",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::CSine< SampleType > *)new gam::CSine< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CSine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::CSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::CSine",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::CSine< SampleType > *)new gam::CSine< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CSine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::CSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::CSine",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::CSine< SampleType > *)new gam::CSine< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CSine__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::CSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::CSine",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::CSine",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::CSine< SampleType > *)new gam::CSine< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CSine__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::CSine",0,0)
  result = (gam::CSine< SampleType > *)new gam::CSine< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CSine(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CSine__SWIG_4(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CSine__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_CSine__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_CSine__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CSine__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CSine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::CSine< SampleType >::CSine(float,float,float,float)\n"
    "    gam::CSine< SampleType >::CSine(float,float,float)\n"
    "    gam::CSine< SampleType >::CSine(float,float)\n"
    "    gam::CSine< SampleType >::CSine(float)\n"
    "    gam::CSine< SampleType >::CSine()\n");
  lua_error(L);return 0;
}


static int _wrap_CSine_val_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  gam::CSine< float >::complex *arg2 = (gam::CSine< float >::complex *) 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::val",1,"gam::CSine< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::val",2,"gam::CSine< float >::complex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_val_set",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__ComplexT_float_t,0))){
    SWIG_fail_ptr("CSine_val_set",2,SWIGTYPE_p_gam__ComplexT_float_t);
  }
  
  if (arg1) (arg1)->val = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_val_get(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  gam::CSine< float >::complex *result = 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::val",1,"gam::CSine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_val_get",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::CSine< float >::complex *)& ((arg1)->val);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ComplexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  SwigValueWrapper< gam::Complex< float > > result;
  
  SWIG_check_num_args("gam::CSine< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::Tick",1,"gam::CSine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_Tick",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = gam_CSine_Sl_SampleType_Sg__Tick__SWIG(arg1);
  {
    gam::CSine< float >::complex * resultptr = new gam::CSine< float >::complex((const gam::CSine< float >::complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_amp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::amp",1,"gam::CSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::amp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_amp",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->amp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_decay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::decay",1,"gam::CSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::decay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_decay",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->decay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::freq",1,"gam::CSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_freq",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  SwigValueWrapper< gam::Complex< float > > arg2 ;
  gam::CSine< float >::complex *argp2 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::freq",1,"gam::CSine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::freq",2,"gam::CSine< float >::complex");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_freq",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_gam__ComplexT_float_t,0))){
    SWIG_fail_ptr("CSine_freq",2,SWIGTYPE_p_gam__ComplexT_float_t);
  }
  arg2 = *argp2;
  
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_phase(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::phase",1,"gam::CSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::phase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_phase",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->phase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::reset",1,"gam::CSine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_reset",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::set",1,"gam::CSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::CSine< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::CSine< SampleType >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::CSine< SampleType >::set",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_set",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_amp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::CSine< SampleType >::amp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::amp",1,"gam::CSine< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_amp",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::CSine< SampleType > const *)arg1)->amp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_amp(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CSine_amp__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CSine_amp__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSine_amp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::CSine< SampleType >::amp(float)\n"
    "    gam::CSine< SampleType >::amp() const\n");
  lua_error(L);return 0;
}


static int _wrap_CSine_decay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::CSine< SampleType >::decay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::decay",1,"gam::CSine< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_decay",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::CSine< SampleType > const *)arg1)->decay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_decay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CSine_decay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CSine_decay__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSine_decay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::CSine< SampleType >::decay(float)\n"
    "    gam::CSine< SampleType >::decay() const\n");
  lua_error(L);return 0;
}


static int _wrap_CSine_freq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::CSine< SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::freq",1,"gam::CSine< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_freq",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::CSine< SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CSine_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CSine_freq__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gam__ComplexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CSine_freq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CSine_freq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CSine_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::CSine< SampleType >::freq(float)\n"
    "    gam::CSine< SampleType >::freq(gam::CSine< float >::complex)\n"
    "    gam::CSine< SampleType >::freq() const\n");
  lua_error(L);return 0;
}


static int _wrap_CSine_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::CSine< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::CSine< SampleType >::onDomainChange",1,"gam::CSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::CSine< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("CSine_onDomainChange",1,SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CSine(void *obj) {
gam::CSine< SampleType > *arg1 = (gam::CSine< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_CSine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CSine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CSine_attributes[] = {
    { "val", _wrap_CSine_val_get, _wrap_CSine_val_set },
    {0,0,0}
};
static swig_lua_method swig_CSine_methods[]= {
    { "Tick", _wrap_CSine_Tick},
    { "phase", _wrap_CSine_phase},
    { "reset", _wrap_CSine_reset},
    { "set", _wrap_CSine_set},
    { "amp", _wrap_CSine_amp},
    { "decay", _wrap_CSine_decay},
    { "freq", _wrap_CSine_freq},
    { "onDomainChange", _wrap_CSine_onDomainChange},
    {0,0}
};
static swig_lua_method swig_CSine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CSine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CSine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CSine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CSine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CSine_Sf_SwigStatic = {
    "CSine",
    swig_CSine_Sf_SwigStatic_methods,
    swig_CSine_Sf_SwigStatic_attributes,
    swig_CSine_Sf_SwigStatic_constants,
    swig_CSine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CSine_bases[] = {0};
static const char *swig_CSine_base_names[] = {0};
static swig_lua_class _wrap_class_CSine = { "CSine", "CSine", &SWIGTYPE_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_CSine, swig_delete_CSine, swig_CSine_methods, swig_CSine_attributes, &swig_CSine_Sf_SwigStatic, swig_CSine_meta, swig_CSine_bases, swig_CSine_base_names };

static int _wrap_new_Sine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Sine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Sine< SampleType >::Sine",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Sine< SampleType >::Sine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Sine< SampleType >::Sine",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Sine< SampleType > *)new gam::Sine< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Sine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Sine< SampleType >::Sine",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Sine< SampleType >::Sine",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Sine< SampleType > *)new gam::Sine< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Sine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Sine< SampleType >::Sine",0,0)
  result = (gam::Sine< SampleType > *)new gam::Sine< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sine(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sine__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sine__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Sine__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Sine< SampleType >::Sine(float,float)\n"
    "    gam::Sine< SampleType >::Sine(float)\n"
    "    gam::Sine< SampleType >::Sine()\n");
  lua_error(L);return 0;
}


static int _wrap_Sine_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Sine< SampleType > *arg1 = (gam::Sine< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Sine< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Sine< SampleType >::Tick",1,"gam::Sine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Sine< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Sine_Tick",1,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Sine_Sl_SampleType_Sg__Tick__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sine_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Sine< SampleType > *arg1 = (gam::Sine< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Sine< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Sine< SampleType >::Tick",1,"gam::Sine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Sine_Tick",1,SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_Sine_Sl_SampleType_Sg__Tick__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sine_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Sine_Tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Sine_Tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sine_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Sine< SampleType >::Tick(float)\n"
    "    gam::Sine< SampleType >::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_Sine(void *obj) {
gam::Sine< SampleType > *arg1 = (gam::Sine< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Sine_methods[]= {
    { "Tick", _wrap_Sine_Tick},
    {0,0}
};
static swig_lua_method swig_Sine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Sine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Sine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sine_Sf_SwigStatic = {
    "Sine",
    swig_Sine_Sf_SwigStatic_methods,
    swig_Sine_Sf_SwigStatic_attributes,
    swig_Sine_Sf_SwigStatic_constants,
    swig_Sine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sine_bases[] = {0,0};
static const char *swig_Sine_base_names[] = {"gam::AccumPhase< SampleType > *",0};
static swig_lua_class _wrap_class_Sine = { "Sine", "Sine", &SWIGTYPE_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Sine, swig_delete_Sine, swig_Sine_methods, swig_Sine_attributes, &swig_Sine_Sf_SwigStatic, swig_Sine_meta, swig_Sine_bases, swig_Sine_base_names };

static int _wrap_new_SineR__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::SineR< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::SineR",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::SineR",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::SineR",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineR< SampleType >::SineR",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::SineR< SampleType > *)new gam::SineR< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineR__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::SineR< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::SineR",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::SineR",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::SineR",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::SineR< SampleType > *)new gam::SineR< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineR__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::SineR< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::SineR",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::SineR",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::SineR< SampleType > *)new gam::SineR< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineR__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::SineR",0,0)
  result = (gam::SineR< SampleType > *)new gam::SineR< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineR(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SineR__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SineR__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SineR__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SineR__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SineR'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineR< SampleType >::SineR(float,float,float)\n"
    "    gam::SineR< SampleType >::SineR(float,float)\n"
    "    gam::SineR< SampleType >::SineR(float)\n"
    "    gam::SineR< SampleType >::SineR()\n");
  lua_error(L);return 0;
}


static int _wrap_SineR_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::SineR< SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::freq",1,"gam::SineR< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_freq",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::SineR< SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_ampPhase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::ampPhase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::ampPhase",1,"gam::SineR< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::ampPhase",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineR< SampleType >::ampPhase",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_ampPhase",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->ampPhase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_ampPhase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::ampPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::ampPhase",1,"gam::SineR< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::ampPhase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_ampPhase",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->ampPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_ampPhase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::ampPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::ampPhase",1,"gam::SineR< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_ampPhase",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->ampPhase();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_ampPhase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SineR_ampPhase__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SineR_ampPhase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SineR_ampPhase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineR_ampPhase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineR< SampleType >::ampPhase(float,float)\n"
    "    gam::SineR< SampleType >::ampPhase(float)\n"
    "    gam::SineR< SampleType >::ampPhase()\n");
  lua_error(L);return 0;
}


static int _wrap_SineR_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::freq",1,"gam::SineR< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_freq",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SineR_freq__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SineR_freq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineR_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineR< SampleType >::freq() const\n"
    "    gam::SineR< SampleType >::freq(float)\n");
  lua_error(L);return 0;
}


static int _wrap_SineR_period(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::period",1,"gam::SineR< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::period",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_period",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->period(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::set",1,"gam::SineR< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineR< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineR< SampleType >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_set",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::set",1,"gam::SineR< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineR< SampleType >::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_set",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineR_set(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SineR_set__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SineR_set__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineR_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineR< SampleType >::set(float,float,float)\n"
    "    gam::SineR< SampleType >::set(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SineR_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SineR< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineR< SampleType >::onDomainChange",1,"gam::SineR< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineR< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineR_onDomainChange",1,SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SineR(void *obj) {
gam::SineR< SampleType > *arg1 = (gam::SineR< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SineR(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SineR);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SineR_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SineR_methods[]= {
    { "ampPhase", _wrap_SineR_ampPhase},
    { "freq", _wrap_SineR_freq},
    { "period", _wrap_SineR_period},
    { "set", _wrap_SineR_set},
    { "onDomainChange", _wrap_SineR_onDomainChange},
    {0,0}
};
static swig_lua_method swig_SineR_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SineR_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SineR_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SineR_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SineR_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SineR_Sf_SwigStatic = {
    "SineR",
    swig_SineR_Sf_SwigStatic_methods,
    swig_SineR_Sf_SwigStatic_attributes,
    swig_SineR_Sf_SwigStatic_constants,
    swig_SineR_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SineR_bases[] = {0};
static const char *swig_SineR_base_names[] = {0};
static swig_lua_class _wrap_class_SineR = { "SineR", "SineR", &SWIGTYPE_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_SineR, swig_delete_SineR, swig_SineR_methods, swig_SineR_attributes, &swig_SineR_Sf_SwigStatic, swig_SineR_meta, swig_SineR_bases, swig_SineR_base_names };

static int _wrap_new_SineRs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineRs< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::SineRs",0,0)
  result = (gam::SineRs< SampleType > *)new gam::SineRs< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineRs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gam::SineRs< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::SineRs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineRs< SampleType >::SineRs",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (gam::SineRs< SampleType > *)new gam::SineRs< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineRs(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SineRs__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SineRs__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SineRs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineRs< SampleType >::SineRs()\n"
    "    gam::SineRs< SampleType >::SineRs(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_SineRs_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineRs< SampleType > *arg1 = (gam::SineRs< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineRs< SampleType >::Tick",1,"gam::SineRs< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineRs_Tick",1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_SineRs_Sl_SampleType_Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineRs_last(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineRs< SampleType > *arg1 = (gam::SineRs< SampleType > *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineRs< SampleType >::last",1,"gam::SineRs< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineRs< SampleType >::last",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineRs_last",1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)((gam::SineRs< SampleType > const *)arg1)->last(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineRs_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineRs< SampleType > *arg1 = (gam::SineRs< SampleType > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineRs< SampleType >::set",1,"gam::SineRs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineRs< SampleType >::set",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineRs< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineRs< SampleType >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::SineRs< SampleType >::set",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineRs_set",1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineRs_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineRs< SampleType > *arg1 = (gam::SineRs< SampleType > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineRs< SampleType >::set",1,"gam::SineRs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineRs< SampleType >::set",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineRs< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineRs< SampleType >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineRs_set",1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineRs_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineRs< SampleType > *arg1 = (gam::SineRs< SampleType > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineRs< SampleType >::set",1,"gam::SineRs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineRs< SampleType >::set",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineRs< SampleType >::set",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineRs_set",1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineRs_set(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SineRs_set__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SineRs_set__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SineRs_set__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineRs_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineRs< SampleType >::set(unsigned int,float,float,float)\n"
    "    gam::SineRs< SampleType >::set(unsigned int,float,float)\n"
    "    gam::SineRs< SampleType >::set(unsigned int,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SineRs_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineRs< SampleType > *arg1 = (gam::SineRs< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SineRs< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineRs< SampleType >::onDomainChange",1,"gam::SineRs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineRs< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineRs_onDomainChange",1,SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SineRs(void *obj) {
gam::SineRs< SampleType > *arg1 = (gam::SineRs< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SineRs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SineRs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SineRs_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SineRs_methods[]= {
    { "Tick", _wrap_SineRs_Tick},
    { "last", _wrap_SineRs_last},
    { "set", _wrap_SineRs_set},
    { "onDomainChange", _wrap_SineRs_onDomainChange},
    {0,0}
};
static swig_lua_method swig_SineRs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SineRs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SineRs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SineRs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SineRs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SineRs_Sf_SwigStatic = {
    "SineRs",
    swig_SineRs_Sf_SwigStatic_methods,
    swig_SineRs_Sf_SwigStatic_attributes,
    swig_SineRs_Sf_SwigStatic_constants,
    swig_SineRs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SineRs_bases[] = {0};
static const char *swig_SineRs_base_names[] = {0};
static swig_lua_class _wrap_class_SineRs = { "SineRs", "SineRs", &SWIGTYPE_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_SineRs, swig_delete_SineRs, swig_SineRs_methods, swig_SineRs_attributes, &swig_SineRs_Sf_SwigStatic, swig_SineRs_meta, swig_SineRs_bases, swig_SineRs_base_names };

static int _wrap_new_SineD__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::SineD< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::SineD",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::SineD< SampleType > *)new gam::SineD< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineD__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::SineD< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::SineD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::SineD< SampleType > *)new gam::SineD< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineD__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::SineD< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::SineD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::SineD< SampleType > *)new gam::SineD< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineD__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::SineD< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::SineD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::SineD",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::SineD< SampleType > *)new gam::SineD< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineD__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::SineD",0,0)
  result = (gam::SineD< SampleType > *)new gam::SineD< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineD(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SineD__SWIG_4(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SineD__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SineD__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SineD__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SineD__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SineD'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineD< SampleType >::SineD(float,float,float,float)\n"
    "    gam::SineD< SampleType >::SineD(float,float,float)\n"
    "    gam::SineD< SampleType >::SineD(float,float)\n"
    "    gam::SineD< SampleType >::SineD(float)\n"
    "    gam::SineD< SampleType >::SineD()\n");
  lua_error(L);return 0;
}


static int _wrap_SineD_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::SineD< SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::freq",1,"gam::SineD< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_freq",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::SineD< SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_ampPhase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::ampPhase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::ampPhase",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::ampPhase",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineD< SampleType >::ampPhase",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_ampPhase",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->ampPhase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_ampPhase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::ampPhase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::ampPhase",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::ampPhase",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_ampPhase",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->ampPhase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_ampPhase__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::ampPhase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::ampPhase",1,"gam::SineD< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_ampPhase",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->ampPhase();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_ampPhase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SineD_ampPhase__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SineD_ampPhase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SineD_ampPhase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineD_ampPhase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineD< SampleType >::ampPhase(float,float)\n"
    "    gam::SineD< SampleType >::ampPhase(float)\n"
    "    gam::SineD< SampleType >::ampPhase()\n");
  lua_error(L);return 0;
}


static int _wrap_SineD_decay(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::decay",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::decay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_decay",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->decay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::freq",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_freq",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SineD_freq__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SineD_freq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineD_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineD< SampleType >::freq() const\n"
    "    gam::SineD< SampleType >::freq(float)\n");
  lua_error(L);return 0;
}


static int _wrap_SineD_period(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::period",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::period",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_period",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->period(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::set",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineD< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineD< SampleType >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::SineD< SampleType >::set",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_set",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::set",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineD< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineD< SampleType >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_set",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineD_set(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SineD_set__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SineD_set__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineD_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineD< SampleType >::set(float,float,float,float)\n"
    "    gam::SineD< SampleType >::set(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SineD_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SineD< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineD< SampleType >::onDomainChange",1,"gam::SineD< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineD< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineD_onDomainChange",1,SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SineD(void *obj) {
gam::SineD< SampleType > *arg1 = (gam::SineD< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SineD(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SineD);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SineD_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SineD_methods[]= {
    { "ampPhase", _wrap_SineD_ampPhase},
    { "decay", _wrap_SineD_decay},
    { "freq", _wrap_SineD_freq},
    { "period", _wrap_SineD_period},
    { "set", _wrap_SineD_set},
    { "onDomainChange", _wrap_SineD_onDomainChange},
    {0,0}
};
static swig_lua_method swig_SineD_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SineD_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SineD_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SineD_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SineD_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SineD_Sf_SwigStatic = {
    "SineD",
    swig_SineD_Sf_SwigStatic_methods,
    swig_SineD_Sf_SwigStatic_attributes,
    swig_SineD_Sf_SwigStatic_constants,
    swig_SineD_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SineD_bases[] = {0};
static const char *swig_SineD_base_names[] = {0};
static swig_lua_class _wrap_class_SineD = { "SineD", "SineD", &SWIGTYPE_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_SineD, swig_delete_SineD, swig_SineD_methods, swig_SineD_attributes, &swig_SineD_Sf_SwigStatic, swig_SineD_meta, swig_SineD_bases, swig_SineD_base_names };

static int _wrap_new_SineDs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineDs< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::SineDs",0,0)
  result = (gam::SineDs< SampleType > *)new gam::SineDs< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineDs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  gam::SineDs< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::SineDs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SineDs< SampleType >::SineDs",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (gam::SineDs< SampleType > *)new gam::SineDs< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SineDs(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SineDs__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SineDs__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SineDs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineDs< SampleType >::SineDs()\n"
    "    gam::SineDs< SampleType >::SineDs(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_SineDs___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineDs< SampleType > *arg1 = (gam::SineDs< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineDs< SampleType >::operator ()",1,"gam::SineDs< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineDs___call",1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineDs_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineDs< SampleType > *arg1 = (gam::SineDs< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineDs< SampleType >::Tick",1,"gam::SineDs< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineDs_Tick",1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_SineDs_Sl_SampleType_Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineDs_last(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineDs< SampleType > *arg1 = (gam::SineDs< SampleType > *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineDs< SampleType >::last",1,"gam::SineDs< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineDs< SampleType >::last",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineDs_last",1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)((gam::SineDs< SampleType > const *)arg1)->last(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineDs_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineDs< SampleType > *arg1 = (gam::SineDs< SampleType > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::set",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineDs< SampleType >::set",1,"gam::SineDs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineDs< SampleType >::set",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineDs< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineDs< SampleType >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::SineDs< SampleType >::set",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("gam::SineDs< SampleType >::set",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineDs_set",1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineDs_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineDs< SampleType > *arg1 = (gam::SineDs< SampleType > *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineDs< SampleType >::set",1,"gam::SineDs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineDs< SampleType >::set",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SineDs< SampleType >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SineDs< SampleType >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::SineDs< SampleType >::set",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineDs_set",1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SineDs_set(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SineDs_set__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SineDs_set__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SineDs_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SineDs< SampleType >::set(unsigned int,float,float,float,float)\n"
    "    gam::SineDs< SampleType >::set(unsigned int,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_SineDs_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::SineDs< SampleType > *arg1 = (gam::SineDs< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SineDs< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SineDs< SampleType >::onDomainChange",1,"gam::SineDs< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SineDs< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SineDs_onDomainChange",1,SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SineDs(void *obj) {
gam::SineDs< SampleType > *arg1 = (gam::SineDs< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SineDs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SineDs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SineDs_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SineDs_methods[]= {
    { "__call", _wrap_SineDs___call},
    { "Tick", _wrap_SineDs_Tick},
    { "last", _wrap_SineDs_last},
    { "set", _wrap_SineDs_set},
    { "onDomainChange", _wrap_SineDs_onDomainChange},
    {0,0}
};
static swig_lua_method swig_SineDs_meta[] = {
    { "__call", _wrap_SineDs___call},
    {0,0}
};

static swig_lua_attribute swig_SineDs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SineDs_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SineDs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SineDs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SineDs_Sf_SwigStatic = {
    "SineDs",
    swig_SineDs_Sf_SwigStatic_methods,
    swig_SineDs_Sf_SwigStatic_attributes,
    swig_SineDs_Sf_SwigStatic_constants,
    swig_SineDs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SineDs_bases[] = {0};
static const char *swig_SineDs_base_names[] = {0};
static swig_lua_class _wrap_class_SineDs = { "SineDs", "SineDs", &SWIGTYPE_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_SineDs, swig_delete_SineDs, swig_SineDs_methods, swig_SineDs_attributes, &swig_SineDs_Sf_SwigStatic, swig_SineDs_meta, swig_SineDs_bases, swig_SineDs_base_names };

static int _wrap_new_Chirplet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::Chirplet",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",5,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (gam::Chirplet< SampleType > *)new gam::Chirplet< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirplet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::Chirplet",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::Chirplet< SampleType > *)new gam::Chirplet< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirplet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::Chirplet",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Chirplet< SampleType > *)new gam::Chirplet< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirplet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::Chirplet",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Chirplet< SampleType > *)new gam::Chirplet< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirplet__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::Chirplet",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::Chirplet",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Chirplet< SampleType > *)new gam::Chirplet< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirplet__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::Chirplet",0,0)
  result = (gam::Chirplet< SampleType > *)new gam::Chirplet< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chirplet(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Chirplet__SWIG_5(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Chirplet__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Chirplet__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Chirplet__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Chirplet__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Chirplet__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chirplet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Chirplet< SampleType >::Chirplet(float,float,float,float,float)\n"
    "    gam::Chirplet< SampleType >::Chirplet(float,float,float,float)\n"
    "    gam::Chirplet< SampleType >::Chirplet(float,float,float)\n"
    "    gam::Chirplet< SampleType >::Chirplet(float,float)\n"
    "    gam::Chirplet< SampleType >::Chirplet(float)\n"
    "    gam::Chirplet< SampleType >::Chirplet()\n");
  lua_error(L);return 0;
}


static int _wrap_Chirplet_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::freq",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::freq",1,"gam::Chirplet< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::freq",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Chirplet< SampleType >::freq",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_freq",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (gam::Chirplet< SampleType > *) &(arg1)->freq(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  double arg2 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::freq",1,"gam::Chirplet< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::freq",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_freq",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::Chirplet< SampleType > *) &(arg1)->freq(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_freq(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chirplet_freq__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chirplet_freq__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chirplet_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Chirplet< SampleType >::freq(double,double)\n"
    "    gam::Chirplet< SampleType >::freq(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Chirplet_length__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  double arg2 ;
  gam::Chirplet< float >::complex *arg3 = 0 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::length",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::length",1,"gam::Chirplet< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::length",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("gam::Chirplet< SampleType >::length",3,"gam::Chirplet< float >::complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_length",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_gam__ComplexT_float_t,0))){
    SWIG_fail_ptr("Chirplet_length",3,SWIGTYPE_p_gam__ComplexT_float_t);
  }
  
  result = (gam::Chirplet< SampleType > *) &(arg1)->length(arg2,(gam::Chirplet< float >::complex const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_length__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  double arg2 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::length",1,"gam::Chirplet< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::length",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_length",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::Chirplet< SampleType > *) &(arg1)->length(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_amp(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  double arg2 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::amp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::amp",1,"gam::Chirplet< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::amp",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_amp",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::Chirplet< SampleType > *) &(arg1)->amp(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  SwigValueWrapper< gam::Complex< float > > result;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::Tick",1,"gam::Chirplet< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_Tick",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = gam_Chirplet_Sl_SampleType_Sg__Tick__SWIG(arg1);
  {
    gam::Chirplet< float >::complex * resultptr = new gam::Chirplet< float >::complex((const gam::Chirplet< float >::complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  gam::Chirplet< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::reset",1,"gam::Chirplet< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_reset",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::Chirplet< SampleType > *) &(arg1)->reset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_done__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::done",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::done",1,"gam::Chirplet< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Chirplet< SampleType >::done",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_done",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)((gam::Chirplet< SampleType > const *)arg1)->done(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_done__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::done",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::done",1,"gam::Chirplet< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_done",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)((gam::Chirplet< SampleType > const *)arg1)->done();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_done(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Chirplet_done__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chirplet_done__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chirplet_done'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Chirplet< SampleType >::done(float) const\n"
    "    gam::Chirplet< SampleType >::done() const\n");
  lua_error(L);return 0;
}


static int _wrap_Chirplet_length__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Chirplet< SampleType >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Chirplet< SampleType >::length",1,"gam::Chirplet< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Chirplet_length",1,SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Chirplet< SampleType > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chirplet_length(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Chirplet_length__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chirplet_length__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_gam__ComplexT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Chirplet_length__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chirplet_length'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Chirplet< SampleType >::length(double,gam::Chirplet< float >::complex const &)\n"
    "    gam::Chirplet< SampleType >::length(double)\n"
    "    gam::Chirplet< SampleType >::length() const\n");
  lua_error(L);return 0;
}


static void swig_delete_Chirplet(void *obj) {
gam::Chirplet< SampleType > *arg1 = (gam::Chirplet< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chirplet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chirplet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chirplet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Chirplet_methods[]= {
    { "freq", _wrap_Chirplet_freq},
    { "amp", _wrap_Chirplet_amp},
    { "Tick", _wrap_Chirplet_Tick},
    { "reset", _wrap_Chirplet_reset},
    { "done", _wrap_Chirplet_done},
    { "length", _wrap_Chirplet_length},
    {0,0}
};
static swig_lua_method swig_Chirplet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chirplet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chirplet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chirplet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chirplet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chirplet_Sf_SwigStatic = {
    "Chirplet",
    swig_Chirplet_Sf_SwigStatic_methods,
    swig_Chirplet_Sf_SwigStatic_attributes,
    swig_Chirplet_Sf_SwigStatic_constants,
    swig_Chirplet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chirplet_bases[] = {0};
static const char *swig_Chirplet_base_names[] = {0};
static swig_lua_class _wrap_class_Chirplet = { "Chirplet", "Chirplet", &SWIGTYPE_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Chirplet, swig_delete_Chirplet, swig_Chirplet_methods, swig_Chirplet_attributes, &swig_Chirplet_Sf_SwigStatic, swig_Chirplet_meta, swig_Chirplet_bases, swig_Chirplet_base_names };

static int _wrap_new_LFO__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *result = 0 ;
  
  SWIG_check_num_args("gam::LFO< >::LFO",0,0)
  result = (gam::LFO< > *)new gam::LFO< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LFO__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  gam::LFO< > *result = 0 ;
  
  SWIG_check_num_args("gam::LFO< >::LFO",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::LFO< >::LFO",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LFO< >::LFO",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::LFO< >::LFO",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (gam::LFO< > *)new gam::LFO< >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LFO__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  gam::LFO< > *result = 0 ;
  
  SWIG_check_num_args("gam::LFO< >::LFO",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::LFO< >::LFO",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LFO< >::LFO",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::LFO< > *)new gam::LFO< >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LFO__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::LFO< > *result = 0 ;
  
  SWIG_check_num_args("gam::LFO< >::LFO",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::LFO< >::LFO",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::LFO< > *)new gam::LFO< >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LFO(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LFO__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LFO__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_LFO__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_LFO__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LFO'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::LFO< >::LFO()\n"
    "    gam::LFO< >::LFO(double,double,double)\n"
    "    gam::LFO< >::LFO(double,double)\n"
    "    gam::LFO< >::LFO(double)\n");
  lua_error(L);return 0;
}


static int _wrap_LFO_set(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::LFO< > *result = 0 ;
  
  SWIG_check_num_args("gam::LFO< >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::set",1,"gam::LFO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LFO< >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::LFO< >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::LFO< >::set",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_set",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::LFO< > *) &(arg1)->set(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_mod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  double arg2 ;
  gam::LFO< > *result = 0 ;
  
  SWIG_check_num_args("gam::LFO< >::mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::mod",1,"gam::LFO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LFO< >::mod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_mod",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::LFO< > *) &(arg1)->mod(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_modI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  uint32_t arg2 ;
  gam::LFO< > *result = 0 ;
  
  SWIG_check_num_args("gam::LFO< >::modI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::modI",1,"gam::LFO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LFO< >::modI",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_modI",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (gam::LFO< > *) &(arg1)->modI(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_modI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::LFO< >::modI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::modI",1,"gam::LFO< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_modI",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)((gam::LFO< > const *)arg1)->modI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_modI(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LFO_modI__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LFO_modI__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LFO_modI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::LFO< >::modI(uint32_t)\n"
    "    gam::LFO< >::modI() const\n");
  lua_error(L);return 0;
}


static int _wrap_LFO_mod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::LFO< >::mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::mod",1,"gam::LFO< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_mod",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::LFO< > const *)arg1)->mod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_mod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LFO_mod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LFO_mod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LFO_mod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::LFO< >::mod(double)\n"
    "    gam::LFO< >::mod() const\n");
  lua_error(L);return 0;
}


static int _wrap_LFO_cos(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::cos",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_cos",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->cos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_down(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::down",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::down",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_down",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->down();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_even3(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::even3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::even3",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_even3",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->even3();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_even5(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::even5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::even5",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_even5",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->even5();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_imp(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::imp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::imp",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_imp",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->imp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_line2(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::line2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::line2",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_line2",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->line2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_para(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::para",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::para",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_para",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->para();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_pulse(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::pulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::pulse",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_pulse",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->pulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_pulseRange(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::pulseRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::pulseRange",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_pulseRange",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->pulseRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_saw(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::saw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::saw",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_saw",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->saw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_sinPara(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::sinPara",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::sinPara",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_sinPara",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->sinPara();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_stair(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::stair",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::stair",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_stair",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->stair();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_sqr(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::sqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::sqr",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_sqr",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->sqr();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_tri(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::tri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::tri",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_tri",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->tri();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_up(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::up",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::up",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_up",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->up();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_up2(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::up2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::up2",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_up2",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->up2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_S1(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::S1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::S1",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_S1",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->S1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_C2(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::C2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::C2",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_C2",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->C2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_S3(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::S3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::S3",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_S3",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->S3();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_C4(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::C4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::C4",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_C4",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->C4();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_S5(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::S5",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::S5",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_S5",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->S5();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_cosU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::cosU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::cosU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_cosU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->cosU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_downU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::downU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::downU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_downU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->downU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_hann(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::hann",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::hann",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_hann",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->hann();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_impU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::impU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::impU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_impU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->impU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_line2U(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::line2U",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::line2U",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_line2U",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->line2U();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_paraU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::paraU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::paraU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_paraU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->paraU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_pulseU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::pulseU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::pulseU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_pulseU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->pulseU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_stairU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::stairU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::stairU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_stairU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->stairU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_sqrU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::sqrU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::sqrU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_sqrU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->sqrU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_triU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::triU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::triU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_triU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->triU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_upU(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::upU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::upU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_upU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->upU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_up2U(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::up2U",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::up2U",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_up2U",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->up2U();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_patU__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::patU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::patU",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_patU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->patU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_patU__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  uint32_t arg2 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::patU",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::patU",1,"gam::LFO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LFO< >::patU",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_patU",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (float)(arg1)->patU(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_patU(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LFO_patU__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LFO_patU__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LFO_patU'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::LFO< >::patU()\n"
    "    gam::LFO< >::patU(uint32_t)\n");
  lua_error(L);return 0;
}


static int _wrap_LFO_sineT9(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::sineT9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::sineT9",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_sineT9",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->sineT9();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LFO_sineP9(lua_State* L) {
  int SWIG_arg = 0;
  gam::LFO< > *arg1 = (gam::LFO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LFO< >::sineP9",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LFO< >::sineP9",1,"gam::LFO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("LFO_sineP9",1,SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->sineP9();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LFO(void *obj) {
gam::LFO< > *arg1 = (gam::LFO< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LFO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LFO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LFO_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LFO_methods[]= {
    { "set", _wrap_LFO_set},
    { "modI", _wrap_LFO_modI},
    { "mod", _wrap_LFO_mod},
    { "cos", _wrap_LFO_cos},
    { "down", _wrap_LFO_down},
    { "even3", _wrap_LFO_even3},
    { "even5", _wrap_LFO_even5},
    { "imp", _wrap_LFO_imp},
    { "line2", _wrap_LFO_line2},
    { "para", _wrap_LFO_para},
    { "pulse", _wrap_LFO_pulse},
    { "pulseRange", _wrap_LFO_pulseRange},
    { "saw", _wrap_LFO_saw},
    { "sinPara", _wrap_LFO_sinPara},
    { "stair", _wrap_LFO_stair},
    { "sqr", _wrap_LFO_sqr},
    { "tri", _wrap_LFO_tri},
    { "up", _wrap_LFO_up},
    { "up2", _wrap_LFO_up2},
    { "S1", _wrap_LFO_S1},
    { "C2", _wrap_LFO_C2},
    { "S3", _wrap_LFO_S3},
    { "C4", _wrap_LFO_C4},
    { "S5", _wrap_LFO_S5},
    { "cosU", _wrap_LFO_cosU},
    { "downU", _wrap_LFO_downU},
    { "hann", _wrap_LFO_hann},
    { "impU", _wrap_LFO_impU},
    { "line2U", _wrap_LFO_line2U},
    { "paraU", _wrap_LFO_paraU},
    { "pulseU", _wrap_LFO_pulseU},
    { "stairU", _wrap_LFO_stairU},
    { "sqrU", _wrap_LFO_sqrU},
    { "triU", _wrap_LFO_triU},
    { "upU", _wrap_LFO_upU},
    { "up2U", _wrap_LFO_up2U},
    { "patU", _wrap_LFO_patU},
    { "sineT9", _wrap_LFO_sineT9},
    { "sineP9", _wrap_LFO_sineP9},
    {0,0}
};
static swig_lua_method swig_LFO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LFO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LFO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LFO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LFO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LFO_Sf_SwigStatic = {
    "LFO",
    swig_LFO_Sf_SwigStatic_methods,
    swig_LFO_Sf_SwigStatic_attributes,
    swig_LFO_Sf_SwigStatic_constants,
    swig_LFO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LFO_bases[] = {0,0};
static const char *swig_LFO_base_names[] = {"gam::Accum< > *",0};
static swig_lua_class _wrap_class_LFO = { "LFO", "LFO", &SWIGTYPE_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_LFO, swig_delete_LFO, swig_LFO_methods, swig_LFO_attributes, &swig_LFO_Sf_SwigStatic, swig_LFO_meta, swig_LFO_bases, swig_LFO_base_names };

static int _wrap_new_DWO__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *result = 0 ;
  
  SWIG_check_num_args("gam::DWO< >::DWO",0,0)
  result = (gam::DWO< > *)new gam::DWO< >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DWO__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::DWO< > *result = 0 ;
  
  SWIG_check_num_args("gam::DWO< >::DWO",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DWO< >::DWO",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DWO< >::DWO",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::DWO< >::DWO",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::DWO< > *)new gam::DWO< >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DWO__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::DWO< > *result = 0 ;
  
  SWIG_check_num_args("gam::DWO< >::DWO",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DWO< >::DWO",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DWO< >::DWO",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::DWO< > *)new gam::DWO< >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DWO__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::DWO< > *result = 0 ;
  
  SWIG_check_num_args("gam::DWO< >::DWO",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DWO< >::DWO",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::DWO< > *)new gam::DWO< >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DWO(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DWO__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DWO__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DWO__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DWO__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DWO'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DWO< >::DWO()\n"
    "    gam::DWO< >::DWO(float,float,float)\n"
    "    gam::DWO< >::DWO(float,float)\n"
    "    gam::DWO< >::DWO(float)\n");
  lua_error(L);return 0;
}


static int _wrap_DWO_mod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  double arg2 ;
  gam::DWO< > *result = 0 ;
  
  SWIG_check_num_args("gam::DWO< >::mod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::mod",1,"gam::DWO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DWO< >::mod",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_mod",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::DWO< > *) &(arg1)->mod(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_modI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  uint32_t arg2 ;
  gam::DWO< > *result = 0 ;
  
  SWIG_check_num_args("gam::DWO< >::modI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::modI",1,"gam::DWO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DWO< >::modI",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_modI",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  result = (gam::DWO< > *) &(arg1)->modI(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_modI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("gam::DWO< >::modI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::modI",1,"gam::DWO< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_modI",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (uint32_t)((gam::DWO< > const *)arg1)->modI();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_modI(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DWO_modI__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DWO_modI__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DWO_modI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DWO< >::modI(uint32_t)\n"
    "    gam::DWO< >::modI() const\n");
  lua_error(L);return 0;
}


static int _wrap_DWO_mod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::DWO< >::mod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::mod",1,"gam::DWO< > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_mod",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::DWO< > const *)arg1)->mod();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_mod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DWO_mod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DWO_mod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DWO_mod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DWO< >::mod(double)\n"
    "    gam::DWO< >::mod() const\n");
  lua_error(L);return 0;
}


static int _wrap_DWO_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::DWO< >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::freq",1,"gam::DWO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DWO< >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_freq",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_period(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::DWO< >::period",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::period",1,"gam::DWO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DWO< >::period",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_period",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->period(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_up(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::up",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::up",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_up",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->up();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_down(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::down",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::down",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_down",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->down();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_saw(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::saw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::saw",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_saw",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->saw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_sqr(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::sqr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::sqr",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_sqr",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->sqr();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_para(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::para",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::para",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_para",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->para();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_tri(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::tri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::tri",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_tri",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->tri();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_pulse(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::pulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::pulse",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_pulse",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->pulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_imp(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DWO< >::imp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::imp",1,"gam::DWO< > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_imp",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->imp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DWO_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::DWO< > *arg1 = (gam::DWO< > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::DWO< >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DWO< >::onDomainChange",1,"gam::DWO< > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DWO< >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DWO_onDomainChange",1,SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DWO(void *obj) {
gam::DWO< > *arg1 = (gam::DWO< > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DWO(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DWO);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DWO_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DWO_methods[]= {
    { "modI", _wrap_DWO_modI},
    { "mod", _wrap_DWO_mod},
    { "freq", _wrap_DWO_freq},
    { "period", _wrap_DWO_period},
    { "up", _wrap_DWO_up},
    { "down", _wrap_DWO_down},
    { "saw", _wrap_DWO_saw},
    { "sqr", _wrap_DWO_sqr},
    { "para", _wrap_DWO_para},
    { "tri", _wrap_DWO_tri},
    { "pulse", _wrap_DWO_pulse},
    { "imp", _wrap_DWO_imp},
    { "onDomainChange", _wrap_DWO_onDomainChange},
    {0,0}
};
static swig_lua_method swig_DWO_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DWO_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DWO_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DWO_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DWO_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DWO_Sf_SwigStatic = {
    "DWO",
    swig_DWO_Sf_SwigStatic_methods,
    swig_DWO_Sf_SwigStatic_attributes,
    swig_DWO_Sf_SwigStatic_constants,
    swig_DWO_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DWO_bases[] = {0,0};
static const char *swig_DWO_base_names[] = {"gam::Accum< > *",0};
static swig_lua_class _wrap_class_DWO = { "DWO", "DWO", &SWIGTYPE_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_DWO, swig_delete_DWO, swig_DWO_methods, swig_DWO_attributes, &swig_DWO_Sf_SwigStatic, swig_DWO_meta, swig_DWO_bases, swig_DWO_base_names };

static int _wrap_new_Buzz__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::Buzz< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::Buzz",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::Buzz",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Buzz< SampleType >::Buzz",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Buzz< SampleType >::Buzz",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Buzz< SampleType > *)new gam::Buzz< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Buzz__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Buzz< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::Buzz",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::Buzz",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Buzz< SampleType >::Buzz",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Buzz< SampleType > *)new gam::Buzz< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Buzz__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Buzz< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::Buzz",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::Buzz",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Buzz< SampleType > *)new gam::Buzz< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Buzz__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::Buzz",0,0)
  result = (gam::Buzz< SampleType > *)new gam::Buzz< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Buzz(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Buzz__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Buzz__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Buzz__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Buzz__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Buzz'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Buzz< SampleType >::Buzz(float,float,float)\n"
    "    gam::Buzz< SampleType >::Buzz(float,float)\n"
    "    gam::Buzz< SampleType >::Buzz(float)\n"
    "    gam::Buzz< SampleType >::Buzz()\n");
  lua_error(L);return 0;
}


static int _wrap_Buzz_antialias(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::antialias",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::antialias",1,"gam::Buzz< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_antialias",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->antialias();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_harmonics(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::harmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::harmonics",1,"gam::Buzz< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Buzz< SampleType >::harmonics",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_harmonics",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->harmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_harmonicsMax(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::harmonicsMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::harmonicsMax",1,"gam::Buzz< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_harmonicsMax",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->harmonicsMax();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_normalize(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::normalize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::normalize",1,"gam::Buzz< SampleType > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("gam::Buzz< SampleType >::normalize",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_normalize",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->normalize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::operator ()",1,"gam::Buzz< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz___call",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_odd(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::odd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::odd",1,"gam::Buzz< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_odd",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->odd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_saw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::saw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::saw",1,"gam::Buzz< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Buzz< SampleType >::saw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_saw",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->saw(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_saw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::saw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::saw",1,"gam::Buzz< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_saw",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->saw();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_saw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Buzz_saw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Buzz_saw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Buzz_saw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Buzz< SampleType >::saw(float)\n"
    "    gam::Buzz< SampleType >::saw()\n");
  lua_error(L);return 0;
}


static int _wrap_Buzz_square__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::square",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::square",1,"gam::Buzz< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Buzz< SampleType >::square",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_square",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->square(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_square__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::square",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::square",1,"gam::Buzz< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_square",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->square();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_square(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Buzz_square__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Buzz_square__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Buzz_square'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Buzz< SampleType >::square(float)\n"
    "    gam::Buzz< SampleType >::square()\n");
  lua_error(L);return 0;
}


static int _wrap_Buzz_maxHarmonics(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::maxHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::maxHarmonics",1,"gam::Buzz< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_maxHarmonics",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Buzz< SampleType > const *)arg1)->maxHarmonics();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buzz_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::Buzz< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Buzz< SampleType >::onDomainChange",1,"gam::Buzz< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Buzz< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Buzz_onDomainChange",1,SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Buzz(void *obj) {
gam::Buzz< SampleType > *arg1 = (gam::Buzz< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Buzz(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Buzz);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Buzz_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Buzz_methods[]= {
    { "antialias", _wrap_Buzz_antialias},
    { "harmonics", _wrap_Buzz_harmonics},
    { "harmonicsMax", _wrap_Buzz_harmonicsMax},
    { "normalize", _wrap_Buzz_normalize},
    { "__call", _wrap_Buzz___call},
    { "odd", _wrap_Buzz_odd},
    { "saw", _wrap_Buzz_saw},
    { "square", _wrap_Buzz_square},
    { "maxHarmonics", _wrap_Buzz_maxHarmonics},
    { "onDomainChange", _wrap_Buzz_onDomainChange},
    {0,0}
};
static swig_lua_method swig_Buzz_meta[] = {
    { "__call", _wrap_Buzz___call},
    {0,0}
};

static swig_lua_attribute swig_Buzz_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Buzz_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Buzz_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Buzz_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Buzz_Sf_SwigStatic = {
    "Buzz",
    swig_Buzz_Sf_SwigStatic_methods,
    swig_Buzz_Sf_SwigStatic_attributes,
    swig_Buzz_Sf_SwigStatic_constants,
    swig_Buzz_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Buzz_bases[] = {0,0};
static const char *swig_Buzz_base_names[] = {"gam::AccumPhase< SampleType > *",0};
static swig_lua_class _wrap_class_Buzz = { "Buzz", "Buzz", &SWIGTYPE_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Buzz, swig_delete_Buzz, swig_Buzz_methods, swig_Buzz_attributes, &swig_Buzz_Sf_SwigStatic, swig_Buzz_meta, swig_Buzz_bases, swig_Buzz_base_names };

static int _wrap_new_Saw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Saw< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Saw< SampleType >::Saw",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Saw< SampleType >::Saw",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Saw< SampleType >::Saw",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Saw< SampleType > *)new gam::Saw< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Saw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Saw< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Saw< SampleType >::Saw",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Saw< SampleType >::Saw",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Saw< SampleType > *)new gam::Saw< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Saw__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Saw< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Saw< SampleType >::Saw",0,0)
  result = (gam::Saw< SampleType > *)new gam::Saw< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Saw(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Saw__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Saw__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Saw__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Saw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Saw< SampleType >::Saw(float,float)\n"
    "    gam::Saw< SampleType >::Saw(float)\n"
    "    gam::Saw< SampleType >::Saw()\n");
  lua_error(L);return 0;
}


static int _wrap_Saw_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Saw< SampleType > *arg1 = (gam::Saw< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Saw< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Saw< SampleType >::Tick",1,"gam::Saw< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Saw< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Saw_Tick",1,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Saw_Sl_SampleType_Sg__Tick__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saw_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Saw< SampleType > *arg1 = (gam::Saw< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Saw< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Saw< SampleType >::Tick",1,"gam::Saw< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Saw_Tick",1,SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_Saw_Sl_SampleType_Sg__Tick__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Saw_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Saw_Tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Saw_Tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Saw_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Saw< SampleType >::Tick(float)\n"
    "    gam::Saw< SampleType >::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_Saw(void *obj) {
gam::Saw< SampleType > *arg1 = (gam::Saw< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Saw(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Saw);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Saw_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Saw_methods[]= {
    { "Tick", _wrap_Saw_Tick},
    {0,0}
};
static swig_lua_method swig_Saw_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Saw_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Saw_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Saw_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Saw_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Saw_Sf_SwigStatic = {
    "Saw",
    swig_Saw_Sf_SwigStatic_methods,
    swig_Saw_Sf_SwigStatic_attributes,
    swig_Saw_Sf_SwigStatic_constants,
    swig_Saw_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Saw_bases[] = {0};
static const char *swig_Saw_base_names[] = {0};
static swig_lua_class _wrap_class_Saw = { "Saw", "Saw", &SWIGTYPE_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Saw, swig_delete_Saw, swig_Saw_methods, swig_Saw_attributes, &swig_Saw_Sf_SwigStatic, swig_Saw_meta, swig_Saw_bases, swig_Saw_base_names };

static int _wrap_new_Square__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Square< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Square< SampleType >::Square",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Square< SampleType >::Square",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Square< SampleType >::Square",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Square< SampleType > *)new gam::Square< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Square__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Square< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Square< SampleType >::Square",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Square< SampleType >::Square",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Square< SampleType > *)new gam::Square< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Square__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Square< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Square< SampleType >::Square",0,0)
  result = (gam::Square< SampleType > *)new gam::Square< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Square(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Square__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Square__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Square__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Square'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Square< SampleType >::Square(float,float)\n"
    "    gam::Square< SampleType >::Square(float)\n"
    "    gam::Square< SampleType >::Square()\n");
  lua_error(L);return 0;
}


static int _wrap_Square_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Square< SampleType > *arg1 = (gam::Square< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Square< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Square< SampleType >::Tick",1,"gam::Square< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Square< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Square_Tick",1,SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Square_Sl_SampleType_Sg__Tick__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Square_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Square< SampleType > *arg1 = (gam::Square< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Square< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Square< SampleType >::Tick",1,"gam::Square< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Square_Tick",1,SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_Square_Sl_SampleType_Sg__Tick__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Square_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Square_Tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Square_Tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Square_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Square< SampleType >::Tick(float)\n"
    "    gam::Square< SampleType >::Tick()\n");
  lua_error(L);return 0;
}


static void swig_delete_Square(void *obj) {
gam::Square< SampleType > *arg1 = (gam::Square< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Square(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Square);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Square_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Square_methods[]= {
    { "Tick", _wrap_Square_Tick},
    {0,0}
};
static swig_lua_method swig_Square_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Square_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Square_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Square_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Square_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Square_Sf_SwigStatic = {
    "Square",
    swig_Square_Sf_SwigStatic_methods,
    swig_Square_Sf_SwigStatic_attributes,
    swig_Square_Sf_SwigStatic_constants,
    swig_Square_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Square_bases[] = {0};
static const char *swig_Square_base_names[] = {0};
static swig_lua_class _wrap_class_Square = { "Square", "Square", &SWIGTYPE_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Square, swig_delete_Square, swig_Square_methods, swig_Square_attributes, &swig_Square_Sf_SwigStatic, swig_Square_meta, swig_Square_bases, swig_Square_base_names };

static int _wrap_new_DSF__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  gam::DSF< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::DSF",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::DSF< SampleType > *)new gam::DSF< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DSF__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::DSF< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::DSF",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::DSF< SampleType > *)new gam::DSF< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DSF__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::DSF< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::DSF",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::DSF< SampleType > *)new gam::DSF< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DSF__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::DSF< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::DSF",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::DSF",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::DSF< SampleType > *)new gam::DSF< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DSF__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::DSF",0,0)
  result = (gam::DSF< SampleType > *)new gam::DSF< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DSF(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DSF__SWIG_4(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DSF__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_DSF__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_DSF__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DSF__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DSF'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DSF< SampleType >::DSF(float,float,float,float)\n"
    "    gam::DSF< SampleType >::DSF(float,float,float)\n"
    "    gam::DSF< SampleType >::DSF(float,float)\n"
    "    gam::DSF< SampleType >::DSF(float)\n"
    "    gam::DSF< SampleType >::DSF()\n");
  lua_error(L);return 0;
}


static int _wrap_DSF___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DSF< SampleType >::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::operator ()",1,"gam::DSF< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF___call",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DSF< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::Tick",1,"gam::DSF< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_Tick",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_DSF_Sl_SampleType_Sg__Tick__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_ampRatio__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::ampRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::ampRatio",1,"gam::DSF< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::ampRatio",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_ampRatio",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->ampRatio(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_antialias(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::antialias",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::antialias",1,"gam::DSF< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_antialias",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->antialias();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_freq(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::freq",1,"gam::DSF< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_freq",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_freqRatio__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::freqRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::freqRatio",1,"gam::DSF< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::freqRatio",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_freqRatio",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->freqRatio(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_harmonics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::harmonics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::harmonics",1,"gam::DSF< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::harmonics",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_harmonics",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->harmonics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_harmonicsMax(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::harmonicsMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::harmonicsMax",1,"gam::DSF< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_harmonicsMax",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->harmonicsMax();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_ampRatio__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DSF< SampleType >::ampRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::ampRatio",1,"gam::DSF< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_ampRatio",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::DSF< SampleType > const *)arg1)->ampRatio();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_ampRatio(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DSF_ampRatio__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DSF_ampRatio__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DSF_ampRatio'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DSF< SampleType >::ampRatio(float)\n"
    "    gam::DSF< SampleType >::ampRatio() const\n");
  lua_error(L);return 0;
}


static int _wrap_DSF_freqRatio__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DSF< SampleType >::freqRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::freqRatio",1,"gam::DSF< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_freqRatio",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::DSF< SampleType > const *)arg1)->freqRatio();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_freqRatio(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DSF_freqRatio__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DSF_freqRatio__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DSF_freqRatio'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DSF< SampleType >::freqRatio(float)\n"
    "    gam::DSF< SampleType >::freqRatio() const\n");
  lua_error(L);return 0;
}


static int _wrap_DSF_harmonics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DSF< SampleType >::harmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::harmonics",1,"gam::DSF< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_harmonics",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::DSF< SampleType > const *)arg1)->harmonics();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_harmonics(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_DSF_harmonics__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DSF_harmonics__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DSF_harmonics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::DSF< SampleType >::harmonics(float)\n"
    "    gam::DSF< SampleType >::harmonics() const\n");
  lua_error(L);return 0;
}


static int _wrap_DSF_maxHarmonics(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::DSF< SampleType >::maxHarmonics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::maxHarmonics",1,"gam::DSF< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_maxHarmonics",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::DSF< SampleType > const *)arg1)->maxHarmonics();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DSF_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::DSF< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::DSF< SampleType >::onDomainChange",1,"gam::DSF< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::DSF< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("DSF_onDomainChange",1,SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DSF(void *obj) {
gam::DSF< SampleType > *arg1 = (gam::DSF< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DSF(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DSF);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DSF_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DSF_methods[]= {
    { "__call", _wrap_DSF___call},
    { "Tick", _wrap_DSF_Tick},
    { "antialias", _wrap_DSF_antialias},
    { "freq", _wrap_DSF_freq},
    { "harmonicsMax", _wrap_DSF_harmonicsMax},
    { "ampRatio", _wrap_DSF_ampRatio},
    { "freqRatio", _wrap_DSF_freqRatio},
    { "harmonics", _wrap_DSF_harmonics},
    { "maxHarmonics", _wrap_DSF_maxHarmonics},
    { "onDomainChange", _wrap_DSF_onDomainChange},
    {0,0}
};
static swig_lua_method swig_DSF_meta[] = {
    { "__call", _wrap_DSF___call},
    {0,0}
};

static swig_lua_attribute swig_DSF_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DSF_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DSF_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DSF_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DSF_Sf_SwigStatic = {
    "DSF",
    swig_DSF_Sf_SwigStatic_methods,
    swig_DSF_Sf_SwigStatic_attributes,
    swig_DSF_Sf_SwigStatic_constants,
    swig_DSF_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DSF_bases[] = {0,0};
static const char *swig_DSF_base_names[] = {"gam::AccumPhase< SampleType > *",0};
static swig_lua_class _wrap_class_DSF = { "DSF", "DSF", &SWIGTYPE_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_DSF, swig_delete_DSF, swig_DSF_methods, swig_DSF_attributes, &swig_DSF_Sf_SwigStatic, swig_DSF_meta, swig_DSF_bases, swig_DSF_base_names };

static int _wrap_new_Recorder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *result = 0 ;
  
  SWIG_check_num_args("gam::Recorder::Recorder",0,0)
  result = (gam::Recorder *)new gam::Recorder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Recorder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  gam::Recorder *result = 0 ;
  
  SWIG_check_num_args("gam::Recorder::Recorder",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Recorder::Recorder",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Recorder::Recorder",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::Recorder *)new gam::Recorder(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Recorder__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  gam::Recorder *result = 0 ;
  
  SWIG_check_num_args("gam::Recorder::Recorder",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Recorder::Recorder",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (gam::Recorder *)new gam::Recorder(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Recorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Recorder(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Recorder__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Recorder__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Recorder__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Recorder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Recorder::Recorder()\n"
    "    gam::Recorder::Recorder(int,int)\n"
    "    gam::Recorder::Recorder(int)\n");
  lua_error(L);return 0;
}


static int _wrap_Recorder_channels(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::Recorder::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::channels",1,"gam::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_channels",1,SWIGTYPE_p_gam__Recorder);
  }
  
  result = (int)((gam::Recorder const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_frames(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::Recorder::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::frames",1,"gam::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_frames",1,SWIGTYPE_p_gam__Recorder);
  }
  
  result = (int)((gam::Recorder const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_size(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::Recorder::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::size",1,"gam::Recorder const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_size",1,SWIGTYPE_p_gam__Recorder);
  }
  
  result = (int)((gam::Recorder const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_overwrite(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  float arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("gam::Recorder::overwrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::overwrite",1,"gam::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Recorder::overwrite",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Recorder::overwrite",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_overwrite",1,SWIGTYPE_p_gam__Recorder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->overwrite(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_advance(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  
  SWIG_check_num_args("gam::Recorder::advance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::advance",1,"gam::Recorder *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_advance",1,SWIGTYPE_p_gam__Recorder);
  }
  
  (arg1)->advance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  float arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("gam::Recorder::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::write",1,"gam::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Recorder::write",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Recorder::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_write",1,SWIGTYPE_p_gam__Recorder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Recorder::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::write",1,"gam::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Recorder::write",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_write",1,SWIGTYPE_p_gam__Recorder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->write(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_write__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("gam::Recorder::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::write",1,"gam::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Recorder::write",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Recorder::write",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Recorder::write",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_write",1,SWIGTYPE_p_gam__Recorder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->write(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_write__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("gam::Recorder::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::write",1,"gam::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Recorder::write",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Recorder::write",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_write",1,SWIGTYPE_p_gam__Recorder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->write(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_write__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("gam::Recorder::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::write",1,"gam::Recorder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::Recorder::write",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Recorder::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_write",1,SWIGTYPE_p_gam__Recorder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Recorder_write",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->write((float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_write(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Recorder_write__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Recorder_write__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Recorder_write__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Recorder_write__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Recorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Recorder_write__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Recorder_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Recorder::write(float,int)\n"
    "    gam::Recorder::write(float)\n"
    "    gam::Recorder::write(float,float,int)\n"
    "    gam::Recorder::write(float,float)\n"
    "    gam::Recorder::write(float const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Recorder_read(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  float **arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("gam::Recorder::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::read",1,"gam::Recorder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Recorder::read",2,"float *&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_read",1,SWIGTYPE_p_gam__Recorder);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("Recorder_read",2,SWIGTYPE_p_p_float);
  }
  
  result = (int)(arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Recorder_resize(lua_State* L) {
  int SWIG_arg = 0;
  gam::Recorder *arg1 = (gam::Recorder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("gam::Recorder::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Recorder::resize",1,"gam::Recorder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Recorder::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Recorder::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Recorder,0))){
    SWIG_fail_ptr("Recorder_resize",1,SWIGTYPE_p_gam__Recorder);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Recorder(void *obj) {
gam::Recorder *arg1 = (gam::Recorder *) obj;
delete arg1;
}
static int _proxy__wrap_new_Recorder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Recorder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Recorder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Recorder_methods[]= {
    { "channels", _wrap_Recorder_channels},
    { "frames", _wrap_Recorder_frames},
    { "size", _wrap_Recorder_size},
    { "overwrite", _wrap_Recorder_overwrite},
    { "advance", _wrap_Recorder_advance},
    { "write", _wrap_Recorder_write},
    { "read", _wrap_Recorder_read},
    { "resize", _wrap_Recorder_resize},
    {0,0}
};
static swig_lua_method swig_Recorder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Recorder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Recorder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Recorder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Recorder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Recorder_Sf_SwigStatic = {
    "Recorder",
    swig_Recorder_Sf_SwigStatic_methods,
    swig_Recorder_Sf_SwigStatic_attributes,
    swig_Recorder_Sf_SwigStatic_constants,
    swig_Recorder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Recorder_bases[] = {0};
static const char *swig_Recorder_base_names[] = {0};
static swig_lua_class _wrap_class_Recorder = { "Recorder", "Recorder", &SWIGTYPE_p_gam__Recorder,_proxy__wrap_new_Recorder, swig_delete_Recorder, swig_Recorder_methods, swig_Recorder_attributes, &swig_Recorder_Sf_SwigStatic, swig_Recorder_meta, swig_Recorder_bases, swig_Recorder_base_names };

static int _wrap_new_SamplePlayer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::SamplePlayer",0,0)
  result = (gam::SamplePlayer< SampleType > *)new gam::SamplePlayer< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< float > *arg1 = 0 ;
  double arg2 ;
  gam::SamplePlayer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::SamplePlayer",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",1,"gam::SamplePlayer< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("new_SamplePlayer",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::SamplePlayer< SampleType > *)new gam::SamplePlayer< SampleType >(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< float > *arg1 = 0 ;
  gam::SamplePlayer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::SamplePlayer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",1,"gam::SamplePlayer< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("new_SamplePlayer",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::SamplePlayer< SampleType > *)new gam::SamplePlayer< SampleType >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Array< float > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  gam::SamplePlayer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::SamplePlayer",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",1,"gam::Array< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayT_float_t,0))){
    SWIG_fail_ptr("new_SamplePlayer",1,SWIGTYPE_p_gam__ArrayT_float_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (gam::SamplePlayer< SampleType > *)new gam::SamplePlayer< SampleType >(*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::Array< float > *arg1 = 0 ;
  double arg2 ;
  gam::SamplePlayer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::SamplePlayer",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",1,"gam::Array< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ArrayT_float_t,0))){
    SWIG_fail_ptr("new_SamplePlayer",1,SWIGTYPE_p_gam__ArrayT_float_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::SamplePlayer< SampleType > *)new gam::SamplePlayer< SampleType >(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  gam::SamplePlayer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::SamplePlayer",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",2,"double");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::SamplePlayer< SampleType > *)new gam::SamplePlayer< SampleType >((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  gam::SamplePlayer< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::SamplePlayer",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::SamplePlayer",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (gam::SamplePlayer< SampleType > *)new gam::SamplePlayer< SampleType >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SamplePlayer(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SamplePlayer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SamplePlayer__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SamplePlayer__SWIG_6(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SamplePlayer__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SamplePlayer__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SamplePlayer__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_SamplePlayer__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SamplePlayer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::SamplePlayer()\n"
    "    gam::SamplePlayer< SampleType >::SamplePlayer(gam::SamplePlayer< float > &,double)\n"
    "    gam::SamplePlayer< SampleType >::SamplePlayer(gam::SamplePlayer< float > &)\n"
    "    gam::SamplePlayer< SampleType >::SamplePlayer(gam::Array< float > &,double,double)\n"
    "    gam::SamplePlayer< SampleType >::SamplePlayer(gam::Array< float > &,double)\n"
    "    gam::SamplePlayer< SampleType >::SamplePlayer(char const *,double)\n"
    "    gam::SamplePlayer< SampleType >::SamplePlayer(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_load(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::load",1,"gam::SamplePlayer< SampleType > *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::load",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_load",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->load((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer___call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::operator ()",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::operator ()",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer___call",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->operator ()(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer___call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::operator ()",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::operator ()",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer___call",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)(arg1)->operator ()();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer___call(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer___call__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer___call__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer___call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::operator ()(int)\n"
    "    gam::SamplePlayer< SampleType >::operator ()()\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::Tick",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::Tick",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_Tick",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)gam_SamplePlayer_Sl_SampleType_Sg__Tick__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::Tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::Tick",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_Tick",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)gam_SamplePlayer_Sl_SampleType_Sg__Tick__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_Tick(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_Tick__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_Tick__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::Tick(int)\n"
    "    gam::SamplePlayer< SampleType >::Tick()\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_read(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::read",1,"gam::SamplePlayer< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::read",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_read",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((gam::SamplePlayer< SampleType > const *)arg1)->read(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_readFloat(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::readFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::readFloat",1,"gam::SamplePlayer< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::readFloat",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_readFloat",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((gam::SamplePlayer< SampleType > const *)arg1)->readFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_advance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::advance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::advance",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_advance",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->advance();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_advance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::advance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::advance",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::advance",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_advance",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->advance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_advance(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_advance__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_advance__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_advance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::advance()\n"
    "    gam::SamplePlayer< SampleType >::advance(double)\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_buffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  gam::Array< float > *arg2 = 0 ;
  double arg3 ;
  int arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::buffer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",2,"gam::Array< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__ArrayT_float_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",2,SWIGTYPE_p_gam__ArrayT_float_t);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->buffer(*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_buffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  gam::Array< float > *arg2 = 0 ;
  double arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::buffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",2,"gam::Array< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__ArrayT_float_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",2,SWIGTYPE_p_gam__ArrayT_float_t);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->buffer(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_buffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  double arg4 ;
  int arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::buffer",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",1,"gam::SamplePlayer< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->buffer(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_buffer__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  double arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::buffer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",1,"gam::SamplePlayer< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->buffer(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_buffer__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  gam::SamplePlayer< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::buffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::buffer",2,"gam::SamplePlayer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_buffer",2,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->buffer(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_buffer(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SamplePlayer_buffer__SWIG_4(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gam__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SamplePlayer_buffer__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SamplePlayer_buffer__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gam__ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_SamplePlayer_buffer__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_SamplePlayer_buffer__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_buffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::buffer(gam::Array< float > &,double,int,bool)\n"
    "    gam::SamplePlayer< SampleType >::buffer(gam::Array< float > &,double,int)\n"
    "    gam::SamplePlayer< SampleType >::buffer(float *,int,double,int,bool)\n"
    "    gam::SamplePlayer< SampleType >::buffer(float *,int,double,int)\n"
    "    gam::SamplePlayer< SampleType >::buffer(gam::SamplePlayer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_free(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::free",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::free",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_free",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->free();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_freq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::freq",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::freq",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_freq",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::max",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::max",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_max",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->max(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::min",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::min",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_min",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->min(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_pos__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::pos",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::pos",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_pos",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->pos(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_phase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::phase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::phase",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::phase",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_phase",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->phase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_rate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::rate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::rate",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::rate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_rate",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_range(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::range",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::range",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::range",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::range",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_range",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->range(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_reset(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::reset",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_reset",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_finish(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::finish",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::finish",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_finish",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->finish();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_loop(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::loop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::loop",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_loop",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)(arg1)->loop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_fade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::fade",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::fade",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::fade",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::fade",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_fade",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->fade(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_fade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::fade",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::fade",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::fade",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_fade",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->fade(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_fade__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::fade",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::fade",1,"gam::SamplePlayer< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_fade",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  (arg1)->fade();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_fade(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_fade__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_fade__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SamplePlayer_fade__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_fade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::fade(int,int)\n"
    "    gam::SamplePlayer< SampleType >::fade(int)\n"
    "    gam::SamplePlayer< SampleType >::fade()\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_done(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::done",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::done",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_done",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (bool)((gam::SamplePlayer< SampleType > const *)arg1)->done();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_channels(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::channels",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_channels",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (int)((gam::SamplePlayer< SampleType > const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_frames(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::frames",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_frames",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (int)((gam::SamplePlayer< SampleType > const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_frameRate(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::frameRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::frameRate",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_frameRate",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->frameRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_freq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::freq",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_freq",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->freq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_freq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_freq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_freq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_freq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::freq(double)\n"
    "    gam::SamplePlayer< SampleType >::freq() const\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::max",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_max",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_max__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_max__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::max(double)\n"
    "    gam::SamplePlayer< SampleType >::max() const\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::min",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_min",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_min__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_min__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::min(double)\n"
    "    gam::SamplePlayer< SampleType >::min() const\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_length(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::length",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_length",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_pos__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::pos",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_pos",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->pos();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_pos(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_pos__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_pos__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_pos'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::pos(double)\n"
    "    gam::SamplePlayer< SampleType >::pos() const\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_posInInterval(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::posInInterval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::posInInterval",1,"gam::SamplePlayer< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::posInInterval",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_posInInterval",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->posInInterval(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_phase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::phase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::phase",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_phase",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->phase();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_phase(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_phase__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_phase__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_phase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::phase(double)\n"
    "    gam::SamplePlayer< SampleType >::phase() const\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_rate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::rate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::rate",1,"gam::SamplePlayer< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_rate",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (double)((gam::SamplePlayer< SampleType > const *)arg1)->rate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SamplePlayer_rate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SamplePlayer_rate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SamplePlayer_rate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SamplePlayer_rate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SamplePlayer< SampleType >::rate(double)\n"
    "    gam::SamplePlayer< SampleType >::rate() const\n");
  lua_error(L);return 0;
}


static int _wrap_SamplePlayer_onDomainChange(lua_State* L) {
  int SWIG_arg = 0;
  gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("gam::SamplePlayer< SampleType >::onDomainChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::onDomainChange",1,"gam::SamplePlayer< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SamplePlayer< SampleType >::onDomainChange",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("SamplePlayer_onDomainChange",1,SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->onDomainChange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SamplePlayer(void *obj) {
gam::SamplePlayer< SampleType > *arg1 = (gam::SamplePlayer< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SamplePlayer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SamplePlayer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SamplePlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SamplePlayer_methods[]= {
    { "load", _wrap_SamplePlayer_load},
    { "__call", _wrap_SamplePlayer___call},
    { "Tick", _wrap_SamplePlayer_Tick},
    { "read", _wrap_SamplePlayer_read},
    { "readFloat", _wrap_SamplePlayer_readFloat},
    { "advance", _wrap_SamplePlayer_advance},
    { "buffer", _wrap_SamplePlayer_buffer},
    { "free", _wrap_SamplePlayer_free},
    { "range", _wrap_SamplePlayer_range},
    { "reset", _wrap_SamplePlayer_reset},
    { "finish", _wrap_SamplePlayer_finish},
    { "loop", _wrap_SamplePlayer_loop},
    { "fade", _wrap_SamplePlayer_fade},
    { "done", _wrap_SamplePlayer_done},
    { "channels", _wrap_SamplePlayer_channels},
    { "frames", _wrap_SamplePlayer_frames},
    { "frameRate", _wrap_SamplePlayer_frameRate},
    { "freq", _wrap_SamplePlayer_freq},
    { "max", _wrap_SamplePlayer_max},
    { "min", _wrap_SamplePlayer_min},
    { "length", _wrap_SamplePlayer_length},
    { "pos", _wrap_SamplePlayer_pos},
    { "posInInterval", _wrap_SamplePlayer_posInInterval},
    { "phase", _wrap_SamplePlayer_phase},
    { "rate", _wrap_SamplePlayer_rate},
    { "onDomainChange", _wrap_SamplePlayer_onDomainChange},
    {0,0}
};
static swig_lua_method swig_SamplePlayer_meta[] = {
    { "__call", _wrap_SamplePlayer___call},
    {0,0}
};

static swig_lua_attribute swig_SamplePlayer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SamplePlayer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SamplePlayer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SamplePlayer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SamplePlayer_Sf_SwigStatic = {
    "SamplePlayer",
    swig_SamplePlayer_Sf_SwigStatic_methods,
    swig_SamplePlayer_Sf_SwigStatic_attributes,
    swig_SamplePlayer_Sf_SwigStatic_constants,
    swig_SamplePlayer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SamplePlayer_bases[] = {0,0};
static const char *swig_SamplePlayer_base_names[] = {"gam::Array< SampleType > *",0};
static swig_lua_class _wrap_class_SamplePlayer = { "SamplePlayer", "SamplePlayer", &SWIGTYPE_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_SamplePlayer, swig_delete_SamplePlayer, swig_SamplePlayer_methods, swig_SamplePlayer_attributes, &swig_SamplePlayer_Sf_SwigStatic, swig_SamplePlayer_meta, swig_SamplePlayer_bases, swig_SamplePlayer_base_names };

static int _wrap_SoundFile_toString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile::Format arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::toString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SoundFile::toString",1,"gam::SoundFile::Format");
  arg1 = (gam::SoundFile::Format)(int)lua_tonumber(L, 1);
  result = (char *)gam::SoundFile::toString(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_toString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile::EncodingType arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::toString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::SoundFile::toString",1,"gam::SoundFile::EncodingType");
  arg1 = (gam::SoundFile::EncodingType)(int)lua_tonumber(L, 1);
  result = (char *)gam::SoundFile::toString(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_toString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SoundFile_toString__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_SoundFile_toString__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_toString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::toString(gam::SoundFile::Format)\n"
    "    gam::SoundFile::toString(gam::SoundFile::EncodingType)\n");
  lua_error(L);return 0;
}


static int _wrap_new_SoundFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::SoundFile",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::SoundFile::SoundFile",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_SoundFile",1,SWIGTYPE_p_std__string);
  }
  
  result = (gam::SoundFile *)new gam::SoundFile((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::SoundFile",0,0)
  result = (gam::SoundFile *)new gam::SoundFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  gam::SoundFile *arg2 = 0 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::SoundFile",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("gam::SoundFile::SoundFile",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SoundFile::SoundFile",2,"gam::SoundFile const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_SoundFile",1,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("new_SoundFile",2,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (gam::SoundFile *)new gam::SoundFile((std::string const &)*arg1,(gam::SoundFile const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SoundFile__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SoundFile__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SoundFile__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SoundFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::SoundFile(std::string const &)\n"
    "    gam::SoundFile::SoundFile()\n"
    "    gam::SoundFile::SoundFile(std::string const &,gam::SoundFile const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_openRead__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SoundFile::openRead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::openRead",1,"gam::SoundFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_openRead",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (bool)(arg1)->openRead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_openRead__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SoundFile::openRead",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::openRead",1,"gam::SoundFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SoundFile::openRead",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_openRead",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SoundFile_openRead",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->openRead((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_openRead(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundFile_openRead__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundFile_openRead__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_openRead'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::openRead()\n"
    "    gam::SoundFile::openRead(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_openWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SoundFile::openWrite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::openWrite",1,"gam::SoundFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_openWrite",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (bool)(arg1)->openWrite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_openWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SoundFile::openWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::openWrite",1,"gam::SoundFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SoundFile::openWrite",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_openWrite",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SoundFile_openWrite",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->openWrite((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_openWrite(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundFile_openWrite__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundFile_openWrite__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_openWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::openWrite()\n"
    "    gam::SoundFile::openWrite(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_close(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SoundFile::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::close",1,"gam::SoundFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_close",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_read(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::read",1,"gam::SoundFile *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::SoundFile::read",2,"SampleType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SoundFile::read",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_read",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SoundFile_read",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_readAll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::readAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::readAll",1,"gam::SoundFile *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::SoundFile::readAll",2,"SampleType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_readAll",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SoundFile_readAll",2,SWIGTYPE_p_float);
  }
  
  result = (int)(arg1)->readAll(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_readAll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  std::vector< SampleType > *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::readAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::readAll",1,"gam::SoundFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SoundFile::readAll",2,"std::vector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_readAll",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SoundFile_readAll",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (int)(arg1)->readAll(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_readAll(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundFile_readAll__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundFile_readAll__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_readAll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::readAll(SampleType *)\n"
    "    gam::SoundFile::readAll(std::vector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_readAllD(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::readAllD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::readAllD",1,"gam::SoundFile *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::SoundFile::readAllD",2,"SampleType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_readAllD",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SoundFile_readAllD",2,SWIGTYPE_p_float);
  }
  
  result = (int)(arg1)->readAllD(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::write",1,"gam::SoundFile *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("gam::SoundFile::write",2,"SampleType const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SoundFile::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_write",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SoundFile_write",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->write((SampleType const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  std::vector< SampleType > *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::write",1,"gam::SoundFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SoundFile::write",2,"std::vector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_write",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SoundFile_write",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (int)(arg1)->write((std::vector< SampleType > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundFile_write__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundFile_write__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::write(SampleType const *,int)\n"
    "    gam::SoundFile::write(std::vector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_opened(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  bool result;
  
  SWIG_check_num_args("gam::SoundFile::opened",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::opened",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_opened",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (bool)((gam::SoundFile const *)arg1)->opened();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_encoding__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  gam::SoundFile::EncodingType result;
  
  SWIG_check_num_args("gam::SoundFile::encoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::encoding",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_encoding",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (gam::SoundFile::EncodingType)((gam::SoundFile const *)arg1)->encoding();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_format__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  gam::SoundFile::Format result;
  
  SWIG_check_num_args("gam::SoundFile::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::format",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_format",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (gam::SoundFile::Format)((gam::SoundFile const *)arg1)->format();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_frameRate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  double result;
  
  SWIG_check_num_args("gam::SoundFile::frameRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::frameRate",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_frameRate",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (double)((gam::SoundFile const *)arg1)->frameRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_frames(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::frames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::frames",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_frames",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (int)((gam::SoundFile const *)arg1)->frames();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_channels__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::channels",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_channels",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (int)((gam::SoundFile const *)arg1)->channels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_samples(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  int result;
  
  SWIG_check_num_args("gam::SoundFile::samples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::samples",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_samples",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (int)((gam::SoundFile const *)arg1)->samples();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_extension(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::extension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::extension",1,"gam::SoundFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_extension",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (char *)(arg1)->extension();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::path",1,"gam::SoundFile const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_path",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (std::string *) &((gam::SoundFile const *)arg1)->path();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_encoding__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  gam::SoundFile::EncodingType arg2 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::encoding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::encoding",1,"gam::SoundFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SoundFile::encoding",2,"gam::SoundFile::EncodingType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_encoding",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  arg2 = (gam::SoundFile::EncodingType)(int)lua_tonumber(L, 2);
  result = (gam::SoundFile *) &(arg1)->encoding(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_encoding(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundFile_encoding__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundFile_encoding__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_encoding'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::encoding() const\n"
    "    gam::SoundFile::encoding(gam::SoundFile::EncodingType)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_format__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  gam::SoundFile::Format arg2 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::format",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::format",1,"gam::SoundFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SoundFile::format",2,"gam::SoundFile::Format");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_format",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  arg2 = (gam::SoundFile::Format)(int)lua_tonumber(L, 2);
  result = (gam::SoundFile *) &(arg1)->format(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_format(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundFile_format__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundFile_format__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_format'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::format() const\n"
    "    gam::SoundFile::format(gam::SoundFile::Format)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_channels__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  int arg2 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::channels",1,"gam::SoundFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SoundFile::channels",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_channels",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::SoundFile *) &(arg1)->channels(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_channels(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundFile_channels__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundFile_channels__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_channels'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::channels() const\n"
    "    gam::SoundFile::channels(int)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_frameRate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  double arg2 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::frameRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::frameRate",1,"gam::SoundFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SoundFile::frameRate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_frameRate",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::SoundFile *) &(arg1)->frameRate(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_frameRate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundFile_frameRate__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundFile_frameRate__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_frameRate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::frameRate() const\n"
    "    gam::SoundFile::frameRate(double)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_info(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  gam::SoundFile *arg2 = 0 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::info",1,"gam::SoundFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SoundFile::info",2,"gam::SoundFile const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_info",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_info",2,SWIGTYPE_p_gam__SoundFile);
  }
  
  result = (gam::SoundFile *) &(arg1)->info((gam::SoundFile const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  std::string *arg2 = 0 ;
  gam::SoundFile *result = 0 ;
  
  SWIG_check_num_args("gam::SoundFile::path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::path",1,"gam::SoundFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::SoundFile::path",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_path",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SoundFile_path",2,SWIGTYPE_p_std__string);
  }
  
  result = (gam::SoundFile *) &(arg1)->path((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__SoundFile,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundFile_path__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__SoundFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoundFile_path__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundFile_path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::SoundFile::path() const\n"
    "    gam::SoundFile::path(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundFile_seek(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("gam::SoundFile::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::seek",1,"gam::SoundFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::SoundFile::seek",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::SoundFile::seek",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_seek",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->seek(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundFile_print(lua_State* L) {
  int SWIG_arg = 0;
  gam::SoundFile *arg1 = (gam::SoundFile *) 0 ;
  
  SWIG_check_num_args("gam::SoundFile::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::SoundFile::print",1,"gam::SoundFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__SoundFile,0))){
    SWIG_fail_ptr("SoundFile_print",1,SWIGTYPE_p_gam__SoundFile);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundFile(void *obj) {
gam::SoundFile *arg1 = (gam::SoundFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoundFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoundFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoundFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoundFile_methods[]= {
    { "openRead", _wrap_SoundFile_openRead},
    { "openWrite", _wrap_SoundFile_openWrite},
    { "close", _wrap_SoundFile_close},
    { "read", _wrap_SoundFile_read},
    { "readAll", _wrap_SoundFile_readAll},
    { "readAllD", _wrap_SoundFile_readAllD},
    { "write", _wrap_SoundFile_write},
    { "opened", _wrap_SoundFile_opened},
    { "frames", _wrap_SoundFile_frames},
    { "samples", _wrap_SoundFile_samples},
    { "extension", _wrap_SoundFile_extension},
    { "encoding", _wrap_SoundFile_encoding},
    { "format", _wrap_SoundFile_format},
    { "channels", _wrap_SoundFile_channels},
    { "frameRate", _wrap_SoundFile_frameRate},
    { "info", _wrap_SoundFile_info},
    { "path", _wrap_SoundFile_path},
    { "seek", _wrap_SoundFile_seek},
    { "print", _wrap_SoundFile_print},
    {0,0}
};
static swig_lua_method swig_SoundFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundFile_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("WAV", gam::SoundFile::WAV)},
    {SWIG_LUA_CONSTTAB_INT("AIFF", gam::SoundFile::AIFF)},
    {SWIG_LUA_CONSTTAB_INT("AU", gam::SoundFile::AU)},
    {SWIG_LUA_CONSTTAB_INT("RAW", gam::SoundFile::RAW)},
    {SWIG_LUA_CONSTTAB_INT("NO_FORMAT", gam::SoundFile::NO_FORMAT)},
    {SWIG_LUA_CONSTTAB_INT("PCM_S8", gam::SoundFile::PCM_S8)},
    {SWIG_LUA_CONSTTAB_INT("PCM_16", gam::SoundFile::PCM_16)},
    {SWIG_LUA_CONSTTAB_INT("PCM_24", gam::SoundFile::PCM_24)},
    {SWIG_LUA_CONSTTAB_INT("PCM_32", gam::SoundFile::PCM_32)},
    {SWIG_LUA_CONSTTAB_INT("PCM_U8", gam::SoundFile::PCM_U8)},
    {SWIG_LUA_CONSTTAB_INT("FLOAT", gam::SoundFile::FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("DOUBLE", gam::SoundFile::DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("ULAW", gam::SoundFile::ULAW)},
    {SWIG_LUA_CONSTTAB_INT("ALAW", gam::SoundFile::ALAW)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundFile_Sf_SwigStatic_methods[]= {
    { "toString", _wrap_SoundFile_toString},
    {0,0}
};
static swig_lua_class* swig_SoundFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundFile_Sf_SwigStatic = {
    "SoundFile",
    swig_SoundFile_Sf_SwigStatic_methods,
    swig_SoundFile_Sf_SwigStatic_attributes,
    swig_SoundFile_Sf_SwigStatic_constants,
    swig_SoundFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundFile_bases[] = {0};
static const char *swig_SoundFile_base_names[] = {0};
static swig_lua_class _wrap_class_SoundFile = { "SoundFile", "SoundFile", &SWIGTYPE_p_gam__SoundFile,_proxy__wrap_new_SoundFile, swig_delete_SoundFile, swig_SoundFile_methods, swig_SoundFile_attributes, &swig_SoundFile_Sf_SwigStatic, swig_SoundFile_meta, swig_SoundFile_bases, swig_SoundFile_base_names };

static int _wrap_LoopGain_gain__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::LoopGain< SampleType > *arg1 = (gam::LoopGain< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::LoopGain< SampleType >::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LoopGain< SampleType >::gain",1,"gam::LoopGain< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LoopGain< SampleType >::gain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LoopGainT_float_t,0))){
    SWIG_fail_ptr("LoopGain_gain",1,SWIGTYPE_p_gam__LoopGainT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->gain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoopGain_damping(lua_State* L) {
  int SWIG_arg = 0;
  gam::LoopGain< SampleType > *arg1 = (gam::LoopGain< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::LoopGain< SampleType >::damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LoopGain< SampleType >::damping",1,"gam::LoopGain< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LoopGain< SampleType >::damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LoopGainT_float_t,0))){
    SWIG_fail_ptr("LoopGain_damping",1,SWIGTYPE_p_gam__LoopGainT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->damping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoopGain_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::LoopGain< SampleType > *arg1 = (gam::LoopGain< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::LoopGain< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LoopGain< SampleType >::Tick",1,"gam::LoopGain< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::LoopGain< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LoopGainT_float_t,0))){
    SWIG_fail_ptr("LoopGain_Tick",1,SWIGTYPE_p_gam__LoopGainT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_LoopGain_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoopGain_gain__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::LoopGain< SampleType > *arg1 = (gam::LoopGain< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::LoopGain< SampleType >::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::LoopGain< SampleType >::gain",1,"gam::LoopGain< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__LoopGainT_float_t,0))){
    SWIG_fail_ptr("LoopGain_gain",1,SWIGTYPE_p_gam__LoopGainT_float_t);
  }
  
  result = (float)((gam::LoopGain< SampleType > const *)arg1)->gain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LoopGain_gain(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LoopGainT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_LoopGain_gain__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__LoopGainT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LoopGain_gain__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LoopGain_gain'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::LoopGain< SampleType >::gain(float)\n"
    "    gam::LoopGain< SampleType >::gain() const\n");
  lua_error(L);return 0;
}


static int _wrap_new_LoopGain(lua_State* L) {
  int SWIG_arg = 0;
  gam::LoopGain< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::LoopGain< SampleType >::LoopGain",0,0)
  result = (gam::LoopGain< SampleType > *)new gam::LoopGain< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LoopGainT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LoopGain(void *obj) {
gam::LoopGain< SampleType > *arg1 = (gam::LoopGain< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_LoopGain(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LoopGain);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LoopGain_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LoopGain_methods[]= {
    { "damping", _wrap_LoopGain_damping},
    { "Tick", _wrap_LoopGain_Tick},
    { "gain", _wrap_LoopGain_gain},
    {0,0}
};
static swig_lua_method swig_LoopGain_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LoopGain_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LoopGain_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LoopGain_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LoopGain_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LoopGain_Sf_SwigStatic = {
    "LoopGain",
    swig_LoopGain_Sf_SwigStatic_methods,
    swig_LoopGain_Sf_SwigStatic_attributes,
    swig_LoopGain_Sf_SwigStatic_constants,
    swig_LoopGain_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LoopGain_bases[] = {0};
static const char *swig_LoopGain_base_names[] = {0};
static swig_lua_class _wrap_class_LoopGain = { "LoopGain", "LoopGain", &SWIGTYPE_p_gam__LoopGainT_float_t,_proxy__wrap_new_LoopGain, swig_delete_LoopGain, swig_LoopGain_methods, swig_LoopGain_attributes, &swig_LoopGain_Sf_SwigStatic, swig_LoopGain_meta, swig_LoopGain_bases, swig_LoopGain_base_names };

static int _wrap_Loop1p_gain__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P< SampleType > *arg1 = (gam::Loop1P< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Loop1P< SampleType >::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P< SampleType >::gain",1,"gam::Loop1P< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Loop1P< SampleType >::gain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1PT_float_t,0))){
    SWIG_fail_ptr("Loop1p_gain",1,SWIGTYPE_p_gam__Loop1PT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->gain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p_damping(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P< SampleType > *arg1 = (gam::Loop1P< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Loop1P< SampleType >::damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P< SampleType >::damping",1,"gam::Loop1P< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Loop1P< SampleType >::damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1PT_float_t,0))){
    SWIG_fail_ptr("Loop1p_damping",1,SWIGTYPE_p_gam__Loop1PT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->damping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P< SampleType > *arg1 = (gam::Loop1P< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Loop1P< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P< SampleType >::Tick",1,"gam::Loop1P< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Loop1P< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1PT_float_t,0))){
    SWIG_fail_ptr("Loop1p_Tick",1,SWIGTYPE_p_gam__Loop1PT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Loop1P_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p_gain__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P< SampleType > *arg1 = (gam::Loop1P< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Loop1P< SampleType >::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P< SampleType >::gain",1,"gam::Loop1P< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1PT_float_t,0))){
    SWIG_fail_ptr("Loop1p_gain",1,SWIGTYPE_p_gam__Loop1PT_float_t);
  }
  
  result = (float)((gam::Loop1P< SampleType > const *)arg1)->gain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p_gain(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Loop1PT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Loop1p_gain__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Loop1PT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Loop1p_gain__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Loop1p_gain'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Loop1P< SampleType >::gain(float)\n"
    "    gam::Loop1P< SampleType >::gain() const\n");
  lua_error(L);return 0;
}


static int _wrap_new_Loop1p(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Loop1P< SampleType >::Loop1P",0,0)
  result = (gam::Loop1P< SampleType > *)new gam::Loop1P< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Loop1PT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Loop1p(void *obj) {
gam::Loop1P< SampleType > *arg1 = (gam::Loop1P< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Loop1p(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Loop1p);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Loop1p_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Loop1p_methods[]= {
    { "damping", _wrap_Loop1p_damping},
    { "Tick", _wrap_Loop1p_Tick},
    { "gain", _wrap_Loop1p_gain},
    {0,0}
};
static swig_lua_method swig_Loop1p_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Loop1p_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Loop1p_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Loop1p_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Loop1p_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Loop1p_SwigStatic = {
    "Loop1p",
    swig_Loop1p_SwigStatic_methods,
    swig_Loop1p_SwigStatic_attributes,
    swig_Loop1p_SwigStatic_constants,
    swig_Loop1p_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Loop1p_bases[] = {0};
static const char *swig_Loop1p_base_names[] = {0};
static swig_lua_class _wrap_class_Loop1p = { "Loop1p", "Loop1p", &SWIGTYPE_p_gam__Loop1PT_float_t,_proxy__wrap_new_Loop1p, swig_delete_Loop1p, swig_Loop1p_methods, swig_Loop1p_attributes, &swig_Loop1p_SwigStatic, swig_Loop1p_meta, swig_Loop1p_bases, swig_Loop1p_base_names };

static int _wrap_Loop1p1z_gain__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P1Z< SampleType > *arg1 = (gam::Loop1P1Z< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Loop1P1Z< SampleType >::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P1Z< SampleType >::gain",1,"gam::Loop1P1Z< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Loop1P1Z< SampleType >::gain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1P1ZT_float_t,0))){
    SWIG_fail_ptr("Loop1p1z_gain",1,SWIGTYPE_p_gam__Loop1P1ZT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->gain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p1z_damping(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P1Z< SampleType > *arg1 = (gam::Loop1P1Z< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("gam::Loop1P1Z< SampleType >::damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P1Z< SampleType >::damping",1,"gam::Loop1P1Z< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Loop1P1Z< SampleType >::damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1P1ZT_float_t,0))){
    SWIG_fail_ptr("Loop1p1z_damping",1,SWIGTYPE_p_gam__Loop1P1ZT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->damping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p1z_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P1Z< SampleType > *arg1 = (gam::Loop1P1Z< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Loop1P1Z< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P1Z< SampleType >::Tick",1,"gam::Loop1P1Z< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Loop1P1Z< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1P1ZT_float_t,0))){
    SWIG_fail_ptr("Loop1p1z_Tick",1,SWIGTYPE_p_gam__Loop1P1ZT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Loop1P1Z_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p1z_gain__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P1Z< SampleType > *arg1 = (gam::Loop1P1Z< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Loop1P1Z< SampleType >::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Loop1P1Z< SampleType >::gain",1,"gam::Loop1P1Z< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__Loop1P1ZT_float_t,0))){
    SWIG_fail_ptr("Loop1p1z_gain",1,SWIGTYPE_p_gam__Loop1P1ZT_float_t);
  }
  
  result = (float)((gam::Loop1P1Z< SampleType > const *)arg1)->gain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Loop1p1z_gain(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Loop1P1ZT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Loop1p1z_gain__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__Loop1P1ZT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Loop1p1z_gain__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Loop1p1z_gain'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Loop1P1Z< SampleType >::gain(float)\n"
    "    gam::Loop1P1Z< SampleType >::gain() const\n");
  lua_error(L);return 0;
}


static int _wrap_new_Loop1p1z(lua_State* L) {
  int SWIG_arg = 0;
  gam::Loop1P1Z< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Loop1P1Z< SampleType >::Loop1P1Z",0,0)
  result = (gam::Loop1P1Z< SampleType > *)new gam::Loop1P1Z< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__Loop1P1ZT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Loop1p1z(void *obj) {
gam::Loop1P1Z< SampleType > *arg1 = (gam::Loop1P1Z< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Loop1p1z(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Loop1p1z);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Loop1p1z_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Loop1p1z_methods[]= {
    { "damping", _wrap_Loop1p1z_damping},
    { "Tick", _wrap_Loop1p1z_Tick},
    { "gain", _wrap_Loop1p1z_gain},
    {0,0}
};
static swig_lua_method swig_Loop1p1z_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Loop1p1z_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Loop1p1z_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Loop1p1z_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Loop1p1z_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Loop1p1z_Sf_SwigStatic = {
    "Loop1p1z",
    swig_Loop1p1z_Sf_SwigStatic_methods,
    swig_Loop1p1z_Sf_SwigStatic_attributes,
    swig_Loop1p1z_Sf_SwigStatic_constants,
    swig_Loop1p1z_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Loop1p1z_bases[] = {0};
static const char *swig_Loop1p1z_base_names[] = {0};
static swig_lua_class _wrap_class_Loop1p1z = { "Loop1p1z", "Loop1p1z", &SWIGTYPE_p_gam__Loop1P1ZT_float_t,_proxy__wrap_new_Loop1p1z, swig_delete_Loop1p1z, swig_Loop1p1z_methods, swig_Loop1p1z_attributes, &swig_Loop1p1z_Sf_SwigStatic, swig_Loop1p1z_meta, swig_Loop1p1z_bases, swig_Loop1p1z_base_names };

static int _wrap_new_Echo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Echo< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Echo< SampleType >::Echo",0,0)
  result = (gam::Echo< SampleType > *)new gam::Echo< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Echo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::Echo< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Echo< SampleType >::Echo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Echo< SampleType >::Echo",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::Echo< SampleType > *)new gam::Echo< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Echo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Echo__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Echo__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Echo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Echo< SampleType >::Echo()\n"
    "    gam::Echo< SampleType >::Echo(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Echo_decay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Echo< SampleType > *arg1 = (gam::Echo< SampleType > *) 0 ;
  float arg2 ;
  gam::Echo< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Echo< SampleType >::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Echo< SampleType >::decay",1,"gam::Echo< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Echo< SampleType >::decay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Echo_decay",1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Echo< SampleType > *) &(arg1)->decay(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_fbk(lua_State* L) {
  int SWIG_arg = 0;
  gam::Echo< SampleType > *arg1 = (gam::Echo< SampleType > *) 0 ;
  float arg2 ;
  gam::Echo< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Echo< SampleType >::fbk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Echo< SampleType >::fbk",1,"gam::Echo< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Echo< SampleType >::fbk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Echo_fbk",1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Echo< SampleType > *) &(arg1)->fbk(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_damping(lua_State* L) {
  int SWIG_arg = 0;
  gam::Echo< SampleType > *arg1 = (gam::Echo< SampleType > *) 0 ;
  float arg2 ;
  gam::Echo< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Echo< SampleType >::damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Echo< SampleType >::damping",1,"gam::Echo< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Echo< SampleType >::damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Echo_damping",1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Echo< SampleType > *) &(arg1)->damping(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Echo< SampleType > *arg1 = (gam::Echo< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::Echo< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Echo< SampleType >::Tick",1,"gam::Echo< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Echo< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Echo_Tick",1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_Echo_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_decay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Echo< SampleType > *arg1 = (gam::Echo< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Echo< SampleType >::decay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Echo< SampleType >::decay",1,"gam::Echo< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Echo_decay",1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::Echo< SampleType > const *)arg1)->decay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Echo_decay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Echo_decay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Echo_decay__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Echo_decay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Echo< SampleType >::decay(float)\n"
    "    gam::Echo< SampleType >::decay() const\n");
  lua_error(L);return 0;
}


static int _wrap_Echo_loopFilter(lua_State* L) {
  int SWIG_arg = 0;
  gam::Echo< SampleType > *arg1 = (gam::Echo< SampleType > *) 0 ;
  gam::LoopGain< float > *result = 0 ;
  
  SWIG_check_num_args("gam::Echo< SampleType >::loopFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Echo< SampleType >::loopFilter",1,"gam::Echo< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("Echo_loopFilter",1,SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::LoopGain< float > *) &(arg1)->loopFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__LoopGainT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Echo(void *obj) {
gam::Echo< SampleType > *arg1 = (gam::Echo< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Echo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Echo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Echo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Echo_methods[]= {
    { "fbk", _wrap_Echo_fbk},
    { "damping", _wrap_Echo_damping},
    { "Tick", _wrap_Echo_Tick},
    { "decay", _wrap_Echo_decay},
    { "loopFilter", _wrap_Echo_loopFilter},
    {0,0}
};
static swig_lua_method swig_Echo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Echo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Echo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Echo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Echo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Echo_Sf_SwigStatic = {
    "Echo",
    swig_Echo_Sf_SwigStatic_methods,
    swig_Echo_Sf_SwigStatic_attributes,
    swig_Echo_Sf_SwigStatic_constants,
    swig_Echo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Echo_bases[] = {0,0};
static const char *swig_Echo_base_names[] = {"gam::Delay< SampleType > *",0};
static swig_lua_class _wrap_class_Echo = { "Echo", "Echo", &SWIGTYPE_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_Echo, swig_delete_Echo, swig_Echo_methods, swig_Echo_attributes, &swig_Echo_Sf_SwigStatic, swig_Echo_meta, swig_Echo_bases, swig_Echo_base_names };

static int _wrap_new_EchoCSine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::EchoCSine",0,0)
  result = (gam::EchoCSine< SampleType > *)new gam::EchoCSine< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EchoCSine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::EchoCSine",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::EchoCSine",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::EchoCSine< SampleType > *)new gam::EchoCSine< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EchoCSine(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EchoCSine__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_EchoCSine__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EchoCSine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::EchoCSine< SampleType >::EchoCSine()\n"
    "    gam::EchoCSine< SampleType >::EchoCSine(double)\n");
  lua_error(L);return 0;
}


static int _wrap_EchoCSine_fbk__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::fbk",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbk",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbk",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbk",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_fbk",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::EchoCSine< SampleType > *) &(arg1)->fbk(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_fbk__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::fbk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbk",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbk",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_fbk",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::EchoCSine< SampleType > *) &(arg1)->fbk(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_gain__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::gain",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::gain",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::gain",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::EchoCSine< SampleType >::gain",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_gain",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::EchoCSine< SampleType > *) &(arg1)->gain(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_gain__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::gain",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::gain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_gain",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::EchoCSine< SampleType > *) &(arg1)->gain(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_decay(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::decay",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::decay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_decay",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::EchoCSine< SampleType > *) &(arg1)->decay(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_fbkFreq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::fbkFreq",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbkFreq",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbkFreq",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbkFreq",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_fbkFreq",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::EchoCSine< SampleType > *) &(arg1)->fbkFreq(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_fbkFreq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  gam::EchoCSine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::fbkFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbkFreq",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbkFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_fbkFreq",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::EchoCSine< SampleType > *) &(arg1)->fbkFreq(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_fbkFreq(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EchoCSine_fbkFreq__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EchoCSine_fbkFreq__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EchoCSine_fbkFreq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::EchoCSine< SampleType >::fbkFreq(float,float)\n"
    "    gam::EchoCSine< SampleType >::fbkFreq(float)\n");
  lua_error(L);return 0;
}


static int _wrap_EchoCSine_Process(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  SwigValueWrapper< gam::Complex< float > > result;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::Process",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::Process",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::EchoCSine< SampleType >::Process",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_Process",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = gam_EchoCSine_Sl_SampleType_Sg__Process__SWIG(arg1,arg2,arg3);
  {
    gam::Complex< float > * resultptr = new gam::Complex< float >((const gam::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  float arg2 ;
  SwigValueWrapper< gam::Complex< float > > result;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::Tick",1,"gam::EchoCSine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::EchoCSine< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_Tick",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = gam_EchoCSine_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  {
    gam::Complex< float > * resultptr = new gam::Complex< float >((const gam::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_fbk__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  SwigValueWrapper< gam::Complex< float > > result;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::fbk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::fbk",1,"gam::EchoCSine< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_fbk",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = ((gam::EchoCSine< SampleType > const *)arg1)->fbk();
  {
    gam::Complex< float > * resultptr = new gam::Complex< float >((const gam::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_fbk(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EchoCSine_fbk__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EchoCSine_fbk__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EchoCSine_fbk__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EchoCSine_fbk'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::EchoCSine< SampleType >::fbk(float,float)\n"
    "    gam::EchoCSine< SampleType >::fbk(float)\n"
    "    gam::EchoCSine< SampleType >::fbk() const\n");
  lua_error(L);return 0;
}


static int _wrap_EchoCSine_gain__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) 0 ;
  SwigValueWrapper< gam::Complex< float > > result;
  
  SWIG_check_num_args("gam::EchoCSine< SampleType >::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::EchoCSine< SampleType >::gain",1,"gam::EchoCSine< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("EchoCSine_gain",1,SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = ((gam::EchoCSine< SampleType > const *)arg1)->gain();
  {
    gam::Complex< float > * resultptr = new gam::Complex< float >((const gam::Complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__ComplexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EchoCSine_gain(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EchoCSine_gain__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EchoCSine_gain__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EchoCSine_gain__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EchoCSine_gain'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::EchoCSine< SampleType >::gain(float,float)\n"
    "    gam::EchoCSine< SampleType >::gain(float)\n"
    "    gam::EchoCSine< SampleType >::gain() const\n");
  lua_error(L);return 0;
}


static void swig_delete_EchoCSine(void *obj) {
gam::EchoCSine< SampleType > *arg1 = (gam::EchoCSine< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_EchoCSine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EchoCSine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EchoCSine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EchoCSine_methods[]= {
    { "decay", _wrap_EchoCSine_decay},
    { "fbkFreq", _wrap_EchoCSine_fbkFreq},
    { "Process", _wrap_EchoCSine_Process},
    { "Tick", _wrap_EchoCSine_Tick},
    { "fbk", _wrap_EchoCSine_fbk},
    { "gain", _wrap_EchoCSine_gain},
    {0,0}
};
static swig_lua_method swig_EchoCSine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EchoCSine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EchoCSine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EchoCSine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EchoCSine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EchoCSine_Sf_SwigStatic = {
    "EchoCSine",
    swig_EchoCSine_Sf_SwigStatic_methods,
    swig_EchoCSine_Sf_SwigStatic_attributes,
    swig_EchoCSine_Sf_SwigStatic_constants,
    swig_EchoCSine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EchoCSine_bases[] = {0};
static const char *swig_EchoCSine_base_names[] = {0};
static swig_lua_class _wrap_class_EchoCSine = { "EchoCSine", "EchoCSine", &SWIGTYPE_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_EchoCSine, swig_delete_EchoCSine, swig_EchoCSine_methods, swig_EchoCSine_attributes, &swig_EchoCSine_Sf_SwigStatic, swig_EchoCSine_meta, swig_EchoCSine_bases, swig_EchoCSine_base_names };

static int _wrap_new_ReverbMS__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::ReverbMS",0,0)
  result = (gam::ReverbMS< SampleType > *)new gam::ReverbMS< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbMS__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbFlavor arg1 ;
  unsigned int arg2 ;
  gam::ReverbMS< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::ReverbMS",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::ReverbMS",1,"gam::ReverbFlavor");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ReverbMS< SampleType >::ReverbMS",2,"unsigned int");
  arg1 = (gam::ReverbFlavor)(int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (gam::ReverbMS< SampleType > *)new gam::ReverbMS< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbMS__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbFlavor arg1 ;
  gam::ReverbMS< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::ReverbMS",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::ReverbMS",1,"gam::ReverbFlavor");
  arg1 = (gam::ReverbFlavor)(int)lua_tonumber(L, 1);
  result = (gam::ReverbMS< SampleType > *)new gam::ReverbMS< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbMS(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ReverbMS__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ReverbMS__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ReverbMS__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ReverbMS'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ReverbMS< SampleType >::ReverbMS()\n"
    "    gam::ReverbMS< SampleType >::ReverbMS(gam::ReverbFlavor,unsigned int)\n"
    "    gam::ReverbMS< SampleType >::ReverbMS(gam::ReverbFlavor)\n");
  lua_error(L);return 0;
}


static int _wrap_ReverbMS_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  gam::ReverbFlavor arg2 ;
  unsigned int arg3 ;
  gam::ReverbMS< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::resize",1,"gam::ReverbMS< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ReverbMS< SampleType >::resize",2,"gam::ReverbFlavor");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::ReverbMS< SampleType >::resize",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_resize",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (gam::ReverbFlavor)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (gam::ReverbMS< SampleType > *) &(arg1)->resize(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  gam::ReverbFlavor arg2 ;
  gam::ReverbMS< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::resize",1,"gam::ReverbMS< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ReverbMS< SampleType >::resize",2,"gam::ReverbFlavor");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_resize",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (gam::ReverbFlavor)(int)lua_tonumber(L, 2);
  result = (gam::ReverbMS< SampleType > *) &(arg1)->resize(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReverbMS_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ReverbMS_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ReverbMS_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ReverbMS< SampleType >::resize(gam::ReverbFlavor,unsigned int)\n"
    "    gam::ReverbMS< SampleType >::resize(gam::ReverbFlavor)\n");
  lua_error(L);return 0;
}


static int _wrap_ReverbMS_decay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  float arg2 ;
  gam::ReverbMS< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::decay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::decay",1,"gam::ReverbMS< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ReverbMS< SampleType >::decay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_decay",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::ReverbMS< SampleType > *) &(arg1)->decay(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_damping(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  float arg2 ;
  gam::ReverbMS< SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::damping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::damping",1,"gam::ReverbMS< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ReverbMS< SampleType >::damping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_damping",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::ReverbMS< SampleType > *) &(arg1)->damping(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::Tick",1,"gam::ReverbMS< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::ReverbMS< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_Tick",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)gam_ReverbMS_Sl_SampleType_Sg__Tick__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_decay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::decay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::decay",1,"gam::ReverbMS< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_decay",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (float)((gam::ReverbMS< SampleType > const *)arg1)->decay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_decay(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ReverbMS_decay__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ReverbMS_decay__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ReverbMS_decay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::ReverbMS< SampleType >::decay(float)\n"
    "    gam::ReverbMS< SampleType >::decay() const\n");
  lua_error(L);return 0;
}


static int _wrap_ReverbMS_combs(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  gam::ReverbMS< float >::Combs *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::combs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::combs",1,"gam::ReverbMS< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_combs",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::ReverbMS< float >::Combs *) &(arg1)->combs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_allpasses(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  gam::ReverbMS< float >::Allpasses *result = 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::allpasses",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::allpasses",1,"gam::ReverbMS< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_allpasses",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  result = (gam::ReverbMS< float >::Allpasses *) &(arg1)->allpasses();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbMS_print(lua_State* L) {
  int SWIG_arg = 0;
  gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) 0 ;
  
  SWIG_check_num_args("gam::ReverbMS< SampleType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::ReverbMS< SampleType >::print",1,"gam::ReverbMS< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,0))){
    SWIG_fail_ptr("ReverbMS_print",1,SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t);
  }
  
  ((gam::ReverbMS< SampleType > const *)arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ReverbMS(void *obj) {
gam::ReverbMS< SampleType > *arg1 = (gam::ReverbMS< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ReverbMS(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ReverbMS);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ReverbMS_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ReverbMS_methods[]= {
    { "resize", _wrap_ReverbMS_resize},
    { "damping", _wrap_ReverbMS_damping},
    { "Tick", _wrap_ReverbMS_Tick},
    { "decay", _wrap_ReverbMS_decay},
    { "combs", _wrap_ReverbMS_combs},
    { "allpasses", _wrap_ReverbMS_allpasses},
    { "print", _wrap_ReverbMS_print},
    {0,0}
};
static swig_lua_method swig_ReverbMS_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ReverbMS_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ReverbMS_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ReverbMS_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ReverbMS_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ReverbMS_Sf_SwigStatic = {
    "ReverbMS",
    swig_ReverbMS_Sf_SwigStatic_methods,
    swig_ReverbMS_Sf_SwigStatic_attributes,
    swig_ReverbMS_Sf_SwigStatic_constants,
    swig_ReverbMS_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ReverbMS_bases[] = {0};
static const char *swig_ReverbMS_base_names[] = {0};
static swig_lua_class _wrap_class_ReverbMS = { "ReverbMS", "ReverbMS", &SWIGTYPE_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,_proxy__wrap_new_ReverbMS, swig_delete_ReverbMS, swig_ReverbMS_methods, swig_ReverbMS_attributes, &swig_ReverbMS_Sf_SwigStatic, swig_ReverbMS_meta, swig_ReverbMS_bases, swig_ReverbMS_base_names };

static int _wrap_new_Dist__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::Dist",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Dist",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Dist",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Dist",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Dist< 2,SampleType > *)new gam::Dist< 2,SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Dist__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::Dist",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Dist",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Dist",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Dist< 2,SampleType > *)new gam::Dist< 2,SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Dist__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::Dist",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Dist",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (gam::Dist< 2,SampleType > *)new gam::Dist< 2,SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Dist__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::Dist",0,0)
  result = (gam::Dist< 2,SampleType > *)new gam::Dist< 2,SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Dist(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Dist__SWIG_3(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Dist__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Dist__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Dist__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Dist'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Dist< 2,SampleType >::Dist(float,float,float)\n"
    "    gam::Dist< 2,SampleType >::Dist(float,float)\n"
    "    gam::Dist< 2,SampleType >::Dist(float)\n"
    "    gam::Dist< 2,SampleType >::Dist()\n");
  lua_error(L);return 0;
}


static int _wrap_Dist_near__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float arg2 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::near",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::near",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::near",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_near",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Dist< 2,SampleType > *) &(arg1)->near(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_near__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::near",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::near",1,"gam::Dist< 2,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_near",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  result = (float)((gam::Dist< 2,SampleType > const *)arg1)->near();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_near(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Dist_near__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Dist_near__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Dist_near'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Dist< 2,SampleType >::near(float)\n"
    "    gam::Dist< 2,SampleType >::near() const\n");
  lua_error(L);return 0;
}


static int _wrap_Dist_far__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float arg2 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::far",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::far",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::far",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_far",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Dist< 2,SampleType > *) &(arg1)->far(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_far__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::far",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::far",1,"gam::Dist< 2,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_far",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  result = (float)((gam::Dist< 2,SampleType > const *)arg1)->far();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_far(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Dist_far__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Dist_far__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Dist_far'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Dist< 2,SampleType >::far(float)\n"
    "    gam::Dist< 2,SampleType >::far() const\n");
  lua_error(L);return 0;
}


static int _wrap_Dist_speedOfSound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float arg2 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::speedOfSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::speedOfSound",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::speedOfSound",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_speedOfSound",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (gam::Dist< 2,SampleType > *) &(arg1)->speedOfSound(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_speedOfSound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::speedOfSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::speedOfSound",1,"gam::Dist< 2,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_speedOfSound",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  result = (float)((gam::Dist< 2,SampleType > const *)arg1)->speedOfSound();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_speedOfSound(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Dist_speedOfSound__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Dist_speedOfSound__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Dist_speedOfSound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Dist< 2,SampleType >::speedOfSound(float)\n"
    "    gam::Dist< 2,SampleType >::speedOfSound() const\n");
  lua_error(L);return 0;
}


static int _wrap_Dist_dist__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  int arg2 ;
  float arg3 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::dist",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_dist",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (gam::Dist< 2,SampleType > *) &(arg1)->dist(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_dist__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::dist",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_dist",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (gam::Dist< 2,SampleType > *) &(arg1)->dist(arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_dist__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::dist",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_dist",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (gam::Dist< 2,SampleType > *) &(arg1)->dist(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_dist__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  gam::Vec< 2,float > *arg2 = 0 ;
  gam::Dist< 2,SampleType > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::dist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",2,"gam::Vec< 2,float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_dist",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_gam__VecT_2_float_t,0))){
    SWIG_fail_ptr("Dist_dist",2,SWIGTYPE_p_gam__VecT_2_float_t);
  }
  
  result = (gam::Dist< 2,SampleType > *) &(arg1)->dist((gam::Vec< 2,float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DistT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_dist__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  gam::Vec< 2,float > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::dist",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::dist",1,"gam::Dist< 2,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_dist",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  result = (gam::Vec< 2,float > *) &((gam::Dist< 2,SampleType > const *)arg1)->dist();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__VecT_2_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_dist(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Dist_dist__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_gam__VecT_2_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Dist_dist__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Dist_dist__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Dist_dist__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_gam__DistT_2_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Dist_dist__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Dist_dist'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::Dist< 2,SampleType >::dist(int,float)\n"
    "    gam::Dist< 2,SampleType >::dist(int,float,float,float)\n"
    "    gam::Dist< 2,SampleType >::dist(int,float,float)\n"
    "    gam::Dist< 2,SampleType >::dist(gam::Vec< 2,float > const &)\n"
    "    gam::Dist< 2,SampleType >::dist() const\n");
  lua_error(L);return 0;
}


static int _wrap_Dist___call(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float arg2 ;
  SwigValueWrapper< gam::Vec< 2,float > > result;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::operator ()",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::operator ()",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist___call",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator ()(arg2);
  {
    gam::Vec< 2,float > * resultptr = new gam::Vec< 2,float >((const gam::Vec< 2,float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__VecT_2_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  float arg2 ;
  SwigValueWrapper< gam::Vec< 2,float > > result;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Tick",1,"gam::Dist< 2,SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::Dist< 2,SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_Tick",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = gam_Dist_Sl_2_Sc_SampleType_Sg__Tick__SWIG(arg1,arg2);
  {
    gam::Vec< 2,float > * resultptr = new gam::Vec< 2,float >((const gam::Vec< 2,float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_gam__VecT_2_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dist_delayLine(lua_State* L) {
  int SWIG_arg = 0;
  gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) 0 ;
  gam::Delay< float > *result = 0 ;
  
  SWIG_check_num_args("gam::Dist< 2,SampleType >::delayLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::Dist< 2,SampleType >::delayLine",1,"gam::Dist< 2,SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__DistT_2_float_t,0))){
    SWIG_fail_ptr("Dist_delayLine",1,SWIGTYPE_p_gam__DistT_2_float_t);
  }
  
  result = (gam::Delay< float > *) &((gam::Dist< 2,SampleType > const *)arg1)->delayLine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Dist(void *obj) {
gam::Dist< 2,SampleType > *arg1 = (gam::Dist< 2,SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Dist(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Dist);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Dist_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Dist_methods[]= {
    { "near", _wrap_Dist_near},
    { "far", _wrap_Dist_far},
    { "speedOfSound", _wrap_Dist_speedOfSound},
    { "dist", _wrap_Dist_dist},
    { "__call", _wrap_Dist___call},
    { "Tick", _wrap_Dist_Tick},
    { "delayLine", _wrap_Dist_delayLine},
    {0,0}
};
static swig_lua_method swig_Dist_meta[] = {
    { "__call", _wrap_Dist___call},
    {0,0}
};

static swig_lua_attribute swig_Dist_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Dist_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Dist_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Dist_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Dist_Sf_SwigStatic = {
    "Dist",
    swig_Dist_Sf_SwigStatic_methods,
    swig_Dist_Sf_SwigStatic_attributes,
    swig_Dist_Sf_SwigStatic_constants,
    swig_Dist_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Dist_bases[] = {0};
static const char *swig_Dist_base_names[] = {0};
static swig_lua_class _wrap_class_Dist = { "Dist", "Dist", &SWIGTYPE_p_gam__DistT_2_float_t,_proxy__wrap_new_Dist, swig_delete_Dist, swig_Dist_methods, swig_Dist_attributes, &swig_Dist_Sf_SwigStatic, swig_Dist_meta, swig_Dist_bases, swig_Dist_base_names };

static int _wrap_new_TransferFunc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  gam::TransferFunc *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::TransferFunc",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gam::TransferFunc::TransferFunc",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (gam::TransferFunc *)new gam::TransferFunc(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransferFunc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::TransferFunc",0,0)
  result = (gam::TransferFunc *)new gam::TransferFunc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransferFunc(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TransferFunc__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TransferFunc__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_TransferFunc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    gam::TransferFunc::TransferFunc(double)\n"
    "    gam::TransferFunc::TransferFunc()\n");
  lua_error(L);return 0;
}


static int _wrap_TransferFunc_resize(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  int arg2 ;
  int arg3 ;
  gam::TransferFunc *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::resize",1,"gam::TransferFunc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::TransferFunc::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::TransferFunc::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_resize",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (gam::TransferFunc *) &(arg1)->resize(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_x(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  int arg2 ;
  gam::TransferFunc::DelayUnit *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::x",1,"gam::TransferFunc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::TransferFunc::x",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_x",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::TransferFunc::DelayUnit *) &(arg1)->x(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc__DelayUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_y(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  int arg2 ;
  gam::TransferFunc::DelayUnit *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::y",1,"gam::TransferFunc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::TransferFunc::y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_y",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (gam::TransferFunc::DelayUnit *) &(arg1)->y(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc__DelayUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_addX(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  double arg2 ;
  double arg3 ;
  gam::TransferFunc *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::addX",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::addX",1,"gam::TransferFunc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::TransferFunc::addX",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::TransferFunc::addX",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_addX",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (gam::TransferFunc *) &(arg1)->addX(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_addY(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  double arg2 ;
  double arg3 ;
  gam::TransferFunc *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::addY",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::addY",1,"gam::TransferFunc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::TransferFunc::addY",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("gam::TransferFunc::addY",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_addY",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (gam::TransferFunc *) &(arg1)->addY(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_clear(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  gam::TransferFunc *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::clear",1,"gam::TransferFunc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_clear",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  result = (gam::TransferFunc *) &(arg1)->clear();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_gain(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  double arg2 ;
  gam::TransferFunc *result = 0 ;
  
  SWIG_check_num_args("gam::TransferFunc::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::gain",1,"gam::TransferFunc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::TransferFunc::gain",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_gain",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (gam::TransferFunc *) &(arg1)->gain(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_gam__TransferFunc,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_Tick(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  double arg2 ;
  gam::TransferFunc::Complex result;
  
  SWIG_check_num_args("gam::TransferFunc::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::Tick",1,"gam::TransferFunc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gam::TransferFunc::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_Tick",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = gam_TransferFunc_Tick__SWIG(arg1,arg2);
  {
    gam::TransferFunc::Complex * resultptr = new gam::TransferFunc::Complex((const gam::TransferFunc::Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransferFunc_TickZ(lua_State* L) {
  int SWIG_arg = 0;
  gam::TransferFunc *arg1 = (gam::TransferFunc *) 0 ;
  gam::TransferFunc::Complex arg2 ;
  gam::TransferFunc::Complex *argp2 ;
  gam::TransferFunc::Complex result;
  
  SWIG_check_num_args("gam::TransferFunc::TickZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("gam::TransferFunc::TickZ",1,"gam::TransferFunc *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("gam::TransferFunc::TickZ",2,"gam::TransferFunc::Complex");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_gam__TransferFunc,0))){
    SWIG_fail_ptr("TransferFunc_TickZ",1,SWIGTYPE_p_gam__TransferFunc);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("TransferFunc_TickZ",2,SWIGTYPE_p_std__complexT_double_t);
  }
  arg2 = *argp2;
  
  result = gam_TransferFunc_TickZ__SWIG(arg1,arg2);
  {
    gam::TransferFunc::Complex * resultptr = new gam::TransferFunc::Complex((const gam::TransferFunc::Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransferFunc(void *obj) {
gam::TransferFunc *arg1 = (gam::TransferFunc *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransferFunc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransferFunc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransferFunc_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransferFunc_methods[]= {
    { "resize", _wrap_TransferFunc_resize},
    { "x", _wrap_TransferFunc_x},
    { "y", _wrap_TransferFunc_y},
    { "addX", _wrap_TransferFunc_addX},
    { "addY", _wrap_TransferFunc_addY},
    { "clear", _wrap_TransferFunc_clear},
    { "gain", _wrap_TransferFunc_gain},
    { "Tick", _wrap_TransferFunc_Tick},
    { "TickZ", _wrap_TransferFunc_TickZ},
    {0,0}
};
static swig_lua_method swig_TransferFunc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransferFunc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransferFunc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransferFunc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransferFunc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransferFunc_Sf_SwigStatic = {
    "TransferFunc",
    swig_TransferFunc_Sf_SwigStatic_methods,
    swig_TransferFunc_Sf_SwigStatic_attributes,
    swig_TransferFunc_Sf_SwigStatic_constants,
    swig_TransferFunc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransferFunc_bases[] = {0};
static const char *swig_TransferFunc_base_names[] = {0};
static swig_lua_class _wrap_class_TransferFunc = { "TransferFunc", "TransferFunc", &SWIGTYPE_p_gam__TransferFunc,_proxy__wrap_new_TransferFunc, swig_delete_TransferFunc, swig_TransferFunc_methods, swig_TransferFunc_attributes, &swig_TransferFunc_Sf_SwigStatic, swig_TransferFunc_meta, swig_TransferFunc_bases, swig_TransferFunc_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("AudioDevice_INPUT", gam::AudioDevice::INPUT)},
    {SWIG_LUA_CONSTTAB_INT("AudioDevice_OUTPUT", gam::AudioDevice::OUTPUT)},
    {SWIG_LUA_CONSTTAB_INT("COMPLEX", gam::COMPLEX)},
    {SWIG_LUA_CONSTTAB_INT("MAG_PHASE", gam::MAG_PHASE)},
    {SWIG_LUA_CONSTTAB_INT("MAG_FREQ", gam::MAG_FREQ)},
    {SWIG_LUA_CONSTTAB_INT("LOW_PASS", gam::LOW_PASS)},
    {SWIG_LUA_CONSTTAB_INT("HIGH_PASS", gam::HIGH_PASS)},
    {SWIG_LUA_CONSTTAB_INT("BAND_PASS", gam::BAND_PASS)},
    {SWIG_LUA_CONSTTAB_INT("RESONANT", gam::RESONANT)},
    {SWIG_LUA_CONSTTAB_INT("BAND_REJECT", gam::BAND_REJECT)},
    {SWIG_LUA_CONSTTAB_INT("ALL_PASS", gam::ALL_PASS)},
    {SWIG_LUA_CONSTTAB_INT("PEAKING", gam::PEAKING)},
    {SWIG_LUA_CONSTTAB_INT("LOW_SHELF", gam::LOW_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("HIGH_SHELF", gam::HIGH_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("SMOOTHING", gam::SMOOTHING)},
    {SWIG_LUA_CONSTTAB_INT("THRU_PASS", gam::THRU_PASS)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_MAN", gam::Vowel::MAN)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_WOMAN", gam::Vowel::WOMAN)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_CHILD", gam::Vowel::CHILD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_NUM_VOICES", gam::Vowel::NUM_VOICES)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HEED", gam::Vowel::HEED)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HID", gam::Vowel::HID)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HEAD", gam::Vowel::HEAD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HAD", gam::Vowel::HAD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HOD", gam::Vowel::HOD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HAWED", gam::Vowel::HAWED)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HOOD", gam::Vowel::HOOD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_WHOD", gam::Vowel::WHOD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HUD", gam::Vowel::HUD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_HEARD", gam::Vowel::HEARD)},
    {SWIG_LUA_CONSTTAB_INT("Vowel_NUM_PHONEMES", gam::Vowel::NUM_PHONEMES)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_WAV", gam::SoundFile::WAV)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_AIFF", gam::SoundFile::AIFF)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_AU", gam::SoundFile::AU)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_RAW", gam::SoundFile::RAW)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_NO_FORMAT", gam::SoundFile::NO_FORMAT)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_PCM_S8", gam::SoundFile::PCM_S8)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_PCM_16", gam::SoundFile::PCM_16)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_PCM_24", gam::SoundFile::PCM_24)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_PCM_32", gam::SoundFile::PCM_32)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_PCM_U8", gam::SoundFile::PCM_U8)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_FLOAT", gam::SoundFile::FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_DOUBLE", gam::SoundFile::DOUBLE)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_ULAW", gam::SoundFile::ULAW)},
    {SWIG_LUA_CONSTTAB_INT("SoundFile_ALAW", gam::SoundFile::ALAW)},
    {SWIG_LUA_CONSTTAB_INT("JCREVERB", gam::JCREVERB)},
    {SWIG_LUA_CONSTTAB_INT("FREEVERB", gam::FREEVERB)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "sleep", _wrap_sleep},
    { "sleepSec", _wrap_sleepSec},
    { "sleepUntil", _wrap_sleepUntil},
    { "timeNow", _wrap_timeNow},
    { "toSec", _wrap_toSec},
    { "toNSec", _wrap_toNSec},
    { "indexLast", _wrap_indexLast},
    { "posToInd", _wrap_posToInd},
    { "slice", _wrap_slice},
    { "AudioDevice_defaultInput", _wrap_AudioDevice_defaultInput},
    { "AudioDevice_defaultOutput", _wrap_AudioDevice_defaultOutput},
    { "AudioDevice_numDevices", _wrap_AudioDevice_numDevices},
    { "AudioDevice_printAll", _wrap_AudioDevice_printAll},
    { "AudioIO_errorText", _wrap_AudioIO_errorText},
    { "bits", _wrap_bits},
    { "bitsToUInt", _wrap_bitsToUInt},
    { "blockSubnormal", _wrap_blockSubnormal},
    { "castIntRound", _wrap_castIntRound},
    { "floatExponent", _wrap_floatExponent},
    { "floatMantissa", _wrap_floatMantissa},
    { "floatToInt", _wrap_floatToInt},
    { "floatToUInt", _wrap_floatToUInt},
    { "fraction", _wrap_fraction},
    { "intToUnit", _wrap_intToUnit},
    { "punFI", _wrap_punFI},
    { "punFU", _wrap_punFU},
    { "punUF", _wrap_punUF},
    { "punIF", _wrap_punIF},
    { "split", _wrap_split},
    { "unitToUInt", _wrap_unitToUInt},
    { "unitToUInt2", _wrap_unitToUInt2},
    { "unitToUInt8", _wrap_unitToUInt8},
    { "castIntTrunc", _wrap_castIntTrunc},
    { "uintToUnit", _wrap_uintToUnit},
    { "uintToUnitS", _wrap_uintToUnitS},
    { "Domain_master", _wrap_Domain_master},
    { "sampleRate", _wrap_sampleRate},
    { "Vowel_amp", _wrap_Vowel_amp},
    { "Vowel_dB", _wrap_Vowel_dB},
    { "Vowel_freq", _wrap_Vowel_freq},
    { "Vowel_pitch", _wrap_Vowel_pitch},
    { "SoundFile_toString", _wrap_SoundFile_toString},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_Timer,
&_wrap_class_stdvector,
&_wrap_class_IndexMap,
&_wrap_class_Slice,
&_wrap_class_EnvFollow,
&_wrap_class_PCounter,
&_wrap_class_MaxAbs,
&_wrap_class_SilenceDetect,
&_wrap_class_Threshold,
&_wrap_class_ZeroCrossRate,
&_wrap_class_AudioDevice,
&_wrap_class_AudioIOData,
&_wrap_class_AudioIO,
&_wrap_class_AudioCallback,
&_wrap_class_LuaCallback,
&_wrap_class_Array,
&_wrap_class_ArrayPow2,
&_wrap_class_Ring,
&_wrap_class_DoubleRing,
&_wrap_class_DelayN,
&_wrap_class_DFT,
&_wrap_class_STFT,
&_wrap_class_SlidingWindow,
&_wrap_class_SlidingDFT,
&_wrap_class_Delay,
&_wrap_class_Multitap,
&_wrap_class_Delay1,
&_wrap_class_Delay2,
&_wrap_class_Comb,
&_wrap_class_Domain1,
&_wrap_class_DomainObserver,
&_wrap_class_Domain,
&_wrap_class_Biquad3,
&_wrap_class_Burst,
&_wrap_class_MonoSynth,
&_wrap_class_Pluck,
&_wrap_class_AM,
&_wrap_class_Chirp,
&_wrap_class_Cheby1,
&_wrap_class_Cheby2,
&_wrap_class_Cheby3,
&_wrap_class_Cheby4,
&_wrap_class_Cheby5,
&_wrap_class_Cheby6,
&_wrap_class_Cheby7,
&_wrap_class_Cheby8,
&_wrap_class_Cheby9,
&_wrap_class_Chorus,
&_wrap_class_FreqShift,
&_wrap_class_Pan,
&_wrap_class_Quantizer,
&_wrap_class_AllPass1,
&_wrap_class_Biquad,
&_wrap_class_BlockDC,
&_wrap_class_BlockNyq,
&_wrap_class_AllPass2,
&_wrap_class_Notch,
&_wrap_class_Reson,
&_wrap_class_Hilbert,
&_wrap_class_Integrator,
&_wrap_class_Differencer,
&_wrap_class_MovingAvg,
&_wrap_class_OnePole,
&_wrap_class_Vowel,
&_wrap_class_NoiseBrown,
&_wrap_class_NoisePink,
&_wrap_class_NoiseWhite,
&_wrap_class_NoiseBinary,
&_wrap_class_NoiseViolet,
&_wrap_class_Accum,
&_wrap_class_Sweep,
&_wrap_class_AccumPhase,
&_wrap_class_Osc,
&_wrap_class_CSine,
&_wrap_class_Sine,
&_wrap_class_SineR,
&_wrap_class_SineRs,
&_wrap_class_SineD,
&_wrap_class_SineDs,
&_wrap_class_Chirplet,
&_wrap_class_LFO,
&_wrap_class_DWO,
&_wrap_class_Buzz,
&_wrap_class_Saw,
&_wrap_class_Square,
&_wrap_class_DSF,
&_wrap_class_Recorder,
&_wrap_class_SamplePlayer,
&_wrap_class_SoundFile,
&_wrap_class_LoopGain,
&_wrap_class_Loop1p,
&_wrap_class_Loop1p1z,
&_wrap_class_Echo,
&_wrap_class_EchoCSine,
&_wrap_class_ReverbMS,
&_wrap_class_Dist,
&_wrap_class_TransferFunc,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "gamma",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gam__RingT_float_tTo_p_gam__ArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Array< float > *)  ((gam::Ring< float > *) x));
}
static void *_p_gam__DoubleRingT_float_tTo_p_gam__ArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Array< float > *) (gam::Ring< SampleType > *) ((gam::DoubleRing< float > *) x));
}
static void *_p_gam__DelayNT_float_tTo_p_gam__ArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Array< float > *) (gam::Ring< SampleType > *) ((gam::DelayN< float > *) x));
}
static void *_p_gam__MovingAvgT_float_tTo_p_gam__ArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Array< float > *) (gam::Ring< SampleType > *)(gam::DelayN< SampleType > *) ((gam::MovingAvg< float > *) x));
}
static void *_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_tTo_p_gam__ArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Array< float > *)  ((gam::SamplePlayer< float,ipl::Trunc,phsInc::OneShot,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__DoubleRingT_float_tTo_p_gam__RingT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Ring< float > *)  ((gam::DoubleRing< float > *) x));
}
static void *_p_gam__DelayNT_float_tTo_p_gam__RingT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Ring< float > *)  ((gam::DelayN< float > *) x));
}
static void *_p_gam__MovingAvgT_float_tTo_p_gam__RingT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Ring< float > *) (gam::DelayN< SampleType > *) ((gam::MovingAvg< float > *) x));
}
static void *_p_gam__MovingAvgT_float_tTo_p_gam__DelayNT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::DelayN< float > *)  ((gam::MovingAvg< float > *) x));
}
static void *_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__ArrayPow2T_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::ArrayPow2< float > *)  ((gam::Osc< float,ipl::Linear,phsInc::Loop,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__AudioIOTo_p_gam__AudioIOData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::AudioIOData *)  ((gam::AudioIO *) x));
}
static void *_p_LuaCallbackTo_p_gam__AudioCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::AudioCallback *)  ((LuaCallback *) x));
}
static void *_p_gam__STFTTo_p_gam__DFT(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::DFT *)  ((gam::STFT *) x));
}
static void *_p_gam__MaxAbsT_float_tTo_p_gam__PCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::PCounter *)  ((gam::MaxAbs< float > *) x));
}
static void *_p_gam__ZeroCrossRateT_float_tTo_p_gam__PCounter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::PCounter *)  ((gam::ZeroCrossRate< float > *) x));
}
static void *_p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Delay< float,ipl::Linear,GAM_DEFAULT_DOMAIN > *)  ((gam::Comb< float,ipl::Linear,gam::real,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_tTo_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Delay< float,ipl::Linear,GAM_DEFAULT_DOMAIN > *)  ((gam::Multitap< float,ipl::Linear,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_tTo_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Delay< float,ipl::Linear,GAM_DEFAULT_DOMAIN > *)  ((gam::Echo< float,ipl::Linear,gam::LoopGain,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::BlockDC< float,float,GAM_DEFAULT_DOMAIN > *)  ((gam::BlockNyq< float,float,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Accum< phsInc::Loop,GAM_DEFAULT_DOMAIN > *)  ((gam::Sweep< phsInc::Loop,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Accum< phsInc::Loop,GAM_DEFAULT_DOMAIN > *)  ((gam::LFO< phsInc::Loop,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Accum< phsInc::Loop,GAM_DEFAULT_DOMAIN > *)  ((gam::DWO< phsInc::Loop,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::Accum< phsInc::Loop,GAM_DEFAULT_DOMAIN > *)  ((gam::Osc< float,ipl::Linear,phsInc::Loop,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::AccumPhase< float,GAM_DEFAULT_DOMAIN > *)  ((gam::Sine< float,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::AccumPhase< float,GAM_DEFAULT_DOMAIN > *)  ((gam::Buzz< float,GAM_DEFAULT_DOMAIN > *) x));
}
static void *_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gam::AccumPhase< float,GAM_DEFAULT_DOMAIN > *)  ((gam::DSF< float,GAM_DEFAULT_DOMAIN > *) x));
}
static swig_type_info _swigt__p_Allpasses = {"_p_Allpasses", "Allpasses *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioCallback = {"_p_AudioCallback", "AudioCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AudioIOData = {"_p_AudioIOData", "AudioIOData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Base = {"_p_Base", "Base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BiquadT_t = {"_p_BiquadT_t", "Biquad< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CSineT_double_t = {"_p_CSineT_double_t", "CSine< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CSineT_float_t = {"_p_CSineT_float_t", "CSine< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Combs = {"_p_Combs", "Combs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Complex = {"_p_Complex", "Complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DecayT_float_t = {"_p_DecayT_float_t", "Decay< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DecayT_t = {"_p_DecayT_t", "Decay< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Domain = {"_p_Domain", "Domain *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilterType = {"_p_FilterType", "FilterType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HilbertT_float_t = {"_p_HilbertT_float_t", "Hilbert< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LuaCallback = {"_p_LuaCallback", "LuaCallback *", 0, 0, (void*)&_wrap_class_LuaCallback, 0};
static swig_type_info _swigt__p_NoiseWhiteT_RNGMulCon_t = {"_p_NoiseWhiteT_RNGMulCon_t", "NoiseWhite< RNGMulCon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NoiseWhiteT_t = {"_p_NoiseWhiteT_t", "NoiseWhite< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OnePoleT_float_t = {"_p_OnePoleT_float_t", "OnePole< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SWIGLUA_REF = {"_p_SWIGLUA_REF", "SWIGLUA_REF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SawT_float_t = {"_p_SawT_float_t", "Saw< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SineT_float_t = {"_p_SineT_float_t", "Sine< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WindowType = {"_p_WindowType", "WindowType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex = {"_p_complex", "complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_gam__AudioIOData__void = {"_p_f_r_gam__AudioIOData__void", "void (*)(gam::AudioIOData &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "gam::real *|SampleType *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__AMT_float_t = {"_p_gam__AMT_float_t", "gam::AM< float > *|gam::AM< SampleType > *", 0, 0, (void*)&_wrap_class_AM, 0};
static swig_type_info _swigt__p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t", "gam::AccumPhase< float > *|gam::AccumPhase< SampleType > *|gam::AccumPhase< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_AccumPhase, 0};
static swig_type_info _swigt__p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t = {"_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t", "gam::Accum< > *|gam::Accum< phsInc::Loop,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Accum, 0};
static swig_type_info _swigt__p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t", "gam::AllPass1< float,float > *|gam::AllPass1< SampleType,SampleType > *|gam::AllPass1< float,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_AllPass1, 0};
static swig_type_info _swigt__p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t", "gam::AllPass2< float,float > *|gam::AllPass2< SampleType,SampleType > *|gam::AllPass2< float,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_AllPass2, 0};
static swig_type_info _swigt__p_gam__ArrayPow2T_float_t = {"_p_gam__ArrayPow2T_float_t", "gam::ArrayPow2< float > *|gam::ArrayPow2< SampleType > *", 0, 0, (void*)&_wrap_class_ArrayPow2, 0};
static swig_type_info _swigt__p_gam__ArrayT_float_t = {"_p_gam__ArrayT_float_t", "gam::Array< float > *|gam::Array< SampleType > *", 0, 0, (void*)&_wrap_class_Array, 0};
static swig_type_info _swigt__p_gam__AudioCallback = {"_p_gam__AudioCallback", "gam::AudioCallback *", 0, 0, (void*)&_wrap_class_AudioCallback, 0};
static swig_type_info _swigt__p_gam__AudioDevice = {"_p_gam__AudioDevice", "gam::AudioDevice *", 0, 0, (void*)&_wrap_class_AudioDevice, 0};
static swig_type_info _swigt__p_gam__AudioIO = {"_p_gam__AudioIO", "gam::AudioIO *", 0, 0, (void*)&_wrap_class_AudioIO, 0};
static swig_type_info _swigt__p_gam__AudioIOData = {"_p_gam__AudioIOData", "gam::AudioIOData *", 0, 0, (void*)&_wrap_class_AudioIOData, 0};
static swig_type_info _swigt__p_gam__Biquad3 = {"_p_gam__Biquad3", "gam::Biquad3 *", 0, 0, (void*)&_wrap_class_Biquad3, 0};
static swig_type_info _swigt__p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t", "gam::Biquad< float,float > *|gam::Biquad< gam::real,gam::real,GAM_DEFAULT_DOMAIN > *|gam::Biquad< SampleType,SampleType > *|gam::Biquad< float,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t", "gam::BlockDC< float,float > *|gam::BlockDC< SampleType,SampleType > *|gam::BlockDC< float,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_BlockDC, 0};
static swig_type_info _swigt__p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t", "gam::BlockNyq< float,float > *|gam::BlockNyq< SampleType,SampleType > *|gam::BlockNyq< float,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_BlockNyq, 0};
static swig_type_info _swigt__p_gam__Burst = {"_p_gam__Burst", "gam::Burst *", 0, 0, (void*)&_wrap_class_Burst, 0};
static swig_type_info _swigt__p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t", "gam::Buzz< float > *|gam::Buzz< SampleType > *|gam::Buzz< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Buzz, 0};
static swig_type_info _swigt__p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t = {"_p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t", "gam::CSine< double,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t", "gam::CSine< float > *|gam::CSine< float,GAM_DEFAULT_DOMAIN > *|gam::CSine< SampleType > *", 0, 0, (void*)&_wrap_class_CSine, 0};
static swig_type_info _swigt__p_gam__ChebyNT_1_float_t = {"_p_gam__ChebyNT_1_float_t", "gam::ChebyN< 1,float > *|gam::ChebyN< 1,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby1, 0};
static swig_type_info _swigt__p_gam__ChebyNT_2_float_t = {"_p_gam__ChebyNT_2_float_t", "gam::ChebyN< 2,float > *|gam::ChebyN< 2,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby2, 0};
static swig_type_info _swigt__p_gam__ChebyNT_3_float_t = {"_p_gam__ChebyNT_3_float_t", "gam::ChebyN< 3,float > *|gam::ChebyN< 3,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby3, 0};
static swig_type_info _swigt__p_gam__ChebyNT_4_float_t = {"_p_gam__ChebyNT_4_float_t", "gam::ChebyN< 4,float > *|gam::ChebyN< 4,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby4, 0};
static swig_type_info _swigt__p_gam__ChebyNT_5_float_t = {"_p_gam__ChebyNT_5_float_t", "gam::ChebyN< 5,float > *|gam::ChebyN< 5,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby5, 0};
static swig_type_info _swigt__p_gam__ChebyNT_6_float_t = {"_p_gam__ChebyNT_6_float_t", "gam::ChebyN< 6,float > *|gam::ChebyN< 6,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby6, 0};
static swig_type_info _swigt__p_gam__ChebyNT_7_float_t = {"_p_gam__ChebyNT_7_float_t", "gam::ChebyN< 7,float > *|gam::ChebyN< 7,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby7, 0};
static swig_type_info _swigt__p_gam__ChebyNT_8_float_t = {"_p_gam__ChebyNT_8_float_t", "gam::ChebyN< 8,float > *|gam::ChebyN< 8,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby8, 0};
static swig_type_info _swigt__p_gam__ChebyNT_9_float_t = {"_p_gam__ChebyNT_9_float_t", "gam::ChebyN< 9,float > *|gam::ChebyN< 9,SampleType > *", 0, 0, (void*)&_wrap_class_Cheby9, 0};
static swig_type_info _swigt__p_gam__ChirpT_float_t = {"_p_gam__ChirpT_float_t", "gam::Chirp< float > *|gam::Chirp< SampleType > *", 0, 0, (void*)&_wrap_class_Chirp, 0};
static swig_type_info _swigt__p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t", "gam::Chirplet< float > *|gam::Chirplet< SampleType > *|gam::Chirplet< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Chirplet, 0};
static swig_type_info _swigt__p_gam__ChorusT_float_t = {"_p_gam__ChorusT_float_t", "gam::Chorus< float > *|gam::Chorus< SampleType > *", 0, 0, (void*)&_wrap_class_Chorus, 0};
static swig_type_info _swigt__p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t", "gam::Comb< float,ipl::Cubic,gam::real,GAM_DEFAULT_DOMAIN > *|gam::Comb< float,ipl::Cubic,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t = {"_p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t", "gam::Comb< float > *|gam::Comb< float,ipl::Linear,gam::real,GAM_DEFAULT_DOMAIN > *|gam::Comb< SampleType > *", 0, 0, (void*)&_wrap_class_Comb, 0};
static swig_type_info _swigt__p_gam__ComplexT_float_t = {"_p_gam__ComplexT_float_t", "gam::Complex< float > *|gam::CSine< float >::complex *|gam::Chirplet< float >::complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__DFT = {"_p_gam__DFT", "gam::DFT *", 0, 0, (void*)&_wrap_class_DFT, 0};
static swig_type_info _swigt__p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t", "gam::DSF< float > *|gam::DSF< SampleType > *|gam::DSF< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_DSF, 0};
static swig_type_info _swigt__p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t = {"_p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t", "gam::DWO< > *|gam::DWO< phsInc::Loop,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_DWO, 0};
static swig_type_info _swigt__p_gam__DecayT_float_t = {"_p_gam__DecayT_float_t", "gam::Decay< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__Delay1T_float_t = {"_p_gam__Delay1T_float_t", "gam::Delay1< float > *|gam::Delay1< SampleType > *", 0, 0, (void*)&_wrap_class_Delay1, 0};
static swig_type_info _swigt__p_gam__Delay2T_float_t = {"_p_gam__Delay2T_float_t", "gam::Delay2< float > *|gam::Delay2< SampleType > *", 0, 0, (void*)&_wrap_class_Delay2, 0};
static swig_type_info _swigt__p_gam__DelayNT_float_t = {"_p_gam__DelayNT_float_t", "gam::DelayN< float > *|gam::DelayN< SampleType > *", 0, 0, (void*)&_wrap_class_DelayN, 0};
static swig_type_info _swigt__p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t = {"_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t", "gam::Delay< float > *|gam::Delay< SampleType > *|gam::Delay< float,ipl::Linear,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Delay, 0};
static swig_type_info _swigt__p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gam__DifferencerT_float_t = {"_p_gam__DifferencerT_float_t", "gam::Differencer< float > *|gam::Differencer< SampleType > *", 0, 0, (void*)&_wrap_class_Differencer, 0};
static swig_type_info _swigt__p_gam__DistT_2_float_t = {"_p_gam__DistT_2_float_t", "gam::Dist< 2,float > *|gam::Dist< 2,SampleType > *", 0, 0, (void*)&_wrap_class_Dist, 0};
static swig_type_info _swigt__p_gam__Domain = {"_p_gam__Domain", "gam::Domain *", 0, 0, (void*)&_wrap_class_Domain, 0};
static swig_type_info _swigt__p_gam__Domain1 = {"_p_gam__Domain1", "gam::Domain1 *", 0, 0, (void*)&_wrap_class_Domain1, 0};
static swig_type_info _swigt__p_gam__DomainObserver = {"_p_gam__DomainObserver", "gam::DomainObserver *", 0, 0, (void*)&_wrap_class_DomainObserver, 0};
static swig_type_info _swigt__p_gam__DoubleRingT_float_t = {"_p_gam__DoubleRingT_float_t", "gam::DoubleRing< float > *|gam::DoubleRing< SampleType > *", 0, 0, (void*)&_wrap_class_DoubleRing, 0};
static swig_type_info _swigt__p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t = {"_p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t", "gam::EchoCSine< float > *|gam::EchoCSine< float,ipl::Linear,gam::LoopGain,GAM_DEFAULT_DOMAIN > *|gam::EchoCSine< SampleType > *", 0, 0, (void*)&_wrap_class_EchoCSine, 0};
static swig_type_info _swigt__p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t = {"_p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t", "gam::Echo< float > *|gam::Echo< SampleType > *|gam::Echo< float,ipl::Linear,gam::LoopGain,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Echo, 0};
static swig_type_info _swigt__p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t = {"_p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t", "gam::EnvFollow< float > *|gam::EnvFollow< float,gam::real,gam::GAM_DEFAULT_DOMAIN > *|gam::EnvFollow< SampleType > *", 0, 0, (void*)&_wrap_class_EnvFollow, 0};
static swig_type_info _swigt__p_gam__FreqShiftT_float_t = {"_p_gam__FreqShiftT_float_t", "gam::FreqShift< float > *|gam::FreqShift< SampleType > *", 0, 0, (void*)&_wrap_class_FreqShift, 0};
static swig_type_info _swigt__p_gam__HilbertT_float_float_t = {"_p_gam__HilbertT_float_float_t", "gam::Hilbert< float,float > *|gam::Hilbert< float,gam::real > *|gam::Hilbert< SampleType,SampleType > *", 0, 0, (void*)&_wrap_class_Hilbert, 0};
static swig_type_info _swigt__p_gam__IndexMapT_float_t = {"_p_gam__IndexMapT_float_t", "gam::IndexMap< float > *|gam::IndexMap< SampleType > *", 0, 0, (void*)&_wrap_class_IndexMap, 0};
static swig_type_info _swigt__p_gam__IntegratorT_float_float_t = {"_p_gam__IntegratorT_float_float_t", "gam::Integrator< float,float > *|gam::Integrator< SampleType,SampleType > *", 0, 0, (void*)&_wrap_class_Integrator, 0};
static swig_type_info _swigt__p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t = {"_p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t", "gam::LFO< > *|gam::LFO< phsInc::Loop,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_LFO, 0};
static swig_type_info _swigt__p_gam__Loop1P1ZT_float_t = {"_p_gam__Loop1P1ZT_float_t", "gam::Loop1P1Z< float > *|gam::Loop1P1Z< SampleType > *", 0, 0, (void*)&_wrap_class_Loop1p1z, 0};
static swig_type_info _swigt__p_gam__Loop1PT_float_t = {"_p_gam__Loop1PT_float_t", "gam::Loop1P< float > *|gam::Loop1P< SampleType > *", 0, 0, (void*)&_wrap_class_Loop1p, 0};
static swig_type_info _swigt__p_gam__LoopGainT_float_t = {"_p_gam__LoopGainT_float_t", "gam::LoopGain< float > *|gam::LoopGain< SampleType > *", 0, 0, (void*)&_wrap_class_LoopGain, 0};
static swig_type_info _swigt__p_gam__MaxAbsT_float_t = {"_p_gam__MaxAbsT_float_t", "gam::MaxAbs< float > *|gam::MaxAbs< SampleType > *", 0, 0, (void*)&_wrap_class_MaxAbs, 0};
static swig_type_info _swigt__p_gam__MonoSynth = {"_p_gam__MonoSynth", "gam::MonoSynth *", 0, 0, (void*)&_wrap_class_MonoSynth, 0};
static swig_type_info _swigt__p_gam__MovingAvgT_float_t = {"_p_gam__MovingAvgT_float_t", "gam::MovingAvg< float > *|gam::MovingAvg< SampleType > *", 0, 0, (void*)&_wrap_class_MovingAvg, 0};
static swig_type_info _swigt__p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t = {"_p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t", "gam::Multitap< float > *|gam::Multitap< float,ipl::Linear,GAM_DEFAULT_DOMAIN > *|gam::Multitap< SampleType > *", 0, 0, (void*)&_wrap_class_Multitap, 0};
static swig_type_info _swigt__p_gam__NoiseBinaryT_RNGLinCon_t = {"_p_gam__NoiseBinaryT_RNGLinCon_t", "gam::NoiseBinary< > *|gam::NoiseBinary< RNGLinCon > *", 0, 0, (void*)&_wrap_class_NoiseBinary, 0};
static swig_type_info _swigt__p_gam__NoiseBrownT_RNGLinCon_t = {"_p_gam__NoiseBrownT_RNGLinCon_t", "gam::NoiseBrown< RNGLinCon > *|gam::NoiseBrown< > *", 0, 0, (void*)&_wrap_class_NoiseBrown, 0};
static swig_type_info _swigt__p_gam__NoisePinkT_RNGLinCon_t = {"_p_gam__NoisePinkT_RNGLinCon_t", "gam::NoisePink< > *|gam::NoisePink< RNGLinCon > *", 0, 0, (void*)&_wrap_class_NoisePink, 0};
static swig_type_info _swigt__p_gam__NoiseVioletT_RNGLinCon_t = {"_p_gam__NoiseVioletT_RNGLinCon_t", "gam::NoiseViolet< > *|gam::NoiseViolet< RNGLinCon > *", 0, 0, (void*)&_wrap_class_NoiseViolet, 0};
static swig_type_info _swigt__p_gam__NoiseWhiteT_RNGLinCon_t = {"_p_gam__NoiseWhiteT_RNGLinCon_t", "gam::NoiseWhite< > *|gam::NoiseWhite< RNGLinCon > *", 0, 0, (void*)&_wrap_class_NoiseWhite, 0};
static swig_type_info _swigt__p_gam__NoiseWhiteT_gam__RNGMulCon_t = {"_p_gam__NoiseWhiteT_gam__RNGMulCon_t", "gam::NoiseWhite< gam::RNGMulCon > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t", "gam::Notch< float,float > *|gam::Notch< SampleType,SampleType > *|gam::Notch< float,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Notch, 0};
static swig_type_info _swigt__p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t", "gam::OnePole< float,float > *|gam::OnePole< SampleType,SampleType > *|gam::OnePole< float,float,GAM_DEFAULT_DOMAIN > *|gam::OnePole< float,gam::real,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_OnePole, 0};
static swig_type_info _swigt__p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t = {"_p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t", "gam::OnePole< float,float,gam::GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t = {"_p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t", "gam::Osc< float > *|gam::Osc< float,ipl::Linear,phsInc::Loop,GAM_DEFAULT_DOMAIN > *|gam::Osc< SampleType > *", 0, 0, (void*)&_wrap_class_Osc, 0};
static swig_type_info _swigt__p_gam__PCounter = {"_p_gam__PCounter", "gam::PCounter *", 0, 0, (void*)&_wrap_class_PCounter, 0};
static swig_type_info _swigt__p_gam__PanT_float_t = {"_p_gam__PanT_float_t", "gam::Pan< float > *|gam::Pan< SampleType > *", 0, 0, (void*)&_wrap_class_Pan, 0};
static swig_type_info _swigt__p_gam__Pluck = {"_p_gam__Pluck", "gam::Pluck *", 0, 0, (void*)&_wrap_class_Pluck, 0};
static swig_type_info _swigt__p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t", "gam::Quantizer< float > *|gam::Quantizer< SampleType > *|gam::Quantizer< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Quantizer, 0};
static swig_type_info _swigt__p_gam__Recorder = {"_p_gam__Recorder", "gam::Recorder *", 0, 0, (void*)&_wrap_class_Recorder, 0};
static swig_type_info _swigt__p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t", "gam::Reson< float,float > *|gam::Reson< SampleType,SampleType > *|gam::Reson< float,float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Reson, 0};
static swig_type_info _swigt__p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t = {"_p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t", "gam::ReverbMS< float,gam::Loop1P,ipl::Trunc,GAM_DEFAULT_DOMAIN > *|gam::ReverbMS< float > *|gam::ReverbMS< SampleType > *", 0, 0, (void*)&_wrap_class_ReverbMS, 0};
static swig_type_info _swigt__p_gam__RingT_float_t = {"_p_gam__RingT_float_t", "gam::Ring< float > *|gam::Ring< SampleType > *", 0, 0, (void*)&_wrap_class_Ring, 0};
static swig_type_info _swigt__p_gam__STFT = {"_p_gam__STFT", "gam::STFT *", 0, 0, (void*)&_wrap_class_STFT, 0};
static swig_type_info _swigt__p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t", "gam::SamplePlayer< float > *|gam::SamplePlayer< float,ipl::Trunc,phsInc::OneShot,GAM_DEFAULT_DOMAIN > *|gam::SamplePlayer< SampleType > *", 0, 0, (void*)&_wrap_class_SamplePlayer, 0};
static swig_type_info _swigt__p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t", "gam::Saw< float > *|gam::Saw< float,GAM_DEFAULT_DOMAIN > *|gam::Saw< SampleType > *", 0, 0, (void*)&_wrap_class_Saw, 0};
static swig_type_info _swigt__p_gam__SilenceDetect = {"_p_gam__SilenceDetect", "gam::SilenceDetect *", 0, 0, (void*)&_wrap_class_SilenceDetect, 0};
static swig_type_info _swigt__p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t", "gam::SineD< float > *|gam::SineD< SampleType > *|gam::SineD< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_SineD, 0};
static swig_type_info _swigt__p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t", "gam::SineDs< float > *|gam::SineDs< SampleType > *|gam::SineDs< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_SineDs, 0};
static swig_type_info _swigt__p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t", "gam::SineR< float > *|gam::SineR< SampleType > *|gam::SineR< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_SineR, 0};
static swig_type_info _swigt__p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t", "gam::SineRs< float > *|gam::SineRs< SampleType > *|gam::SineRs< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_SineRs, 0};
static swig_type_info _swigt__p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t", "gam::Sine< float > *|gam::Sine< float,GAM_DEFAULT_DOMAIN > *|gam::Sine< SampleType > *", 0, 0, (void*)&_wrap_class_Sine, 0};
static swig_type_info _swigt__p_gam__SliceT_float_t = {"_p_gam__SliceT_float_t", "gam::Slice< float > *|gam::Slice< SampleType > *", 0, 0, (void*)&_wrap_class_Slice, 0};
static swig_type_info _swigt__p_gam__SlidingDFTT_float_t = {"_p_gam__SlidingDFTT_float_t", "gam::SlidingDFT< float > *|gam::SlidingDFT< SampleType > *", 0, 0, (void*)&_wrap_class_SlidingDFT, 0};
static swig_type_info _swigt__p_gam__SlidingWindowT_float_t = {"_p_gam__SlidingWindowT_float_t", "gam::SlidingWindow< float > *|gam::SlidingWindow< SampleType > *", 0, 0, (void*)&_wrap_class_SlidingWindow, 0};
static swig_type_info _swigt__p_gam__SoundFile = {"_p_gam__SoundFile", "gam::SoundFile *", 0, 0, (void*)&_wrap_class_SoundFile, 0};
static swig_type_info _swigt__p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t", "gam::Square< float > *|gam::Square< SampleType > *|gam::Square< float,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Square, 0};
static swig_type_info _swigt__p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t = {"_p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t", "gam::Sweep< > *|gam::Sweep< phsInc::Loop,GAM_DEFAULT_DOMAIN > *", 0, 0, (void*)&_wrap_class_Sweep, 0};
static swig_type_info _swigt__p_gam__ThresholdT_float_t = {"_p_gam__ThresholdT_float_t", "gam::Threshold< float > *|gam::Threshold< SampleType > *", 0, 0, (void*)&_wrap_class_Threshold, 0};
static swig_type_info _swigt__p_gam__Timer = {"_p_gam__Timer", "gam::Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_gam__TransferFunc = {"_p_gam__TransferFunc", "gam::TransferFunc *", 0, 0, (void*)&_wrap_class_TransferFunc, 0};
static swig_type_info _swigt__p_gam__TransferFunc__DelayUnit = {"_p_gam__TransferFunc__DelayUnit", "gam::TransferFunc::DelayUnit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__VecT_2_double_t = {"_p_gam__VecT_2_double_t", "gam::double2 *|gam::Vec< 2,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__VecT_2_float_t = {"_p_gam__VecT_2_float_t", "gam::float2 *|gam::Vec< 2,float > *|gam::Vec< 2,SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__VecT_3_double_t = {"_p_gam__VecT_3_double_t", "gam::double3 *|gam::Vec< 3,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__VecT_3_float_t = {"_p_gam__VecT_3_float_t", "gam::Vec< 3,float > *|gam::float3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__VecT_4_double_t = {"_p_gam__VecT_4_double_t", "gam::Vec< 4,double > *|gam::double4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__VecT_4_float_t = {"_p_gam__VecT_4_float_t", "gam::Vec< 4,float > *|gam::float4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gam__Vowel = {"_p_gam__Vowel", "gam::Vowel *", 0, 0, (void*)&_wrap_class_Vowel, 0};
static swig_type_info _swigt__p_gam__ZeroCrossRateT_float_t = {"_p_gam__ZeroCrossRateT_float_t", "gam::ZeroCrossRate< float > *|gam::ZeroCrossRate< SampleType > *", 0, 0, (void*)&_wrap_class_ZeroCrossRate, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|gam::index_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ipl__Type = {"_p_ipl__Type", "ipl::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "gam::nsec_t *|int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_phsInc__Loop = {"_p_phsInc__Loop", "phsInc::Loop *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "gam::TransferFunc::Complex *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< SampleType > *", 0, 0, (void*)&_wrap_class_stdvector, 0};
static swig_type_info _swigt__p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t = {"_p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t", "std::vector< gam::Comb< float,ipl::Trunc,float,gam::Domain1 > > *|gam::ReverbMS< float >::Allpasses *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t = {"_p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t", "std::vector< gam::Echo< float,ipl::Trunc,gam::Loop1P,gam::Domain1 > > *|gam::ReverbMS< float >::Combs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Allpasses,
  &_swigt__p_AudioCallback,
  &_swigt__p_AudioIOData,
  &_swigt__p_Base,
  &_swigt__p_BiquadT_t,
  &_swigt__p_CSineT_double_t,
  &_swigt__p_CSineT_float_t,
  &_swigt__p_Combs,
  &_swigt__p_Complex,
  &_swigt__p_DecayT_float_t,
  &_swigt__p_DecayT_t,
  &_swigt__p_Domain,
  &_swigt__p_FILE,
  &_swigt__p_FilterType,
  &_swigt__p_HilbertT_float_t,
  &_swigt__p_LuaCallback,
  &_swigt__p_NoiseWhiteT_RNGMulCon_t,
  &_swigt__p_NoiseWhiteT_t,
  &_swigt__p_OnePoleT_float_t,
  &_swigt__p_SWIGLUA_REF,
  &_swigt__p_SawT_float_t,
  &_swigt__p_SineT_float_t,
  &_swigt__p_WindowType,
  &_swigt__p_complex,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_r_gam__AudioIOData__void,
  &_swigt__p_float,
  &_swigt__p_gam__AMT_float_t,
  &_swigt__p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__ArrayPow2T_float_t,
  &_swigt__p_gam__ArrayT_float_t,
  &_swigt__p_gam__AudioCallback,
  &_swigt__p_gam__AudioDevice,
  &_swigt__p_gam__AudioIO,
  &_swigt__p_gam__AudioIOData,
  &_swigt__p_gam__Biquad3,
  &_swigt__p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__Burst,
  &_swigt__p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__ChebyNT_1_float_t,
  &_swigt__p_gam__ChebyNT_2_float_t,
  &_swigt__p_gam__ChebyNT_3_float_t,
  &_swigt__p_gam__ChebyNT_4_float_t,
  &_swigt__p_gam__ChebyNT_5_float_t,
  &_swigt__p_gam__ChebyNT_6_float_t,
  &_swigt__p_gam__ChebyNT_7_float_t,
  &_swigt__p_gam__ChebyNT_8_float_t,
  &_swigt__p_gam__ChebyNT_9_float_t,
  &_swigt__p_gam__ChirpT_float_t,
  &_swigt__p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__ChorusT_float_t,
  &_swigt__p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__ComplexT_float_t,
  &_swigt__p_gam__DFT,
  &_swigt__p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__DecayT_float_t,
  &_swigt__p_gam__Delay1T_float_t,
  &_swigt__p_gam__Delay2T_float_t,
  &_swigt__p_gam__DelayNT_float_t,
  &_swigt__p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__DifferencerT_float_t,
  &_swigt__p_gam__DistT_2_float_t,
  &_swigt__p_gam__Domain,
  &_swigt__p_gam__Domain1,
  &_swigt__p_gam__DomainObserver,
  &_swigt__p_gam__DoubleRingT_float_t,
  &_swigt__p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__FreqShiftT_float_t,
  &_swigt__p_gam__HilbertT_float_float_t,
  &_swigt__p_gam__IndexMapT_float_t,
  &_swigt__p_gam__IntegratorT_float_float_t,
  &_swigt__p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__Loop1P1ZT_float_t,
  &_swigt__p_gam__Loop1PT_float_t,
  &_swigt__p_gam__LoopGainT_float_t,
  &_swigt__p_gam__MaxAbsT_float_t,
  &_swigt__p_gam__MonoSynth,
  &_swigt__p_gam__MovingAvgT_float_t,
  &_swigt__p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__NoiseBinaryT_RNGLinCon_t,
  &_swigt__p_gam__NoiseBrownT_RNGLinCon_t,
  &_swigt__p_gam__NoisePinkT_RNGLinCon_t,
  &_swigt__p_gam__NoiseVioletT_RNGLinCon_t,
  &_swigt__p_gam__NoiseWhiteT_RNGLinCon_t,
  &_swigt__p_gam__NoiseWhiteT_gam__RNGMulCon_t,
  &_swigt__p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__PCounter,
  &_swigt__p_gam__PanT_float_t,
  &_swigt__p_gam__Pluck,
  &_swigt__p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__Recorder,
  &_swigt__p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__RingT_float_t,
  &_swigt__p_gam__STFT,
  &_swigt__p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SilenceDetect,
  &_swigt__p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SliceT_float_t,
  &_swigt__p_gam__SlidingDFTT_float_t,
  &_swigt__p_gam__SlidingWindowT_float_t,
  &_swigt__p_gam__SoundFile,
  &_swigt__p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  &_swigt__p_gam__ThresholdT_float_t,
  &_swigt__p_gam__Timer,
  &_swigt__p_gam__TransferFunc,
  &_swigt__p_gam__TransferFunc__DelayUnit,
  &_swigt__p_gam__VecT_2_double_t,
  &_swigt__p_gam__VecT_2_float_t,
  &_swigt__p_gam__VecT_3_double_t,
  &_swigt__p_gam__VecT_3_float_t,
  &_swigt__p_gam__VecT_4_double_t,
  &_swigt__p_gam__VecT_4_float_t,
  &_swigt__p_gam__Vowel,
  &_swigt__p_gam__ZeroCrossRateT_float_t,
  &_swigt__p_int,
  &_swigt__p_ipl__Type,
  &_swigt__p_long_long,
  &_swigt__p_p_float,
  &_swigt__p_phsInc__Loop,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t,
  &_swigt__p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Allpasses[] = {  {&_swigt__p_Allpasses, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioCallback[] = {  {&_swigt__p_AudioCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AudioIOData[] = {  {&_swigt__p_AudioIOData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Base[] = {  {&_swigt__p_Base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BiquadT_t[] = {  {&_swigt__p_BiquadT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSineT_double_t[] = {  {&_swigt__p_CSineT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CSineT_float_t[] = {  {&_swigt__p_CSineT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Combs[] = {  {&_swigt__p_Combs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Complex[] = {  {&_swigt__p_Complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DecayT_float_t[] = {  {&_swigt__p_DecayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DecayT_t[] = {  {&_swigt__p_DecayT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Domain[] = {  {&_swigt__p_Domain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterType[] = {  {&_swigt__p_FilterType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HilbertT_float_t[] = {  {&_swigt__p_HilbertT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaCallback[] = {  {&_swigt__p_LuaCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoiseWhiteT_RNGMulCon_t[] = {  {&_swigt__p_NoiseWhiteT_RNGMulCon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NoiseWhiteT_t[] = {  {&_swigt__p_NoiseWhiteT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OnePoleT_float_t[] = {  {&_swigt__p_OnePoleT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGLUA_REF[] = {  {&_swigt__p_SWIGLUA_REF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SawT_float_t[] = {  {&_swigt__p_SawT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SineT_float_t[] = {  {&_swigt__p_SineT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WindowType[] = {  {&_swigt__p_WindowType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex[] = {  {&_swigt__p_complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_gam__AudioIOData__void[] = {  {&_swigt__p_f_r_gam__AudioIOData__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AMT_float_t[] = {  {&_swigt__p_gam__AMT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},  {&_swigt__p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t, _p_gam__SineT_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t, _p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, _p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, _p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},  {&_swigt__p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, _p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, _p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, _p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ArrayPow2T_float_t[] = {  {&_swigt__p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, _p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_tTo_p_gam__ArrayPow2T_float_t, 0, 0},  {&_swigt__p_gam__ArrayPow2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ArrayT_float_t[] = {  {&_swigt__p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, _p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_tTo_p_gam__ArrayT_float_t, 0, 0},  {&_swigt__p_gam__ArrayT_float_t, 0, 0, 0},  {&_swigt__p_gam__RingT_float_t, _p_gam__RingT_float_tTo_p_gam__ArrayT_float_t, 0, 0},  {&_swigt__p_gam__DoubleRingT_float_t, _p_gam__DoubleRingT_float_tTo_p_gam__ArrayT_float_t, 0, 0},  {&_swigt__p_gam__DelayNT_float_t, _p_gam__DelayNT_float_tTo_p_gam__ArrayT_float_t, 0, 0},  {&_swigt__p_gam__MovingAvgT_float_t, _p_gam__MovingAvgT_float_tTo_p_gam__ArrayT_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AudioCallback[] = {  {&_swigt__p_gam__AudioCallback, 0, 0, 0},  {&_swigt__p_LuaCallback, _p_LuaCallbackTo_p_gam__AudioCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AudioDevice[] = {  {&_swigt__p_gam__AudioDevice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AudioIO[] = {  {&_swigt__p_gam__AudioIO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__AudioIOData[] = {  {&_swigt__p_gam__AudioIOData, 0, 0, 0},  {&_swigt__p_gam__AudioIO, _p_gam__AudioIOTo_p_gam__AudioIOData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Biquad3[] = {  {&_swigt__p_gam__Biquad3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},  {&_swigt__p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t, _p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Burst[] = {  {&_swigt__p_gam__Burst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_1_float_t[] = {  {&_swigt__p_gam__ChebyNT_1_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_2_float_t[] = {  {&_swigt__p_gam__ChebyNT_2_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_3_float_t[] = {  {&_swigt__p_gam__ChebyNT_3_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_4_float_t[] = {  {&_swigt__p_gam__ChebyNT_4_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_5_float_t[] = {  {&_swigt__p_gam__ChebyNT_5_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_6_float_t[] = {  {&_swigt__p_gam__ChebyNT_6_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_7_float_t[] = {  {&_swigt__p_gam__ChebyNT_7_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_8_float_t[] = {  {&_swigt__p_gam__ChebyNT_8_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChebyNT_9_float_t[] = {  {&_swigt__p_gam__ChebyNT_9_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChirpT_float_t[] = {  {&_swigt__p_gam__ChirpT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ChorusT_float_t[] = {  {&_swigt__p_gam__ChorusT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ComplexT_float_t[] = {  {&_swigt__p_gam__ComplexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DFT[] = {  {&_swigt__p_gam__DFT, 0, 0, 0},  {&_swigt__p_gam__STFT, _p_gam__STFTTo_p_gam__DFT, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DecayT_float_t[] = {  {&_swigt__p_gam__DecayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Delay1T_float_t[] = {  {&_swigt__p_gam__Delay1T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Delay2T_float_t[] = {  {&_swigt__p_gam__Delay2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DelayNT_float_t[] = {  {&_swigt__p_gam__DelayNT_float_t, 0, 0, 0},  {&_swigt__p_gam__MovingAvgT_float_t, _p_gam__MovingAvgT_float_tTo_p_gam__DelayNT_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t[] = {{&_swigt__p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t, _p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},  {&_swigt__p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, _p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_tTo_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t, _p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_tTo_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0, 0},  {&_swigt__p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, _p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_tTo_p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DifferencerT_float_t[] = {  {&_swigt__p_gam__DifferencerT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DistT_2_float_t[] = {  {&_swigt__p_gam__DistT_2_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Domain[] = {  {&_swigt__p_gam__Domain, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Domain1[] = {  {&_swigt__p_gam__Domain1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DomainObserver[] = {  {&_swigt__p_gam__DomainObserver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__DoubleRingT_float_t[] = {  {&_swigt__p_gam__DoubleRingT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__FreqShiftT_float_t[] = {  {&_swigt__p_gam__FreqShiftT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__HilbertT_float_float_t[] = {  {&_swigt__p_gam__HilbertT_float_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__IndexMapT_float_t[] = {  {&_swigt__p_gam__IndexMapT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__IntegratorT_float_float_t[] = {  {&_swigt__p_gam__IntegratorT_float_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Loop1P1ZT_float_t[] = {  {&_swigt__p_gam__Loop1P1ZT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Loop1PT_float_t[] = {  {&_swigt__p_gam__Loop1PT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__LoopGainT_float_t[] = {  {&_swigt__p_gam__LoopGainT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__MaxAbsT_float_t[] = {  {&_swigt__p_gam__MaxAbsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__MonoSynth[] = {  {&_swigt__p_gam__MonoSynth, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__MovingAvgT_float_t[] = {  {&_swigt__p_gam__MovingAvgT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__NoiseBinaryT_RNGLinCon_t[] = {  {&_swigt__p_gam__NoiseBinaryT_RNGLinCon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__NoiseBrownT_RNGLinCon_t[] = {  {&_swigt__p_gam__NoiseBrownT_RNGLinCon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__NoisePinkT_RNGLinCon_t[] = {  {&_swigt__p_gam__NoisePinkT_RNGLinCon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__NoiseVioletT_RNGLinCon_t[] = {  {&_swigt__p_gam__NoiseVioletT_RNGLinCon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__NoiseWhiteT_RNGLinCon_t[] = {  {&_swigt__p_gam__NoiseWhiteT_RNGLinCon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__NoiseWhiteT_gam__RNGMulCon_t[] = {  {&_swigt__p_gam__NoiseWhiteT_gam__RNGMulCon_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__PCounter[] = {  {&_swigt__p_gam__PCounter, 0, 0, 0},  {&_swigt__p_gam__MaxAbsT_float_t, _p_gam__MaxAbsT_float_tTo_p_gam__PCounter, 0, 0},  {&_swigt__p_gam__ZeroCrossRateT_float_t, _p_gam__ZeroCrossRateT_float_tTo_p_gam__PCounter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__PanT_float_t[] = {  {&_swigt__p_gam__PanT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Pluck[] = {  {&_swigt__p_gam__Pluck, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Recorder[] = {  {&_swigt__p_gam__Recorder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__RingT_float_t[] = {  {&_swigt__p_gam__RingT_float_t, 0, 0, 0},  {&_swigt__p_gam__DoubleRingT_float_t, _p_gam__DoubleRingT_float_tTo_p_gam__RingT_float_t, 0, 0},  {&_swigt__p_gam__DelayNT_float_t, _p_gam__DelayNT_float_tTo_p_gam__RingT_float_t, 0, 0},  {&_swigt__p_gam__MovingAvgT_float_t, _p_gam__MovingAvgT_float_tTo_p_gam__RingT_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__STFT[] = {  {&_swigt__p_gam__STFT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SilenceDetect[] = {  {&_swigt__p_gam__SilenceDetect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SliceT_float_t[] = {  {&_swigt__p_gam__SliceT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SlidingDFTT_float_t[] = {  {&_swigt__p_gam__SlidingDFTT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SlidingWindowT_float_t[] = {  {&_swigt__p_gam__SlidingWindowT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SoundFile[] = {  {&_swigt__p_gam__SoundFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t[] = {  {&_swigt__p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ThresholdT_float_t[] = {  {&_swigt__p_gam__ThresholdT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Timer[] = {  {&_swigt__p_gam__Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__TransferFunc[] = {  {&_swigt__p_gam__TransferFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__TransferFunc__DelayUnit[] = {  {&_swigt__p_gam__TransferFunc__DelayUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__VecT_2_double_t[] = {  {&_swigt__p_gam__VecT_2_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__VecT_2_float_t[] = {  {&_swigt__p_gam__VecT_2_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__VecT_3_double_t[] = {  {&_swigt__p_gam__VecT_3_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__VecT_3_float_t[] = {  {&_swigt__p_gam__VecT_3_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__VecT_4_double_t[] = {  {&_swigt__p_gam__VecT_4_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__VecT_4_float_t[] = {  {&_swigt__p_gam__VecT_4_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__Vowel[] = {  {&_swigt__p_gam__Vowel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gam__ZeroCrossRateT_float_t[] = {  {&_swigt__p_gam__ZeroCrossRateT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ipl__Type[] = {  {&_swigt__p_ipl__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_phsInc__Loop[] = {  {&_swigt__p_phsInc__Loop, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t[] = {  {&_swigt__p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t[] = {  {&_swigt__p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Allpasses,
  _swigc__p_AudioCallback,
  _swigc__p_AudioIOData,
  _swigc__p_Base,
  _swigc__p_BiquadT_t,
  _swigc__p_CSineT_double_t,
  _swigc__p_CSineT_float_t,
  _swigc__p_Combs,
  _swigc__p_Complex,
  _swigc__p_DecayT_float_t,
  _swigc__p_DecayT_t,
  _swigc__p_Domain,
  _swigc__p_FILE,
  _swigc__p_FilterType,
  _swigc__p_HilbertT_float_t,
  _swigc__p_LuaCallback,
  _swigc__p_NoiseWhiteT_RNGMulCon_t,
  _swigc__p_NoiseWhiteT_t,
  _swigc__p_OnePoleT_float_t,
  _swigc__p_SWIGLUA_REF,
  _swigc__p_SawT_float_t,
  _swigc__p_SineT_float_t,
  _swigc__p_WindowType,
  _swigc__p_complex,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_r_gam__AudioIOData__void,
  _swigc__p_float,
  _swigc__p_gam__AMT_float_t,
  _swigc__p_gam__AccumPhaseT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__AccumT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__AllPass1T_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__AllPass2T_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__ArrayPow2T_float_t,
  _swigc__p_gam__ArrayT_float_t,
  _swigc__p_gam__AudioCallback,
  _swigc__p_gam__AudioDevice,
  _swigc__p_gam__AudioIO,
  _swigc__p_gam__AudioIOData,
  _swigc__p_gam__Biquad3,
  _swigc__p_gam__BiquadT_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__BlockDCT_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__BlockNyqT_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__Burst,
  _swigc__p_gam__BuzzT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__CSineT_double_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__CSineT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__ChebyNT_1_float_t,
  _swigc__p_gam__ChebyNT_2_float_t,
  _swigc__p_gam__ChebyNT_3_float_t,
  _swigc__p_gam__ChebyNT_4_float_t,
  _swigc__p_gam__ChebyNT_5_float_t,
  _swigc__p_gam__ChebyNT_6_float_t,
  _swigc__p_gam__ChebyNT_7_float_t,
  _swigc__p_gam__ChebyNT_8_float_t,
  _swigc__p_gam__ChebyNT_9_float_t,
  _swigc__p_gam__ChirpT_float_t,
  _swigc__p_gam__ChirpletT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__ChorusT_float_t,
  _swigc__p_gam__CombT_float_ipl__Cubic_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__CombT_float_ipl__Linear_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__CombT_float_ipl__Linear_gam__real_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__ComplexT_float_t,
  _swigc__p_gam__DFT,
  _swigc__p_gam__DSFT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__DWOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__DecayT_float_t,
  _swigc__p_gam__Delay1T_float_t,
  _swigc__p_gam__Delay2T_float_t,
  _swigc__p_gam__DelayNT_float_t,
  _swigc__p_gam__DelayT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__DifferencerT_float_t,
  _swigc__p_gam__DistT_2_float_t,
  _swigc__p_gam__Domain,
  _swigc__p_gam__Domain1,
  _swigc__p_gam__DomainObserver,
  _swigc__p_gam__DoubleRingT_float_t,
  _swigc__p_gam__EchoCSineT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__EchoT_float_ipl__Linear_gam__LoopGain_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__EnvFollowT_float_gam__real_gam__GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__FreqShiftT_float_t,
  _swigc__p_gam__HilbertT_float_float_t,
  _swigc__p_gam__IndexMapT_float_t,
  _swigc__p_gam__IntegratorT_float_float_t,
  _swigc__p_gam__LFOT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__Loop1P1ZT_float_t,
  _swigc__p_gam__Loop1PT_float_t,
  _swigc__p_gam__LoopGainT_float_t,
  _swigc__p_gam__MaxAbsT_float_t,
  _swigc__p_gam__MonoSynth,
  _swigc__p_gam__MovingAvgT_float_t,
  _swigc__p_gam__MultitapT_float_ipl__Linear_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__NoiseBinaryT_RNGLinCon_t,
  _swigc__p_gam__NoiseBrownT_RNGLinCon_t,
  _swigc__p_gam__NoisePinkT_RNGLinCon_t,
  _swigc__p_gam__NoiseVioletT_RNGLinCon_t,
  _swigc__p_gam__NoiseWhiteT_RNGLinCon_t,
  _swigc__p_gam__NoiseWhiteT_gam__RNGMulCon_t,
  _swigc__p_gam__NotchT_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__OnePoleT_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__OnePoleT_float_float_gam__GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__OscT_float_ipl__Linear_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__PCounter,
  _swigc__p_gam__PanT_float_t,
  _swigc__p_gam__Pluck,
  _swigc__p_gam__QuantizerT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__Recorder,
  _swigc__p_gam__ResonT_float_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__ReverbMST_float_gam__Loop1P_ipl__Trunc_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__RingT_float_t,
  _swigc__p_gam__STFT,
  _swigc__p_gam__SamplePlayerT_float_ipl__Trunc_phsInc__OneShot_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SawT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SilenceDetect,
  _swigc__p_gam__SineDT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SineDsT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SineRT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SineRsT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SineT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SliceT_float_t,
  _swigc__p_gam__SlidingDFTT_float_t,
  _swigc__p_gam__SlidingWindowT_float_t,
  _swigc__p_gam__SoundFile,
  _swigc__p_gam__SquareT_float_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__SweepT_phsInc__Loop_GAM_DEFAULT_DOMAIN_t,
  _swigc__p_gam__ThresholdT_float_t,
  _swigc__p_gam__Timer,
  _swigc__p_gam__TransferFunc,
  _swigc__p_gam__TransferFunc__DelayUnit,
  _swigc__p_gam__VecT_2_double_t,
  _swigc__p_gam__VecT_2_float_t,
  _swigc__p_gam__VecT_3_double_t,
  _swigc__p_gam__VecT_3_float_t,
  _swigc__p_gam__VecT_4_double_t,
  _swigc__p_gam__VecT_4_float_t,
  _swigc__p_gam__Vowel,
  _swigc__p_gam__ZeroCrossRateT_float_t,
  _swigc__p_int,
  _swigc__p_ipl__Type,
  _swigc__p_long_long,
  _swigc__p_p_float,
  _swigc__p_phsInc__Loop,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_gam__CombT_float_ipl__Trunc_float_gam__Domain1_t_t,
  _swigc__p_std__vectorT_gam__EchoT_float_ipl__Trunc_gam__Loop1P_gam__Domain1_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

