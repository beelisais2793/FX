/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_daisysp__ATone swig_types[0]
#define SWIGTYPE_p_daisysp__AdEnv swig_types[1]
#define SWIGTYPE_p_daisysp__Adsr swig_types[2]
#define SWIGTYPE_p_daisysp__Allpass swig_types[3]
#define SWIGTYPE_p_daisysp__AnalogBassDrum swig_types[4]
#define SWIGTYPE_p_daisysp__AnalogSnareDrum swig_types[5]
#define SWIGTYPE_p_daisysp__Autowah swig_types[6]
#define SWIGTYPE_p_daisysp__Balance swig_types[7]
#define SWIGTYPE_p_daisysp__Biquad swig_types[8]
#define SWIGTYPE_p_daisysp__Bitcrush swig_types[9]
#define SWIGTYPE_p_daisysp__BlOsc swig_types[10]
#define SWIGTYPE_p_daisysp__Chorus swig_types[11]
#define SWIGTYPE_p_daisysp__ChorusEngine swig_types[12]
#define SWIGTYPE_p_daisysp__ClockedNoise swig_types[13]
#define SWIGTYPE_p_daisysp__Comb swig_types[14]
#define SWIGTYPE_p_daisysp__Compressor swig_types[15]
#define SWIGTYPE_p_daisysp__CrossFade swig_types[16]
#define SWIGTYPE_p_daisysp__DcBlock swig_types[17]
#define SWIGTYPE_p_daisysp__Decimator swig_types[18]
#define SWIGTYPE_p_daisysp__Drip swig_types[19]
#define SWIGTYPE_p_daisysp__Dust swig_types[20]
#define SWIGTYPE_p_daisysp__Flanger swig_types[21]
#define SWIGTYPE_p_daisysp__Fm2 swig_types[22]
#define SWIGTYPE_p_daisysp__Fold swig_types[23]
#define SWIGTYPE_p_daisysp__FormantOscillator swig_types[24]
#define SWIGTYPE_p_daisysp__GrainletOscillator swig_types[25]
#define SWIGTYPE_p_daisysp__Jitter swig_types[26]
#define SWIGTYPE_p_daisysp__Limiter swig_types[27]
#define SWIGTYPE_p_daisysp__Line swig_types[28]
#define SWIGTYPE_p_daisysp__LinearVCA swig_types[29]
#define SWIGTYPE_p_daisysp__Looper swig_types[30]
#define SWIGTYPE_p_daisysp__Maytrig swig_types[31]
#define SWIGTYPE_p_daisysp__Metro swig_types[32]
#define SWIGTYPE_p_daisysp__ModalVoice swig_types[33]
#define SWIGTYPE_p_daisysp__Mode swig_types[34]
#define SWIGTYPE_p_daisysp__MoogLadder swig_types[35]
#define SWIGTYPE_p_daisysp__NlFilt swig_types[36]
#define SWIGTYPE_p_daisysp__Oscillator swig_types[37]
#define SWIGTYPE_p_daisysp__OscillatorBank swig_types[38]
#define SWIGTYPE_p_daisysp__Overdrive swig_types[39]
#define SWIGTYPE_p_daisysp__Particle swig_types[40]
#define SWIGTYPE_p_daisysp__Phaser swig_types[41]
#define SWIGTYPE_p_daisysp__PhaserEngine swig_types[42]
#define SWIGTYPE_p_daisysp__Phasor swig_types[43]
#define SWIGTYPE_p_daisysp__PitchShifter swig_types[44]
#define SWIGTYPE_p_daisysp__Pluck swig_types[45]
#define SWIGTYPE_p_daisysp__Port swig_types[46]
#define SWIGTYPE_p_daisysp__Resonator swig_types[47]
#define SWIGTYPE_p_daisysp__ReverbSc swig_types[48]
#define SWIGTYPE_p_daisysp__ReverbScDl swig_types[49]
#define SWIGTYPE_p_daisysp__RingModNoise swig_types[50]
#define SWIGTYPE_p_daisysp__SampleHold swig_types[51]
#define SWIGTYPE_p_daisysp__SampleRateReducer swig_types[52]
#define SWIGTYPE_p_daisysp__SmoothRandomGenerator swig_types[53]
#define SWIGTYPE_p_daisysp__SquareNoise swig_types[54]
#define SWIGTYPE_p_daisysp__String swig_types[55]
#define SWIGTYPE_p_daisysp__StringVoice swig_types[56]
#define SWIGTYPE_p_daisysp__Svf swig_types[57]
#define SWIGTYPE_p_daisysp__SwingVCA swig_types[58]
#define SWIGTYPE_p_daisysp__SyntheticBassDrum swig_types[59]
#define SWIGTYPE_p_daisysp__SyntheticBassDrumAttackNoise swig_types[60]
#define SWIGTYPE_p_daisysp__SyntheticBassDrumClick swig_types[61]
#define SWIGTYPE_p_daisysp__SyntheticSnareDrum swig_types[62]
#define SWIGTYPE_p_daisysp__Tone swig_types[63]
#define SWIGTYPE_p_daisysp__Tremolo swig_types[64]
#define SWIGTYPE_p_daisysp__VariableSawOscillator swig_types[65]
#define SWIGTYPE_p_daisysp__VariableShapeOscillator swig_types[66]
#define SWIGTYPE_p_daisysp__VosimOscillator swig_types[67]
#define SWIGTYPE_p_daisysp__WhiteNoise swig_types[68]
#define SWIGTYPE_p_daisysp__ZOscillator swig_types[69]
#define SWIGTYPE_p_float swig_types[70]
#define SWIGTYPE_p_int swig_types[71]
#define SWIGTYPE_p_long_long swig_types[72]
#define SWIGTYPE_p_p_float swig_types[73]
#define SWIGTYPE_p_short swig_types[74]
#define SWIGTYPE_p_signed_char swig_types[75]
#define SWIGTYPE_p_unsigned_char swig_types[76]
#define SWIGTYPE_p_unsigned_int swig_types[77]
#define SWIGTYPE_p_unsigned_long_long swig_types[78]
#define SWIGTYPE_p_unsigned_short swig_types[79]
static swig_type_info *swig_types[81];
static swig_module_info swig_module = {swig_types, 80, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "daisysp"
#define SWIG_init      luaopen_daisysp
#define SWIG_init_user luaopen_daisysp_user

#define SWIG_LUACODE   luaopen_daisysp_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <daisysp.h>


#include <stdint.h>		// Use the C99 official header

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_AdEnv(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *result = 0 ;
  
  SWIG_check_num_args("daisysp::AdEnv::AdEnv",0,0)
  result = (daisysp::AdEnv *)new daisysp::AdEnv();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__AdEnv,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AdEnv::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::Init",1,"daisysp::AdEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AdEnv::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_Init",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::AdEnv::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::Process",1,"daisysp::AdEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_Process",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_Trigger(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  
  SWIG_check_num_args("daisysp::AdEnv::Trigger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::Trigger",1,"daisysp::AdEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_Trigger",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  (arg1)->Trigger();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_SetTime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  uint8_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::AdEnv::SetTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::SetTime",1,"daisysp::AdEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AdEnv::SetTime",2,"uint8_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::AdEnv::SetTime",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_SetTime",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetTime(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_SetCurve(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AdEnv::SetCurve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::SetCurve",1,"daisysp::AdEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AdEnv::SetCurve",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_SetCurve",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCurve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_SetMin(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AdEnv::SetMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::SetMin",1,"daisysp::AdEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AdEnv::SetMin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_SetMin",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetMin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_SetMax(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AdEnv::SetMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::SetMax",1,"daisysp::AdEnv *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AdEnv::SetMax",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_SetMax",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetMax(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_GetValue(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::AdEnv::GetValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::GetValue",1,"daisysp::AdEnv const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_GetValue",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  result = (float)((daisysp::AdEnv const *)arg1)->GetValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_GetCurrentSegment(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("daisysp::AdEnv::GetCurrentSegment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::GetCurrentSegment",1,"daisysp::AdEnv *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_GetCurrentSegment",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  result = (uint8_t)(arg1)->GetCurrentSegment();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AdEnv_IsRunning(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AdEnv *arg1 = (daisysp::AdEnv *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::AdEnv::IsRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AdEnv::IsRunning",1,"daisysp::AdEnv const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AdEnv,0))){
    SWIG_fail_ptr("AdEnv_IsRunning",1,SWIGTYPE_p_daisysp__AdEnv);
  }
  
  result = (bool)((daisysp::AdEnv const *)arg1)->IsRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AdEnv(void *obj) {
daisysp::AdEnv *arg1 = (daisysp::AdEnv *) obj;
delete arg1;
}
static int _proxy__wrap_new_AdEnv(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AdEnv);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AdEnv_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AdEnv_methods[]= {
    { "Init", _wrap_AdEnv_Init},
    { "Process", _wrap_AdEnv_Process},
    { "Trigger", _wrap_AdEnv_Trigger},
    { "SetTime", _wrap_AdEnv_SetTime},
    { "SetCurve", _wrap_AdEnv_SetCurve},
    { "SetMin", _wrap_AdEnv_SetMin},
    { "SetMax", _wrap_AdEnv_SetMax},
    { "GetValue", _wrap_AdEnv_GetValue},
    { "GetCurrentSegment", _wrap_AdEnv_GetCurrentSegment},
    { "IsRunning", _wrap_AdEnv_IsRunning},
    {0,0}
};
static swig_lua_method swig_AdEnv_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AdEnv_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AdEnv_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AdEnv_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AdEnv_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AdEnv_Sf_SwigStatic = {
    "AdEnv",
    swig_AdEnv_Sf_SwigStatic_methods,
    swig_AdEnv_Sf_SwigStatic_attributes,
    swig_AdEnv_Sf_SwigStatic_constants,
    swig_AdEnv_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AdEnv_bases[] = {0};
static const char *swig_AdEnv_base_names[] = {0};
static swig_lua_class _wrap_class_AdEnv = { "AdEnv", "AdEnv", &SWIGTYPE_p_daisysp__AdEnv,_proxy__wrap_new_AdEnv, swig_delete_AdEnv, swig_AdEnv_methods, swig_AdEnv_attributes, &swig_AdEnv_Sf_SwigStatic, swig_AdEnv_meta, swig_AdEnv_bases, swig_AdEnv_base_names };

static int _wrap_new_Adsr(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *result = 0 ;
  
  SWIG_check_num_args("daisysp::Adsr::Adsr",0,0)
  result = (daisysp::Adsr *)new daisysp::Adsr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Adsr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_Init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  float arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("daisysp::Adsr::Init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::Init",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::Init",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Adsr::Init",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_Init",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_Init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Adsr::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::Init",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_Init",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_Init(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Adsr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Adsr_Init__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Adsr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Adsr_Init__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Adsr_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Adsr::Init(float,int)\n"
    "    daisysp::Adsr::Init(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Adsr_Retrigger(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::Adsr::Retrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::Retrigger",1,"daisysp::Adsr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::Adsr::Retrigger",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_Retrigger",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->Retrigger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Adsr::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::Process",1,"daisysp::Adsr *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::Adsr::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_Process",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_SetTime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  int arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Adsr::SetTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::SetTime",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::SetTime",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Adsr::SetTime",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_SetTime",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetTime(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_SetAttackTime__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Adsr::SetAttackTime",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::SetAttackTime",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::SetAttackTime",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Adsr::SetAttackTime",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_SetAttackTime",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetAttackTime(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_SetAttackTime__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Adsr::SetAttackTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::SetAttackTime",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::SetAttackTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_SetAttackTime",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAttackTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_SetAttackTime(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Adsr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Adsr_SetAttackTime__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Adsr, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Adsr_SetAttackTime__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Adsr_SetAttackTime'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Adsr::SetAttackTime(float,float)\n"
    "    daisysp::Adsr::SetAttackTime(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Adsr_SetDecayTime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Adsr::SetDecayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::SetDecayTime",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::SetDecayTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_SetDecayTime",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDecayTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_SetReleaseTime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Adsr::SetReleaseTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::SetReleaseTime",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::SetReleaseTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_SetReleaseTime",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetReleaseTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_SetSustainLevel(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Adsr::SetSustainLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::SetSustainLevel",1,"daisysp::Adsr *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Adsr::SetSustainLevel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_SetSustainLevel",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSustainLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_GetCurrentSegment(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("daisysp::Adsr::GetCurrentSegment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::GetCurrentSegment",1,"daisysp::Adsr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_GetCurrentSegment",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  result = (uint8_t)(arg1)->GetCurrentSegment();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Adsr_IsRunning(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Adsr *arg1 = (daisysp::Adsr *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Adsr::IsRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Adsr::IsRunning",1,"daisysp::Adsr const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Adsr,0))){
    SWIG_fail_ptr("Adsr_IsRunning",1,SWIGTYPE_p_daisysp__Adsr);
  }
  
  result = (bool)((daisysp::Adsr const *)arg1)->IsRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Adsr(void *obj) {
daisysp::Adsr *arg1 = (daisysp::Adsr *) obj;
delete arg1;
}
static int _proxy__wrap_new_Adsr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Adsr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Adsr_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Adsr_methods[]= {
    { "Init", _wrap_Adsr_Init},
    { "Retrigger", _wrap_Adsr_Retrigger},
    { "Process", _wrap_Adsr_Process},
    { "SetTime", _wrap_Adsr_SetTime},
    { "SetAttackTime", _wrap_Adsr_SetAttackTime},
    { "SetDecayTime", _wrap_Adsr_SetDecayTime},
    { "SetReleaseTime", _wrap_Adsr_SetReleaseTime},
    { "SetSustainLevel", _wrap_Adsr_SetSustainLevel},
    { "GetCurrentSegment", _wrap_Adsr_GetCurrentSegment},
    { "IsRunning", _wrap_Adsr_IsRunning},
    {0,0}
};
static swig_lua_method swig_Adsr_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Adsr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Adsr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Adsr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Adsr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Adsr_Sf_SwigStatic = {
    "Adsr",
    swig_Adsr_Sf_SwigStatic_methods,
    swig_Adsr_Sf_SwigStatic_attributes,
    swig_Adsr_Sf_SwigStatic_constants,
    swig_Adsr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Adsr_bases[] = {0};
static const char *swig_Adsr_base_names[] = {0};
static swig_lua_class _wrap_class_Adsr = { "Adsr", "Adsr", &SWIGTYPE_p_daisysp__Adsr,_proxy__wrap_new_Adsr, swig_delete_Adsr, swig_Adsr_methods, swig_Adsr_attributes, &swig_Adsr_Sf_SwigStatic, swig_Adsr_meta, swig_Adsr_bases, swig_Adsr_base_names };

static int _wrap_new_Line(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Line *result = 0 ;
  
  SWIG_check_num_args("daisysp::Line::Line",0,0)
  result = (daisysp::Line *)new daisysp::Line();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Line *arg1 = (daisysp::Line *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Line::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Line::Init",1,"daisysp::Line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Line::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Line,0))){
    SWIG_fail_ptr("Line_Init",1,SWIGTYPE_p_daisysp__Line);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Line *arg1 = (daisysp::Line *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Line::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Line::Process",1,"daisysp::Line *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::Line::Process",2,"uint8_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Line,0))){
    SWIG_fail_ptr("Line_Process",1,SWIGTYPE_p_daisysp__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Line_Process",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_Start(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Line *arg1 = (daisysp::Line *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("daisysp::Line::Start",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Line::Start",1,"daisysp::Line *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Line::Start",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Line::Start",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Line::Start",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Line,0))){
    SWIG_fail_ptr("Line_Start",1,SWIGTYPE_p_daisysp__Line);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->Start(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Line(void *obj) {
daisysp::Line *arg1 = (daisysp::Line *) obj;
delete arg1;
}
static int _proxy__wrap_new_Line(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Line);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Line_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Line_methods[]= {
    { "Init", _wrap_Line_Init},
    { "Process", _wrap_Line_Process},
    { "Start", _wrap_Line_Start},
    {0,0}
};
static swig_lua_method swig_Line_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Line_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Line_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Line_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Line_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Line_Sf_SwigStatic = {
    "Line",
    swig_Line_Sf_SwigStatic_methods,
    swig_Line_Sf_SwigStatic_attributes,
    swig_Line_Sf_SwigStatic_constants,
    swig_Line_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Line_bases[] = {0};
static const char *swig_Line_base_names[] = {0};
static swig_lua_class _wrap_class_Line = { "Line", "Line", &SWIGTYPE_p_daisysp__Line,_proxy__wrap_new_Line, swig_delete_Line, swig_Line_methods, swig_Line_attributes, &swig_Line_Sf_SwigStatic, swig_Line_meta, swig_Line_bases, swig_Line_base_names };

static int _wrap_new_Phasor(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phasor *result = 0 ;
  
  SWIG_check_num_args("daisysp::Phasor::Phasor",0,0)
  result = (daisysp::Phasor *)new daisysp::Phasor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Phasor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_Init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phasor *arg1 = (daisysp::Phasor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("daisysp::Phasor::Init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phasor::Init",1,"daisysp::Phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phasor::Init",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Phasor::Init",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Phasor::Init",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phasor,0))){
    SWIG_fail_ptr("Phasor_Init",1,SWIGTYPE_p_daisysp__Phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->Init(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_Init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phasor *arg1 = (daisysp::Phasor *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Phasor::Init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phasor::Init",1,"daisysp::Phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phasor::Init",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Phasor::Init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phasor,0))){
    SWIG_fail_ptr("Phasor_Init",1,SWIGTYPE_p_daisysp__Phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->Init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_Init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phasor *arg1 = (daisysp::Phasor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Phasor::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phasor::Init",1,"daisysp::Phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phasor::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phasor,0))){
    SWIG_fail_ptr("Phasor_Init",1,SWIGTYPE_p_daisysp__Phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_Init(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Phasor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Phasor_Init__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Phasor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Phasor_Init__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Phasor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Phasor_Init__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Phasor_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Phasor::Init(float,float,float)\n"
    "    daisysp::Phasor::Init(float,float)\n"
    "    daisysp::Phasor::Init(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Phasor_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phasor *arg1 = (daisysp::Phasor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Phasor::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phasor::Process",1,"daisysp::Phasor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phasor,0))){
    SWIG_fail_ptr("Phasor_Process",1,SWIGTYPE_p_daisysp__Phasor);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phasor *arg1 = (daisysp::Phasor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Phasor::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phasor::SetFreq",1,"daisysp::Phasor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phasor::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phasor,0))){
    SWIG_fail_ptr("Phasor_SetFreq",1,SWIGTYPE_p_daisysp__Phasor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phasor_GetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phasor *arg1 = (daisysp::Phasor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Phasor::GetFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phasor::GetFreq",1,"daisysp::Phasor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phasor,0))){
    SWIG_fail_ptr("Phasor_GetFreq",1,SWIGTYPE_p_daisysp__Phasor);
  }
  
  result = (float)(arg1)->GetFreq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Phasor(void *obj) {
daisysp::Phasor *arg1 = (daisysp::Phasor *) obj;
delete arg1;
}
static int _proxy__wrap_new_Phasor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Phasor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Phasor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Phasor_methods[]= {
    { "Init", _wrap_Phasor_Init},
    { "Process", _wrap_Phasor_Process},
    { "SetFreq", _wrap_Phasor_SetFreq},
    { "GetFreq", _wrap_Phasor_GetFreq},
    {0,0}
};
static swig_lua_method swig_Phasor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Phasor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Phasor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Phasor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Phasor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Phasor_Sf_SwigStatic = {
    "Phasor",
    swig_Phasor_Sf_SwigStatic_methods,
    swig_Phasor_Sf_SwigStatic_attributes,
    swig_Phasor_Sf_SwigStatic_constants,
    swig_Phasor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Phasor_bases[] = {0};
static const char *swig_Phasor_base_names[] = {0};
static swig_lua_class _wrap_class_Phasor = { "Phasor", "Phasor", &SWIGTYPE_p_daisysp__Phasor,_proxy__wrap_new_Phasor, swig_delete_Phasor, swig_Phasor_methods, swig_Phasor_attributes, &swig_Phasor_Sf_SwigStatic, swig_Phasor_meta, swig_Phasor_bases, swig_Phasor_base_names };

static int _wrap_new_AnalogBassDrum(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *result = 0 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::AnalogBassDrum",0,0)
  result = (daisysp::AnalogBassDrum *)new daisysp::AnalogBassDrum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__AnalogBassDrum,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::Init",1,"daisysp::AnalogBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_Init",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::Process",1,"daisysp::AnalogBassDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_Process",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::Process",1,"daisysp::AnalogBassDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_Process",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_Process(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__AnalogBassDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AnalogBassDrum_Process__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__AnalogBassDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnalogBassDrum_Process__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogBassDrum_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::AnalogBassDrum::Process(bool)\n"
    "    daisysp::AnalogBassDrum::Process()\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogBassDrum_Trig(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::Trig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::Trig",1,"daisysp::AnalogBassDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_Trig",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  (arg1)->Trig();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_SetSustain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::SetSustain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetSustain",1,"daisysp::AnalogBassDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetSustain",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_SetSustain",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSustain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_SetAccent(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::SetAccent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetAccent",1,"daisysp::AnalogBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetAccent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_SetAccent",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAccent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetFreq",1,"daisysp::AnalogBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_SetFreq",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_SetTone(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::SetTone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetTone",1,"daisysp::AnalogBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetTone",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_SetTone",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetTone(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_SetDecay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::SetDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetDecay",1,"daisysp::AnalogBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_SetDecay",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_SetAttackFmAmount(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::SetAttackFmAmount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetAttackFmAmount",1,"daisysp::AnalogBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetAttackFmAmount",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_SetAttackFmAmount",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAttackFmAmount(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogBassDrum_SetSelfFmAmount(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogBassDrum::SetSelfFmAmount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetSelfFmAmount",1,"daisysp::AnalogBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogBassDrum::SetSelfFmAmount",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogBassDrum,0))){
    SWIG_fail_ptr("AnalogBassDrum_SetSelfFmAmount",1,SWIGTYPE_p_daisysp__AnalogBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSelfFmAmount(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnalogBassDrum(void *obj) {
daisysp::AnalogBassDrum *arg1 = (daisysp::AnalogBassDrum *) obj;
delete arg1;
}
static int _proxy__wrap_new_AnalogBassDrum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AnalogBassDrum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AnalogBassDrum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AnalogBassDrum_methods[]= {
    { "Init", _wrap_AnalogBassDrum_Init},
    { "Process", _wrap_AnalogBassDrum_Process},
    { "Trig", _wrap_AnalogBassDrum_Trig},
    { "SetSustain", _wrap_AnalogBassDrum_SetSustain},
    { "SetAccent", _wrap_AnalogBassDrum_SetAccent},
    { "SetFreq", _wrap_AnalogBassDrum_SetFreq},
    { "SetTone", _wrap_AnalogBassDrum_SetTone},
    { "SetDecay", _wrap_AnalogBassDrum_SetDecay},
    { "SetAttackFmAmount", _wrap_AnalogBassDrum_SetAttackFmAmount},
    { "SetSelfFmAmount", _wrap_AnalogBassDrum_SetSelfFmAmount},
    {0,0}
};
static swig_lua_method swig_AnalogBassDrum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AnalogBassDrum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AnalogBassDrum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AnalogBassDrum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AnalogBassDrum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AnalogBassDrum_Sf_SwigStatic = {
    "AnalogBassDrum",
    swig_AnalogBassDrum_Sf_SwigStatic_methods,
    swig_AnalogBassDrum_Sf_SwigStatic_attributes,
    swig_AnalogBassDrum_Sf_SwigStatic_constants,
    swig_AnalogBassDrum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AnalogBassDrum_bases[] = {0};
static const char *swig_AnalogBassDrum_base_names[] = {0};
static swig_lua_class _wrap_class_AnalogBassDrum = { "AnalogBassDrum", "AnalogBassDrum", &SWIGTYPE_p_daisysp__AnalogBassDrum,_proxy__wrap_new_AnalogBassDrum, swig_delete_AnalogBassDrum, swig_AnalogBassDrum_methods, swig_AnalogBassDrum_attributes, &swig_AnalogBassDrum_Sf_SwigStatic, swig_AnalogBassDrum_meta, swig_AnalogBassDrum_bases, swig_AnalogBassDrum_base_names };

static int _wrap_new_AnalogSnareDrum(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *result = 0 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::AnalogSnareDrum",0,0)
  result = (daisysp::AnalogSnareDrum *)new daisysp::AnalogSnareDrum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__AnalogSnareDrum,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::Init",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_Init",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::Process",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_Process",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::Process",1,"daisysp::AnalogSnareDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_Process",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_Process(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__AnalogSnareDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AnalogSnareDrum_Process__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__AnalogSnareDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AnalogSnareDrum_Process__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AnalogSnareDrum_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::AnalogSnareDrum::Process(bool)\n"
    "    daisysp::AnalogSnareDrum::Process()\n");
  lua_error(L);return 0;
}


static int _wrap_AnalogSnareDrum_Trig(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::Trig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::Trig",1,"daisysp::AnalogSnareDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_Trig",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  (arg1)->Trig();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_SetSustain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::SetSustain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetSustain",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetSustain",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_SetSustain",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSustain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_SetAccent(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::SetAccent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetAccent",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetAccent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_SetAccent",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAccent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetFreq",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_SetFreq",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_SetTone(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::SetTone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetTone",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetTone",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_SetTone",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetTone(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_SetDecay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::SetDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetDecay",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_SetDecay",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AnalogSnareDrum_SetSnappy(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::AnalogSnareDrum::SetSnappy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetSnappy",1,"daisysp::AnalogSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::AnalogSnareDrum::SetSnappy",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__AnalogSnareDrum,0))){
    SWIG_fail_ptr("AnalogSnareDrum_SetSnappy",1,SWIGTYPE_p_daisysp__AnalogSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSnappy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AnalogSnareDrum(void *obj) {
daisysp::AnalogSnareDrum *arg1 = (daisysp::AnalogSnareDrum *) obj;
delete arg1;
}
static int _proxy__wrap_new_AnalogSnareDrum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AnalogSnareDrum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AnalogSnareDrum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AnalogSnareDrum_methods[]= {
    { "Init", _wrap_AnalogSnareDrum_Init},
    { "Process", _wrap_AnalogSnareDrum_Process},
    { "Trig", _wrap_AnalogSnareDrum_Trig},
    { "SetSustain", _wrap_AnalogSnareDrum_SetSustain},
    { "SetAccent", _wrap_AnalogSnareDrum_SetAccent},
    { "SetFreq", _wrap_AnalogSnareDrum_SetFreq},
    { "SetTone", _wrap_AnalogSnareDrum_SetTone},
    { "SetDecay", _wrap_AnalogSnareDrum_SetDecay},
    { "SetSnappy", _wrap_AnalogSnareDrum_SetSnappy},
    {0,0}
};
static swig_lua_method swig_AnalogSnareDrum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AnalogSnareDrum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AnalogSnareDrum_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("kNumModes", daisysp::AnalogSnareDrum::kNumModes)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AnalogSnareDrum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AnalogSnareDrum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AnalogSnareDrum_Sf_SwigStatic = {
    "AnalogSnareDrum",
    swig_AnalogSnareDrum_Sf_SwigStatic_methods,
    swig_AnalogSnareDrum_Sf_SwigStatic_attributes,
    swig_AnalogSnareDrum_Sf_SwigStatic_constants,
    swig_AnalogSnareDrum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AnalogSnareDrum_bases[] = {0};
static const char *swig_AnalogSnareDrum_base_names[] = {0};
static swig_lua_class _wrap_class_AnalogSnareDrum = { "AnalogSnareDrum", "AnalogSnareDrum", &SWIGTYPE_p_daisysp__AnalogSnareDrum,_proxy__wrap_new_AnalogSnareDrum, swig_delete_AnalogSnareDrum, swig_AnalogSnareDrum_methods, swig_AnalogSnareDrum_attributes, &swig_AnalogSnareDrum_Sf_SwigStatic, swig_AnalogSnareDrum_meta, swig_AnalogSnareDrum_bases, swig_AnalogSnareDrum_base_names };

static int _wrap_new_SquareNoise(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SquareNoise *result = 0 ;
  
  SWIG_check_num_args("daisysp::SquareNoise::SquareNoise",0,0)
  result = (daisysp::SquareNoise *)new daisysp::SquareNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SquareNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SquareNoise_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SquareNoise *arg1 = (daisysp::SquareNoise *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SquareNoise::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SquareNoise::Init",1,"daisysp::SquareNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SquareNoise::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SquareNoise,0))){
    SWIG_fail_ptr("SquareNoise_Init",1,SWIGTYPE_p_daisysp__SquareNoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SquareNoise_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SquareNoise *arg1 = (daisysp::SquareNoise *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::SquareNoise::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SquareNoise::Process",1,"daisysp::SquareNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SquareNoise::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SquareNoise,0))){
    SWIG_fail_ptr("SquareNoise_Process",1,SWIGTYPE_p_daisysp__SquareNoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SquareNoise(void *obj) {
daisysp::SquareNoise *arg1 = (daisysp::SquareNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_SquareNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SquareNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SquareNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SquareNoise_methods[]= {
    { "Init", _wrap_SquareNoise_Init},
    { "Process", _wrap_SquareNoise_Process},
    {0,0}
};
static swig_lua_method swig_SquareNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SquareNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SquareNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SquareNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SquareNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SquareNoise_Sf_SwigStatic = {
    "SquareNoise",
    swig_SquareNoise_Sf_SwigStatic_methods,
    swig_SquareNoise_Sf_SwigStatic_attributes,
    swig_SquareNoise_Sf_SwigStatic_constants,
    swig_SquareNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SquareNoise_bases[] = {0};
static const char *swig_SquareNoise_base_names[] = {0};
static swig_lua_class _wrap_class_SquareNoise = { "SquareNoise", "SquareNoise", &SWIGTYPE_p_daisysp__SquareNoise,_proxy__wrap_new_SquareNoise, swig_delete_SquareNoise, swig_SquareNoise_methods, swig_SquareNoise_attributes, &swig_SquareNoise_Sf_SwigStatic, swig_SquareNoise_meta, swig_SquareNoise_bases, swig_SquareNoise_base_names };

static int _wrap_new_RingModNoise(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::RingModNoise *result = 0 ;
  
  SWIG_check_num_args("daisysp::RingModNoise::RingModNoise",0,0)
  result = (daisysp::RingModNoise *)new daisysp::RingModNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__RingModNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RingModNoise_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::RingModNoise *arg1 = (daisysp::RingModNoise *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::RingModNoise::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::RingModNoise::Init",1,"daisysp::RingModNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::RingModNoise::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__RingModNoise,0))){
    SWIG_fail_ptr("RingModNoise_Init",1,SWIGTYPE_p_daisysp__RingModNoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RingModNoise_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::RingModNoise *arg1 = (daisysp::RingModNoise *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::RingModNoise::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::RingModNoise::Process",1,"daisysp::RingModNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::RingModNoise::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__RingModNoise,0))){
    SWIG_fail_ptr("RingModNoise_Process",1,SWIGTYPE_p_daisysp__RingModNoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RingModNoise(void *obj) {
daisysp::RingModNoise *arg1 = (daisysp::RingModNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_RingModNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RingModNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RingModNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RingModNoise_methods[]= {
    { "Init", _wrap_RingModNoise_Init},
    { "Process", _wrap_RingModNoise_Process},
    {0,0}
};
static swig_lua_method swig_RingModNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RingModNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RingModNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RingModNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RingModNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RingModNoise_Sf_SwigStatic = {
    "RingModNoise",
    swig_RingModNoise_Sf_SwigStatic_methods,
    swig_RingModNoise_Sf_SwigStatic_attributes,
    swig_RingModNoise_Sf_SwigStatic_constants,
    swig_RingModNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RingModNoise_bases[] = {0};
static const char *swig_RingModNoise_base_names[] = {0};
static swig_lua_class _wrap_class_RingModNoise = { "RingModNoise", "RingModNoise", &SWIGTYPE_p_daisysp__RingModNoise,_proxy__wrap_new_RingModNoise, swig_delete_RingModNoise, swig_RingModNoise_methods, swig_RingModNoise_attributes, &swig_RingModNoise_Sf_SwigStatic, swig_RingModNoise_meta, swig_RingModNoise_bases, swig_RingModNoise_base_names };

static int _wrap_SwingVCA___call(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SwingVCA *arg1 = (daisysp::SwingVCA *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::SwingVCA::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SwingVCA::operator ()",1,"daisysp::SwingVCA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SwingVCA::operator ()",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::SwingVCA::operator ()",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SwingVCA,0))){
    SWIG_fail_ptr("SwingVCA___call",1,SWIGTYPE_p_daisysp__SwingVCA);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->operator ()(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SwingVCA(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SwingVCA *result = 0 ;
  
  SWIG_check_num_args("daisysp::SwingVCA::SwingVCA",0,0)
  result = (daisysp::SwingVCA *)new daisysp::SwingVCA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SwingVCA,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SwingVCA(void *obj) {
daisysp::SwingVCA *arg1 = (daisysp::SwingVCA *) obj;
delete arg1;
}
static int _proxy__wrap_new_SwingVCA(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SwingVCA);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SwingVCA_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SwingVCA_methods[]= {
    { "__call", _wrap_SwingVCA___call},
    {0,0}
};
static swig_lua_method swig_SwingVCA_meta[] = {
    { "__call", _wrap_SwingVCA___call},
    {0,0}
};

static swig_lua_attribute swig_SwingVCA_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwingVCA_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwingVCA_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SwingVCA_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SwingVCA_Sf_SwigStatic = {
    "SwingVCA",
    swig_SwingVCA_Sf_SwigStatic_methods,
    swig_SwingVCA_Sf_SwigStatic_attributes,
    swig_SwingVCA_Sf_SwigStatic_constants,
    swig_SwingVCA_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SwingVCA_bases[] = {0};
static const char *swig_SwingVCA_base_names[] = {0};
static swig_lua_class _wrap_class_SwingVCA = { "SwingVCA", "SwingVCA", &SWIGTYPE_p_daisysp__SwingVCA,_proxy__wrap_new_SwingVCA, swig_delete_SwingVCA, swig_SwingVCA_methods, swig_SwingVCA_attributes, &swig_SwingVCA_Sf_SwigStatic, swig_SwingVCA_meta, swig_SwingVCA_bases, swig_SwingVCA_base_names };

static int _wrap_LinearVCA___call(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::LinearVCA *arg1 = (daisysp::LinearVCA *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::LinearVCA::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::LinearVCA::operator ()",1,"daisysp::LinearVCA *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::LinearVCA::operator ()",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::LinearVCA::operator ()",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__LinearVCA,0))){
    SWIG_fail_ptr("LinearVCA___call",1,SWIGTYPE_p_daisysp__LinearVCA);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->operator ()(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LinearVCA(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::LinearVCA *result = 0 ;
  
  SWIG_check_num_args("daisysp::LinearVCA::LinearVCA",0,0)
  result = (daisysp::LinearVCA *)new daisysp::LinearVCA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__LinearVCA,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LinearVCA(void *obj) {
daisysp::LinearVCA *arg1 = (daisysp::LinearVCA *) obj;
delete arg1;
}
static int _proxy__wrap_new_LinearVCA(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LinearVCA);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LinearVCA_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LinearVCA_methods[]= {
    { "__call", _wrap_LinearVCA___call},
    {0,0}
};
static swig_lua_method swig_LinearVCA_meta[] = {
    { "__call", _wrap_LinearVCA___call},
    {0,0}
};

static swig_lua_attribute swig_LinearVCA_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LinearVCA_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LinearVCA_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LinearVCA_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LinearVCA_Sf_SwigStatic = {
    "LinearVCA",
    swig_LinearVCA_Sf_SwigStatic_methods,
    swig_LinearVCA_Sf_SwigStatic_attributes,
    swig_LinearVCA_Sf_SwigStatic_constants,
    swig_LinearVCA_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LinearVCA_bases[] = {0};
static const char *swig_LinearVCA_base_names[] = {0};
static swig_lua_class _wrap_class_LinearVCA = { "LinearVCA", "LinearVCA", &SWIGTYPE_p_daisysp__LinearVCA,_proxy__wrap_new_LinearVCA, swig_delete_LinearVCA, swig_LinearVCA_methods, swig_LinearVCA_attributes, &swig_LinearVCA_Sf_SwigStatic, swig_LinearVCA_meta, swig_LinearVCA_bases, swig_LinearVCA_base_names };

static int _wrap_new_SyntheticBassDrumClick(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrumClick *result = 0 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrumClick::SyntheticBassDrumClick",0,0)
  result = (daisysp::SyntheticBassDrumClick *)new daisysp::SyntheticBassDrumClick();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SyntheticBassDrumClick,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrumClick_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrumClick *arg1 = (daisysp::SyntheticBassDrumClick *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrumClick::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrumClick::Init",1,"daisysp::SyntheticBassDrumClick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrumClick::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrumClick,0))){
    SWIG_fail_ptr("SyntheticBassDrumClick_Init",1,SWIGTYPE_p_daisysp__SyntheticBassDrumClick);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrumClick_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrumClick *arg1 = (daisysp::SyntheticBassDrumClick *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrumClick::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrumClick::Process",1,"daisysp::SyntheticBassDrumClick *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrumClick::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrumClick,0))){
    SWIG_fail_ptr("SyntheticBassDrumClick_Process",1,SWIGTYPE_p_daisysp__SyntheticBassDrumClick);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntheticBassDrumClick(void *obj) {
daisysp::SyntheticBassDrumClick *arg1 = (daisysp::SyntheticBassDrumClick *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntheticBassDrumClick(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntheticBassDrumClick);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntheticBassDrumClick_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntheticBassDrumClick_methods[]= {
    { "Init", _wrap_SyntheticBassDrumClick_Init},
    { "Process", _wrap_SyntheticBassDrumClick_Process},
    {0,0}
};
static swig_lua_method swig_SyntheticBassDrumClick_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntheticBassDrumClick_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntheticBassDrumClick_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntheticBassDrumClick_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntheticBassDrumClick_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntheticBassDrumClick_Sf_SwigStatic = {
    "SyntheticBassDrumClick",
    swig_SyntheticBassDrumClick_Sf_SwigStatic_methods,
    swig_SyntheticBassDrumClick_Sf_SwigStatic_attributes,
    swig_SyntheticBassDrumClick_Sf_SwigStatic_constants,
    swig_SyntheticBassDrumClick_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntheticBassDrumClick_bases[] = {0};
static const char *swig_SyntheticBassDrumClick_base_names[] = {0};
static swig_lua_class _wrap_class_SyntheticBassDrumClick = { "SyntheticBassDrumClick", "SyntheticBassDrumClick", &SWIGTYPE_p_daisysp__SyntheticBassDrumClick,_proxy__wrap_new_SyntheticBassDrumClick, swig_delete_SyntheticBassDrumClick, swig_SyntheticBassDrumClick_methods, swig_SyntheticBassDrumClick_attributes, &swig_SyntheticBassDrumClick_Sf_SwigStatic, swig_SyntheticBassDrumClick_meta, swig_SyntheticBassDrumClick_bases, swig_SyntheticBassDrumClick_base_names };

static int _wrap_new_SyntheticBassDrumAttackNoise(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrumAttackNoise *result = 0 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrumAttackNoise::SyntheticBassDrumAttackNoise",0,0)
  result = (daisysp::SyntheticBassDrumAttackNoise *)new daisysp::SyntheticBassDrumAttackNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SyntheticBassDrumAttackNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrumAttackNoise_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrumAttackNoise *arg1 = (daisysp::SyntheticBassDrumAttackNoise *) 0 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrumAttackNoise::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrumAttackNoise::Init",1,"daisysp::SyntheticBassDrumAttackNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrumAttackNoise,0))){
    SWIG_fail_ptr("SyntheticBassDrumAttackNoise_Init",1,SWIGTYPE_p_daisysp__SyntheticBassDrumAttackNoise);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrumAttackNoise_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrumAttackNoise *arg1 = (daisysp::SyntheticBassDrumAttackNoise *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrumAttackNoise::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrumAttackNoise::Process",1,"daisysp::SyntheticBassDrumAttackNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrumAttackNoise,0))){
    SWIG_fail_ptr("SyntheticBassDrumAttackNoise_Process",1,SWIGTYPE_p_daisysp__SyntheticBassDrumAttackNoise);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntheticBassDrumAttackNoise(void *obj) {
daisysp::SyntheticBassDrumAttackNoise *arg1 = (daisysp::SyntheticBassDrumAttackNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntheticBassDrumAttackNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntheticBassDrumAttackNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntheticBassDrumAttackNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntheticBassDrumAttackNoise_methods[]= {
    { "Init", _wrap_SyntheticBassDrumAttackNoise_Init},
    { "Process", _wrap_SyntheticBassDrumAttackNoise_Process},
    {0,0}
};
static swig_lua_method swig_SyntheticBassDrumAttackNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic = {
    "SyntheticBassDrumAttackNoise",
    swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_methods,
    swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_attributes,
    swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_constants,
    swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntheticBassDrumAttackNoise_bases[] = {0};
static const char *swig_SyntheticBassDrumAttackNoise_base_names[] = {0};
static swig_lua_class _wrap_class_SyntheticBassDrumAttackNoise = { "SyntheticBassDrumAttackNoise", "SyntheticBassDrumAttackNoise", &SWIGTYPE_p_daisysp__SyntheticBassDrumAttackNoise,_proxy__wrap_new_SyntheticBassDrumAttackNoise, swig_delete_SyntheticBassDrumAttackNoise, swig_SyntheticBassDrumAttackNoise_methods, swig_SyntheticBassDrumAttackNoise_attributes, &swig_SyntheticBassDrumAttackNoise_Sf_SwigStatic, swig_SyntheticBassDrumAttackNoise_meta, swig_SyntheticBassDrumAttackNoise_bases, swig_SyntheticBassDrumAttackNoise_base_names };

static int _wrap_new_SyntheticBassDrum(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *result = 0 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SyntheticBassDrum",0,0)
  result = (daisysp::SyntheticBassDrum *)new daisysp::SyntheticBassDrum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SyntheticBassDrum,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::Init",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_Init",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_DistortedSine(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::DistortedSine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::DistortedSine",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::DistortedSine",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::SyntheticBassDrum::DistortedSine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::SyntheticBassDrum::DistortedSine",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_DistortedSine",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (float)(arg1)->DistortedSine(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_TransistorVCA(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::TransistorVCA",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::TransistorVCA",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::TransistorVCA",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::SyntheticBassDrum::TransistorVCA",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_TransistorVCA",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->TransistorVCA(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::Process",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_Process",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::Process",1,"daisysp::SyntheticBassDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_Process",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_Process(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__SyntheticBassDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SyntheticBassDrum_Process__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__SyntheticBassDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SyntheticBassDrum_Process__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SyntheticBassDrum_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::SyntheticBassDrum::Process(bool)\n"
    "    daisysp::SyntheticBassDrum::Process()\n");
  lua_error(L);return 0;
}


static int _wrap_SyntheticBassDrum_Trig(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::Trig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::Trig",1,"daisysp::SyntheticBassDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_Trig",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  (arg1)->Trig();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetSustain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetSustain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetSustain",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetSustain",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetSustain",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSustain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetAccent(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetAccent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetAccent",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetAccent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetAccent",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAccent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetFreq",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetFreq",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetTone(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetTone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetTone",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetTone",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetTone",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetTone(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetDecay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetDecay",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetDecay",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetDirtiness(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetDirtiness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetDirtiness",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetDirtiness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetDirtiness",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDirtiness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetFmEnvelopeAmount(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetFmEnvelopeAmount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetFmEnvelopeAmount",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetFmEnvelopeAmount",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetFmEnvelopeAmount",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFmEnvelopeAmount(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticBassDrum_SetFmEnvelopeDecay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticBassDrum::SetFmEnvelopeDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetFmEnvelopeDecay",1,"daisysp::SyntheticBassDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticBassDrum::SetFmEnvelopeDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticBassDrum,0))){
    SWIG_fail_ptr("SyntheticBassDrum_SetFmEnvelopeDecay",1,SWIGTYPE_p_daisysp__SyntheticBassDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFmEnvelopeDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntheticBassDrum(void *obj) {
daisysp::SyntheticBassDrum *arg1 = (daisysp::SyntheticBassDrum *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntheticBassDrum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntheticBassDrum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntheticBassDrum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntheticBassDrum_methods[]= {
    { "Init", _wrap_SyntheticBassDrum_Init},
    { "DistortedSine", _wrap_SyntheticBassDrum_DistortedSine},
    { "TransistorVCA", _wrap_SyntheticBassDrum_TransistorVCA},
    { "Process", _wrap_SyntheticBassDrum_Process},
    { "Trig", _wrap_SyntheticBassDrum_Trig},
    { "SetSustain", _wrap_SyntheticBassDrum_SetSustain},
    { "SetAccent", _wrap_SyntheticBassDrum_SetAccent},
    { "SetFreq", _wrap_SyntheticBassDrum_SetFreq},
    { "SetTone", _wrap_SyntheticBassDrum_SetTone},
    { "SetDecay", _wrap_SyntheticBassDrum_SetDecay},
    { "SetDirtiness", _wrap_SyntheticBassDrum_SetDirtiness},
    { "SetFmEnvelopeAmount", _wrap_SyntheticBassDrum_SetFmEnvelopeAmount},
    { "SetFmEnvelopeDecay", _wrap_SyntheticBassDrum_SetFmEnvelopeDecay},
    {0,0}
};
static swig_lua_method swig_SyntheticBassDrum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntheticBassDrum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntheticBassDrum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntheticBassDrum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntheticBassDrum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntheticBassDrum_Sf_SwigStatic = {
    "SyntheticBassDrum",
    swig_SyntheticBassDrum_Sf_SwigStatic_methods,
    swig_SyntheticBassDrum_Sf_SwigStatic_attributes,
    swig_SyntheticBassDrum_Sf_SwigStatic_constants,
    swig_SyntheticBassDrum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntheticBassDrum_bases[] = {0};
static const char *swig_SyntheticBassDrum_base_names[] = {0};
static swig_lua_class _wrap_class_SyntheticBassDrum = { "SyntheticBassDrum", "SyntheticBassDrum", &SWIGTYPE_p_daisysp__SyntheticBassDrum,_proxy__wrap_new_SyntheticBassDrum, swig_delete_SyntheticBassDrum, swig_SyntheticBassDrum_methods, swig_SyntheticBassDrum_attributes, &swig_SyntheticBassDrum_Sf_SwigStatic, swig_SyntheticBassDrum_meta, swig_SyntheticBassDrum_bases, swig_SyntheticBassDrum_base_names };

static int _wrap_new_SyntheticSnareDrum(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *result = 0 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::SyntheticSnareDrum",0,0)
  result = (daisysp::SyntheticSnareDrum *)new daisysp::SyntheticSnareDrum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SyntheticSnareDrum,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::Init",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_Init",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::Process",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_Process",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::Process",1,"daisysp::SyntheticSnareDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_Process",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_Process(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__SyntheticSnareDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SyntheticSnareDrum_Process__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__SyntheticSnareDrum, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_SyntheticSnareDrum_Process__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SyntheticSnareDrum_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::SyntheticSnareDrum::Process(bool)\n"
    "    daisysp::SyntheticSnareDrum::Process()\n");
  lua_error(L);return 0;
}


static int _wrap_SyntheticSnareDrum_Trig(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::Trig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::Trig",1,"daisysp::SyntheticSnareDrum *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_Trig",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  (arg1)->Trig();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_SetSustain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::SetSustain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetSustain",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetSustain",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_SetSustain",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSustain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_SetAccent(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::SetAccent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetAccent",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetAccent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_SetAccent",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAccent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetFreq",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_SetFreq",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_SetFmAmount(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::SetFmAmount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetFmAmount",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetFmAmount",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_SetFmAmount",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFmAmount(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_SetDecay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::SetDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetDecay",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_SetDecay",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SyntheticSnareDrum_SetSnappy(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SyntheticSnareDrum::SetSnappy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetSnappy",1,"daisysp::SyntheticSnareDrum *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SyntheticSnareDrum::SetSnappy",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SyntheticSnareDrum,0))){
    SWIG_fail_ptr("SyntheticSnareDrum_SetSnappy",1,SWIGTYPE_p_daisysp__SyntheticSnareDrum);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSnappy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntheticSnareDrum(void *obj) {
daisysp::SyntheticSnareDrum *arg1 = (daisysp::SyntheticSnareDrum *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntheticSnareDrum(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntheticSnareDrum);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntheticSnareDrum_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntheticSnareDrum_methods[]= {
    { "Init", _wrap_SyntheticSnareDrum_Init},
    { "Process", _wrap_SyntheticSnareDrum_Process},
    { "Trig", _wrap_SyntheticSnareDrum_Trig},
    { "SetSustain", _wrap_SyntheticSnareDrum_SetSustain},
    { "SetAccent", _wrap_SyntheticSnareDrum_SetAccent},
    { "SetFreq", _wrap_SyntheticSnareDrum_SetFreq},
    { "SetFmAmount", _wrap_SyntheticSnareDrum_SetFmAmount},
    { "SetDecay", _wrap_SyntheticSnareDrum_SetDecay},
    { "SetSnappy", _wrap_SyntheticSnareDrum_SetSnappy},
    {0,0}
};
static swig_lua_method swig_SyntheticSnareDrum_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntheticSnareDrum_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntheticSnareDrum_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntheticSnareDrum_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntheticSnareDrum_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntheticSnareDrum_Sf_SwigStatic = {
    "SyntheticSnareDrum",
    swig_SyntheticSnareDrum_Sf_SwigStatic_methods,
    swig_SyntheticSnareDrum_Sf_SwigStatic_attributes,
    swig_SyntheticSnareDrum_Sf_SwigStatic_constants,
    swig_SyntheticSnareDrum_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntheticSnareDrum_bases[] = {0};
static const char *swig_SyntheticSnareDrum_base_names[] = {0};
static swig_lua_class _wrap_class_SyntheticSnareDrum = { "SyntheticSnareDrum", "SyntheticSnareDrum", &SWIGTYPE_p_daisysp__SyntheticSnareDrum,_proxy__wrap_new_SyntheticSnareDrum, swig_delete_SyntheticSnareDrum, swig_SyntheticSnareDrum_methods, swig_SyntheticSnareDrum_attributes, &swig_SyntheticSnareDrum_Sf_SwigStatic, swig_SyntheticSnareDrum_meta, swig_SyntheticSnareDrum_bases, swig_SyntheticSnareDrum_base_names };

static int _wrap_new_Balance(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Balance *result = 0 ;
  
  SWIG_check_num_args("daisysp::Balance::Balance",0,0)
  result = (daisysp::Balance *)new daisysp::Balance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Balance,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Balance_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Balance *arg1 = (daisysp::Balance *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Balance::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Balance::Init",1,"daisysp::Balance *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Balance::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Balance,0))){
    SWIG_fail_ptr("Balance_Init",1,SWIGTYPE_p_daisysp__Balance);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Balance_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Balance *arg1 = (daisysp::Balance *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::Balance::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Balance::Process",1,"daisysp::Balance *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Balance::Process",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Balance::Process",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Balance,0))){
    SWIG_fail_ptr("Balance_Process",1,SWIGTYPE_p_daisysp__Balance);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->Process(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Balance_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Balance *arg1 = (daisysp::Balance *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Balance::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Balance::SetCutoff",1,"daisysp::Balance *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Balance::SetCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Balance,0))){
    SWIG_fail_ptr("Balance_SetCutoff",1,SWIGTYPE_p_daisysp__Balance);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Balance(void *obj) {
daisysp::Balance *arg1 = (daisysp::Balance *) obj;
delete arg1;
}
static int _proxy__wrap_new_Balance(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Balance);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Balance_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Balance_methods[]= {
    { "Init", _wrap_Balance_Init},
    { "Process", _wrap_Balance_Process},
    { "SetCutoff", _wrap_Balance_SetCutoff},
    {0,0}
};
static swig_lua_method swig_Balance_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Balance_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Balance_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Balance_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Balance_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Balance_Sf_SwigStatic = {
    "Balance",
    swig_Balance_Sf_SwigStatic_methods,
    swig_Balance_Sf_SwigStatic_attributes,
    swig_Balance_Sf_SwigStatic_constants,
    swig_Balance_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Balance_bases[] = {0};
static const char *swig_Balance_base_names[] = {0};
static swig_lua_class _wrap_class_Balance = { "Balance", "Balance", &SWIGTYPE_p_daisysp__Balance,_proxy__wrap_new_Balance, swig_delete_Balance, swig_Balance_methods, swig_Balance_attributes, &swig_Balance_Sf_SwigStatic, swig_Balance_meta, swig_Balance_bases, swig_Balance_base_names };

static int _wrap_new_Compressor(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *result = 0 ;
  
  SWIG_check_num_args("daisysp::Compressor::Compressor",0,0)
  result = (daisysp::Compressor *)new daisysp::Compressor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Compressor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Compressor::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::Init",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_Init",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::Process",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_Process",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::Process",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::Process",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Compressor::Process",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_Process",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->Process(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_Process(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Compressor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Compressor_Process__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Compressor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Compressor_Process__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Compressor_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Compressor::Process(float)\n"
    "    daisysp::Compressor::Process(float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Compressor_Apply(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::Apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::Apply",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::Apply",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_Apply",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Apply(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("daisysp::Compressor::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",1,"daisysp::Compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  size_t arg5 ;
  
  SWIG_check_num_args("daisysp::Compressor::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",1,"daisysp::Compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float **arg2 = (float **) 0 ;
  float **arg3 = (float **) 0 ;
  float *arg4 = (float *) 0 ;
  size_t arg5 ;
  size_t arg6 ;
  
  SWIG_check_num_args("daisysp::Compressor::ProcessBlock",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",1,"daisysp::Compressor *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",2,"float **");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",5,"size_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("daisysp::Compressor::ProcessBlock",6,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",2,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Compressor_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (size_t)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (size_t)lua_tonumber(L, 6);
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_ProcessBlock(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Compressor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Compressor_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Compressor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Compressor_ProcessBlock__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Compressor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Compressor_ProcessBlock__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Compressor_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Compressor::ProcessBlock(float *,float *,size_t)\n"
    "    daisysp::Compressor::ProcessBlock(float *,float *,float *,size_t)\n"
    "    daisysp::Compressor::ProcessBlock(float **,float **,float *,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Compressor_GetRatio(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::GetRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::GetRatio",1,"daisysp::Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_GetRatio",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  result = (float)(arg1)->GetRatio();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_SetRatio(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Compressor::SetRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::SetRatio",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::SetRatio",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_SetRatio",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRatio(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_GetThreshold(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::GetThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::GetThreshold",1,"daisysp::Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_GetThreshold",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  result = (float)(arg1)->GetThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_SetThreshold(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Compressor::SetThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::SetThreshold",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::SetThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_SetThreshold",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_GetAttack(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::GetAttack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::GetAttack",1,"daisysp::Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_GetAttack",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  result = (float)(arg1)->GetAttack();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_SetAttack(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Compressor::SetAttack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::SetAttack",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::SetAttack",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_SetAttack",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAttack(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_GetRelease(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::GetRelease",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::GetRelease",1,"daisysp::Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_GetRelease",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  result = (float)(arg1)->GetRelease();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_SetRelease(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Compressor::SetRelease",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::SetRelease",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::SetRelease",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_SetRelease",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRelease(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_GetMakeup(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::GetMakeup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::GetMakeup",1,"daisysp::Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_GetMakeup",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  result = (float)(arg1)->GetMakeup();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_SetMakeup(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Compressor::SetMakeup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::SetMakeup",1,"daisysp::Compressor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Compressor::SetMakeup",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_SetMakeup",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetMakeup(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_AutoMakeup(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::Compressor::AutoMakeup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::AutoMakeup",1,"daisysp::Compressor *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::Compressor::AutoMakeup",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_AutoMakeup",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->AutoMakeup(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Compressor_GetGain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Compressor *arg1 = (daisysp::Compressor *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Compressor::GetGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Compressor::GetGain",1,"daisysp::Compressor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Compressor,0))){
    SWIG_fail_ptr("Compressor_GetGain",1,SWIGTYPE_p_daisysp__Compressor);
  }
  
  result = (float)(arg1)->GetGain();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Compressor(void *obj) {
daisysp::Compressor *arg1 = (daisysp::Compressor *) obj;
delete arg1;
}
static int _proxy__wrap_new_Compressor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Compressor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Compressor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Compressor_methods[]= {
    { "Init", _wrap_Compressor_Init},
    { "Process", _wrap_Compressor_Process},
    { "Apply", _wrap_Compressor_Apply},
    { "ProcessBlock", _wrap_Compressor_ProcessBlock},
    { "GetRatio", _wrap_Compressor_GetRatio},
    { "SetRatio", _wrap_Compressor_SetRatio},
    { "GetThreshold", _wrap_Compressor_GetThreshold},
    { "SetThreshold", _wrap_Compressor_SetThreshold},
    { "GetAttack", _wrap_Compressor_GetAttack},
    { "SetAttack", _wrap_Compressor_SetAttack},
    { "GetRelease", _wrap_Compressor_GetRelease},
    { "SetRelease", _wrap_Compressor_SetRelease},
    { "GetMakeup", _wrap_Compressor_GetMakeup},
    { "SetMakeup", _wrap_Compressor_SetMakeup},
    { "AutoMakeup", _wrap_Compressor_AutoMakeup},
    { "GetGain", _wrap_Compressor_GetGain},
    {0,0}
};
static swig_lua_method swig_Compressor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Compressor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Compressor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Compressor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Compressor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Compressor_Sf_SwigStatic = {
    "Compressor",
    swig_Compressor_Sf_SwigStatic_methods,
    swig_Compressor_Sf_SwigStatic_attributes,
    swig_Compressor_Sf_SwigStatic_constants,
    swig_Compressor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Compressor_bases[] = {0};
static const char *swig_Compressor_base_names[] = {0};
static swig_lua_class _wrap_class_Compressor = { "Compressor", "Compressor", &SWIGTYPE_p_daisysp__Compressor,_proxy__wrap_new_Compressor, swig_delete_Compressor, swig_Compressor_methods, swig_Compressor_attributes, &swig_Compressor_Sf_SwigStatic, swig_Compressor_meta, swig_Compressor_bases, swig_Compressor_base_names };

static int _wrap_new_CrossFade(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *result = 0 ;
  
  SWIG_check_num_args("daisysp::CrossFade::CrossFade",0,0)
  result = (daisysp::CrossFade *)new daisysp::CrossFade();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__CrossFade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CrossFade_Init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *arg1 = (daisysp::CrossFade *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::CrossFade::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::CrossFade::Init",1,"daisysp::CrossFade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::CrossFade::Init",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__CrossFade,0))){
    SWIG_fail_ptr("CrossFade_Init",1,SWIGTYPE_p_daisysp__CrossFade);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CrossFade_Init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *arg1 = (daisysp::CrossFade *) 0 ;
  
  SWIG_check_num_args("daisysp::CrossFade::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::CrossFade::Init",1,"daisysp::CrossFade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__CrossFade,0))){
    SWIG_fail_ptr("CrossFade_Init",1,SWIGTYPE_p_daisysp__CrossFade);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CrossFade_Init(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__CrossFade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CrossFade_Init__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__CrossFade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CrossFade_Init__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CrossFade_Init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::CrossFade::Init(int)\n"
    "    daisysp::CrossFade::Init()\n");
  lua_error(L);return 0;
}


static int _wrap_CrossFade_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *arg1 = (daisysp::CrossFade *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::CrossFade::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::CrossFade::Process",1,"daisysp::CrossFade *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("daisysp::CrossFade::Process",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("daisysp::CrossFade::Process",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__CrossFade,0))){
    SWIG_fail_ptr("CrossFade_Process",1,SWIGTYPE_p_daisysp__CrossFade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CrossFade_Process",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CrossFade_Process",3,SWIGTYPE_p_float);
  }
  
  result = (float)(arg1)->Process(*arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CrossFade_SetPos(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *arg1 = (daisysp::CrossFade *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::CrossFade::SetPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::CrossFade::SetPos",1,"daisysp::CrossFade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::CrossFade::SetPos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__CrossFade,0))){
    SWIG_fail_ptr("CrossFade_SetPos",1,SWIGTYPE_p_daisysp__CrossFade);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPos(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CrossFade_SetCurve(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *arg1 = (daisysp::CrossFade *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("daisysp::CrossFade::SetCurve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::CrossFade::SetCurve",1,"daisysp::CrossFade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::CrossFade::SetCurve",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__CrossFade,0))){
    SWIG_fail_ptr("CrossFade_SetCurve",1,SWIGTYPE_p_daisysp__CrossFade);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  (arg1)->SetCurve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CrossFade_GetPos(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *arg1 = (daisysp::CrossFade *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::CrossFade::GetPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::CrossFade::GetPos",1,"daisysp::CrossFade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::CrossFade::GetPos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__CrossFade,0))){
    SWIG_fail_ptr("CrossFade_GetPos",1,SWIGTYPE_p_daisysp__CrossFade);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->GetPos(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CrossFade_GetCurve(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::CrossFade *arg1 = (daisysp::CrossFade *) 0 ;
  uint8_t arg2 ;
  uint8_t result;
  
  SWIG_check_num_args("daisysp::CrossFade::GetCurve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::CrossFade::GetCurve",1,"daisysp::CrossFade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::CrossFade::GetCurve",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__CrossFade,0))){
    SWIG_fail_ptr("CrossFade_GetCurve",1,SWIGTYPE_p_daisysp__CrossFade);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  result = (uint8_t)(arg1)->GetCurve(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CrossFade(void *obj) {
daisysp::CrossFade *arg1 = (daisysp::CrossFade *) obj;
delete arg1;
}
static int _proxy__wrap_new_CrossFade(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CrossFade);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CrossFade_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CrossFade_methods[]= {
    { "Init", _wrap_CrossFade_Init},
    { "Process", _wrap_CrossFade_Process},
    { "SetPos", _wrap_CrossFade_SetPos},
    { "SetCurve", _wrap_CrossFade_SetCurve},
    { "GetPos", _wrap_CrossFade_GetPos},
    { "GetCurve", _wrap_CrossFade_GetCurve},
    {0,0}
};
static swig_lua_method swig_CrossFade_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CrossFade_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CrossFade_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CrossFade_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CrossFade_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CrossFade_Sf_SwigStatic = {
    "CrossFade",
    swig_CrossFade_Sf_SwigStatic_methods,
    swig_CrossFade_Sf_SwigStatic_attributes,
    swig_CrossFade_Sf_SwigStatic_constants,
    swig_CrossFade_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CrossFade_bases[] = {0};
static const char *swig_CrossFade_base_names[] = {0};
static swig_lua_class _wrap_class_CrossFade = { "CrossFade", "CrossFade", &SWIGTYPE_p_daisysp__CrossFade,_proxy__wrap_new_CrossFade, swig_delete_CrossFade, swig_CrossFade_methods, swig_CrossFade_attributes, &swig_CrossFade_Sf_SwigStatic, swig_CrossFade_meta, swig_CrossFade_bases, swig_CrossFade_base_names };

static int _wrap_new_Limiter(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Limiter *result = 0 ;
  
  SWIG_check_num_args("daisysp::Limiter::Limiter",0,0)
  result = (daisysp::Limiter *)new daisysp::Limiter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Limiter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Limiter *arg1 = (daisysp::Limiter *) 0 ;
  
  SWIG_check_num_args("daisysp::Limiter::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Limiter::Init",1,"daisysp::Limiter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Limiter,0))){
    SWIG_fail_ptr("Limiter_Init",1,SWIGTYPE_p_daisysp__Limiter);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Limiter_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Limiter *arg1 = (daisysp::Limiter *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("daisysp::Limiter::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Limiter::ProcessBlock",1,"daisysp::Limiter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::Limiter::ProcessBlock",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Limiter::ProcessBlock",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Limiter::ProcessBlock",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Limiter,0))){
    SWIG_fail_ptr("Limiter_ProcessBlock",1,SWIGTYPE_p_daisysp__Limiter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Limiter_ProcessBlock",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Limiter(void *obj) {
daisysp::Limiter *arg1 = (daisysp::Limiter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Limiter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Limiter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Limiter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Limiter_methods[]= {
    { "Init", _wrap_Limiter_Init},
    { "ProcessBlock", _wrap_Limiter_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_Limiter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Limiter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Limiter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Limiter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Limiter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Limiter_Sf_SwigStatic = {
    "Limiter",
    swig_Limiter_Sf_SwigStatic_methods,
    swig_Limiter_Sf_SwigStatic_attributes,
    swig_Limiter_Sf_SwigStatic_constants,
    swig_Limiter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Limiter_bases[] = {0};
static const char *swig_Limiter_base_names[] = {0};
static swig_lua_class _wrap_class_Limiter = { "Limiter", "Limiter", &SWIGTYPE_p_daisysp__Limiter,_proxy__wrap_new_Limiter, swig_delete_Limiter, swig_Limiter_methods, swig_Limiter_attributes, &swig_Limiter_Sf_SwigStatic, swig_Limiter_meta, swig_Limiter_bases, swig_Limiter_base_names };

static int _wrap_new_Autowah(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Autowah *result = 0 ;
  
  SWIG_check_num_args("daisysp::Autowah::Autowah",0,0)
  result = (daisysp::Autowah *)new daisysp::Autowah();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Autowah,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Autowah_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Autowah *arg1 = (daisysp::Autowah *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Autowah::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Autowah::Init",1,"daisysp::Autowah *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Autowah::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Autowah,0))){
    SWIG_fail_ptr("Autowah_Init",1,SWIGTYPE_p_daisysp__Autowah);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Autowah_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Autowah *arg1 = (daisysp::Autowah *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Autowah::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Autowah::Process",1,"daisysp::Autowah *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Autowah::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Autowah,0))){
    SWIG_fail_ptr("Autowah_Process",1,SWIGTYPE_p_daisysp__Autowah);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Autowah_SetWah(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Autowah *arg1 = (daisysp::Autowah *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Autowah::SetWah",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Autowah::SetWah",1,"daisysp::Autowah *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Autowah::SetWah",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Autowah,0))){
    SWIG_fail_ptr("Autowah_SetWah",1,SWIGTYPE_p_daisysp__Autowah);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetWah(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Autowah_SetDryWet(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Autowah *arg1 = (daisysp::Autowah *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Autowah::SetDryWet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Autowah::SetDryWet",1,"daisysp::Autowah *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Autowah::SetDryWet",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Autowah,0))){
    SWIG_fail_ptr("Autowah_SetDryWet",1,SWIGTYPE_p_daisysp__Autowah);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDryWet(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Autowah_SetLevel(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Autowah *arg1 = (daisysp::Autowah *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Autowah::SetLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Autowah::SetLevel",1,"daisysp::Autowah *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Autowah::SetLevel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Autowah,0))){
    SWIG_fail_ptr("Autowah_SetLevel",1,SWIGTYPE_p_daisysp__Autowah);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Autowah(void *obj) {
daisysp::Autowah *arg1 = (daisysp::Autowah *) obj;
delete arg1;
}
static int _proxy__wrap_new_Autowah(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Autowah);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Autowah_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Autowah_methods[]= {
    { "Init", _wrap_Autowah_Init},
    { "Process", _wrap_Autowah_Process},
    { "SetWah", _wrap_Autowah_SetWah},
    { "SetDryWet", _wrap_Autowah_SetDryWet},
    { "SetLevel", _wrap_Autowah_SetLevel},
    {0,0}
};
static swig_lua_method swig_Autowah_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Autowah_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Autowah_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Autowah_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Autowah_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Autowah_Sf_SwigStatic = {
    "Autowah",
    swig_Autowah_Sf_SwigStatic_methods,
    swig_Autowah_Sf_SwigStatic_attributes,
    swig_Autowah_Sf_SwigStatic_constants,
    swig_Autowah_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Autowah_bases[] = {0};
static const char *swig_Autowah_base_names[] = {0};
static swig_lua_class _wrap_class_Autowah = { "Autowah", "Autowah", &SWIGTYPE_p_daisysp__Autowah,_proxy__wrap_new_Autowah, swig_delete_Autowah, swig_Autowah_methods, swig_Autowah_attributes, &swig_Autowah_Sf_SwigStatic, swig_Autowah_meta, swig_Autowah_bases, swig_Autowah_base_names };

static int _wrap_new_Bitcrush(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Bitcrush *result = 0 ;
  
  SWIG_check_num_args("daisysp::Bitcrush::Bitcrush",0,0)
  result = (daisysp::Bitcrush *)new daisysp::Bitcrush();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Bitcrush,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bitcrush_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Bitcrush *arg1 = (daisysp::Bitcrush *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Bitcrush::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Bitcrush::Init",1,"daisysp::Bitcrush *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Bitcrush::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Bitcrush,0))){
    SWIG_fail_ptr("Bitcrush_Init",1,SWIGTYPE_p_daisysp__Bitcrush);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bitcrush_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Bitcrush *arg1 = (daisysp::Bitcrush *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Bitcrush::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Bitcrush::Process",1,"daisysp::Bitcrush *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Bitcrush::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Bitcrush,0))){
    SWIG_fail_ptr("Bitcrush_Process",1,SWIGTYPE_p_daisysp__Bitcrush);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bitcrush_SetBitDepth(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Bitcrush *arg1 = (daisysp::Bitcrush *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::Bitcrush::SetBitDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Bitcrush::SetBitDepth",1,"daisysp::Bitcrush *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Bitcrush::SetBitDepth",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Bitcrush,0))){
    SWIG_fail_ptr("Bitcrush_SetBitDepth",1,SWIGTYPE_p_daisysp__Bitcrush);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetBitDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Bitcrush_SetCrushRate(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Bitcrush *arg1 = (daisysp::Bitcrush *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Bitcrush::SetCrushRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Bitcrush::SetCrushRate",1,"daisysp::Bitcrush *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Bitcrush::SetCrushRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Bitcrush,0))){
    SWIG_fail_ptr("Bitcrush_SetCrushRate",1,SWIGTYPE_p_daisysp__Bitcrush);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCrushRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Bitcrush(void *obj) {
daisysp::Bitcrush *arg1 = (daisysp::Bitcrush *) obj;
delete arg1;
}
static int _proxy__wrap_new_Bitcrush(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Bitcrush);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Bitcrush_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Bitcrush_methods[]= {
    { "Init", _wrap_Bitcrush_Init},
    { "Process", _wrap_Bitcrush_Process},
    { "SetBitDepth", _wrap_Bitcrush_SetBitDepth},
    { "SetCrushRate", _wrap_Bitcrush_SetCrushRate},
    {0,0}
};
static swig_lua_method swig_Bitcrush_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Bitcrush_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Bitcrush_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Bitcrush_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Bitcrush_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Bitcrush_Sf_SwigStatic = {
    "Bitcrush",
    swig_Bitcrush_Sf_SwigStatic_methods,
    swig_Bitcrush_Sf_SwigStatic_attributes,
    swig_Bitcrush_Sf_SwigStatic_constants,
    swig_Bitcrush_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Bitcrush_bases[] = {0};
static const char *swig_Bitcrush_base_names[] = {0};
static swig_lua_class _wrap_class_Bitcrush = { "Bitcrush", "Bitcrush", &SWIGTYPE_p_daisysp__Bitcrush,_proxy__wrap_new_Bitcrush, swig_delete_Bitcrush, swig_Bitcrush_methods, swig_Bitcrush_attributes, &swig_Bitcrush_Sf_SwigStatic, swig_Bitcrush_meta, swig_Bitcrush_bases, swig_Bitcrush_base_names };

static int _wrap_new_ChorusEngine(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *result = 0 ;
  
  SWIG_check_num_args("daisysp::ChorusEngine::ChorusEngine",0,0)
  result = (daisysp::ChorusEngine *)new daisysp::ChorusEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__ChorusEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChorusEngine_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ChorusEngine::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ChorusEngine::Init",1,"daisysp::ChorusEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ChorusEngine::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ChorusEngine,0))){
    SWIG_fail_ptr("ChorusEngine_Init",1,SWIGTYPE_p_daisysp__ChorusEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChorusEngine_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::ChorusEngine::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ChorusEngine::Process",1,"daisysp::ChorusEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ChorusEngine::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ChorusEngine,0))){
    SWIG_fail_ptr("ChorusEngine_Process",1,SWIGTYPE_p_daisysp__ChorusEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChorusEngine_SetLfoDepth(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ChorusEngine::SetLfoDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ChorusEngine::SetLfoDepth",1,"daisysp::ChorusEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ChorusEngine::SetLfoDepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ChorusEngine,0))){
    SWIG_fail_ptr("ChorusEngine_SetLfoDepth",1,SWIGTYPE_p_daisysp__ChorusEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChorusEngine_SetLfoFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ChorusEngine::SetLfoFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ChorusEngine::SetLfoFreq",1,"daisysp::ChorusEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ChorusEngine::SetLfoFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ChorusEngine,0))){
    SWIG_fail_ptr("ChorusEngine_SetLfoFreq",1,SWIGTYPE_p_daisysp__ChorusEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChorusEngine_SetDelay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ChorusEngine::SetDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ChorusEngine::SetDelay",1,"daisysp::ChorusEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ChorusEngine::SetDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ChorusEngine,0))){
    SWIG_fail_ptr("ChorusEngine_SetDelay",1,SWIGTYPE_p_daisysp__ChorusEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChorusEngine_SetDelayMs(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ChorusEngine::SetDelayMs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ChorusEngine::SetDelayMs",1,"daisysp::ChorusEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ChorusEngine::SetDelayMs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ChorusEngine,0))){
    SWIG_fail_ptr("ChorusEngine_SetDelayMs",1,SWIGTYPE_p_daisysp__ChorusEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDelayMs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ChorusEngine_SetFeedback(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ChorusEngine::SetFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ChorusEngine::SetFeedback",1,"daisysp::ChorusEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ChorusEngine::SetFeedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ChorusEngine,0))){
    SWIG_fail_ptr("ChorusEngine_SetFeedback",1,SWIGTYPE_p_daisysp__ChorusEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChorusEngine(void *obj) {
daisysp::ChorusEngine *arg1 = (daisysp::ChorusEngine *) obj;
delete arg1;
}
static int _proxy__wrap_new_ChorusEngine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ChorusEngine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ChorusEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChorusEngine_methods[]= {
    { "Init", _wrap_ChorusEngine_Init},
    { "Process", _wrap_ChorusEngine_Process},
    { "SetLfoDepth", _wrap_ChorusEngine_SetLfoDepth},
    { "SetLfoFreq", _wrap_ChorusEngine_SetLfoFreq},
    { "SetDelay", _wrap_ChorusEngine_SetDelay},
    { "SetDelayMs", _wrap_ChorusEngine_SetDelayMs},
    { "SetFeedback", _wrap_ChorusEngine_SetFeedback},
    {0,0}
};
static swig_lua_method swig_ChorusEngine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChorusEngine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChorusEngine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChorusEngine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChorusEngine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChorusEngine_Sf_SwigStatic = {
    "ChorusEngine",
    swig_ChorusEngine_Sf_SwigStatic_methods,
    swig_ChorusEngine_Sf_SwigStatic_attributes,
    swig_ChorusEngine_Sf_SwigStatic_constants,
    swig_ChorusEngine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChorusEngine_bases[] = {0};
static const char *swig_ChorusEngine_base_names[] = {0};
static swig_lua_class _wrap_class_ChorusEngine = { "ChorusEngine", "ChorusEngine", &SWIGTYPE_p_daisysp__ChorusEngine,_proxy__wrap_new_ChorusEngine, swig_delete_ChorusEngine, swig_ChorusEngine_methods, swig_ChorusEngine_attributes, &swig_ChorusEngine_Sf_SwigStatic, swig_ChorusEngine_meta, swig_ChorusEngine_bases, swig_ChorusEngine_base_names };

static int _wrap_new_Chorus(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *result = 0 ;
  
  SWIG_check_num_args("daisysp::Chorus::Chorus",0,0)
  result = (daisysp::Chorus *)new daisysp::Chorus();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Chorus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Chorus::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::Init",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_Init",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Chorus::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::Process",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_Process",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_GetLeft(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Chorus::GetLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::GetLeft",1,"daisysp::Chorus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_GetLeft",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  result = (float)(arg1)->GetLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_GetRight(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Chorus::GetRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::GetRight",1,"daisysp::Chorus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_GetRight",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  result = (float)(arg1)->GetRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetPan__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetPan",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetPan",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetPan",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Chorus::SetPan",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetPan",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetPan(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetPan__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetPan",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetPan",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetPan",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPan(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetPan(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_SetPan__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_SetPan__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_SetPan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Chorus::SetPan(float,float)\n"
    "    daisysp::Chorus::SetPan(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_SetLfoDepth__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetLfoDepth",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetLfoDepth",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetLfoDepth",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Chorus::SetLfoDepth",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetLfoDepth",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetLfoDepth(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetLfoDepth__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetLfoDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetLfoDepth",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetLfoDepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetLfoDepth",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetLfoDepth(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_SetLfoDepth__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_SetLfoDepth__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_SetLfoDepth'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Chorus::SetLfoDepth(float,float)\n"
    "    daisysp::Chorus::SetLfoDepth(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_SetLfoFreq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetLfoFreq",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetLfoFreq",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetLfoFreq",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Chorus::SetLfoFreq",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetLfoFreq",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetLfoFreq(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetLfoFreq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetLfoFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetLfoFreq",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetLfoFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetLfoFreq",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetLfoFreq(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_SetLfoFreq__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_SetLfoFreq__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_SetLfoFreq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Chorus::SetLfoFreq(float,float)\n"
    "    daisysp::Chorus::SetLfoFreq(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_SetDelay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetDelay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetDelay",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetDelay",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Chorus::SetDelay",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetDelay",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetDelay(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetDelay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetDelay",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetDelay",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetDelay(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_SetDelay__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_SetDelay__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_SetDelay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Chorus::SetDelay(float,float)\n"
    "    daisysp::Chorus::SetDelay(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_SetDelayMs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetDelayMs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetDelayMs",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetDelayMs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Chorus::SetDelayMs",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetDelayMs",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetDelayMs(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetDelayMs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetDelayMs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetDelayMs",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetDelayMs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetDelayMs",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDelayMs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetDelayMs(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_SetDelayMs__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_SetDelayMs__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_SetDelayMs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Chorus::SetDelayMs(float,float)\n"
    "    daisysp::Chorus::SetDelayMs(float)\n");
  lua_error(L);return 0;
}


static int _wrap_Chorus_SetFeedback__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetFeedback",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetFeedback",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetFeedback",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Chorus::SetFeedback",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetFeedback",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->SetFeedback(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetFeedback__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Chorus *arg1 = (daisysp::Chorus *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Chorus::SetFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Chorus::SetFeedback",1,"daisysp::Chorus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Chorus::SetFeedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Chorus,0))){
    SWIG_fail_ptr("Chorus_SetFeedback",1,SWIGTYPE_p_daisysp__Chorus);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chorus_SetFeedback(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chorus_SetFeedback__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Chorus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chorus_SetFeedback__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chorus_SetFeedback'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Chorus::SetFeedback(float,float)\n"
    "    daisysp::Chorus::SetFeedback(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chorus(void *obj) {
daisysp::Chorus *arg1 = (daisysp::Chorus *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chorus(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chorus);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chorus_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Chorus_methods[]= {
    { "Init", _wrap_Chorus_Init},
    { "Process", _wrap_Chorus_Process},
    { "GetLeft", _wrap_Chorus_GetLeft},
    { "GetRight", _wrap_Chorus_GetRight},
    { "SetPan", _wrap_Chorus_SetPan},
    { "SetLfoDepth", _wrap_Chorus_SetLfoDepth},
    { "SetLfoFreq", _wrap_Chorus_SetLfoFreq},
    { "SetDelay", _wrap_Chorus_SetDelay},
    { "SetDelayMs", _wrap_Chorus_SetDelayMs},
    { "SetFeedback", _wrap_Chorus_SetFeedback},
    {0,0}
};
static swig_lua_method swig_Chorus_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chorus_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chorus_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chorus_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chorus_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chorus_Sf_SwigStatic = {
    "Chorus",
    swig_Chorus_Sf_SwigStatic_methods,
    swig_Chorus_Sf_SwigStatic_attributes,
    swig_Chorus_Sf_SwigStatic_constants,
    swig_Chorus_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chorus_bases[] = {0};
static const char *swig_Chorus_base_names[] = {0};
static swig_lua_class _wrap_class_Chorus = { "Chorus", "Chorus", &SWIGTYPE_p_daisysp__Chorus,_proxy__wrap_new_Chorus, swig_delete_Chorus, swig_Chorus_methods, swig_Chorus_attributes, &swig_Chorus_Sf_SwigStatic, swig_Chorus_meta, swig_Chorus_bases, swig_Chorus_base_names };

static int _wrap_new_Decimator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *result = 0 ;
  
  SWIG_check_num_args("daisysp::Decimator::Decimator",0,0)
  result = (daisysp::Decimator *)new daisysp::Decimator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Decimator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *arg1 = (daisysp::Decimator *) 0 ;
  
  SWIG_check_num_args("daisysp::Decimator::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Decimator::Init",1,"daisysp::Decimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Decimator,0))){
    SWIG_fail_ptr("Decimator_Init",1,SWIGTYPE_p_daisysp__Decimator);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *arg1 = (daisysp::Decimator *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Decimator::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Decimator::Process",1,"daisysp::Decimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Decimator::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Decimator,0))){
    SWIG_fail_ptr("Decimator_Process",1,SWIGTYPE_p_daisysp__Decimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_SetDownsampleFactor(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *arg1 = (daisysp::Decimator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Decimator::SetDownsampleFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Decimator::SetDownsampleFactor",1,"daisysp::Decimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Decimator::SetDownsampleFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Decimator,0))){
    SWIG_fail_ptr("Decimator_SetDownsampleFactor",1,SWIGTYPE_p_daisysp__Decimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDownsampleFactor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_SetBitcrushFactor(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *arg1 = (daisysp::Decimator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Decimator::SetBitcrushFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Decimator::SetBitcrushFactor",1,"daisysp::Decimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Decimator::SetBitcrushFactor",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Decimator,0))){
    SWIG_fail_ptr("Decimator_SetBitcrushFactor",1,SWIGTYPE_p_daisysp__Decimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetBitcrushFactor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_SetBitsToCrush(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *arg1 = (daisysp::Decimator *) 0 ;
  uint8_t *arg2 = 0 ;
  uint8_t temp2 ;
  
  SWIG_check_num_args("daisysp::Decimator::SetBitsToCrush",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Decimator::SetBitsToCrush",1,"daisysp::Decimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Decimator::SetBitsToCrush",2,"uint8_t const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Decimator,0))){
    SWIG_fail_ptr("Decimator_SetBitsToCrush",1,SWIGTYPE_p_daisysp__Decimator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(uint8_t)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetBitsToCrush((uint8_t const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_GetDownsampleFactor(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *arg1 = (daisysp::Decimator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Decimator::GetDownsampleFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Decimator::GetDownsampleFactor",1,"daisysp::Decimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Decimator,0))){
    SWIG_fail_ptr("Decimator_GetDownsampleFactor",1,SWIGTYPE_p_daisysp__Decimator);
  }
  
  result = (float)(arg1)->GetDownsampleFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Decimator_GetBitcrushFactor(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Decimator *arg1 = (daisysp::Decimator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Decimator::GetBitcrushFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Decimator::GetBitcrushFactor",1,"daisysp::Decimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Decimator,0))){
    SWIG_fail_ptr("Decimator_GetBitcrushFactor",1,SWIGTYPE_p_daisysp__Decimator);
  }
  
  result = (float)(arg1)->GetBitcrushFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Decimator(void *obj) {
daisysp::Decimator *arg1 = (daisysp::Decimator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Decimator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Decimator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Decimator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Decimator_methods[]= {
    { "Init", _wrap_Decimator_Init},
    { "Process", _wrap_Decimator_Process},
    { "SetDownsampleFactor", _wrap_Decimator_SetDownsampleFactor},
    { "SetBitcrushFactor", _wrap_Decimator_SetBitcrushFactor},
    { "SetBitsToCrush", _wrap_Decimator_SetBitsToCrush},
    { "GetDownsampleFactor", _wrap_Decimator_GetDownsampleFactor},
    { "GetBitcrushFactor", _wrap_Decimator_GetBitcrushFactor},
    {0,0}
};
static swig_lua_method swig_Decimator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Decimator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Decimator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Decimator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Decimator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Decimator_Sf_SwigStatic = {
    "Decimator",
    swig_Decimator_Sf_SwigStatic_methods,
    swig_Decimator_Sf_SwigStatic_attributes,
    swig_Decimator_Sf_SwigStatic_constants,
    swig_Decimator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Decimator_bases[] = {0};
static const char *swig_Decimator_base_names[] = {0};
static swig_lua_class _wrap_class_Decimator = { "Decimator", "Decimator", &SWIGTYPE_p_daisysp__Decimator,_proxy__wrap_new_Decimator, swig_delete_Decimator, swig_Decimator_methods, swig_Decimator_attributes, &swig_Decimator_Sf_SwigStatic, swig_Decimator_meta, swig_Decimator_bases, swig_Decimator_base_names };

static int _wrap_Flanger_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *arg1 = (daisysp::Flanger *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Flanger::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Flanger::Init",1,"daisysp::Flanger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Flanger::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Flanger,0))){
    SWIG_fail_ptr("Flanger_Init",1,SWIGTYPE_p_daisysp__Flanger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flanger_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *arg1 = (daisysp::Flanger *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Flanger::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Flanger::Process",1,"daisysp::Flanger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Flanger::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Flanger,0))){
    SWIG_fail_ptr("Flanger_Process",1,SWIGTYPE_p_daisysp__Flanger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flanger_SetFeedback(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *arg1 = (daisysp::Flanger *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Flanger::SetFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Flanger::SetFeedback",1,"daisysp::Flanger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Flanger::SetFeedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Flanger,0))){
    SWIG_fail_ptr("Flanger_SetFeedback",1,SWIGTYPE_p_daisysp__Flanger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flanger_SetLfoDepth(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *arg1 = (daisysp::Flanger *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Flanger::SetLfoDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Flanger::SetLfoDepth",1,"daisysp::Flanger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Flanger::SetLfoDepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Flanger,0))){
    SWIG_fail_ptr("Flanger_SetLfoDepth",1,SWIGTYPE_p_daisysp__Flanger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flanger_SetLfoFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *arg1 = (daisysp::Flanger *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Flanger::SetLfoFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Flanger::SetLfoFreq",1,"daisysp::Flanger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Flanger::SetLfoFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Flanger,0))){
    SWIG_fail_ptr("Flanger_SetLfoFreq",1,SWIGTYPE_p_daisysp__Flanger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flanger_SetDelay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *arg1 = (daisysp::Flanger *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Flanger::SetDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Flanger::SetDelay",1,"daisysp::Flanger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Flanger::SetDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Flanger,0))){
    SWIG_fail_ptr("Flanger_SetDelay",1,SWIGTYPE_p_daisysp__Flanger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDelay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Flanger_SetDelayMs(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *arg1 = (daisysp::Flanger *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Flanger::SetDelayMs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Flanger::SetDelayMs",1,"daisysp::Flanger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Flanger::SetDelayMs",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Flanger,0))){
    SWIG_fail_ptr("Flanger_SetDelayMs",1,SWIGTYPE_p_daisysp__Flanger);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDelayMs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Flanger(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Flanger *result = 0 ;
  
  SWIG_check_num_args("daisysp::Flanger::Flanger",0,0)
  result = (daisysp::Flanger *)new daisysp::Flanger();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Flanger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Flanger(void *obj) {
daisysp::Flanger *arg1 = (daisysp::Flanger *) obj;
delete arg1;
}
static int _proxy__wrap_new_Flanger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Flanger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Flanger_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Flanger_methods[]= {
    { "Init", _wrap_Flanger_Init},
    { "Process", _wrap_Flanger_Process},
    { "SetFeedback", _wrap_Flanger_SetFeedback},
    { "SetLfoDepth", _wrap_Flanger_SetLfoDepth},
    { "SetLfoFreq", _wrap_Flanger_SetLfoFreq},
    { "SetDelay", _wrap_Flanger_SetDelay},
    { "SetDelayMs", _wrap_Flanger_SetDelayMs},
    {0,0}
};
static swig_lua_method swig_Flanger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Flanger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Flanger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Flanger_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Flanger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Flanger_Sf_SwigStatic = {
    "Flanger",
    swig_Flanger_Sf_SwigStatic_methods,
    swig_Flanger_Sf_SwigStatic_attributes,
    swig_Flanger_Sf_SwigStatic_constants,
    swig_Flanger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Flanger_bases[] = {0};
static const char *swig_Flanger_base_names[] = {0};
static swig_lua_class _wrap_class_Flanger = { "Flanger", "Flanger", &SWIGTYPE_p_daisysp__Flanger,_proxy__wrap_new_Flanger, swig_delete_Flanger, swig_Flanger_methods, swig_Flanger_attributes, &swig_Flanger_Sf_SwigStatic, swig_Flanger_meta, swig_Flanger_bases, swig_Flanger_base_names };

static int _wrap_new_Fold(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fold *result = 0 ;
  
  SWIG_check_num_args("daisysp::Fold::Fold",0,0)
  result = (daisysp::Fold *)new daisysp::Fold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Fold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fold_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fold *arg1 = (daisysp::Fold *) 0 ;
  
  SWIG_check_num_args("daisysp::Fold::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fold::Init",1,"daisysp::Fold *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fold,0))){
    SWIG_fail_ptr("Fold_Init",1,SWIGTYPE_p_daisysp__Fold);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fold_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fold *arg1 = (daisysp::Fold *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Fold::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fold::Process",1,"daisysp::Fold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Fold::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fold,0))){
    SWIG_fail_ptr("Fold_Process",1,SWIGTYPE_p_daisysp__Fold);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fold_SetIncrement(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fold *arg1 = (daisysp::Fold *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Fold::SetIncrement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fold::SetIncrement",1,"daisysp::Fold *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Fold::SetIncrement",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fold,0))){
    SWIG_fail_ptr("Fold_SetIncrement",1,SWIGTYPE_p_daisysp__Fold);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetIncrement(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Fold(void *obj) {
daisysp::Fold *arg1 = (daisysp::Fold *) obj;
delete arg1;
}
static int _proxy__wrap_new_Fold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Fold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Fold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Fold_methods[]= {
    { "Init", _wrap_Fold_Init},
    { "Process", _wrap_Fold_Process},
    { "SetIncrement", _wrap_Fold_SetIncrement},
    {0,0}
};
static swig_lua_method swig_Fold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Fold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Fold_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Fold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Fold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Fold_Sf_SwigStatic = {
    "Fold",
    swig_Fold_Sf_SwigStatic_methods,
    swig_Fold_Sf_SwigStatic_attributes,
    swig_Fold_Sf_SwigStatic_constants,
    swig_Fold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Fold_bases[] = {0};
static const char *swig_Fold_base_names[] = {0};
static swig_lua_class _wrap_class_Fold = { "Fold", "Fold", &SWIGTYPE_p_daisysp__Fold,_proxy__wrap_new_Fold, swig_delete_Fold, swig_Fold_methods, swig_Fold_attributes, &swig_Fold_Sf_SwigStatic, swig_Fold_meta, swig_Fold_bases, swig_Fold_base_names };

static int _wrap_new_Overdrive(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Overdrive *result = 0 ;
  
  SWIG_check_num_args("daisysp::Overdrive::Overdrive",0,0)
  result = (daisysp::Overdrive *)new daisysp::Overdrive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Overdrive,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overdrive_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Overdrive *arg1 = (daisysp::Overdrive *) 0 ;
  
  SWIG_check_num_args("daisysp::Overdrive::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Overdrive::Init",1,"daisysp::Overdrive *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Overdrive,0))){
    SWIG_fail_ptr("Overdrive_Init",1,SWIGTYPE_p_daisysp__Overdrive);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overdrive_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Overdrive *arg1 = (daisysp::Overdrive *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Overdrive::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Overdrive::Process",1,"daisysp::Overdrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Overdrive::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Overdrive,0))){
    SWIG_fail_ptr("Overdrive_Process",1,SWIGTYPE_p_daisysp__Overdrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overdrive_SetDrive(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Overdrive *arg1 = (daisysp::Overdrive *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Overdrive::SetDrive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Overdrive::SetDrive",1,"daisysp::Overdrive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Overdrive::SetDrive",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Overdrive,0))){
    SWIG_fail_ptr("Overdrive_SetDrive",1,SWIGTYPE_p_daisysp__Overdrive);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDrive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Overdrive(void *obj) {
daisysp::Overdrive *arg1 = (daisysp::Overdrive *) obj;
delete arg1;
}
static int _proxy__wrap_new_Overdrive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Overdrive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Overdrive_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Overdrive_methods[]= {
    { "Init", _wrap_Overdrive_Init},
    { "Process", _wrap_Overdrive_Process},
    { "SetDrive", _wrap_Overdrive_SetDrive},
    {0,0}
};
static swig_lua_method swig_Overdrive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Overdrive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Overdrive_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Overdrive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Overdrive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Overdrive_Sf_SwigStatic = {
    "Overdrive",
    swig_Overdrive_Sf_SwigStatic_methods,
    swig_Overdrive_Sf_SwigStatic_attributes,
    swig_Overdrive_Sf_SwigStatic_constants,
    swig_Overdrive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Overdrive_bases[] = {0};
static const char *swig_Overdrive_base_names[] = {0};
static swig_lua_class _wrap_class_Overdrive = { "Overdrive", "Overdrive", &SWIGTYPE_p_daisysp__Overdrive,_proxy__wrap_new_Overdrive, swig_delete_Overdrive, swig_Overdrive_methods, swig_Overdrive_attributes, &swig_Overdrive_Sf_SwigStatic, swig_Overdrive_meta, swig_Overdrive_bases, swig_Overdrive_base_names };

static int _wrap_ReverbScDl_write_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::write_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::write_pos",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::write_pos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_write_pos_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->write_pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_write_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::write_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::write_pos",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_write_pos_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->write_pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_buffer_size_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::buffer_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::buffer_size",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::buffer_size",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_buffer_size_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->buffer_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_buffer_size_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::buffer_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::buffer_size",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_buffer_size_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->buffer_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_read_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::read_pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_read_pos_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->read_pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_read_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::read_pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_read_pos_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->read_pos);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_read_pos_frac_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::read_pos_frac",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos_frac",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos_frac",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_read_pos_frac_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->read_pos_frac = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_read_pos_frac_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::read_pos_frac",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos_frac",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_read_pos_frac_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->read_pos_frac);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_read_pos_frac_inc_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::read_pos_frac_inc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos_frac_inc",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos_frac_inc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_read_pos_frac_inc_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->read_pos_frac_inc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_read_pos_frac_inc_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::read_pos_frac_inc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::read_pos_frac_inc",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_read_pos_frac_inc_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->read_pos_frac_inc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_dummy_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::dummy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::dummy",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::dummy",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_dummy_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dummy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_dummy_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::dummy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::dummy",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_dummy_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->dummy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_seed_val_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::seed_val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::seed_val",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::seed_val",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_seed_val_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->seed_val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_seed_val_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::seed_val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::seed_val",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_seed_val_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->seed_val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_rand_line_cnt_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::rand_line_cnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::rand_line_cnt",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::rand_line_cnt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_rand_line_cnt_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rand_line_cnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_rand_line_cnt_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::rand_line_cnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::rand_line_cnt",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_rand_line_cnt_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (int) ((arg1)->rand_line_cnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_filter_state_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::filter_state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::filter_state",1,"daisysp::ReverbScDl *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::filter_state",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_filter_state_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->filter_state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_filter_state_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::ReverbScDl::filter_state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::filter_state",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_filter_state_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (float) ((arg1)->filter_state);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::buf",1,"daisysp::ReverbScDl *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::ReverbScDl::buf",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_buf_set",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ReverbScDl_buf_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->buf = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbScDl_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbScDl::buf",1,"daisysp::ReverbScDl *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbScDl,0))){
    SWIG_fail_ptr("ReverbScDl_buf_get",1,SWIGTYPE_p_daisysp__ReverbScDl);
  }
  
  result = (float *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ReverbScDl(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbScDl *result = 0 ;
  
  SWIG_check_num_args("daisysp::ReverbScDl::ReverbScDl",0,0)
  result = (daisysp::ReverbScDl *)new daisysp::ReverbScDl();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__ReverbScDl,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ReverbScDl(void *obj) {
daisysp::ReverbScDl *arg1 = (daisysp::ReverbScDl *) obj;
delete arg1;
}
static int _proxy__wrap_new_ReverbScDl(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ReverbScDl);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ReverbScDl_attributes[] = {
    { "write_pos", _wrap_ReverbScDl_write_pos_get, _wrap_ReverbScDl_write_pos_set },
    { "buffer_size", _wrap_ReverbScDl_buffer_size_get, _wrap_ReverbScDl_buffer_size_set },
    { "read_pos", _wrap_ReverbScDl_read_pos_get, _wrap_ReverbScDl_read_pos_set },
    { "read_pos_frac", _wrap_ReverbScDl_read_pos_frac_get, _wrap_ReverbScDl_read_pos_frac_set },
    { "read_pos_frac_inc", _wrap_ReverbScDl_read_pos_frac_inc_get, _wrap_ReverbScDl_read_pos_frac_inc_set },
    { "dummy", _wrap_ReverbScDl_dummy_get, _wrap_ReverbScDl_dummy_set },
    { "seed_val", _wrap_ReverbScDl_seed_val_get, _wrap_ReverbScDl_seed_val_set },
    { "rand_line_cnt", _wrap_ReverbScDl_rand_line_cnt_get, _wrap_ReverbScDl_rand_line_cnt_set },
    { "filter_state", _wrap_ReverbScDl_filter_state_get, _wrap_ReverbScDl_filter_state_set },
    { "buf", _wrap_ReverbScDl_buf_get, _wrap_ReverbScDl_buf_set },
    {0,0,0}
};
static swig_lua_method swig_ReverbScDl_methods[]= {
    {0,0}
};
static swig_lua_method swig_ReverbScDl_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ReverbScDl_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ReverbScDl_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ReverbScDl_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ReverbScDl_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ReverbScDl_Sf_SwigStatic = {
    "ReverbScDl",
    swig_ReverbScDl_Sf_SwigStatic_methods,
    swig_ReverbScDl_Sf_SwigStatic_attributes,
    swig_ReverbScDl_Sf_SwigStatic_constants,
    swig_ReverbScDl_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ReverbScDl_bases[] = {0};
static const char *swig_ReverbScDl_base_names[] = {0};
static swig_lua_class _wrap_class_ReverbScDl = { "ReverbScDl", "ReverbScDl", &SWIGTYPE_p_daisysp__ReverbScDl,_proxy__wrap_new_ReverbScDl, swig_delete_ReverbScDl, swig_ReverbScDl_methods, swig_ReverbScDl_attributes, &swig_ReverbScDl_Sf_SwigStatic, swig_ReverbScDl_meta, swig_ReverbScDl_bases, swig_ReverbScDl_base_names };

static int _wrap_new_ReverbSc(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbSc *result = 0 ;
  
  SWIG_check_num_args("daisysp::ReverbSc::ReverbSc",0,0)
  result = (daisysp::ReverbSc *)new daisysp::ReverbSc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__ReverbSc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbSc_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbSc *arg1 = (daisysp::ReverbSc *) 0 ;
  float arg2 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbSc::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbSc::Init",1,"daisysp::ReverbSc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbSc::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbSc,0))){
    SWIG_fail_ptr("ReverbSc_Init",1,SWIGTYPE_p_daisysp__ReverbSc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (int)(arg1)->Init(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbSc_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbSc *arg1 = (daisysp::ReverbSc *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float temp2 ;
  float temp3 ;
  int result;
  
  SWIG_check_num_args("daisysp::ReverbSc::Process",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbSc::Process",1,"daisysp::ReverbSc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbSc::Process",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::ReverbSc::Process",3,"float const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("daisysp::ReverbSc::Process",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("daisysp::ReverbSc::Process",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbSc,0))){
    SWIG_fail_ptr("ReverbSc_Process",1,SWIGTYPE_p_daisysp__ReverbSc);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ReverbSc_Process",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ReverbSc_Process",5,SWIGTYPE_p_float);
  }
  
  result = (int)(arg1)->Process((float const &)*arg2,(float const &)*arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbSc_SetFeedback(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbSc *arg1 = (daisysp::ReverbSc *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("daisysp::ReverbSc::SetFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbSc::SetFeedback",1,"daisysp::ReverbSc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbSc::SetFeedback",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbSc,0))){
    SWIG_fail_ptr("ReverbSc_SetFeedback",1,SWIGTYPE_p_daisysp__ReverbSc);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetFeedback((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ReverbSc_SetLpFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ReverbSc *arg1 = (daisysp::ReverbSc *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("daisysp::ReverbSc::SetLpFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ReverbSc::SetLpFreq",1,"daisysp::ReverbSc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ReverbSc::SetLpFreq",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ReverbSc,0))){
    SWIG_fail_ptr("ReverbSc_SetLpFreq",1,SWIGTYPE_p_daisysp__ReverbSc);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetLpFreq((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ReverbSc(void *obj) {
daisysp::ReverbSc *arg1 = (daisysp::ReverbSc *) obj;
delete arg1;
}
static int _proxy__wrap_new_ReverbSc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ReverbSc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ReverbSc_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ReverbSc_methods[]= {
    { "Init", _wrap_ReverbSc_Init},
    { "Process", _wrap_ReverbSc_Process},
    { "SetFeedback", _wrap_ReverbSc_SetFeedback},
    { "SetLpFreq", _wrap_ReverbSc_SetLpFreq},
    {0,0}
};
static swig_lua_method swig_ReverbSc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ReverbSc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ReverbSc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ReverbSc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ReverbSc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ReverbSc_Sf_SwigStatic = {
    "ReverbSc",
    swig_ReverbSc_Sf_SwigStatic_methods,
    swig_ReverbSc_Sf_SwigStatic_attributes,
    swig_ReverbSc_Sf_SwigStatic_constants,
    swig_ReverbSc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ReverbSc_bases[] = {0};
static const char *swig_ReverbSc_base_names[] = {0};
static swig_lua_class _wrap_class_ReverbSc = { "ReverbSc", "ReverbSc", &SWIGTYPE_p_daisysp__ReverbSc,_proxy__wrap_new_ReverbSc, swig_delete_ReverbSc, swig_ReverbSc_methods, swig_ReverbSc_attributes, &swig_ReverbSc_Sf_SwigStatic, swig_ReverbSc_meta, swig_ReverbSc_bases, swig_ReverbSc_base_names };

static int _wrap_new_PhaserEngine(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PhaserEngine *result = 0 ;
  
  SWIG_check_num_args("daisysp::PhaserEngine::PhaserEngine",0,0)
  result = (daisysp::PhaserEngine *)new daisysp::PhaserEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__PhaserEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaserEngine_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PhaserEngine *arg1 = (daisysp::PhaserEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::PhaserEngine::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PhaserEngine::Init",1,"daisysp::PhaserEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PhaserEngine::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PhaserEngine,0))){
    SWIG_fail_ptr("PhaserEngine_Init",1,SWIGTYPE_p_daisysp__PhaserEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaserEngine_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PhaserEngine *arg1 = (daisysp::PhaserEngine *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::PhaserEngine::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PhaserEngine::Process",1,"daisysp::PhaserEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PhaserEngine::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PhaserEngine,0))){
    SWIG_fail_ptr("PhaserEngine_Process",1,SWIGTYPE_p_daisysp__PhaserEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaserEngine_SetLfoDepth(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PhaserEngine *arg1 = (daisysp::PhaserEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::PhaserEngine::SetLfoDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PhaserEngine::SetLfoDepth",1,"daisysp::PhaserEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PhaserEngine::SetLfoDepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PhaserEngine,0))){
    SWIG_fail_ptr("PhaserEngine_SetLfoDepth",1,SWIGTYPE_p_daisysp__PhaserEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaserEngine_SetLfoFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PhaserEngine *arg1 = (daisysp::PhaserEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::PhaserEngine::SetLfoFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PhaserEngine::SetLfoFreq",1,"daisysp::PhaserEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PhaserEngine::SetLfoFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PhaserEngine,0))){
    SWIG_fail_ptr("PhaserEngine_SetLfoFreq",1,SWIGTYPE_p_daisysp__PhaserEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaserEngine_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PhaserEngine *arg1 = (daisysp::PhaserEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::PhaserEngine::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PhaserEngine::SetFreq",1,"daisysp::PhaserEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PhaserEngine::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PhaserEngine,0))){
    SWIG_fail_ptr("PhaserEngine_SetFreq",1,SWIGTYPE_p_daisysp__PhaserEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhaserEngine_SetFeedback(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PhaserEngine *arg1 = (daisysp::PhaserEngine *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::PhaserEngine::SetFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PhaserEngine::SetFeedback",1,"daisysp::PhaserEngine *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PhaserEngine::SetFeedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PhaserEngine,0))){
    SWIG_fail_ptr("PhaserEngine_SetFeedback",1,SWIGTYPE_p_daisysp__PhaserEngine);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhaserEngine(void *obj) {
daisysp::PhaserEngine *arg1 = (daisysp::PhaserEngine *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhaserEngine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhaserEngine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhaserEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhaserEngine_methods[]= {
    { "Init", _wrap_PhaserEngine_Init},
    { "Process", _wrap_PhaserEngine_Process},
    { "SetLfoDepth", _wrap_PhaserEngine_SetLfoDepth},
    { "SetLfoFreq", _wrap_PhaserEngine_SetLfoFreq},
    { "SetFreq", _wrap_PhaserEngine_SetFreq},
    { "SetFeedback", _wrap_PhaserEngine_SetFeedback},
    {0,0}
};
static swig_lua_method swig_PhaserEngine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhaserEngine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PhaserEngine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhaserEngine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhaserEngine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhaserEngine_Sf_SwigStatic = {
    "PhaserEngine",
    swig_PhaserEngine_Sf_SwigStatic_methods,
    swig_PhaserEngine_Sf_SwigStatic_attributes,
    swig_PhaserEngine_Sf_SwigStatic_constants,
    swig_PhaserEngine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhaserEngine_bases[] = {0};
static const char *swig_PhaserEngine_base_names[] = {0};
static swig_lua_class _wrap_class_PhaserEngine = { "PhaserEngine", "PhaserEngine", &SWIGTYPE_p_daisysp__PhaserEngine,_proxy__wrap_new_PhaserEngine, swig_delete_PhaserEngine, swig_PhaserEngine_methods, swig_PhaserEngine_attributes, &swig_PhaserEngine_Sf_SwigStatic, swig_PhaserEngine_meta, swig_PhaserEngine_bases, swig_PhaserEngine_base_names };

static int _wrap_new_Phaser(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *result = 0 ;
  
  SWIG_check_num_args("daisysp::Phaser::Phaser",0,0)
  result = (daisysp::Phaser *)new daisysp::Phaser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Phaser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phaser_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *arg1 = (daisysp::Phaser *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Phaser::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phaser::Init",1,"daisysp::Phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phaser::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phaser,0))){
    SWIG_fail_ptr("Phaser_Init",1,SWIGTYPE_p_daisysp__Phaser);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phaser_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *arg1 = (daisysp::Phaser *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Phaser::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phaser::Process",1,"daisysp::Phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phaser::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phaser,0))){
    SWIG_fail_ptr("Phaser_Process",1,SWIGTYPE_p_daisysp__Phaser);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phaser_SetPoles(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *arg1 = (daisysp::Phaser *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::Phaser::SetPoles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phaser::SetPoles",1,"daisysp::Phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phaser::SetPoles",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phaser,0))){
    SWIG_fail_ptr("Phaser_SetPoles",1,SWIGTYPE_p_daisysp__Phaser);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetPoles(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phaser_SetLfoDepth(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *arg1 = (daisysp::Phaser *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Phaser::SetLfoDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phaser::SetLfoDepth",1,"daisysp::Phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phaser::SetLfoDepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phaser,0))){
    SWIG_fail_ptr("Phaser_SetLfoDepth",1,SWIGTYPE_p_daisysp__Phaser);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phaser_SetLfoFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *arg1 = (daisysp::Phaser *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Phaser::SetLfoFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phaser::SetLfoFreq",1,"daisysp::Phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phaser::SetLfoFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phaser,0))){
    SWIG_fail_ptr("Phaser_SetLfoFreq",1,SWIGTYPE_p_daisysp__Phaser);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetLfoFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phaser_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *arg1 = (daisysp::Phaser *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Phaser::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phaser::SetFreq",1,"daisysp::Phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phaser::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phaser,0))){
    SWIG_fail_ptr("Phaser_SetFreq",1,SWIGTYPE_p_daisysp__Phaser);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Phaser_SetFeedback(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Phaser *arg1 = (daisysp::Phaser *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Phaser::SetFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Phaser::SetFeedback",1,"daisysp::Phaser *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Phaser::SetFeedback",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Phaser,0))){
    SWIG_fail_ptr("Phaser_SetFeedback",1,SWIGTYPE_p_daisysp__Phaser);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Phaser(void *obj) {
daisysp::Phaser *arg1 = (daisysp::Phaser *) obj;
delete arg1;
}
static int _proxy__wrap_new_Phaser(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Phaser);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Phaser_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Phaser_methods[]= {
    { "Init", _wrap_Phaser_Init},
    { "Process", _wrap_Phaser_Process},
    { "SetPoles", _wrap_Phaser_SetPoles},
    { "SetLfoDepth", _wrap_Phaser_SetLfoDepth},
    { "SetLfoFreq", _wrap_Phaser_SetLfoFreq},
    { "SetFreq", _wrap_Phaser_SetFreq},
    { "SetFeedback", _wrap_Phaser_SetFeedback},
    {0,0}
};
static swig_lua_method swig_Phaser_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Phaser_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Phaser_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Phaser_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Phaser_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Phaser_Sf_SwigStatic = {
    "Phaser",
    swig_Phaser_Sf_SwigStatic_methods,
    swig_Phaser_Sf_SwigStatic_attributes,
    swig_Phaser_Sf_SwigStatic_constants,
    swig_Phaser_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Phaser_bases[] = {0};
static const char *swig_Phaser_base_names[] = {0};
static swig_lua_class _wrap_class_Phaser = { "Phaser", "Phaser", &SWIGTYPE_p_daisysp__Phaser,_proxy__wrap_new_Phaser, swig_delete_Phaser, swig_Phaser_methods, swig_Phaser_attributes, &swig_Phaser_Sf_SwigStatic, swig_Phaser_meta, swig_Phaser_bases, swig_Phaser_base_names };

static int _wrap_hash_xs32(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("daisysp::hash_xs32",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::hash_xs32",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (uint32_t)daisysp::hash_xs32(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_myrand(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t result;
  
  SWIG_check_num_args("daisysp::myrand",0,0)
  result = (uint32_t)daisysp::myrand();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PitchShifter(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PitchShifter *result = 0 ;
  
  SWIG_check_num_args("daisysp::PitchShifter::PitchShifter",0,0)
  result = (daisysp::PitchShifter *)new daisysp::PitchShifter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__PitchShifter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitchShifter_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PitchShifter *arg1 = (daisysp::PitchShifter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::PitchShifter::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PitchShifter::Init",1,"daisysp::PitchShifter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PitchShifter::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PitchShifter,0))){
    SWIG_fail_ptr("PitchShifter_Init",1,SWIGTYPE_p_daisysp__PitchShifter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitchShifter_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PitchShifter *arg1 = (daisysp::PitchShifter *) 0 ;
  float *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::PitchShifter::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PitchShifter::Process",1,"daisysp::PitchShifter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("daisysp::PitchShifter::Process",2,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PitchShifter,0))){
    SWIG_fail_ptr("PitchShifter_Process",1,SWIGTYPE_p_daisysp__PitchShifter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PitchShifter_Process",2,SWIGTYPE_p_float);
  }
  
  result = (float)(arg1)->Process(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitchShifter_SetTransposition(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PitchShifter *arg1 = (daisysp::PitchShifter *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("daisysp::PitchShifter::SetTransposition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PitchShifter::SetTransposition",1,"daisysp::PitchShifter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PitchShifter::SetTransposition",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PitchShifter,0))){
    SWIG_fail_ptr("PitchShifter_SetTransposition",1,SWIGTYPE_p_daisysp__PitchShifter);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetTransposition((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitchShifter_SetDelSize(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PitchShifter *arg1 = (daisysp::PitchShifter *) 0 ;
  uint32_t arg2 ;
  
  SWIG_check_num_args("daisysp::PitchShifter::SetDelSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PitchShifter::SetDelSize",1,"daisysp::PitchShifter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PitchShifter::SetDelSize",2,"uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PitchShifter,0))){
    SWIG_fail_ptr("PitchShifter_SetDelSize",1,SWIGTYPE_p_daisysp__PitchShifter);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint32_t)lua_tonumber(L, 2);
  (arg1)->SetDelSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PitchShifter_SetFun(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::PitchShifter *arg1 = (daisysp::PitchShifter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::PitchShifter::SetFun",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::PitchShifter::SetFun",1,"daisysp::PitchShifter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::PitchShifter::SetFun",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__PitchShifter,0))){
    SWIG_fail_ptr("PitchShifter_SetFun",1,SWIGTYPE_p_daisysp__PitchShifter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFun(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PitchShifter(void *obj) {
daisysp::PitchShifter *arg1 = (daisysp::PitchShifter *) obj;
delete arg1;
}
static int _proxy__wrap_new_PitchShifter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PitchShifter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PitchShifter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PitchShifter_methods[]= {
    { "Init", _wrap_PitchShifter_Init},
    { "Process", _wrap_PitchShifter_Process},
    { "SetTransposition", _wrap_PitchShifter_SetTransposition},
    { "SetDelSize", _wrap_PitchShifter_SetDelSize},
    { "SetFun", _wrap_PitchShifter_SetFun},
    {0,0}
};
static swig_lua_method swig_PitchShifter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PitchShifter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PitchShifter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PitchShifter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PitchShifter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PitchShifter_Sf_SwigStatic = {
    "PitchShifter",
    swig_PitchShifter_Sf_SwigStatic_methods,
    swig_PitchShifter_Sf_SwigStatic_attributes,
    swig_PitchShifter_Sf_SwigStatic_constants,
    swig_PitchShifter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PitchShifter_bases[] = {0};
static const char *swig_PitchShifter_base_names[] = {0};
static swig_lua_class _wrap_class_PitchShifter = { "PitchShifter", "PitchShifter", &SWIGTYPE_p_daisysp__PitchShifter,_proxy__wrap_new_PitchShifter, swig_delete_PitchShifter, swig_PitchShifter_methods, swig_PitchShifter_attributes, &swig_PitchShifter_Sf_SwigStatic, swig_PitchShifter_meta, swig_PitchShifter_bases, swig_PitchShifter_base_names };

static int _wrap_new_SampleRateReducer(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SampleRateReducer *result = 0 ;
  
  SWIG_check_num_args("daisysp::SampleRateReducer::SampleRateReducer",0,0)
  result = (daisysp::SampleRateReducer *)new daisysp::SampleRateReducer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SampleRateReducer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleRateReducer_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SampleRateReducer *arg1 = (daisysp::SampleRateReducer *) 0 ;
  
  SWIG_check_num_args("daisysp::SampleRateReducer::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SampleRateReducer::Init",1,"daisysp::SampleRateReducer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SampleRateReducer,0))){
    SWIG_fail_ptr("SampleRateReducer_Init",1,SWIGTYPE_p_daisysp__SampleRateReducer);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleRateReducer_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SampleRateReducer *arg1 = (daisysp::SampleRateReducer *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::SampleRateReducer::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SampleRateReducer::Process",1,"daisysp::SampleRateReducer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SampleRateReducer::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SampleRateReducer,0))){
    SWIG_fail_ptr("SampleRateReducer_Process",1,SWIGTYPE_p_daisysp__SampleRateReducer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleRateReducer_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SampleRateReducer *arg1 = (daisysp::SampleRateReducer *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SampleRateReducer::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SampleRateReducer::SetFreq",1,"daisysp::SampleRateReducer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SampleRateReducer::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SampleRateReducer,0))){
    SWIG_fail_ptr("SampleRateReducer_SetFreq",1,SWIGTYPE_p_daisysp__SampleRateReducer);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SampleRateReducer(void *obj) {
daisysp::SampleRateReducer *arg1 = (daisysp::SampleRateReducer *) obj;
delete arg1;
}
static int _proxy__wrap_new_SampleRateReducer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SampleRateReducer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SampleRateReducer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SampleRateReducer_methods[]= {
    { "Init", _wrap_SampleRateReducer_Init},
    { "Process", _wrap_SampleRateReducer_Process},
    { "SetFreq", _wrap_SampleRateReducer_SetFreq},
    {0,0}
};
static swig_lua_method swig_SampleRateReducer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SampleRateReducer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SampleRateReducer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SampleRateReducer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SampleRateReducer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SampleRateReducer_Sf_SwigStatic = {
    "SampleRateReducer",
    swig_SampleRateReducer_Sf_SwigStatic_methods,
    swig_SampleRateReducer_Sf_SwigStatic_attributes,
    swig_SampleRateReducer_Sf_SwigStatic_constants,
    swig_SampleRateReducer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SampleRateReducer_bases[] = {0};
static const char *swig_SampleRateReducer_base_names[] = {0};
static swig_lua_class _wrap_class_SampleRateReducer = { "SampleRateReducer", "SampleRateReducer", &SWIGTYPE_p_daisysp__SampleRateReducer,_proxy__wrap_new_SampleRateReducer, swig_delete_SampleRateReducer, swig_SampleRateReducer_methods, swig_SampleRateReducer_attributes, &swig_SampleRateReducer_Sf_SwigStatic, swig_SampleRateReducer_meta, swig_SampleRateReducer_bases, swig_SampleRateReducer_base_names };

static int _wrap_new_Tremolo(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tremolo *result = 0 ;
  
  SWIG_check_num_args("daisysp::Tremolo::Tremolo",0,0)
  result = (daisysp::Tremolo *)new daisysp::Tremolo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Tremolo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tremolo_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tremolo *arg1 = (daisysp::Tremolo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Tremolo::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tremolo::Init",1,"daisysp::Tremolo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Tremolo::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tremolo,0))){
    SWIG_fail_ptr("Tremolo_Init",1,SWIGTYPE_p_daisysp__Tremolo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tremolo_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tremolo *arg1 = (daisysp::Tremolo *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Tremolo::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tremolo::Process",1,"daisysp::Tremolo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Tremolo::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tremolo,0))){
    SWIG_fail_ptr("Tremolo_Process",1,SWIGTYPE_p_daisysp__Tremolo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tremolo_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tremolo *arg1 = (daisysp::Tremolo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Tremolo::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tremolo::SetFreq",1,"daisysp::Tremolo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Tremolo::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tremolo,0))){
    SWIG_fail_ptr("Tremolo_SetFreq",1,SWIGTYPE_p_daisysp__Tremolo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tremolo_SetWaveform(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tremolo *arg1 = (daisysp::Tremolo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("daisysp::Tremolo::SetWaveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tremolo::SetWaveform",1,"daisysp::Tremolo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Tremolo::SetWaveform",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tremolo,0))){
    SWIG_fail_ptr("Tremolo_SetWaveform",1,SWIGTYPE_p_daisysp__Tremolo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetWaveform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tremolo_SetDepth(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tremolo *arg1 = (daisysp::Tremolo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Tremolo::SetDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tremolo::SetDepth",1,"daisysp::Tremolo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Tremolo::SetDepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tremolo,0))){
    SWIG_fail_ptr("Tremolo_SetDepth",1,SWIGTYPE_p_daisysp__Tremolo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Tremolo(void *obj) {
daisysp::Tremolo *arg1 = (daisysp::Tremolo *) obj;
delete arg1;
}
static int _proxy__wrap_new_Tremolo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Tremolo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Tremolo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Tremolo_methods[]= {
    { "Init", _wrap_Tremolo_Init},
    { "Process", _wrap_Tremolo_Process},
    { "SetFreq", _wrap_Tremolo_SetFreq},
    { "SetWaveform", _wrap_Tremolo_SetWaveform},
    { "SetDepth", _wrap_Tremolo_SetDepth},
    {0,0}
};
static swig_lua_method swig_Tremolo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Tremolo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Tremolo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Tremolo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Tremolo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Tremolo_Sf_SwigStatic = {
    "Tremolo",
    swig_Tremolo_Sf_SwigStatic_methods,
    swig_Tremolo_Sf_SwigStatic_attributes,
    swig_Tremolo_Sf_SwigStatic_constants,
    swig_Tremolo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Tremolo_bases[] = {0};
static const char *swig_Tremolo_base_names[] = {0};
static swig_lua_class _wrap_class_Tremolo = { "Tremolo", "Tremolo", &SWIGTYPE_p_daisysp__Tremolo,_proxy__wrap_new_Tremolo, swig_delete_Tremolo, swig_Tremolo_methods, swig_Tremolo_attributes, &swig_Tremolo_Sf_SwigStatic, swig_Tremolo_meta, swig_Tremolo_bases, swig_Tremolo_base_names };

static int _wrap_new_Allpass(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Allpass *result = 0 ;
  
  SWIG_check_num_args("daisysp::Allpass::Allpass",0,0)
  result = (daisysp::Allpass *)new daisysp::Allpass();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Allpass,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Allpass_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Allpass *arg1 = (daisysp::Allpass *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("daisysp::Allpass::Init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Allpass::Init",1,"daisysp::Allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Allpass::Init",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("daisysp::Allpass::Init",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Allpass::Init",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Allpass,0))){
    SWIG_fail_ptr("Allpass_Init",1,SWIGTYPE_p_daisysp__Allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Allpass_Init",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->Init(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Allpass_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Allpass *arg1 = (daisysp::Allpass *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Allpass::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Allpass::Process",1,"daisysp::Allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Allpass::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Allpass,0))){
    SWIG_fail_ptr("Allpass_Process",1,SWIGTYPE_p_daisysp__Allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Allpass_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Allpass *arg1 = (daisysp::Allpass *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Allpass::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Allpass::SetFreq",1,"daisysp::Allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Allpass::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Allpass,0))){
    SWIG_fail_ptr("Allpass_SetFreq",1,SWIGTYPE_p_daisysp__Allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Allpass_SetRevTime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Allpass *arg1 = (daisysp::Allpass *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Allpass::SetRevTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Allpass::SetRevTime",1,"daisysp::Allpass *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Allpass::SetRevTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Allpass,0))){
    SWIG_fail_ptr("Allpass_SetRevTime",1,SWIGTYPE_p_daisysp__Allpass);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRevTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Allpass(void *obj) {
daisysp::Allpass *arg1 = (daisysp::Allpass *) obj;
delete arg1;
}
static int _proxy__wrap_new_Allpass(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Allpass);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Allpass_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Allpass_methods[]= {
    { "Init", _wrap_Allpass_Init},
    { "Process", _wrap_Allpass_Process},
    { "SetFreq", _wrap_Allpass_SetFreq},
    { "SetRevTime", _wrap_Allpass_SetRevTime},
    {0,0}
};
static swig_lua_method swig_Allpass_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Allpass_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Allpass_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Allpass_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Allpass_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Allpass_Sf_SwigStatic = {
    "Allpass",
    swig_Allpass_Sf_SwigStatic_methods,
    swig_Allpass_Sf_SwigStatic_attributes,
    swig_Allpass_Sf_SwigStatic_constants,
    swig_Allpass_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Allpass_bases[] = {0};
static const char *swig_Allpass_base_names[] = {0};
static swig_lua_class _wrap_class_Allpass = { "Allpass", "Allpass", &SWIGTYPE_p_daisysp__Allpass,_proxy__wrap_new_Allpass, swig_delete_Allpass, swig_Allpass_methods, swig_Allpass_attributes, &swig_Allpass_Sf_SwigStatic, swig_Allpass_meta, swig_Allpass_bases, swig_Allpass_base_names };

static int _wrap_new_ATone(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ATone *result = 0 ;
  
  SWIG_check_num_args("daisysp::ATone::ATone",0,0)
  result = (daisysp::ATone *)new daisysp::ATone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__ATone,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ATone_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ATone *arg1 = (daisysp::ATone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ATone::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ATone::Init",1,"daisysp::ATone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ATone::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ATone,0))){
    SWIG_fail_ptr("ATone_Init",1,SWIGTYPE_p_daisysp__ATone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ATone_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ATone *arg1 = (daisysp::ATone *) 0 ;
  float *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::ATone::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ATone::Process",1,"daisysp::ATone *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("daisysp::ATone::Process",2,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ATone,0))){
    SWIG_fail_ptr("ATone_Process",1,SWIGTYPE_p_daisysp__ATone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ATone_Process",2,SWIGTYPE_p_float);
  }
  
  result = (float)(arg1)->Process(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ATone_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ATone *arg1 = (daisysp::ATone *) 0 ;
  float *arg2 = 0 ;
  
  SWIG_check_num_args("daisysp::ATone::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ATone::SetFreq",1,"daisysp::ATone *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("daisysp::ATone::SetFreq",2,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ATone,0))){
    SWIG_fail_ptr("ATone_SetFreq",1,SWIGTYPE_p_daisysp__ATone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ATone_SetFreq",2,SWIGTYPE_p_float);
  }
  
  (arg1)->SetFreq(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ATone_GetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ATone *arg1 = (daisysp::ATone *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::ATone::GetFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ATone::GetFreq",1,"daisysp::ATone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ATone,0))){
    SWIG_fail_ptr("ATone_GetFreq",1,SWIGTYPE_p_daisysp__ATone);
  }
  
  result = (float)(arg1)->GetFreq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ATone(void *obj) {
daisysp::ATone *arg1 = (daisysp::ATone *) obj;
delete arg1;
}
static int _proxy__wrap_new_ATone(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ATone);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ATone_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ATone_methods[]= {
    { "Init", _wrap_ATone_Init},
    { "Process", _wrap_ATone_Process},
    { "SetFreq", _wrap_ATone_SetFreq},
    { "GetFreq", _wrap_ATone_GetFreq},
    {0,0}
};
static swig_lua_method swig_ATone_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ATone_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ATone_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ATone_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ATone_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ATone_Sf_SwigStatic = {
    "ATone",
    swig_ATone_Sf_SwigStatic_methods,
    swig_ATone_Sf_SwigStatic_attributes,
    swig_ATone_Sf_SwigStatic_constants,
    swig_ATone_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ATone_bases[] = {0};
static const char *swig_ATone_base_names[] = {0};
static swig_lua_class _wrap_class_ATone = { "ATone", "ATone", &SWIGTYPE_p_daisysp__ATone,_proxy__wrap_new_ATone, swig_delete_ATone, swig_ATone_methods, swig_ATone_attributes, &swig_ATone_Sf_SwigStatic, swig_ATone_meta, swig_ATone_bases, swig_ATone_base_names };

static int _wrap_new_Biquad(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Biquad *result = 0 ;
  
  SWIG_check_num_args("daisysp::Biquad::Biquad",0,0)
  result = (daisysp::Biquad *)new daisysp::Biquad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Biquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Biquad *arg1 = (daisysp::Biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Biquad::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Biquad::Init",1,"daisysp::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Biquad::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Biquad,0))){
    SWIG_fail_ptr("Biquad_Init",1,SWIGTYPE_p_daisysp__Biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Biquad *arg1 = (daisysp::Biquad *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Biquad::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Biquad::Process",1,"daisysp::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Biquad::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Biquad,0))){
    SWIG_fail_ptr("Biquad_Process",1,SWIGTYPE_p_daisysp__Biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_SetRes(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Biquad *arg1 = (daisysp::Biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Biquad::SetRes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Biquad::SetRes",1,"daisysp::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Biquad::SetRes",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Biquad,0))){
    SWIG_fail_ptr("Biquad_SetRes",1,SWIGTYPE_p_daisysp__Biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRes(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_SetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Biquad *arg1 = (daisysp::Biquad *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Biquad::SetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Biquad::SetCutoff",1,"daisysp::Biquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Biquad::SetCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Biquad,0))){
    SWIG_fail_ptr("Biquad_SetCutoff",1,SWIGTYPE_p_daisysp__Biquad);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
daisysp::Biquad *arg1 = (daisysp::Biquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "Init", _wrap_Biquad_Init},
    { "Process", _wrap_Biquad_Process},
    { "SetRes", _wrap_Biquad_SetRes},
    { "SetCutoff", _wrap_Biquad_SetCutoff},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0};
static const char *swig_Biquad_base_names[] = {0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_daisysp__Biquad,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_new_Comb(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Comb *result = 0 ;
  
  SWIG_check_num_args("daisysp::Comb::Comb",0,0)
  result = (daisysp::Comb *)new daisysp::Comb();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Comb,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Comb *arg1 = (daisysp::Comb *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("daisysp::Comb::Init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Comb::Init",1,"daisysp::Comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Comb::Init",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("daisysp::Comb::Init",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Comb::Init",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Comb,0))){
    SWIG_fail_ptr("Comb_Init",1,SWIGTYPE_p_daisysp__Comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Comb_Init",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->Init(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Comb *arg1 = (daisysp::Comb *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Comb::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Comb::Process",1,"daisysp::Comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Comb::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Comb,0))){
    SWIG_fail_ptr("Comb_Process",1,SWIGTYPE_p_daisysp__Comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_SetPeriod(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Comb *arg1 = (daisysp::Comb *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Comb::SetPeriod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Comb::SetPeriod",1,"daisysp::Comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Comb::SetPeriod",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Comb,0))){
    SWIG_fail_ptr("Comb_SetPeriod",1,SWIGTYPE_p_daisysp__Comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPeriod(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Comb *arg1 = (daisysp::Comb *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Comb::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Comb::SetFreq",1,"daisysp::Comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Comb::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Comb,0))){
    SWIG_fail_ptr("Comb_SetFreq",1,SWIGTYPE_p_daisysp__Comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Comb_SetRevTime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Comb *arg1 = (daisysp::Comb *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Comb::SetRevTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Comb::SetRevTime",1,"daisysp::Comb *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Comb::SetRevTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Comb,0))){
    SWIG_fail_ptr("Comb_SetRevTime",1,SWIGTYPE_p_daisysp__Comb);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRevTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Comb(void *obj) {
daisysp::Comb *arg1 = (daisysp::Comb *) obj;
delete arg1;
}
static int _proxy__wrap_new_Comb(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Comb);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Comb_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Comb_methods[]= {
    { "Init", _wrap_Comb_Init},
    { "Process", _wrap_Comb_Process},
    { "SetPeriod", _wrap_Comb_SetPeriod},
    { "SetFreq", _wrap_Comb_SetFreq},
    { "SetRevTime", _wrap_Comb_SetRevTime},
    {0,0}
};
static swig_lua_method swig_Comb_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Comb_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Comb_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Comb_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Comb_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Comb_Sf_SwigStatic = {
    "Comb",
    swig_Comb_Sf_SwigStatic_methods,
    swig_Comb_Sf_SwigStatic_attributes,
    swig_Comb_Sf_SwigStatic_constants,
    swig_Comb_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Comb_bases[] = {0};
static const char *swig_Comb_base_names[] = {0};
static swig_lua_class _wrap_class_Comb = { "Comb", "Comb", &SWIGTYPE_p_daisysp__Comb,_proxy__wrap_new_Comb, swig_delete_Comb, swig_Comb_methods, swig_Comb_attributes, &swig_Comb_Sf_SwigStatic, swig_Comb_meta, swig_Comb_bases, swig_Comb_base_names };

static int _wrap_new_Mode(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Mode *result = 0 ;
  
  SWIG_check_num_args("daisysp::Mode::Mode",0,0)
  result = (daisysp::Mode *)new daisysp::Mode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Mode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mode_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Mode *arg1 = (daisysp::Mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Mode::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Mode::Init",1,"daisysp::Mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Mode::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Mode,0))){
    SWIG_fail_ptr("Mode_Init",1,SWIGTYPE_p_daisysp__Mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mode_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Mode *arg1 = (daisysp::Mode *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Mode::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Mode::Process",1,"daisysp::Mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Mode::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Mode,0))){
    SWIG_fail_ptr("Mode_Process",1,SWIGTYPE_p_daisysp__Mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mode_Clear(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Mode *arg1 = (daisysp::Mode *) 0 ;
  
  SWIG_check_num_args("daisysp::Mode::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Mode::Clear",1,"daisysp::Mode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Mode,0))){
    SWIG_fail_ptr("Mode_Clear",1,SWIGTYPE_p_daisysp__Mode);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mode_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Mode *arg1 = (daisysp::Mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Mode::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Mode::SetFreq",1,"daisysp::Mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Mode::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Mode,0))){
    SWIG_fail_ptr("Mode_SetFreq",1,SWIGTYPE_p_daisysp__Mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mode_SetQ(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Mode *arg1 = (daisysp::Mode *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Mode::SetQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Mode::SetQ",1,"daisysp::Mode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Mode::SetQ",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Mode,0))){
    SWIG_fail_ptr("Mode_SetQ",1,SWIGTYPE_p_daisysp__Mode);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mode(void *obj) {
daisysp::Mode *arg1 = (daisysp::Mode *) obj;
delete arg1;
}
static int _proxy__wrap_new_Mode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Mode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Mode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mode_methods[]= {
    { "Init", _wrap_Mode_Init},
    { "Process", _wrap_Mode_Process},
    { "Clear", _wrap_Mode_Clear},
    { "SetFreq", _wrap_Mode_SetFreq},
    { "SetQ", _wrap_Mode_SetQ},
    {0,0}
};
static swig_lua_method swig_Mode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Mode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Mode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Mode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Mode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Mode_Sf_SwigStatic = {
    "Mode",
    swig_Mode_Sf_SwigStatic_methods,
    swig_Mode_Sf_SwigStatic_attributes,
    swig_Mode_Sf_SwigStatic_constants,
    swig_Mode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Mode_bases[] = {0};
static const char *swig_Mode_base_names[] = {0};
static swig_lua_class _wrap_class_Mode = { "Mode", "Mode", &SWIGTYPE_p_daisysp__Mode,_proxy__wrap_new_Mode, swig_delete_Mode, swig_Mode_methods, swig_Mode_attributes, &swig_Mode_Sf_SwigStatic, swig_Mode_meta, swig_Mode_bases, swig_Mode_base_names };

static int _wrap_new_MoogLadder(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::MoogLadder *result = 0 ;
  
  SWIG_check_num_args("daisysp::MoogLadder::MoogLadder",0,0)
  result = (daisysp::MoogLadder *)new daisysp::MoogLadder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__MoogLadder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadder_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::MoogLadder *arg1 = (daisysp::MoogLadder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::MoogLadder::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::MoogLadder::Init",1,"daisysp::MoogLadder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::MoogLadder::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__MoogLadder,0))){
    SWIG_fail_ptr("MoogLadder_Init",1,SWIGTYPE_p_daisysp__MoogLadder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadder_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::MoogLadder *arg1 = (daisysp::MoogLadder *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::MoogLadder::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::MoogLadder::Process",1,"daisysp::MoogLadder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::MoogLadder::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__MoogLadder,0))){
    SWIG_fail_ptr("MoogLadder_Process",1,SWIGTYPE_p_daisysp__MoogLadder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadder_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::MoogLadder *arg1 = (daisysp::MoogLadder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::MoogLadder::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::MoogLadder::SetFreq",1,"daisysp::MoogLadder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::MoogLadder::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__MoogLadder,0))){
    SWIG_fail_ptr("MoogLadder_SetFreq",1,SWIGTYPE_p_daisysp__MoogLadder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MoogLadder_SetRes(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::MoogLadder *arg1 = (daisysp::MoogLadder *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::MoogLadder::SetRes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::MoogLadder::SetRes",1,"daisysp::MoogLadder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::MoogLadder::SetRes",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__MoogLadder,0))){
    SWIG_fail_ptr("MoogLadder_SetRes",1,SWIGTYPE_p_daisysp__MoogLadder);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRes(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MoogLadder(void *obj) {
daisysp::MoogLadder *arg1 = (daisysp::MoogLadder *) obj;
delete arg1;
}
static int _proxy__wrap_new_MoogLadder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MoogLadder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MoogLadder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MoogLadder_methods[]= {
    { "Init", _wrap_MoogLadder_Init},
    { "Process", _wrap_MoogLadder_Process},
    { "SetFreq", _wrap_MoogLadder_SetFreq},
    { "SetRes", _wrap_MoogLadder_SetRes},
    {0,0}
};
static swig_lua_method swig_MoogLadder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MoogLadder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MoogLadder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MoogLadder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MoogLadder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MoogLadder_Sf_SwigStatic = {
    "MoogLadder",
    swig_MoogLadder_Sf_SwigStatic_methods,
    swig_MoogLadder_Sf_SwigStatic_attributes,
    swig_MoogLadder_Sf_SwigStatic_constants,
    swig_MoogLadder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MoogLadder_bases[] = {0};
static const char *swig_MoogLadder_base_names[] = {0};
static swig_lua_class _wrap_class_MoogLadder = { "MoogLadder", "MoogLadder", &SWIGTYPE_p_daisysp__MoogLadder,_proxy__wrap_new_MoogLadder, swig_delete_MoogLadder, swig_MoogLadder_methods, swig_MoogLadder_attributes, &swig_MoogLadder_Sf_SwigStatic, swig_MoogLadder_meta, swig_MoogLadder_bases, swig_MoogLadder_base_names };

static int _wrap_NlFilt_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  
  SWIG_check_num_args("daisysp::NlFilt::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::Init",1,"daisysp::NlFilt *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_Init",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NlFilt_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("daisysp::NlFilt::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::ProcessBlock",1,"daisysp::NlFilt *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::NlFilt::ProcessBlock",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("daisysp::NlFilt::ProcessBlock",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::NlFilt::ProcessBlock",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_ProcessBlock",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NlFilt_ProcessBlock",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("NlFilt_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NlFilt_SetCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("daisysp::NlFilt::SetCoefficients",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::SetCoefficients",1,"daisysp::NlFilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::NlFilt::SetCoefficients",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::NlFilt::SetCoefficients",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::NlFilt::SetCoefficients",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("daisysp::NlFilt::SetCoefficients",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("daisysp::NlFilt::SetCoefficients",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_SetCoefficients",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->SetCoefficients(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NlFilt_SetA(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::NlFilt::SetA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::SetA",1,"daisysp::NlFilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::NlFilt::SetA",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_SetA",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NlFilt_SetB(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::NlFilt::SetB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::SetB",1,"daisysp::NlFilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::NlFilt::SetB",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_SetB",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetB(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NlFilt_SetD(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::NlFilt::SetD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::SetD",1,"daisysp::NlFilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::NlFilt::SetD",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_SetD",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetD(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NlFilt_SetC(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::NlFilt::SetC",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::SetC",1,"daisysp::NlFilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::NlFilt::SetC",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_SetC",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetC(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NlFilt_SetL(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *arg1 = (daisysp::NlFilt *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::NlFilt::SetL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::NlFilt::SetL",1,"daisysp::NlFilt *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::NlFilt::SetL",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__NlFilt,0))){
    SWIG_fail_ptr("NlFilt_SetL",1,SWIGTYPE_p_daisysp__NlFilt);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetL(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NlFilt(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::NlFilt *result = 0 ;
  
  SWIG_check_num_args("daisysp::NlFilt::NlFilt",0,0)
  result = (daisysp::NlFilt *)new daisysp::NlFilt();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__NlFilt,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NlFilt(void *obj) {
daisysp::NlFilt *arg1 = (daisysp::NlFilt *) obj;
delete arg1;
}
static int _proxy__wrap_new_NlFilt(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NlFilt);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NlFilt_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NlFilt_methods[]= {
    { "Init", _wrap_NlFilt_Init},
    { "ProcessBlock", _wrap_NlFilt_ProcessBlock},
    { "SetCoefficients", _wrap_NlFilt_SetCoefficients},
    { "SetA", _wrap_NlFilt_SetA},
    { "SetB", _wrap_NlFilt_SetB},
    { "SetD", _wrap_NlFilt_SetD},
    { "SetC", _wrap_NlFilt_SetC},
    { "SetL", _wrap_NlFilt_SetL},
    {0,0}
};
static swig_lua_method swig_NlFilt_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NlFilt_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NlFilt_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NlFilt_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NlFilt_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NlFilt_Sf_SwigStatic = {
    "NlFilt",
    swig_NlFilt_Sf_SwigStatic_methods,
    swig_NlFilt_Sf_SwigStatic_attributes,
    swig_NlFilt_Sf_SwigStatic_constants,
    swig_NlFilt_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NlFilt_bases[] = {0};
static const char *swig_NlFilt_base_names[] = {0};
static swig_lua_class _wrap_class_NlFilt = { "NlFilt", "NlFilt", &SWIGTYPE_p_daisysp__NlFilt,_proxy__wrap_new_NlFilt, swig_delete_NlFilt, swig_NlFilt_methods, swig_NlFilt_attributes, &swig_NlFilt_Sf_SwigStatic, swig_NlFilt_meta, swig_NlFilt_bases, swig_NlFilt_base_names };

static int _wrap_new_Svf(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *result = 0 ;
  
  SWIG_check_num_args("daisysp::Svf::Svf",0,0)
  result = (daisysp::Svf *)new daisysp::Svf();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Svf,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Svf::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::Init",1,"daisysp::Svf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Svf::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_Init",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Svf::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::Process",1,"daisysp::Svf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Svf::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_Process",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Process(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Svf::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::SetFreq",1,"daisysp::Svf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Svf::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_SetFreq",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_SetRes(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Svf::SetRes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::SetRes",1,"daisysp::Svf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Svf::SetRes",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_SetRes",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRes(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_SetDrive(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Svf::SetDrive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::SetDrive",1,"daisysp::Svf *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Svf::SetDrive",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_SetDrive",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDrive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_Low(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Svf::Low",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::Low",1,"daisysp::Svf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_Low",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  result = (float)(arg1)->Low();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_High(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Svf::High",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::High",1,"daisysp::Svf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_High",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  result = (float)(arg1)->High();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_Band(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Svf::Band",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::Band",1,"daisysp::Svf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_Band",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  result = (float)(arg1)->Band();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_Notch(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Svf::Notch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::Notch",1,"daisysp::Svf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_Notch",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  result = (float)(arg1)->Notch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Svf_Peak(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Svf *arg1 = (daisysp::Svf *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Svf::Peak",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Svf::Peak",1,"daisysp::Svf *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Svf,0))){
    SWIG_fail_ptr("Svf_Peak",1,SWIGTYPE_p_daisysp__Svf);
  }
  
  result = (float)(arg1)->Peak();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Svf(void *obj) {
daisysp::Svf *arg1 = (daisysp::Svf *) obj;
delete arg1;
}
static int _proxy__wrap_new_Svf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Svf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Svf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Svf_methods[]= {
    { "Init", _wrap_Svf_Init},
    { "Process", _wrap_Svf_Process},
    { "SetFreq", _wrap_Svf_SetFreq},
    { "SetRes", _wrap_Svf_SetRes},
    { "SetDrive", _wrap_Svf_SetDrive},
    { "Low", _wrap_Svf_Low},
    { "High", _wrap_Svf_High},
    { "Band", _wrap_Svf_Band},
    { "Notch", _wrap_Svf_Notch},
    { "Peak", _wrap_Svf_Peak},
    {0,0}
};
static swig_lua_method swig_Svf_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Svf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Svf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Svf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Svf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Svf_Sf_SwigStatic = {
    "Svf",
    swig_Svf_Sf_SwigStatic_methods,
    swig_Svf_Sf_SwigStatic_attributes,
    swig_Svf_Sf_SwigStatic_constants,
    swig_Svf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Svf_bases[] = {0};
static const char *swig_Svf_base_names[] = {0};
static swig_lua_class _wrap_class_Svf = { "Svf", "Svf", &SWIGTYPE_p_daisysp__Svf,_proxy__wrap_new_Svf, swig_delete_Svf, swig_Svf_methods, swig_Svf_attributes, &swig_Svf_Sf_SwigStatic, swig_Svf_meta, swig_Svf_bases, swig_Svf_base_names };

static int _wrap_new_Tone(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tone *result = 0 ;
  
  SWIG_check_num_args("daisysp::Tone::Tone",0,0)
  result = (daisysp::Tone *)new daisysp::Tone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Tone,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tone_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tone *arg1 = (daisysp::Tone *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Tone::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tone::Init",1,"daisysp::Tone *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Tone::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tone,0))){
    SWIG_fail_ptr("Tone_Init",1,SWIGTYPE_p_daisysp__Tone);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tone_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tone *arg1 = (daisysp::Tone *) 0 ;
  float *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Tone::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tone::Process",1,"daisysp::Tone *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("daisysp::Tone::Process",2,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tone,0))){
    SWIG_fail_ptr("Tone_Process",1,SWIGTYPE_p_daisysp__Tone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Tone_Process",2,SWIGTYPE_p_float);
  }
  
  result = (float)(arg1)->Process(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tone_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tone *arg1 = (daisysp::Tone *) 0 ;
  float *arg2 = 0 ;
  
  SWIG_check_num_args("daisysp::Tone::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tone::SetFreq",1,"daisysp::Tone *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("daisysp::Tone::SetFreq",2,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tone,0))){
    SWIG_fail_ptr("Tone_SetFreq",1,SWIGTYPE_p_daisysp__Tone);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Tone_SetFreq",2,SWIGTYPE_p_float);
  }
  
  (arg1)->SetFreq(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tone_GetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Tone *arg1 = (daisysp::Tone *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Tone::GetFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Tone::GetFreq",1,"daisysp::Tone *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Tone,0))){
    SWIG_fail_ptr("Tone_GetFreq",1,SWIGTYPE_p_daisysp__Tone);
  }
  
  result = (float)(arg1)->GetFreq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Tone(void *obj) {
daisysp::Tone *arg1 = (daisysp::Tone *) obj;
delete arg1;
}
static int _proxy__wrap_new_Tone(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Tone);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Tone_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Tone_methods[]= {
    { "Init", _wrap_Tone_Init},
    { "Process", _wrap_Tone_Process},
    { "SetFreq", _wrap_Tone_SetFreq},
    { "GetFreq", _wrap_Tone_GetFreq},
    {0,0}
};
static swig_lua_method swig_Tone_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Tone_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Tone_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Tone_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Tone_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Tone_Sf_SwigStatic = {
    "Tone",
    swig_Tone_Sf_SwigStatic_methods,
    swig_Tone_Sf_SwigStatic_attributes,
    swig_Tone_Sf_SwigStatic_constants,
    swig_Tone_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Tone_bases[] = {0};
static const char *swig_Tone_base_names[] = {0};
static swig_lua_class _wrap_class_Tone = { "Tone", "Tone", &SWIGTYPE_p_daisysp__Tone,_proxy__wrap_new_Tone, swig_delete_Tone, swig_Tone_methods, swig_Tone_attributes, &swig_Tone_Sf_SwigStatic, swig_Tone_meta, swig_Tone_bases, swig_Tone_base_names };

static int _wrap_new_ClockedNoise(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ClockedNoise *result = 0 ;
  
  SWIG_check_num_args("daisysp::ClockedNoise::ClockedNoise",0,0)
  result = (daisysp::ClockedNoise *)new daisysp::ClockedNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__ClockedNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockedNoise_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ClockedNoise *arg1 = (daisysp::ClockedNoise *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ClockedNoise::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ClockedNoise::Init",1,"daisysp::ClockedNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ClockedNoise::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ClockedNoise,0))){
    SWIG_fail_ptr("ClockedNoise_Init",1,SWIGTYPE_p_daisysp__ClockedNoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockedNoise_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ClockedNoise *arg1 = (daisysp::ClockedNoise *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::ClockedNoise::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ClockedNoise::Process",1,"daisysp::ClockedNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ClockedNoise,0))){
    SWIG_fail_ptr("ClockedNoise_Process",1,SWIGTYPE_p_daisysp__ClockedNoise);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockedNoise_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ClockedNoise *arg1 = (daisysp::ClockedNoise *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ClockedNoise::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ClockedNoise::SetFreq",1,"daisysp::ClockedNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ClockedNoise::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ClockedNoise,0))){
    SWIG_fail_ptr("ClockedNoise_SetFreq",1,SWIGTYPE_p_daisysp__ClockedNoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClockedNoise_Sync(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ClockedNoise *arg1 = (daisysp::ClockedNoise *) 0 ;
  
  SWIG_check_num_args("daisysp::ClockedNoise::Sync",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ClockedNoise::Sync",1,"daisysp::ClockedNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ClockedNoise,0))){
    SWIG_fail_ptr("ClockedNoise_Sync",1,SWIGTYPE_p_daisysp__ClockedNoise);
  }
  
  (arg1)->Sync();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ClockedNoise(void *obj) {
daisysp::ClockedNoise *arg1 = (daisysp::ClockedNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_ClockedNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ClockedNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ClockedNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ClockedNoise_methods[]= {
    { "Init", _wrap_ClockedNoise_Init},
    { "Process", _wrap_ClockedNoise_Process},
    { "SetFreq", _wrap_ClockedNoise_SetFreq},
    { "Sync", _wrap_ClockedNoise_Sync},
    {0,0}
};
static swig_lua_method swig_ClockedNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ClockedNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ClockedNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ClockedNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ClockedNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ClockedNoise_Sf_SwigStatic = {
    "ClockedNoise",
    swig_ClockedNoise_Sf_SwigStatic_methods,
    swig_ClockedNoise_Sf_SwigStatic_attributes,
    swig_ClockedNoise_Sf_SwigStatic_constants,
    swig_ClockedNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ClockedNoise_bases[] = {0};
static const char *swig_ClockedNoise_base_names[] = {0};
static swig_lua_class _wrap_class_ClockedNoise = { "ClockedNoise", "ClockedNoise", &SWIGTYPE_p_daisysp__ClockedNoise,_proxy__wrap_new_ClockedNoise, swig_delete_ClockedNoise, swig_ClockedNoise_methods, swig_ClockedNoise_attributes, &swig_ClockedNoise_Sf_SwigStatic, swig_ClockedNoise_meta, swig_ClockedNoise_bases, swig_ClockedNoise_base_names };

static int _wrap_new_Dust(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Dust *result = 0 ;
  
  SWIG_check_num_args("daisysp::Dust::Dust",0,0)
  result = (daisysp::Dust *)new daisysp::Dust();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Dust,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dust_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Dust *arg1 = (daisysp::Dust *) 0 ;
  
  SWIG_check_num_args("daisysp::Dust::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Dust::Init",1,"daisysp::Dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Dust,0))){
    SWIG_fail_ptr("Dust_Init",1,SWIGTYPE_p_daisysp__Dust);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dust_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Dust *arg1 = (daisysp::Dust *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Dust::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Dust::Process",1,"daisysp::Dust *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Dust,0))){
    SWIG_fail_ptr("Dust_Process",1,SWIGTYPE_p_daisysp__Dust);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Dust_SetDensity(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Dust *arg1 = (daisysp::Dust *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Dust::SetDensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Dust::SetDensity",1,"daisysp::Dust *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Dust::SetDensity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Dust,0))){
    SWIG_fail_ptr("Dust_SetDensity",1,SWIGTYPE_p_daisysp__Dust);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDensity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Dust(void *obj) {
daisysp::Dust *arg1 = (daisysp::Dust *) obj;
delete arg1;
}
static int _proxy__wrap_new_Dust(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Dust);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Dust_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Dust_methods[]= {
    { "Init", _wrap_Dust_Init},
    { "Process", _wrap_Dust_Process},
    { "SetDensity", _wrap_Dust_SetDensity},
    {0,0}
};
static swig_lua_method swig_Dust_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Dust_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Dust_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Dust_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Dust_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Dust_Sf_SwigStatic = {
    "Dust",
    swig_Dust_Sf_SwigStatic_methods,
    swig_Dust_Sf_SwigStatic_attributes,
    swig_Dust_Sf_SwigStatic_constants,
    swig_Dust_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Dust_bases[] = {0};
static const char *swig_Dust_base_names[] = {0};
static swig_lua_class _wrap_class_Dust = { "Dust", "Dust", &SWIGTYPE_p_daisysp__Dust,_proxy__wrap_new_Dust, swig_delete_Dust, swig_Dust_methods, swig_Dust_attributes, &swig_Dust_Sf_SwigStatic, swig_Dust_meta, swig_Dust_bases, swig_Dust_base_names };

static int _wrap_new_GrainletOscillator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::GrainletOscillator *result = 0 ;
  
  SWIG_check_num_args("daisysp::GrainletOscillator::GrainletOscillator",0,0)
  result = (daisysp::GrainletOscillator *)new daisysp::GrainletOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__GrainletOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GrainletOscillator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::GrainletOscillator *arg1 = (daisysp::GrainletOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::GrainletOscillator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::GrainletOscillator::Init",1,"daisysp::GrainletOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::GrainletOscillator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__GrainletOscillator,0))){
    SWIG_fail_ptr("GrainletOscillator_Init",1,SWIGTYPE_p_daisysp__GrainletOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GrainletOscillator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::GrainletOscillator *arg1 = (daisysp::GrainletOscillator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::GrainletOscillator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::GrainletOscillator::Process",1,"daisysp::GrainletOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__GrainletOscillator,0))){
    SWIG_fail_ptr("GrainletOscillator_Process",1,SWIGTYPE_p_daisysp__GrainletOscillator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GrainletOscillator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::GrainletOscillator *arg1 = (daisysp::GrainletOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::GrainletOscillator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::GrainletOscillator::SetFreq",1,"daisysp::GrainletOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::GrainletOscillator::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__GrainletOscillator,0))){
    SWIG_fail_ptr("GrainletOscillator_SetFreq",1,SWIGTYPE_p_daisysp__GrainletOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GrainletOscillator_SetFormantFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::GrainletOscillator *arg1 = (daisysp::GrainletOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::GrainletOscillator::SetFormantFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::GrainletOscillator::SetFormantFreq",1,"daisysp::GrainletOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::GrainletOscillator::SetFormantFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__GrainletOscillator,0))){
    SWIG_fail_ptr("GrainletOscillator_SetFormantFreq",1,SWIGTYPE_p_daisysp__GrainletOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFormantFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GrainletOscillator_SetShape(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::GrainletOscillator *arg1 = (daisysp::GrainletOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::GrainletOscillator::SetShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::GrainletOscillator::SetShape",1,"daisysp::GrainletOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::GrainletOscillator::SetShape",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__GrainletOscillator,0))){
    SWIG_fail_ptr("GrainletOscillator_SetShape",1,SWIGTYPE_p_daisysp__GrainletOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GrainletOscillator_SetBleed(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::GrainletOscillator *arg1 = (daisysp::GrainletOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::GrainletOscillator::SetBleed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::GrainletOscillator::SetBleed",1,"daisysp::GrainletOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::GrainletOscillator::SetBleed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__GrainletOscillator,0))){
    SWIG_fail_ptr("GrainletOscillator_SetBleed",1,SWIGTYPE_p_daisysp__GrainletOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetBleed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GrainletOscillator(void *obj) {
daisysp::GrainletOscillator *arg1 = (daisysp::GrainletOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_GrainletOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GrainletOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GrainletOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GrainletOscillator_methods[]= {
    { "Init", _wrap_GrainletOscillator_Init},
    { "Process", _wrap_GrainletOscillator_Process},
    { "SetFreq", _wrap_GrainletOscillator_SetFreq},
    { "SetFormantFreq", _wrap_GrainletOscillator_SetFormantFreq},
    { "SetShape", _wrap_GrainletOscillator_SetShape},
    { "SetBleed", _wrap_GrainletOscillator_SetBleed},
    {0,0}
};
static swig_lua_method swig_GrainletOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GrainletOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GrainletOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GrainletOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GrainletOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GrainletOscillator_Sf_SwigStatic = {
    "GrainletOscillator",
    swig_GrainletOscillator_Sf_SwigStatic_methods,
    swig_GrainletOscillator_Sf_SwigStatic_attributes,
    swig_GrainletOscillator_Sf_SwigStatic_constants,
    swig_GrainletOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GrainletOscillator_bases[] = {0};
static const char *swig_GrainletOscillator_base_names[] = {0};
static swig_lua_class _wrap_class_GrainletOscillator = { "GrainletOscillator", "GrainletOscillator", &SWIGTYPE_p_daisysp__GrainletOscillator,_proxy__wrap_new_GrainletOscillator, swig_delete_GrainletOscillator, swig_GrainletOscillator_methods, swig_GrainletOscillator_attributes, &swig_GrainletOscillator_Sf_SwigStatic, swig_GrainletOscillator_meta, swig_GrainletOscillator_bases, swig_GrainletOscillator_base_names };

static int _wrap_new_Particle(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *result = 0 ;
  
  SWIG_check_num_args("daisysp::Particle::Particle",0,0)
  result = (daisysp::Particle *)new daisysp::Particle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Particle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::Init",1,"daisysp::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Particle::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_Init",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Particle::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::Process",1,"daisysp::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_Process",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_GetNoise(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Particle::GetNoise",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::GetNoise",1,"daisysp::Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_GetNoise",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  result = (float)(arg1)->GetNoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::SetFreq",1,"daisysp::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Particle::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_SetFreq",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetResonance(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::SetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::SetResonance",1,"daisysp::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Particle::SetResonance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_SetResonance",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetRandomFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::SetRandomFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::SetRandomFreq",1,"daisysp::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Particle::SetRandomFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_SetRandomFreq",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRandomFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetDensity(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::SetDensity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::SetDensity",1,"daisysp::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Particle::SetDensity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_SetDensity",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDensity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetGain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::SetGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::SetGain",1,"daisysp::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Particle::SetGain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_SetGain",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetSpread(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::SetSpread",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::SetSpread",1,"daisysp::Particle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Particle::SetSpread",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_SetSpread",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSpread(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetSync(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Particle *arg1 = (daisysp::Particle *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::Particle::SetSync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Particle::SetSync",1,"daisysp::Particle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::Particle::SetSync",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Particle,0))){
    SWIG_fail_ptr("Particle_SetSync",1,SWIGTYPE_p_daisysp__Particle);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSync(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Particle(void *obj) {
daisysp::Particle *arg1 = (daisysp::Particle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Particle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Particle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Particle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Particle_methods[]= {
    { "Init", _wrap_Particle_Init},
    { "Process", _wrap_Particle_Process},
    { "GetNoise", _wrap_Particle_GetNoise},
    { "SetFreq", _wrap_Particle_SetFreq},
    { "SetResonance", _wrap_Particle_SetResonance},
    { "SetRandomFreq", _wrap_Particle_SetRandomFreq},
    { "SetDensity", _wrap_Particle_SetDensity},
    { "SetGain", _wrap_Particle_SetGain},
    { "SetSpread", _wrap_Particle_SetSpread},
    { "SetSync", _wrap_Particle_SetSync},
    {0,0}
};
static swig_lua_method swig_Particle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Particle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Particle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Particle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Particle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Particle_Sf_SwigStatic = {
    "Particle",
    swig_Particle_Sf_SwigStatic_methods,
    swig_Particle_Sf_SwigStatic_attributes,
    swig_Particle_Sf_SwigStatic_constants,
    swig_Particle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Particle_bases[] = {0};
static const char *swig_Particle_base_names[] = {0};
static swig_lua_class _wrap_class_Particle = { "Particle", "Particle", &SWIGTYPE_p_daisysp__Particle,_proxy__wrap_new_Particle, swig_delete_Particle, swig_Particle_methods, swig_Particle_attributes, &swig_Particle_Sf_SwigStatic, swig_Particle_meta, swig_Particle_bases, swig_Particle_base_names };

static int _wrap_new_WhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::WhiteNoise *result = 0 ;
  
  SWIG_check_num_args("daisysp::WhiteNoise::WhiteNoise",0,0)
  result = (daisysp::WhiteNoise *)new daisysp::WhiteNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__WhiteNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoise_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::WhiteNoise *arg1 = (daisysp::WhiteNoise *) 0 ;
  
  SWIG_check_num_args("daisysp::WhiteNoise::Init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::WhiteNoise::Init",1,"daisysp::WhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__WhiteNoise,0))){
    SWIG_fail_ptr("WhiteNoise_Init",1,SWIGTYPE_p_daisysp__WhiteNoise);
  }
  
  (arg1)->Init();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoise_SetAmp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::WhiteNoise *arg1 = (daisysp::WhiteNoise *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::WhiteNoise::SetAmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::WhiteNoise::SetAmp",1,"daisysp::WhiteNoise *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::WhiteNoise::SetAmp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__WhiteNoise,0))){
    SWIG_fail_ptr("WhiteNoise_SetAmp",1,SWIGTYPE_p_daisysp__WhiteNoise);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAmp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoise_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::WhiteNoise *arg1 = (daisysp::WhiteNoise *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::WhiteNoise::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::WhiteNoise::Process",1,"daisysp::WhiteNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__WhiteNoise,0))){
    SWIG_fail_ptr("WhiteNoise_Process",1,SWIGTYPE_p_daisysp__WhiteNoise);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WhiteNoise(void *obj) {
daisysp::WhiteNoise *arg1 = (daisysp::WhiteNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_WhiteNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WhiteNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WhiteNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WhiteNoise_methods[]= {
    { "Init", _wrap_WhiteNoise_Init},
    { "SetAmp", _wrap_WhiteNoise_SetAmp},
    { "Process", _wrap_WhiteNoise_Process},
    {0,0}
};
static swig_lua_method swig_WhiteNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WhiteNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WhiteNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WhiteNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WhiteNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WhiteNoise_Sf_SwigStatic = {
    "WhiteNoise",
    swig_WhiteNoise_Sf_SwigStatic_methods,
    swig_WhiteNoise_Sf_SwigStatic_attributes,
    swig_WhiteNoise_Sf_SwigStatic_constants,
    swig_WhiteNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WhiteNoise_bases[] = {0};
static const char *swig_WhiteNoise_base_names[] = {0};
static swig_lua_class _wrap_class_WhiteNoise = { "WhiteNoise", "WhiteNoise", &SWIGTYPE_p_daisysp__WhiteNoise,_proxy__wrap_new_WhiteNoise, swig_delete_WhiteNoise, swig_WhiteNoise_methods, swig_WhiteNoise_attributes, &swig_WhiteNoise_Sf_SwigStatic, swig_WhiteNoise_meta, swig_WhiteNoise_bases, swig_WhiteNoise_base_names };

static int _wrap_new_Drip(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Drip *result = 0 ;
  
  SWIG_check_num_args("daisysp::Drip::Drip",0,0)
  result = (daisysp::Drip *)new daisysp::Drip();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Drip,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drip_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Drip *arg1 = (daisysp::Drip *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Drip::Init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Drip::Init",1,"daisysp::Drip *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Drip::Init",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Drip::Init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Drip,0))){
    SWIG_fail_ptr("Drip_Init",1,SWIGTYPE_p_daisysp__Drip);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->Init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Drip_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Drip *arg1 = (daisysp::Drip *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Drip::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Drip::Process",1,"daisysp::Drip *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::Drip::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Drip,0))){
    SWIG_fail_ptr("Drip_Process",1,SWIGTYPE_p_daisysp__Drip);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Drip(void *obj) {
daisysp::Drip *arg1 = (daisysp::Drip *) obj;
delete arg1;
}
static int _proxy__wrap_new_Drip(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Drip);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Drip_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Drip_methods[]= {
    { "Init", _wrap_Drip_Init},
    { "Process", _wrap_Drip_Process},
    {0,0}
};
static swig_lua_method swig_Drip_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Drip_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Drip_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Drip_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Drip_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Drip_SwigStatic = {
    "Drip",
    swig_Drip_SwigStatic_methods,
    swig_Drip_SwigStatic_attributes,
    swig_Drip_SwigStatic_constants,
    swig_Drip_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Drip_bases[] = {0};
static const char *swig_Drip_base_names[] = {0};
static swig_lua_class _wrap_class_Drip = { "Drip", "Drip", &SWIGTYPE_p_daisysp__Drip,_proxy__wrap_new_Drip, swig_delete_Drip, swig_Drip_methods, swig_Drip_attributes, &swig_Drip_SwigStatic, swig_Drip_meta, swig_Drip_bases, swig_Drip_base_names };

static int _wrap_new_ModalVoice(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *result = 0 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::ModalVoice",0,0)
  result = (daisysp::ModalVoice *)new daisysp::ModalVoice();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__ModalVoice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::Init",1,"daisysp::ModalVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ModalVoice::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_Init",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::ModalVoice::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::Process",1,"daisysp::ModalVoice *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::ModalVoice::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_Process",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::ModalVoice::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::Process",1,"daisysp::ModalVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_Process",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_Process(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__ModalVoice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ModalVoice_Process__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__ModalVoice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ModalVoice_Process__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ModalVoice_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::ModalVoice::Process(bool)\n"
    "    daisysp::ModalVoice::Process()\n");
  lua_error(L);return 0;
}


static int _wrap_ModalVoice_SetSustain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::SetSustain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::SetSustain",1,"daisysp::ModalVoice *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::ModalVoice::SetSustain",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_SetSustain",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSustain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_Trig(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::Trig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::Trig",1,"daisysp::ModalVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_Trig",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  (arg1)->Trig();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::SetFreq",1,"daisysp::ModalVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ModalVoice::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_SetFreq",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_SetAccent(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::SetAccent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::SetAccent",1,"daisysp::ModalVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ModalVoice::SetAccent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_SetAccent",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAccent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_SetStructure(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::SetStructure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::SetStructure",1,"daisysp::ModalVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ModalVoice::SetStructure",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_SetStructure",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetStructure(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_SetBrightness(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::SetBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::SetBrightness",1,"daisysp::ModalVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ModalVoice::SetBrightness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_SetBrightness",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetBrightness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_SetDamping(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ModalVoice::SetDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::SetDamping",1,"daisysp::ModalVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ModalVoice::SetDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_SetDamping",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModalVoice_GetAux(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::ModalVoice::GetAux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ModalVoice::GetAux",1,"daisysp::ModalVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ModalVoice,0))){
    SWIG_fail_ptr("ModalVoice_GetAux",1,SWIGTYPE_p_daisysp__ModalVoice);
  }
  
  result = (float)(arg1)->GetAux();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModalVoice(void *obj) {
daisysp::ModalVoice *arg1 = (daisysp::ModalVoice *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModalVoice(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModalVoice);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModalVoice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ModalVoice_methods[]= {
    { "Init", _wrap_ModalVoice_Init},
    { "Process", _wrap_ModalVoice_Process},
    { "SetSustain", _wrap_ModalVoice_SetSustain},
    { "Trig", _wrap_ModalVoice_Trig},
    { "SetFreq", _wrap_ModalVoice_SetFreq},
    { "SetAccent", _wrap_ModalVoice_SetAccent},
    { "SetStructure", _wrap_ModalVoice_SetStructure},
    { "SetBrightness", _wrap_ModalVoice_SetBrightness},
    { "SetDamping", _wrap_ModalVoice_SetDamping},
    { "GetAux", _wrap_ModalVoice_GetAux},
    {0,0}
};
static swig_lua_method swig_ModalVoice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModalVoice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModalVoice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModalVoice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModalVoice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModalVoice_Sf_SwigStatic = {
    "ModalVoice",
    swig_ModalVoice_Sf_SwigStatic_methods,
    swig_ModalVoice_Sf_SwigStatic_attributes,
    swig_ModalVoice_Sf_SwigStatic_constants,
    swig_ModalVoice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModalVoice_bases[] = {0};
static const char *swig_ModalVoice_base_names[] = {0};
static swig_lua_class _wrap_class_ModalVoice = { "ModalVoice", "ModalVoice", &SWIGTYPE_p_daisysp__ModalVoice,_proxy__wrap_new_ModalVoice, swig_delete_ModalVoice, swig_ModalVoice_methods, swig_ModalVoice_attributes, &swig_ModalVoice_Sf_SwigStatic, swig_ModalVoice_meta, swig_ModalVoice_bases, swig_ModalVoice_base_names };

static int _wrap_new_Pluck(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *result = 0 ;
  
  SWIG_check_num_args("daisysp::Pluck::Pluck",0,0)
  result = (daisysp::Pluck *)new daisysp::Pluck();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Pluck,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  int32_t arg4 ;
  int32_t arg5 ;
  
  SWIG_check_num_args("daisysp::Pluck::Init",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::Init",1,"daisysp::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Pluck::Init",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("daisysp::Pluck::Init",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Pluck::Init",4,"int32_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("daisysp::Pluck::Init",5,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_Init",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pluck_Init",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int32_t)lua_tonumber(L, 4);
  arg5 = (int32_t)lua_tonumber(L, 5);
  (arg1)->Init(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Pluck::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::Process",1,"daisysp::Pluck *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("daisysp::Pluck::Process",2,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_Process",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Pluck_Process",2,SWIGTYPE_p_float);
  }
  
  result = (float)(arg1)->Process(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_SetAmp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Pluck::SetAmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::SetAmp",1,"daisysp::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Pluck::SetAmp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_SetAmp",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAmp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Pluck::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::SetFreq",1,"daisysp::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Pluck::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_SetFreq",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_SetDecay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Pluck::SetDecay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::SetDecay",1,"daisysp::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Pluck::SetDecay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_SetDecay",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDecay(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_SetDamp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Pluck::SetDamp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::SetDamp",1,"daisysp::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Pluck::SetDamp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_SetDamp",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDamp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_SetMode(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  int32_t arg2 ;
  
  SWIG_check_num_args("daisysp::Pluck::SetMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::SetMode",1,"daisysp::Pluck *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Pluck::SetMode",2,"int32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_SetMode",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  arg2 = (int32_t)lua_tonumber(L, 2);
  (arg1)->SetMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_GetAmp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Pluck::GetAmp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::GetAmp",1,"daisysp::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_GetAmp",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  result = (float)(arg1)->GetAmp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_GetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Pluck::GetFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::GetFreq",1,"daisysp::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_GetFreq",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  result = (float)(arg1)->GetFreq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_GetDecay(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Pluck::GetDecay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::GetDecay",1,"daisysp::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_GetDecay",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  result = (float)(arg1)->GetDecay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_GetDamp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Pluck::GetDamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::GetDamp",1,"daisysp::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_GetDamp",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  result = (float)(arg1)->GetDamp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pluck_GetMode(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Pluck *arg1 = (daisysp::Pluck *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("daisysp::Pluck::GetMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Pluck::GetMode",1,"daisysp::Pluck *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Pluck,0))){
    SWIG_fail_ptr("Pluck_GetMode",1,SWIGTYPE_p_daisysp__Pluck);
  }
  
  result = (int32_t)(arg1)->GetMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Pluck(void *obj) {
daisysp::Pluck *arg1 = (daisysp::Pluck *) obj;
delete arg1;
}
static int _proxy__wrap_new_Pluck(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Pluck);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Pluck_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Pluck_methods[]= {
    { "Init", _wrap_Pluck_Init},
    { "Process", _wrap_Pluck_Process},
    { "SetAmp", _wrap_Pluck_SetAmp},
    { "SetFreq", _wrap_Pluck_SetFreq},
    { "SetDecay", _wrap_Pluck_SetDecay},
    { "SetDamp", _wrap_Pluck_SetDamp},
    { "SetMode", _wrap_Pluck_SetMode},
    { "GetAmp", _wrap_Pluck_GetAmp},
    { "GetFreq", _wrap_Pluck_GetFreq},
    { "GetDecay", _wrap_Pluck_GetDecay},
    { "GetDamp", _wrap_Pluck_GetDamp},
    { "GetMode", _wrap_Pluck_GetMode},
    {0,0}
};
static swig_lua_method swig_Pluck_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Pluck_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Pluck_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Pluck_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Pluck_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Pluck_Sf_SwigStatic = {
    "Pluck",
    swig_Pluck_Sf_SwigStatic_methods,
    swig_Pluck_Sf_SwigStatic_attributes,
    swig_Pluck_Sf_SwigStatic_constants,
    swig_Pluck_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Pluck_bases[] = {0};
static const char *swig_Pluck_base_names[] = {0};
static swig_lua_class _wrap_class_Pluck = { "Pluck", "Pluck", &SWIGTYPE_p_daisysp__Pluck,_proxy__wrap_new_Pluck, swig_delete_Pluck, swig_Pluck_methods, swig_Pluck_attributes, &swig_Pluck_Sf_SwigStatic, swig_Pluck_meta, swig_Pluck_bases, swig_Pluck_base_names };

static int _wrap_new_Resonator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Resonator *result = 0 ;
  
  SWIG_check_num_args("daisysp::Resonator::Resonator",0,0)
  result = (daisysp::Resonator *)new daisysp::Resonator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Resonator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Resonator *arg1 = (daisysp::Resonator *) 0 ;
  float arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("daisysp::Resonator::Init",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Resonator::Init",1,"daisysp::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Resonator::Init",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Resonator::Init",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::Resonator::Init",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Resonator,0))){
    SWIG_fail_ptr("Resonator_Init",1,SWIGTYPE_p_daisysp__Resonator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->Init(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Resonator *arg1 = (daisysp::Resonator *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Resonator::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Resonator::Process",1,"daisysp::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Resonator::Process",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Resonator,0))){
    SWIG_fail_ptr("Resonator_Process",1,SWIGTYPE_p_daisysp__Resonator);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Resonator *arg1 = (daisysp::Resonator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Resonator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Resonator::SetFreq",1,"daisysp::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Resonator::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Resonator,0))){
    SWIG_fail_ptr("Resonator_SetFreq",1,SWIGTYPE_p_daisysp__Resonator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_SetStructure(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Resonator *arg1 = (daisysp::Resonator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Resonator::SetStructure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Resonator::SetStructure",1,"daisysp::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Resonator::SetStructure",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Resonator,0))){
    SWIG_fail_ptr("Resonator_SetStructure",1,SWIGTYPE_p_daisysp__Resonator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetStructure(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_SetBrightness(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Resonator *arg1 = (daisysp::Resonator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Resonator::SetBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Resonator::SetBrightness",1,"daisysp::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Resonator::SetBrightness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Resonator,0))){
    SWIG_fail_ptr("Resonator_SetBrightness",1,SWIGTYPE_p_daisysp__Resonator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetBrightness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Resonator_SetDamping(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Resonator *arg1 = (daisysp::Resonator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Resonator::SetDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Resonator::SetDamping",1,"daisysp::Resonator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Resonator::SetDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Resonator,0))){
    SWIG_fail_ptr("Resonator_SetDamping",1,SWIGTYPE_p_daisysp__Resonator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Resonator(void *obj) {
daisysp::Resonator *arg1 = (daisysp::Resonator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Resonator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Resonator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Resonator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Resonator_methods[]= {
    { "Init", _wrap_Resonator_Init},
    { "Process", _wrap_Resonator_Process},
    { "SetFreq", _wrap_Resonator_SetFreq},
    { "SetStructure", _wrap_Resonator_SetStructure},
    { "SetBrightness", _wrap_Resonator_SetBrightness},
    { "SetDamping", _wrap_Resonator_SetDamping},
    {0,0}
};
static swig_lua_method swig_Resonator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Resonator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Resonator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Resonator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Resonator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Resonator_Sf_SwigStatic = {
    "Resonator",
    swig_Resonator_Sf_SwigStatic_methods,
    swig_Resonator_Sf_SwigStatic_attributes,
    swig_Resonator_Sf_SwigStatic_constants,
    swig_Resonator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Resonator_bases[] = {0};
static const char *swig_Resonator_base_names[] = {0};
static swig_lua_class _wrap_class_Resonator = { "Resonator", "Resonator", &SWIGTYPE_p_daisysp__Resonator,_proxy__wrap_new_Resonator, swig_delete_Resonator, swig_Resonator_methods, swig_Resonator_attributes, &swig_Resonator_Sf_SwigStatic, swig_Resonator_meta, swig_Resonator_bases, swig_Resonator_base_names };

static int _wrap_new_String(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *result = 0 ;
  
  SWIG_check_num_args("daisysp::String::String",0,0)
  result = (daisysp::String *)new daisysp::String();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__String,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *arg1 = (daisysp::String *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::String::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::String::Init",1,"daisysp::String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::String::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__String,0))){
    SWIG_fail_ptr("String_Init",1,SWIGTYPE_p_daisysp__String);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_Reset(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *arg1 = (daisysp::String *) 0 ;
  
  SWIG_check_num_args("daisysp::String::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::String::Reset",1,"daisysp::String *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__String,0))){
    SWIG_fail_ptr("String_Reset",1,SWIGTYPE_p_daisysp__String);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *arg1 = (daisysp::String *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::String::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::String::Process",1,"daisysp::String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::String::Process",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__String,0))){
    SWIG_fail_ptr("String_Process",1,SWIGTYPE_p_daisysp__String);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *arg1 = (daisysp::String *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::String::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::String::SetFreq",1,"daisysp::String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::String::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__String,0))){
    SWIG_fail_ptr("String_SetFreq",1,SWIGTYPE_p_daisysp__String);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_SetNonLinearity(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *arg1 = (daisysp::String *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::String::SetNonLinearity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::String::SetNonLinearity",1,"daisysp::String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::String::SetNonLinearity",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__String,0))){
    SWIG_fail_ptr("String_SetNonLinearity",1,SWIGTYPE_p_daisysp__String);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetNonLinearity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_SetBrightness(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *arg1 = (daisysp::String *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::String::SetBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::String::SetBrightness",1,"daisysp::String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::String::SetBrightness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__String,0))){
    SWIG_fail_ptr("String_SetBrightness",1,SWIGTYPE_p_daisysp__String);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetBrightness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_String_SetDamping(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::String *arg1 = (daisysp::String *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::String::SetDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::String::SetDamping",1,"daisysp::String *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::String::SetDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__String,0))){
    SWIG_fail_ptr("String_SetDamping",1,SWIGTYPE_p_daisysp__String);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_String(void *obj) {
daisysp::String *arg1 = (daisysp::String *) obj;
delete arg1;
}
static int _proxy__wrap_new_String(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_String);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_String_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_String_methods[]= {
    { "Init", _wrap_String_Init},
    { "Reset", _wrap_String_Reset},
    { "Process", _wrap_String_Process},
    { "SetFreq", _wrap_String_SetFreq},
    { "SetNonLinearity", _wrap_String_SetNonLinearity},
    { "SetBrightness", _wrap_String_SetBrightness},
    { "SetDamping", _wrap_String_SetDamping},
    {0,0}
};
static swig_lua_method swig_String_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_String_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_String_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_String_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_String_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_String_Sf_SwigStatic = {
    "String",
    swig_String_Sf_SwigStatic_methods,
    swig_String_Sf_SwigStatic_attributes,
    swig_String_Sf_SwigStatic_constants,
    swig_String_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_String_bases[] = {0};
static const char *swig_String_base_names[] = {0};
static swig_lua_class _wrap_class_String = { "String", "String", &SWIGTYPE_p_daisysp__String,_proxy__wrap_new_String, swig_delete_String, swig_String_methods, swig_String_attributes, &swig_String_Sf_SwigStatic, swig_String_meta, swig_String_bases, swig_String_base_names };

static int _wrap_new_StringVoice(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *result = 0 ;
  
  SWIG_check_num_args("daisysp::StringVoice::StringVoice",0,0)
  result = (daisysp::StringVoice *)new daisysp::StringVoice();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__StringVoice,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::StringVoice::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::Init",1,"daisysp::StringVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::StringVoice::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_Init",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_Reset(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  
  SWIG_check_num_args("daisysp::StringVoice::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::Reset",1,"daisysp::StringVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_Reset",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::StringVoice::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::Process",1,"daisysp::StringVoice *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::StringVoice::Process",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_Process",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::StringVoice::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::Process",1,"daisysp::StringVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_Process",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_Process(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__StringVoice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_StringVoice_Process__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__StringVoice, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_StringVoice_Process__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'StringVoice_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::StringVoice::Process(bool)\n"
    "    daisysp::StringVoice::Process()\n");
  lua_error(L);return 0;
}


static int _wrap_StringVoice_SetSustain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::StringVoice::SetSustain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::SetSustain",1,"daisysp::StringVoice *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::StringVoice::SetSustain",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_SetSustain",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSustain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_Trig(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  
  SWIG_check_num_args("daisysp::StringVoice::Trig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::Trig",1,"daisysp::StringVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_Trig",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  (arg1)->Trig();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::StringVoice::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::SetFreq",1,"daisysp::StringVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::StringVoice::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_SetFreq",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_SetAccent(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::StringVoice::SetAccent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::SetAccent",1,"daisysp::StringVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::StringVoice::SetAccent",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_SetAccent",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAccent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_SetStructure(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::StringVoice::SetStructure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::SetStructure",1,"daisysp::StringVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::StringVoice::SetStructure",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_SetStructure",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetStructure(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_SetBrightness(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::StringVoice::SetBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::SetBrightness",1,"daisysp::StringVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::StringVoice::SetBrightness",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_SetBrightness",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetBrightness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_SetDamping(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::StringVoice::SetDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::SetDamping",1,"daisysp::StringVoice *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::StringVoice::SetDamping",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_SetDamping",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVoice_GetAux(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::StringVoice *arg1 = (daisysp::StringVoice *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::StringVoice::GetAux",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::StringVoice::GetAux",1,"daisysp::StringVoice *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__StringVoice,0))){
    SWIG_fail_ptr("StringVoice_GetAux",1,SWIGTYPE_p_daisysp__StringVoice);
  }
  
  result = (float)(arg1)->GetAux();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringVoice(void *obj) {
daisysp::StringVoice *arg1 = (daisysp::StringVoice *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringVoice(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringVoice);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringVoice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StringVoice_methods[]= {
    { "Init", _wrap_StringVoice_Init},
    { "Reset", _wrap_StringVoice_Reset},
    { "Process", _wrap_StringVoice_Process},
    { "SetSustain", _wrap_StringVoice_SetSustain},
    { "Trig", _wrap_StringVoice_Trig},
    { "SetFreq", _wrap_StringVoice_SetFreq},
    { "SetAccent", _wrap_StringVoice_SetAccent},
    { "SetStructure", _wrap_StringVoice_SetStructure},
    { "SetBrightness", _wrap_StringVoice_SetBrightness},
    { "SetDamping", _wrap_StringVoice_SetDamping},
    { "GetAux", _wrap_StringVoice_GetAux},
    {0,0}
};
static swig_lua_method swig_StringVoice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StringVoice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringVoice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringVoice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringVoice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringVoice_Sf_SwigStatic = {
    "StringVoice",
    swig_StringVoice_Sf_SwigStatic_methods,
    swig_StringVoice_Sf_SwigStatic_attributes,
    swig_StringVoice_Sf_SwigStatic_constants,
    swig_StringVoice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringVoice_bases[] = {0};
static const char *swig_StringVoice_base_names[] = {0};
static swig_lua_class _wrap_class_StringVoice = { "StringVoice", "StringVoice", &SWIGTYPE_p_daisysp__StringVoice,_proxy__wrap_new_StringVoice, swig_delete_StringVoice, swig_StringVoice_methods, swig_StringVoice_attributes, &swig_StringVoice_Sf_SwigStatic, swig_StringVoice_meta, swig_StringVoice_bases, swig_StringVoice_base_names };

static int _wrap_new_BlOsc(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *result = 0 ;
  
  SWIG_check_num_args("daisysp::BlOsc::BlOsc",0,0)
  result = (daisysp::BlOsc *)new daisysp::BlOsc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__BlOsc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlOsc_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *arg1 = (daisysp::BlOsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::BlOsc::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::BlOsc::Init",1,"daisysp::BlOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::BlOsc::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__BlOsc,0))){
    SWIG_fail_ptr("BlOsc_Init",1,SWIGTYPE_p_daisysp__BlOsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlOsc_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *arg1 = (daisysp::BlOsc *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::BlOsc::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::BlOsc::Process",1,"daisysp::BlOsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__BlOsc,0))){
    SWIG_fail_ptr("BlOsc_Process",1,SWIGTYPE_p_daisysp__BlOsc);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlOsc_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *arg1 = (daisysp::BlOsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::BlOsc::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::BlOsc::SetFreq",1,"daisysp::BlOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::BlOsc::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__BlOsc,0))){
    SWIG_fail_ptr("BlOsc_SetFreq",1,SWIGTYPE_p_daisysp__BlOsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlOsc_SetAmp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *arg1 = (daisysp::BlOsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::BlOsc::SetAmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::BlOsc::SetAmp",1,"daisysp::BlOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::BlOsc::SetAmp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__BlOsc,0))){
    SWIG_fail_ptr("BlOsc_SetAmp",1,SWIGTYPE_p_daisysp__BlOsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAmp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlOsc_SetPw(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *arg1 = (daisysp::BlOsc *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::BlOsc::SetPw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::BlOsc::SetPw",1,"daisysp::BlOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::BlOsc::SetPw",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__BlOsc,0))){
    SWIG_fail_ptr("BlOsc_SetPw",1,SWIGTYPE_p_daisysp__BlOsc);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlOsc_SetWaveform(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *arg1 = (daisysp::BlOsc *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("daisysp::BlOsc::SetWaveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::BlOsc::SetWaveform",1,"daisysp::BlOsc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::BlOsc::SetWaveform",2,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__BlOsc,0))){
    SWIG_fail_ptr("BlOsc_SetWaveform",1,SWIGTYPE_p_daisysp__BlOsc);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t)lua_tonumber(L, 2);
  (arg1)->SetWaveform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BlOsc_Reset(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::BlOsc *arg1 = (daisysp::BlOsc *) 0 ;
  
  SWIG_check_num_args("daisysp::BlOsc::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::BlOsc::Reset",1,"daisysp::BlOsc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__BlOsc,0))){
    SWIG_fail_ptr("BlOsc_Reset",1,SWIGTYPE_p_daisysp__BlOsc);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BlOsc(void *obj) {
daisysp::BlOsc *arg1 = (daisysp::BlOsc *) obj;
delete arg1;
}
static int _proxy__wrap_new_BlOsc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BlOsc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BlOsc_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BlOsc_methods[]= {
    { "Init", _wrap_BlOsc_Init},
    { "Process", _wrap_BlOsc_Process},
    { "SetFreq", _wrap_BlOsc_SetFreq},
    { "SetAmp", _wrap_BlOsc_SetAmp},
    { "SetPw", _wrap_BlOsc_SetPw},
    { "SetWaveform", _wrap_BlOsc_SetWaveform},
    { "Reset", _wrap_BlOsc_Reset},
    {0,0}
};
static swig_lua_method swig_BlOsc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BlOsc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BlOsc_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("WAVE_TRIANGLE", daisysp::BlOsc::WAVE_TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_SAW", daisysp::BlOsc::WAVE_SAW)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_SQUARE", daisysp::BlOsc::WAVE_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_OFF", daisysp::BlOsc::WAVE_OFF)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BlOsc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BlOsc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BlOsc_Sf_SwigStatic = {
    "BlOsc",
    swig_BlOsc_Sf_SwigStatic_methods,
    swig_BlOsc_Sf_SwigStatic_attributes,
    swig_BlOsc_Sf_SwigStatic_constants,
    swig_BlOsc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BlOsc_bases[] = {0};
static const char *swig_BlOsc_base_names[] = {0};
static swig_lua_class _wrap_class_BlOsc = { "BlOsc", "BlOsc", &SWIGTYPE_p_daisysp__BlOsc,_proxy__wrap_new_BlOsc, swig_delete_BlOsc, swig_BlOsc_methods, swig_BlOsc_attributes, &swig_BlOsc_Sf_SwigStatic, swig_BlOsc_meta, swig_BlOsc_bases, swig_BlOsc_base_names };

static int _wrap_new_Fm2(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *result = 0 ;
  
  SWIG_check_num_args("daisysp::Fm2::Fm2",0,0)
  result = (daisysp::Fm2 *)new daisysp::Fm2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Fm2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fm2_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *arg1 = (daisysp::Fm2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Fm2::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fm2::Init",1,"daisysp::Fm2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Fm2::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fm2,0))){
    SWIG_fail_ptr("Fm2_Init",1,SWIGTYPE_p_daisysp__Fm2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fm2_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *arg1 = (daisysp::Fm2 *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Fm2::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fm2::Process",1,"daisysp::Fm2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fm2,0))){
    SWIG_fail_ptr("Fm2_Process",1,SWIGTYPE_p_daisysp__Fm2);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fm2_SetFrequency(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *arg1 = (daisysp::Fm2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Fm2::SetFrequency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fm2::SetFrequency",1,"daisysp::Fm2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Fm2::SetFrequency",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fm2,0))){
    SWIG_fail_ptr("Fm2_SetFrequency",1,SWIGTYPE_p_daisysp__Fm2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFrequency(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fm2_SetRatio(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *arg1 = (daisysp::Fm2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Fm2::SetRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fm2::SetRatio",1,"daisysp::Fm2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Fm2::SetRatio",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fm2,0))){
    SWIG_fail_ptr("Fm2_SetRatio",1,SWIGTYPE_p_daisysp__Fm2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetRatio(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fm2_SetIndex(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *arg1 = (daisysp::Fm2 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Fm2::SetIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fm2::SetIndex",1,"daisysp::Fm2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Fm2::SetIndex",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fm2,0))){
    SWIG_fail_ptr("Fm2_SetIndex",1,SWIGTYPE_p_daisysp__Fm2);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetIndex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fm2_GetIndex(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *arg1 = (daisysp::Fm2 *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Fm2::GetIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fm2::GetIndex",1,"daisysp::Fm2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fm2,0))){
    SWIG_fail_ptr("Fm2_GetIndex",1,SWIGTYPE_p_daisysp__Fm2);
  }
  
  result = (float)(arg1)->GetIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Fm2_Reset(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Fm2 *arg1 = (daisysp::Fm2 *) 0 ;
  
  SWIG_check_num_args("daisysp::Fm2::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Fm2::Reset",1,"daisysp::Fm2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Fm2,0))){
    SWIG_fail_ptr("Fm2_Reset",1,SWIGTYPE_p_daisysp__Fm2);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Fm2(void *obj) {
daisysp::Fm2 *arg1 = (daisysp::Fm2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Fm2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Fm2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Fm2_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Fm2_methods[]= {
    { "Init", _wrap_Fm2_Init},
    { "Process", _wrap_Fm2_Process},
    { "SetFrequency", _wrap_Fm2_SetFrequency},
    { "SetRatio", _wrap_Fm2_SetRatio},
    { "SetIndex", _wrap_Fm2_SetIndex},
    { "GetIndex", _wrap_Fm2_GetIndex},
    { "Reset", _wrap_Fm2_Reset},
    {0,0}
};
static swig_lua_method swig_Fm2_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Fm2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Fm2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Fm2_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Fm2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Fm2_Sf_SwigStatic = {
    "Fm2",
    swig_Fm2_Sf_SwigStatic_methods,
    swig_Fm2_Sf_SwigStatic_attributes,
    swig_Fm2_Sf_SwigStatic_constants,
    swig_Fm2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Fm2_bases[] = {0};
static const char *swig_Fm2_base_names[] = {0};
static swig_lua_class _wrap_class_Fm2 = { "Fm2", "Fm2", &SWIGTYPE_p_daisysp__Fm2,_proxy__wrap_new_Fm2, swig_delete_Fm2, swig_Fm2_methods, swig_Fm2_attributes, &swig_Fm2_Sf_SwigStatic, swig_Fm2_meta, swig_Fm2_bases, swig_Fm2_base_names };

static int _wrap_new_FormantOscillator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::FormantOscillator *result = 0 ;
  
  SWIG_check_num_args("daisysp::FormantOscillator::FormantOscillator",0,0)
  result = (daisysp::FormantOscillator *)new daisysp::FormantOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__FormantOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantOscillator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::FormantOscillator *arg1 = (daisysp::FormantOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::FormantOscillator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::FormantOscillator::Init",1,"daisysp::FormantOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::FormantOscillator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__FormantOscillator,0))){
    SWIG_fail_ptr("FormantOscillator_Init",1,SWIGTYPE_p_daisysp__FormantOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantOscillator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::FormantOscillator *arg1 = (daisysp::FormantOscillator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::FormantOscillator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::FormantOscillator::Process",1,"daisysp::FormantOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__FormantOscillator,0))){
    SWIG_fail_ptr("FormantOscillator_Process",1,SWIGTYPE_p_daisysp__FormantOscillator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantOscillator_SetFormantFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::FormantOscillator *arg1 = (daisysp::FormantOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::FormantOscillator::SetFormantFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::FormantOscillator::SetFormantFreq",1,"daisysp::FormantOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::FormantOscillator::SetFormantFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__FormantOscillator,0))){
    SWIG_fail_ptr("FormantOscillator_SetFormantFreq",1,SWIGTYPE_p_daisysp__FormantOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFormantFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantOscillator_SetCarrierFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::FormantOscillator *arg1 = (daisysp::FormantOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::FormantOscillator::SetCarrierFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::FormantOscillator::SetCarrierFreq",1,"daisysp::FormantOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::FormantOscillator::SetCarrierFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__FormantOscillator,0))){
    SWIG_fail_ptr("FormantOscillator_SetCarrierFreq",1,SWIGTYPE_p_daisysp__FormantOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCarrierFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormantOscillator_SetPhaseShift(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::FormantOscillator *arg1 = (daisysp::FormantOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::FormantOscillator::SetPhaseShift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::FormantOscillator::SetPhaseShift",1,"daisysp::FormantOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::FormantOscillator::SetPhaseShift",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__FormantOscillator,0))){
    SWIG_fail_ptr("FormantOscillator_SetPhaseShift",1,SWIGTYPE_p_daisysp__FormantOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPhaseShift(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FormantOscillator(void *obj) {
daisysp::FormantOscillator *arg1 = (daisysp::FormantOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_FormantOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FormantOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FormantOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FormantOscillator_methods[]= {
    { "Init", _wrap_FormantOscillator_Init},
    { "Process", _wrap_FormantOscillator_Process},
    { "SetFormantFreq", _wrap_FormantOscillator_SetFormantFreq},
    { "SetCarrierFreq", _wrap_FormantOscillator_SetCarrierFreq},
    { "SetPhaseShift", _wrap_FormantOscillator_SetPhaseShift},
    {0,0}
};
static swig_lua_method swig_FormantOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FormantOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FormantOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FormantOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FormantOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FormantOscillator_Sf_SwigStatic = {
    "FormantOscillator",
    swig_FormantOscillator_Sf_SwigStatic_methods,
    swig_FormantOscillator_Sf_SwigStatic_attributes,
    swig_FormantOscillator_Sf_SwigStatic_constants,
    swig_FormantOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FormantOscillator_bases[] = {0};
static const char *swig_FormantOscillator_base_names[] = {0};
static swig_lua_class _wrap_class_FormantOscillator = { "FormantOscillator", "FormantOscillator", &SWIGTYPE_p_daisysp__FormantOscillator,_proxy__wrap_new_FormantOscillator, swig_delete_FormantOscillator, swig_FormantOscillator_methods, swig_FormantOscillator_attributes, &swig_FormantOscillator_Sf_SwigStatic, swig_FormantOscillator_meta, swig_FormantOscillator_bases, swig_FormantOscillator_base_names };

static int _wrap_new_Oscillator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *result = 0 ;
  
  SWIG_check_num_args("daisysp::Oscillator::Oscillator",0,0)
  result = (daisysp::Oscillator *)new daisysp::Oscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Oscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Oscillator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::Init",1,"daisysp::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Oscillator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_Init",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Oscillator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::SetFreq",1,"daisysp::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Oscillator::SetFreq",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_SetFreq",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_SetAmp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Oscillator::SetAmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::SetAmp",1,"daisysp::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Oscillator::SetAmp",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_SetAmp",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  (arg1)->SetAmp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_SetWaveform(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  uint8_t arg2 ;
  
  SWIG_check_num_args("daisysp::Oscillator::SetWaveform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::SetWaveform",1,"daisysp::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Oscillator::SetWaveform",2,"uint8_t const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_SetWaveform",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (uint8_t const)lua_tonumber(L, 2);
  (arg1)->SetWaveform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_IsEOR(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Oscillator::IsEOR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::IsEOR",1,"daisysp::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_IsEOR",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  result = (bool)(arg1)->IsEOR();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_IsEOC(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Oscillator::IsEOC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::IsEOC",1,"daisysp::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_IsEOC",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  result = (bool)(arg1)->IsEOC();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_IsRising(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Oscillator::IsRising",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::IsRising",1,"daisysp::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_IsRising",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  result = (bool)(arg1)->IsRising();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_IsFalling(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Oscillator::IsFalling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::IsFalling",1,"daisysp::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_IsFalling",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  result = (bool)(arg1)->IsFalling();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Oscillator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::Process",1,"daisysp::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_Process",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_PhaseAdd(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Oscillator::PhaseAdd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::PhaseAdd",1,"daisysp::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Oscillator::PhaseAdd",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_PhaseAdd",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->PhaseAdd(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_Reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Oscillator::Reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::Reset",1,"daisysp::Oscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Oscillator::Reset",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_Reset",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_Reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Oscillator *arg1 = (daisysp::Oscillator *) 0 ;
  
  SWIG_check_num_args("daisysp::Oscillator::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Oscillator::Reset",1,"daisysp::Oscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Oscillator,0))){
    SWIG_fail_ptr("Oscillator_Reset",1,SWIGTYPE_p_daisysp__Oscillator);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Oscillator_Reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Oscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Oscillator_Reset__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__Oscillator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Oscillator_Reset__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Oscillator_Reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::Oscillator::Reset(float)\n"
    "    daisysp::Oscillator::Reset()\n");
  lua_error(L);return 0;
}


static void swig_delete_Oscillator(void *obj) {
daisysp::Oscillator *arg1 = (daisysp::Oscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_Oscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Oscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Oscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Oscillator_methods[]= {
    { "Init", _wrap_Oscillator_Init},
    { "SetFreq", _wrap_Oscillator_SetFreq},
    { "SetAmp", _wrap_Oscillator_SetAmp},
    { "SetWaveform", _wrap_Oscillator_SetWaveform},
    { "IsEOR", _wrap_Oscillator_IsEOR},
    { "IsEOC", _wrap_Oscillator_IsEOC},
    { "IsRising", _wrap_Oscillator_IsRising},
    { "IsFalling", _wrap_Oscillator_IsFalling},
    { "Process", _wrap_Oscillator_Process},
    { "PhaseAdd", _wrap_Oscillator_PhaseAdd},
    { "Reset", _wrap_Oscillator_Reset},
    {0,0}
};
static swig_lua_method swig_Oscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Oscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Oscillator_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("WAVE_SIN", daisysp::Oscillator::WAVE_SIN)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_TRI", daisysp::Oscillator::WAVE_TRI)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_SAW", daisysp::Oscillator::WAVE_SAW)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_RAMP", daisysp::Oscillator::WAVE_RAMP)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_SQUARE", daisysp::Oscillator::WAVE_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_POLYBLEP_TRI", daisysp::Oscillator::WAVE_POLYBLEP_TRI)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_POLYBLEP_SAW", daisysp::Oscillator::WAVE_POLYBLEP_SAW)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_POLYBLEP_SQUARE", daisysp::Oscillator::WAVE_POLYBLEP_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("WAVE_LAST", daisysp::Oscillator::WAVE_LAST)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Oscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Oscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Oscillator_Sf_SwigStatic = {
    "Oscillator",
    swig_Oscillator_Sf_SwigStatic_methods,
    swig_Oscillator_Sf_SwigStatic_attributes,
    swig_Oscillator_Sf_SwigStatic_constants,
    swig_Oscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Oscillator_bases[] = {0};
static const char *swig_Oscillator_base_names[] = {0};
static swig_lua_class _wrap_class_Oscillator = { "Oscillator", "Oscillator", &SWIGTYPE_p_daisysp__Oscillator,_proxy__wrap_new_Oscillator, swig_delete_Oscillator, swig_Oscillator_methods, swig_Oscillator_attributes, &swig_Oscillator_Sf_SwigStatic, swig_Oscillator_meta, swig_Oscillator_bases, swig_Oscillator_base_names };

static int _wrap_new_OscillatorBank(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::OscillatorBank *result = 0 ;
  
  SWIG_check_num_args("daisysp::OscillatorBank::OscillatorBank",0,0)
  result = (daisysp::OscillatorBank *)new daisysp::OscillatorBank();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__OscillatorBank,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorBank_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::OscillatorBank *arg1 = (daisysp::OscillatorBank *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::OscillatorBank::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::OscillatorBank::Init",1,"daisysp::OscillatorBank *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::OscillatorBank::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__OscillatorBank,0))){
    SWIG_fail_ptr("OscillatorBank_Init",1,SWIGTYPE_p_daisysp__OscillatorBank);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorBank_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::OscillatorBank *arg1 = (daisysp::OscillatorBank *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::OscillatorBank::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::OscillatorBank::Process",1,"daisysp::OscillatorBank *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__OscillatorBank,0))){
    SWIG_fail_ptr("OscillatorBank_Process",1,SWIGTYPE_p_daisysp__OscillatorBank);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorBank_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::OscillatorBank *arg1 = (daisysp::OscillatorBank *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::OscillatorBank::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::OscillatorBank::SetFreq",1,"daisysp::OscillatorBank *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::OscillatorBank::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__OscillatorBank,0))){
    SWIG_fail_ptr("OscillatorBank_SetFreq",1,SWIGTYPE_p_daisysp__OscillatorBank);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorBank_SetAmplitudes(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::OscillatorBank *arg1 = (daisysp::OscillatorBank *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("daisysp::OscillatorBank::SetAmplitudes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::OscillatorBank::SetAmplitudes",1,"daisysp::OscillatorBank *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::OscillatorBank::SetAmplitudes",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__OscillatorBank,0))){
    SWIG_fail_ptr("OscillatorBank_SetAmplitudes",1,SWIGTYPE_p_daisysp__OscillatorBank);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OscillatorBank_SetAmplitudes",2,SWIGTYPE_p_float);
  }
  
  (arg1)->SetAmplitudes((float const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorBank_SetSingleAmp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::OscillatorBank *arg1 = (daisysp::OscillatorBank *) 0 ;
  float arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("daisysp::OscillatorBank::SetSingleAmp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::OscillatorBank::SetSingleAmp",1,"daisysp::OscillatorBank *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::OscillatorBank::SetSingleAmp",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::OscillatorBank::SetSingleAmp",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__OscillatorBank,0))){
    SWIG_fail_ptr("OscillatorBank_SetSingleAmp",1,SWIGTYPE_p_daisysp__OscillatorBank);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetSingleAmp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OscillatorBank_SetGain(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::OscillatorBank *arg1 = (daisysp::OscillatorBank *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::OscillatorBank::SetGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::OscillatorBank::SetGain",1,"daisysp::OscillatorBank *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::OscillatorBank::SetGain",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__OscillatorBank,0))){
    SWIG_fail_ptr("OscillatorBank_SetGain",1,SWIGTYPE_p_daisysp__OscillatorBank);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OscillatorBank(void *obj) {
daisysp::OscillatorBank *arg1 = (daisysp::OscillatorBank *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscillatorBank(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscillatorBank);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscillatorBank_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OscillatorBank_methods[]= {
    { "Init", _wrap_OscillatorBank_Init},
    { "Process", _wrap_OscillatorBank_Process},
    { "SetFreq", _wrap_OscillatorBank_SetFreq},
    { "SetAmplitudes", _wrap_OscillatorBank_SetAmplitudes},
    { "SetSingleAmp", _wrap_OscillatorBank_SetSingleAmp},
    { "SetGain", _wrap_OscillatorBank_SetGain},
    {0,0}
};
static swig_lua_method swig_OscillatorBank_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscillatorBank_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscillatorBank_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscillatorBank_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscillatorBank_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscillatorBank_Sf_SwigStatic = {
    "OscillatorBank",
    swig_OscillatorBank_Sf_SwigStatic_methods,
    swig_OscillatorBank_Sf_SwigStatic_attributes,
    swig_OscillatorBank_Sf_SwigStatic_constants,
    swig_OscillatorBank_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscillatorBank_bases[] = {0};
static const char *swig_OscillatorBank_base_names[] = {0};
static swig_lua_class _wrap_class_OscillatorBank = { "OscillatorBank", "OscillatorBank", &SWIGTYPE_p_daisysp__OscillatorBank,_proxy__wrap_new_OscillatorBank, swig_delete_OscillatorBank, swig_OscillatorBank_methods, swig_OscillatorBank_attributes, &swig_OscillatorBank_Sf_SwigStatic, swig_OscillatorBank_meta, swig_OscillatorBank_bases, swig_OscillatorBank_base_names };

static int _wrap_new_VariableSawOscillator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableSawOscillator *result = 0 ;
  
  SWIG_check_num_args("daisysp::VariableSawOscillator::VariableSawOscillator",0,0)
  result = (daisysp::VariableSawOscillator *)new daisysp::VariableSawOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__VariableSawOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableSawOscillator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableSawOscillator *arg1 = (daisysp::VariableSawOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableSawOscillator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableSawOscillator::Init",1,"daisysp::VariableSawOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableSawOscillator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableSawOscillator,0))){
    SWIG_fail_ptr("VariableSawOscillator_Init",1,SWIGTYPE_p_daisysp__VariableSawOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableSawOscillator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableSawOscillator *arg1 = (daisysp::VariableSawOscillator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::VariableSawOscillator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableSawOscillator::Process",1,"daisysp::VariableSawOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableSawOscillator,0))){
    SWIG_fail_ptr("VariableSawOscillator_Process",1,SWIGTYPE_p_daisysp__VariableSawOscillator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableSawOscillator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableSawOscillator *arg1 = (daisysp::VariableSawOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableSawOscillator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableSawOscillator::SetFreq",1,"daisysp::VariableSawOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableSawOscillator::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableSawOscillator,0))){
    SWIG_fail_ptr("VariableSawOscillator_SetFreq",1,SWIGTYPE_p_daisysp__VariableSawOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableSawOscillator_SetPW(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableSawOscillator *arg1 = (daisysp::VariableSawOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableSawOscillator::SetPW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableSawOscillator::SetPW",1,"daisysp::VariableSawOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableSawOscillator::SetPW",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableSawOscillator,0))){
    SWIG_fail_ptr("VariableSawOscillator_SetPW",1,SWIGTYPE_p_daisysp__VariableSawOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPW(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableSawOscillator_SetWaveshape(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableSawOscillator *arg1 = (daisysp::VariableSawOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableSawOscillator::SetWaveshape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableSawOscillator::SetWaveshape",1,"daisysp::VariableSawOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableSawOscillator::SetWaveshape",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableSawOscillator,0))){
    SWIG_fail_ptr("VariableSawOscillator_SetWaveshape",1,SWIGTYPE_p_daisysp__VariableSawOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetWaveshape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VariableSawOscillator(void *obj) {
daisysp::VariableSawOscillator *arg1 = (daisysp::VariableSawOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_VariableSawOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VariableSawOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VariableSawOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VariableSawOscillator_methods[]= {
    { "Init", _wrap_VariableSawOscillator_Init},
    { "Process", _wrap_VariableSawOscillator_Process},
    { "SetFreq", _wrap_VariableSawOscillator_SetFreq},
    { "SetPW", _wrap_VariableSawOscillator_SetPW},
    { "SetWaveshape", _wrap_VariableSawOscillator_SetWaveshape},
    {0,0}
};
static swig_lua_method swig_VariableSawOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VariableSawOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VariableSawOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VariableSawOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VariableSawOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VariableSawOscillator_Sf_SwigStatic = {
    "VariableSawOscillator",
    swig_VariableSawOscillator_Sf_SwigStatic_methods,
    swig_VariableSawOscillator_Sf_SwigStatic_attributes,
    swig_VariableSawOscillator_Sf_SwigStatic_constants,
    swig_VariableSawOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VariableSawOscillator_bases[] = {0};
static const char *swig_VariableSawOscillator_base_names[] = {0};
static swig_lua_class _wrap_class_VariableSawOscillator = { "VariableSawOscillator", "VariableSawOscillator", &SWIGTYPE_p_daisysp__VariableSawOscillator,_proxy__wrap_new_VariableSawOscillator, swig_delete_VariableSawOscillator, swig_VariableSawOscillator_methods, swig_VariableSawOscillator_attributes, &swig_VariableSawOscillator_Sf_SwigStatic, swig_VariableSawOscillator_meta, swig_VariableSawOscillator_bases, swig_VariableSawOscillator_base_names };

static int _wrap_new_VariableShapeOscillator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *result = 0 ;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::VariableShapeOscillator",0,0)
  result = (daisysp::VariableShapeOscillator *)new daisysp::VariableShapeOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__VariableShapeOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableShapeOscillator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableShapeOscillator::Init",1,"daisysp::VariableShapeOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableShapeOscillator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableShapeOscillator,0))){
    SWIG_fail_ptr("VariableShapeOscillator_Init",1,SWIGTYPE_p_daisysp__VariableShapeOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableShapeOscillator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableShapeOscillator::Process",1,"daisysp::VariableShapeOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableShapeOscillator,0))){
    SWIG_fail_ptr("VariableShapeOscillator_Process",1,SWIGTYPE_p_daisysp__VariableShapeOscillator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableShapeOscillator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetFreq",1,"daisysp::VariableShapeOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableShapeOscillator,0))){
    SWIG_fail_ptr("VariableShapeOscillator_SetFreq",1,SWIGTYPE_p_daisysp__VariableShapeOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableShapeOscillator_SetPW(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::SetPW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetPW",1,"daisysp::VariableShapeOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetPW",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableShapeOscillator,0))){
    SWIG_fail_ptr("VariableShapeOscillator_SetPW",1,SWIGTYPE_p_daisysp__VariableShapeOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetPW(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableShapeOscillator_SetWaveshape(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::SetWaveshape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetWaveshape",1,"daisysp::VariableShapeOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetWaveshape",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableShapeOscillator,0))){
    SWIG_fail_ptr("VariableShapeOscillator_SetWaveshape",1,SWIGTYPE_p_daisysp__VariableShapeOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetWaveshape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableShapeOscillator_SetSync(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::SetSync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetSync",1,"daisysp::VariableShapeOscillator *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetSync",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableShapeOscillator,0))){
    SWIG_fail_ptr("VariableShapeOscillator_SetSync",1,SWIGTYPE_p_daisysp__VariableShapeOscillator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetSync(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VariableShapeOscillator_SetSyncFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VariableShapeOscillator::SetSyncFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetSyncFreq",1,"daisysp::VariableShapeOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VariableShapeOscillator::SetSyncFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VariableShapeOscillator,0))){
    SWIG_fail_ptr("VariableShapeOscillator_SetSyncFreq",1,SWIGTYPE_p_daisysp__VariableShapeOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetSyncFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VariableShapeOscillator(void *obj) {
daisysp::VariableShapeOscillator *arg1 = (daisysp::VariableShapeOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_VariableShapeOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VariableShapeOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VariableShapeOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VariableShapeOscillator_methods[]= {
    { "Init", _wrap_VariableShapeOscillator_Init},
    { "Process", _wrap_VariableShapeOscillator_Process},
    { "SetFreq", _wrap_VariableShapeOscillator_SetFreq},
    { "SetPW", _wrap_VariableShapeOscillator_SetPW},
    { "SetWaveshape", _wrap_VariableShapeOscillator_SetWaveshape},
    { "SetSync", _wrap_VariableShapeOscillator_SetSync},
    { "SetSyncFreq", _wrap_VariableShapeOscillator_SetSyncFreq},
    {0,0}
};
static swig_lua_method swig_VariableShapeOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VariableShapeOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VariableShapeOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VariableShapeOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VariableShapeOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VariableShapeOscillator_Sf_SwigStatic = {
    "VariableShapeOscillator",
    swig_VariableShapeOscillator_Sf_SwigStatic_methods,
    swig_VariableShapeOscillator_Sf_SwigStatic_attributes,
    swig_VariableShapeOscillator_Sf_SwigStatic_constants,
    swig_VariableShapeOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VariableShapeOscillator_bases[] = {0};
static const char *swig_VariableShapeOscillator_base_names[] = {0};
static swig_lua_class _wrap_class_VariableShapeOscillator = { "VariableShapeOscillator", "VariableShapeOscillator", &SWIGTYPE_p_daisysp__VariableShapeOscillator,_proxy__wrap_new_VariableShapeOscillator, swig_delete_VariableShapeOscillator, swig_VariableShapeOscillator_methods, swig_VariableShapeOscillator_attributes, &swig_VariableShapeOscillator_Sf_SwigStatic, swig_VariableShapeOscillator_meta, swig_VariableShapeOscillator_bases, swig_VariableShapeOscillator_base_names };

static int _wrap_new_VosimOscillator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VosimOscillator *result = 0 ;
  
  SWIG_check_num_args("daisysp::VosimOscillator::VosimOscillator",0,0)
  result = (daisysp::VosimOscillator *)new daisysp::VosimOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__VosimOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VosimOscillator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VosimOscillator *arg1 = (daisysp::VosimOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VosimOscillator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VosimOscillator::Init",1,"daisysp::VosimOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VosimOscillator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VosimOscillator,0))){
    SWIG_fail_ptr("VosimOscillator_Init",1,SWIGTYPE_p_daisysp__VosimOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VosimOscillator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VosimOscillator *arg1 = (daisysp::VosimOscillator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::VosimOscillator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VosimOscillator::Process",1,"daisysp::VosimOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VosimOscillator,0))){
    SWIG_fail_ptr("VosimOscillator_Process",1,SWIGTYPE_p_daisysp__VosimOscillator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VosimOscillator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VosimOscillator *arg1 = (daisysp::VosimOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VosimOscillator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VosimOscillator::SetFreq",1,"daisysp::VosimOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VosimOscillator::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VosimOscillator,0))){
    SWIG_fail_ptr("VosimOscillator_SetFreq",1,SWIGTYPE_p_daisysp__VosimOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VosimOscillator_SetForm1Freq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VosimOscillator *arg1 = (daisysp::VosimOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VosimOscillator::SetForm1Freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VosimOscillator::SetForm1Freq",1,"daisysp::VosimOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VosimOscillator::SetForm1Freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VosimOscillator,0))){
    SWIG_fail_ptr("VosimOscillator_SetForm1Freq",1,SWIGTYPE_p_daisysp__VosimOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetForm1Freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VosimOscillator_SetForm2Freq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VosimOscillator *arg1 = (daisysp::VosimOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VosimOscillator::SetForm2Freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VosimOscillator::SetForm2Freq",1,"daisysp::VosimOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VosimOscillator::SetForm2Freq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VosimOscillator,0))){
    SWIG_fail_ptr("VosimOscillator_SetForm2Freq",1,SWIGTYPE_p_daisysp__VosimOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetForm2Freq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VosimOscillator_SetShape(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::VosimOscillator *arg1 = (daisysp::VosimOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::VosimOscillator::SetShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::VosimOscillator::SetShape",1,"daisysp::VosimOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::VosimOscillator::SetShape",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__VosimOscillator,0))){
    SWIG_fail_ptr("VosimOscillator_SetShape",1,SWIGTYPE_p_daisysp__VosimOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VosimOscillator(void *obj) {
daisysp::VosimOscillator *arg1 = (daisysp::VosimOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_VosimOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VosimOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VosimOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VosimOscillator_methods[]= {
    { "Init", _wrap_VosimOscillator_Init},
    { "Process", _wrap_VosimOscillator_Process},
    { "SetFreq", _wrap_VosimOscillator_SetFreq},
    { "SetForm1Freq", _wrap_VosimOscillator_SetForm1Freq},
    { "SetForm2Freq", _wrap_VosimOscillator_SetForm2Freq},
    { "SetShape", _wrap_VosimOscillator_SetShape},
    {0,0}
};
static swig_lua_method swig_VosimOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VosimOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VosimOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VosimOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VosimOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VosimOscillator_Sf_SwigStatic = {
    "VosimOscillator",
    swig_VosimOscillator_Sf_SwigStatic_methods,
    swig_VosimOscillator_Sf_SwigStatic_attributes,
    swig_VosimOscillator_Sf_SwigStatic_constants,
    swig_VosimOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VosimOscillator_bases[] = {0};
static const char *swig_VosimOscillator_base_names[] = {0};
static swig_lua_class _wrap_class_VosimOscillator = { "VosimOscillator", "VosimOscillator", &SWIGTYPE_p_daisysp__VosimOscillator,_proxy__wrap_new_VosimOscillator, swig_delete_VosimOscillator, swig_VosimOscillator_methods, swig_VosimOscillator_attributes, &swig_VosimOscillator_Sf_SwigStatic, swig_VosimOscillator_meta, swig_VosimOscillator_bases, swig_VosimOscillator_base_names };

static int _wrap_new_ZOscillator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ZOscillator *result = 0 ;
  
  SWIG_check_num_args("daisysp::ZOscillator::ZOscillator",0,0)
  result = (daisysp::ZOscillator *)new daisysp::ZOscillator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__ZOscillator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZOscillator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ZOscillator *arg1 = (daisysp::ZOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ZOscillator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ZOscillator::Init",1,"daisysp::ZOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ZOscillator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ZOscillator,0))){
    SWIG_fail_ptr("ZOscillator_Init",1,SWIGTYPE_p_daisysp__ZOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZOscillator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ZOscillator *arg1 = (daisysp::ZOscillator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::ZOscillator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ZOscillator::Process",1,"daisysp::ZOscillator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ZOscillator,0))){
    SWIG_fail_ptr("ZOscillator_Process",1,SWIGTYPE_p_daisysp__ZOscillator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZOscillator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ZOscillator *arg1 = (daisysp::ZOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ZOscillator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ZOscillator::SetFreq",1,"daisysp::ZOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ZOscillator::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ZOscillator,0))){
    SWIG_fail_ptr("ZOscillator_SetFreq",1,SWIGTYPE_p_daisysp__ZOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZOscillator_SetFormantFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ZOscillator *arg1 = (daisysp::ZOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ZOscillator::SetFormantFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ZOscillator::SetFormantFreq",1,"daisysp::ZOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ZOscillator::SetFormantFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ZOscillator,0))){
    SWIG_fail_ptr("ZOscillator_SetFormantFreq",1,SWIGTYPE_p_daisysp__ZOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFormantFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZOscillator_SetShape(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ZOscillator *arg1 = (daisysp::ZOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ZOscillator::SetShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ZOscillator::SetShape",1,"daisysp::ZOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ZOscillator::SetShape",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ZOscillator,0))){
    SWIG_fail_ptr("ZOscillator_SetShape",1,SWIGTYPE_p_daisysp__ZOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZOscillator_SetMode(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::ZOscillator *arg1 = (daisysp::ZOscillator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::ZOscillator::SetMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::ZOscillator::SetMode",1,"daisysp::ZOscillator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::ZOscillator::SetMode",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__ZOscillator,0))){
    SWIG_fail_ptr("ZOscillator_SetMode",1,SWIGTYPE_p_daisysp__ZOscillator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ZOscillator(void *obj) {
daisysp::ZOscillator *arg1 = (daisysp::ZOscillator *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZOscillator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZOscillator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZOscillator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ZOscillator_methods[]= {
    { "Init", _wrap_ZOscillator_Init},
    { "Process", _wrap_ZOscillator_Process},
    { "SetFreq", _wrap_ZOscillator_SetFreq},
    { "SetFormantFreq", _wrap_ZOscillator_SetFormantFreq},
    { "SetShape", _wrap_ZOscillator_SetShape},
    { "SetMode", _wrap_ZOscillator_SetMode},
    {0,0}
};
static swig_lua_method swig_ZOscillator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZOscillator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZOscillator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZOscillator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZOscillator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZOscillator_Sf_SwigStatic = {
    "ZOscillator",
    swig_ZOscillator_Sf_SwigStatic_methods,
    swig_ZOscillator_Sf_SwigStatic_attributes,
    swig_ZOscillator_Sf_SwigStatic_constants,
    swig_ZOscillator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZOscillator_bases[] = {0};
static const char *swig_ZOscillator_base_names[] = {0};
static swig_lua_class _wrap_class_ZOscillator = { "ZOscillator", "ZOscillator", &SWIGTYPE_p_daisysp__ZOscillator,_proxy__wrap_new_ZOscillator, swig_delete_ZOscillator, swig_ZOscillator_methods, swig_ZOscillator_attributes, &swig_ZOscillator_Sf_SwigStatic, swig_ZOscillator_meta, swig_ZOscillator_bases, swig_ZOscillator_base_names };

static int _wrap_new_DcBlock(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::DcBlock *result = 0 ;
  
  SWIG_check_num_args("daisysp::DcBlock::DcBlock",0,0)
  result = (daisysp::DcBlock *)new daisysp::DcBlock();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__DcBlock,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DcBlock_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::DcBlock *arg1 = (daisysp::DcBlock *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::DcBlock::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::DcBlock::Init",1,"daisysp::DcBlock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::DcBlock::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__DcBlock,0))){
    SWIG_fail_ptr("DcBlock_Init",1,SWIGTYPE_p_daisysp__DcBlock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DcBlock_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::DcBlock *arg1 = (daisysp::DcBlock *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::DcBlock::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::DcBlock::Process",1,"daisysp::DcBlock *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::DcBlock::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__DcBlock,0))){
    SWIG_fail_ptr("DcBlock_Process",1,SWIGTYPE_p_daisysp__DcBlock);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DcBlock(void *obj) {
daisysp::DcBlock *arg1 = (daisysp::DcBlock *) obj;
delete arg1;
}
static int _proxy__wrap_new_DcBlock(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DcBlock);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DcBlock_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DcBlock_methods[]= {
    { "Init", _wrap_DcBlock_Init},
    { "Process", _wrap_DcBlock_Process},
    {0,0}
};
static swig_lua_method swig_DcBlock_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DcBlock_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DcBlock_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DcBlock_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DcBlock_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DcBlock_Sf_SwigStatic = {
    "DcBlock",
    swig_DcBlock_Sf_SwigStatic_methods,
    swig_DcBlock_Sf_SwigStatic_attributes,
    swig_DcBlock_Sf_SwigStatic_constants,
    swig_DcBlock_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DcBlock_bases[] = {0};
static const char *swig_DcBlock_base_names[] = {0};
static swig_lua_class _wrap_class_DcBlock = { "DcBlock", "DcBlock", &SWIGTYPE_p_daisysp__DcBlock,_proxy__wrap_new_DcBlock, swig_delete_DcBlock, swig_DcBlock_methods, swig_DcBlock_attributes, &swig_DcBlock_Sf_SwigStatic, swig_DcBlock_meta, swig_DcBlock_bases, swig_DcBlock_base_names };

static int _wrap_kRandFrac_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("daisysp::kRandFrac",0,0)
  result = (float)daisysp::kRandFrac;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kOneTwelfth_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("daisysp::kOneTwelfth",0,0)
  result = (float)daisysp::kOneTwelfth;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmax(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::fmax",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fmax",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fmax",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)daisysp::fmax(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmin(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::fmin",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fmin",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fmin",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)daisysp::fmin(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fclamp(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::fclamp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fclamp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fclamp",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::fclamp",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)daisysp::fclamp(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fastpower(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::fastpower",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fastpower",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fastpower",2,"int");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)daisysp::fastpower(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fastroot(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::fastroot",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fastroot",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fastroot",2,"int");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)daisysp::fastroot(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow10f(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::pow10f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::pow10f",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::pow10f(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fastlog2f(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::fastlog2f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fastlog2f",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::fastlog2f(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fastlog10f(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::fastlog10f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fastlog10f",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::fastlog10f(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mtof(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::mtof",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::mtof",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::mtof(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fonepole(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::fonepole",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("daisysp::fonepole",1,"float &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fonepole",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::fonepole",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("fonepole",1,SWIGTYPE_p_float);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  daisysp::fonepole(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  daisysp::Mapping arg4 ;
  float result;
  
  SWIG_check_num_args("daisysp::fmap",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fmap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fmap",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::fmap",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::fmap",4,"daisysp::Mapping");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (daisysp::Mapping)(int)lua_tonumber(L, 4);
  result = (float)daisysp::fmap(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::fmap",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::fmap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::fmap",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::fmap",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)daisysp::fmap(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmap(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_fmap__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_fmap__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fmap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::fmap(float,float,float,daisysp::Mapping)\n"
    "    daisysp::fmap(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_ThisBlepSample(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::ThisBlepSample",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::ThisBlepSample",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::ThisBlepSample(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NextBlepSample(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::NextBlepSample",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::NextBlepSample",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::NextBlepSample(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NextIntegratedBlepSample(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::NextIntegratedBlepSample",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::NextIntegratedBlepSample",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::NextIntegratedBlepSample(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThisIntegratedBlepSample(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::ThisIntegratedBlepSample",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::ThisIntegratedBlepSample",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::ThisIntegratedBlepSample(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftLimit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::SoftLimit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::SoftLimit",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::SoftLimit(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftClip(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("daisysp::SoftClip",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::SoftClip",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)daisysp::SoftClip(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::TestFloat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("daisysp::TestFloat",1,"float &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::TestFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TestFloat",1,SWIGTYPE_p_float);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  daisysp::TestFloat(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  
  SWIG_check_num_args("daisysp::TestFloat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("daisysp::TestFloat",1,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TestFloat",1,SWIGTYPE_p_float);
  }
  
  daisysp::TestFloat(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TestFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TestFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TestFloat__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TestFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::TestFloat(float &,float)\n"
    "    daisysp::TestFloat(float &)\n");
  lua_error(L);return 0;
}


static int _wrap_soft_saturate(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::soft_saturate",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::soft_saturate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::soft_saturate",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)daisysp::soft_saturate(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_is_power2(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  bool result;
  
  SWIG_check_num_args("daisysp::is_power2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::is_power2",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (bool)daisysp::is_power2(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_next_power2(lua_State* L) {
  int SWIG_arg = 0;
  uint32_t arg1 ;
  uint32_t result;
  
  SWIG_check_num_args("daisysp::get_next_power2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("daisysp::get_next_power2",1,"uint32_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (uint32_t)lua_tonumber(L, 1);
  result = (uint32_t)daisysp::get_next_power2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Jitter(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Jitter *result = 0 ;
  
  SWIG_check_num_args("daisysp::Jitter::Jitter",0,0)
  result = (daisysp::Jitter *)new daisysp::Jitter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Jitter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Jitter_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Jitter *arg1 = (daisysp::Jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Jitter::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Jitter::Init",1,"daisysp::Jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Jitter::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Jitter,0))){
    SWIG_fail_ptr("Jitter_Init",1,SWIGTYPE_p_daisysp__Jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Jitter_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Jitter *arg1 = (daisysp::Jitter *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Jitter::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Jitter::Process",1,"daisysp::Jitter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Jitter,0))){
    SWIG_fail_ptr("Jitter_Process",1,SWIGTYPE_p_daisysp__Jitter);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Jitter_SetCpsMin(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Jitter *arg1 = (daisysp::Jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Jitter::SetCpsMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Jitter::SetCpsMin",1,"daisysp::Jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Jitter::SetCpsMin",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Jitter,0))){
    SWIG_fail_ptr("Jitter_SetCpsMin",1,SWIGTYPE_p_daisysp__Jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCpsMin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Jitter_SetCpsMax(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Jitter *arg1 = (daisysp::Jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Jitter::SetCpsMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Jitter::SetCpsMax",1,"daisysp::Jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Jitter::SetCpsMax",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Jitter,0))){
    SWIG_fail_ptr("Jitter_SetCpsMax",1,SWIGTYPE_p_daisysp__Jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetCpsMax(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Jitter_SetAmp(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Jitter *arg1 = (daisysp::Jitter *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Jitter::SetAmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Jitter::SetAmp",1,"daisysp::Jitter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Jitter::SetAmp",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Jitter,0))){
    SWIG_fail_ptr("Jitter_SetAmp",1,SWIGTYPE_p_daisysp__Jitter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetAmp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Jitter(void *obj) {
daisysp::Jitter *arg1 = (daisysp::Jitter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Jitter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Jitter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Jitter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Jitter_methods[]= {
    { "Init", _wrap_Jitter_Init},
    { "Process", _wrap_Jitter_Process},
    { "SetCpsMin", _wrap_Jitter_SetCpsMin},
    { "SetCpsMax", _wrap_Jitter_SetCpsMax},
    { "SetAmp", _wrap_Jitter_SetAmp},
    {0,0}
};
static swig_lua_method swig_Jitter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Jitter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Jitter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Jitter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Jitter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Jitter_Sf_SwigStatic = {
    "Jitter",
    swig_Jitter_Sf_SwigStatic_methods,
    swig_Jitter_Sf_SwigStatic_attributes,
    swig_Jitter_Sf_SwigStatic_constants,
    swig_Jitter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Jitter_bases[] = {0};
static const char *swig_Jitter_base_names[] = {0};
static swig_lua_class _wrap_class_Jitter = { "Jitter", "Jitter", &SWIGTYPE_p_daisysp__Jitter,_proxy__wrap_new_Jitter, swig_delete_Jitter, swig_Jitter_methods, swig_Jitter_attributes, &swig_Jitter_Sf_SwigStatic, swig_Jitter_meta, swig_Jitter_bases, swig_Jitter_base_names };

static int _wrap_new_Looper(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *result = 0 ;
  
  SWIG_check_num_args("daisysp::Looper::Looper",0,0)
  result = (daisysp::Looper *)new daisysp::Looper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Looper,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  float *arg2 = (float *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("daisysp::Looper::Init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::Init",1,"daisysp::Looper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("daisysp::Looper::Init",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Looper::Init",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_Init",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Looper_Init",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Looper::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::Process",1,"daisysp::Looper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Looper::Process",2,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_Process",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  arg2 = (float const)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_Clear(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  
  SWIG_check_num_args("daisysp::Looper::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::Clear",1,"daisysp::Looper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_Clear",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_TrigRecord(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  
  SWIG_check_num_args("daisysp::Looper::TrigRecord",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::TrigRecord",1,"daisysp::Looper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_TrigRecord",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  (arg1)->TrigRecord();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_Recording(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Looper::Recording",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::Recording",1,"daisysp::Looper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_Recording",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  result = (bool)((daisysp::Looper const *)arg1)->Recording();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_RecordingQueued(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Looper::RecordingQueued",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::RecordingQueued",1,"daisysp::Looper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_RecordingQueued",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  result = (bool)((daisysp::Looper const *)arg1)->RecordingQueued();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_IncrementMode(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  
  SWIG_check_num_args("daisysp::Looper::IncrementMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::IncrementMode",1,"daisysp::Looper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_IncrementMode",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  (arg1)->IncrementMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_SetMode(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  daisysp::Looper::Mode arg2 ;
  
  SWIG_check_num_args("daisysp::Looper::SetMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::SetMode",1,"daisysp::Looper *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Looper::SetMode",2,"daisysp::Looper::Mode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_SetMode",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  arg2 = (daisysp::Looper::Mode)(int)lua_tonumber(L, 2);
  (arg1)->SetMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_GetMode(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  daisysp::Looper::Mode result;
  
  SWIG_check_num_args("daisysp::Looper::GetMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::GetMode",1,"daisysp::Looper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_GetMode",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  result = (daisysp::Looper::Mode)((daisysp::Looper const *)arg1)->GetMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_ToggleReverse(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  
  SWIG_check_num_args("daisysp::Looper::ToggleReverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::ToggleReverse",1,"daisysp::Looper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_ToggleReverse",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  (arg1)->ToggleReverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_SetReverse(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::Looper::SetReverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::SetReverse",1,"daisysp::Looper *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::Looper::SetReverse",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_SetReverse",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetReverse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_GetReverse(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Looper::GetReverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::GetReverse",1,"daisysp::Looper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_GetReverse",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  result = (bool)((daisysp::Looper const *)arg1)->GetReverse();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_ToggleHalfSpeed(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  
  SWIG_check_num_args("daisysp::Looper::ToggleHalfSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::ToggleHalfSpeed",1,"daisysp::Looper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_ToggleHalfSpeed",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  (arg1)->ToggleHalfSpeed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_SetHalfSpeed(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("daisysp::Looper::SetHalfSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::SetHalfSpeed",1,"daisysp::Looper *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::Looper::SetHalfSpeed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_SetHalfSpeed",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetHalfSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_GetHalfSpeed(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Looper::GetHalfSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::GetHalfSpeed",1,"daisysp::Looper const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_GetHalfSpeed",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  result = (bool)((daisysp::Looper const *)arg1)->GetHalfSpeed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Looper_IsNearBeginning(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Looper *arg1 = (daisysp::Looper *) 0 ;
  bool result;
  
  SWIG_check_num_args("daisysp::Looper::IsNearBeginning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Looper::IsNearBeginning",1,"daisysp::Looper *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Looper,0))){
    SWIG_fail_ptr("Looper_IsNearBeginning",1,SWIGTYPE_p_daisysp__Looper);
  }
  
  result = (bool)(arg1)->IsNearBeginning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Looper(void *obj) {
daisysp::Looper *arg1 = (daisysp::Looper *) obj;
delete arg1;
}
static int _proxy__wrap_new_Looper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Looper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Looper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Looper_methods[]= {
    { "Init", _wrap_Looper_Init},
    { "Process", _wrap_Looper_Process},
    { "Clear", _wrap_Looper_Clear},
    { "TrigRecord", _wrap_Looper_TrigRecord},
    { "Recording", _wrap_Looper_Recording},
    { "RecordingQueued", _wrap_Looper_RecordingQueued},
    { "IncrementMode", _wrap_Looper_IncrementMode},
    { "SetMode", _wrap_Looper_SetMode},
    { "GetMode", _wrap_Looper_GetMode},
    { "ToggleReverse", _wrap_Looper_ToggleReverse},
    { "SetReverse", _wrap_Looper_SetReverse},
    { "GetReverse", _wrap_Looper_GetReverse},
    { "ToggleHalfSpeed", _wrap_Looper_ToggleHalfSpeed},
    { "SetHalfSpeed", _wrap_Looper_SetHalfSpeed},
    { "GetHalfSpeed", _wrap_Looper_GetHalfSpeed},
    { "IsNearBeginning", _wrap_Looper_IsNearBeginning},
    {0,0}
};
static swig_lua_method swig_Looper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Looper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Looper_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Mode_NORMAL", daisysp::Looper::Mode::NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("Mode_ONETIME_DUB", daisysp::Looper::Mode::ONETIME_DUB)},
    {SWIG_LUA_CONSTTAB_INT("Mode_REPLACE", daisysp::Looper::Mode::REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("Mode_FRIPPERTRONICS", daisysp::Looper::Mode::FRIPPERTRONICS)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Looper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Looper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Looper_Sf_SwigStatic = {
    "Looper",
    swig_Looper_Sf_SwigStatic_methods,
    swig_Looper_Sf_SwigStatic_attributes,
    swig_Looper_Sf_SwigStatic_constants,
    swig_Looper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Looper_bases[] = {0};
static const char *swig_Looper_base_names[] = {0};
static swig_lua_class _wrap_class_Looper = { "Looper", "Looper", &SWIGTYPE_p_daisysp__Looper,_proxy__wrap_new_Looper, swig_delete_Looper, swig_Looper_methods, swig_Looper_attributes, &swig_Looper_Sf_SwigStatic, swig_Looper_meta, swig_Looper_bases, swig_Looper_base_names };

static int _wrap_new_Maytrig(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Maytrig *result = 0 ;
  
  SWIG_check_num_args("daisysp::Maytrig::Maytrig",0,0)
  result = (daisysp::Maytrig *)new daisysp::Maytrig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Maytrig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Maytrig_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Maytrig *arg1 = (daisysp::Maytrig *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Maytrig::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Maytrig::Process",1,"daisysp::Maytrig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Maytrig::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Maytrig,0))){
    SWIG_fail_ptr("Maytrig_Process",1,SWIGTYPE_p_daisysp__Maytrig);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Maytrig(void *obj) {
daisysp::Maytrig *arg1 = (daisysp::Maytrig *) obj;
delete arg1;
}
static int _proxy__wrap_new_Maytrig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Maytrig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Maytrig_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Maytrig_methods[]= {
    { "Process", _wrap_Maytrig_Process},
    {0,0}
};
static swig_lua_method swig_Maytrig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Maytrig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Maytrig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Maytrig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Maytrig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Maytrig_Sf_SwigStatic = {
    "Maytrig",
    swig_Maytrig_Sf_SwigStatic_methods,
    swig_Maytrig_Sf_SwigStatic_attributes,
    swig_Maytrig_Sf_SwigStatic_constants,
    swig_Maytrig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Maytrig_bases[] = {0};
static const char *swig_Maytrig_base_names[] = {0};
static swig_lua_class _wrap_class_Maytrig = { "Maytrig", "Maytrig", &SWIGTYPE_p_daisysp__Maytrig,_proxy__wrap_new_Maytrig, swig_delete_Maytrig, swig_Maytrig_methods, swig_Maytrig_attributes, &swig_Maytrig_Sf_SwigStatic, swig_Maytrig_meta, swig_Maytrig_bases, swig_Maytrig_base_names };

static int _wrap_new_Metro(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Metro *result = 0 ;
  
  SWIG_check_num_args("daisysp::Metro::Metro",0,0)
  result = (daisysp::Metro *)new daisysp::Metro();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Metro,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Metro_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Metro *arg1 = (daisysp::Metro *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Metro::Init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Metro::Init",1,"daisysp::Metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Metro::Init",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Metro::Init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Metro,0))){
    SWIG_fail_ptr("Metro_Init",1,SWIGTYPE_p_daisysp__Metro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->Init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Metro_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Metro *arg1 = (daisysp::Metro *) 0 ;
  uint8_t result;
  
  SWIG_check_num_args("daisysp::Metro::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Metro::Process",1,"daisysp::Metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Metro,0))){
    SWIG_fail_ptr("Metro_Process",1,SWIGTYPE_p_daisysp__Metro);
  }
  
  result = (uint8_t)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Metro_Reset(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Metro *arg1 = (daisysp::Metro *) 0 ;
  
  SWIG_check_num_args("daisysp::Metro::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Metro::Reset",1,"daisysp::Metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Metro,0))){
    SWIG_fail_ptr("Metro_Reset",1,SWIGTYPE_p_daisysp__Metro);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Metro_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Metro *arg1 = (daisysp::Metro *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Metro::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Metro::SetFreq",1,"daisysp::Metro *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Metro::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Metro,0))){
    SWIG_fail_ptr("Metro_SetFreq",1,SWIGTYPE_p_daisysp__Metro);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Metro_GetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Metro *arg1 = (daisysp::Metro *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Metro::GetFreq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Metro::GetFreq",1,"daisysp::Metro *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Metro,0))){
    SWIG_fail_ptr("Metro_GetFreq",1,SWIGTYPE_p_daisysp__Metro);
  }
  
  result = (float)(arg1)->GetFreq();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Metro(void *obj) {
daisysp::Metro *arg1 = (daisysp::Metro *) obj;
delete arg1;
}
static int _proxy__wrap_new_Metro(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Metro);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Metro_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Metro_methods[]= {
    { "Init", _wrap_Metro_Init},
    { "Process", _wrap_Metro_Process},
    { "Reset", _wrap_Metro_Reset},
    { "SetFreq", _wrap_Metro_SetFreq},
    { "GetFreq", _wrap_Metro_GetFreq},
    {0,0}
};
static swig_lua_method swig_Metro_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Metro_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Metro_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Metro_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Metro_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Metro_Sf_SwigStatic = {
    "Metro",
    swig_Metro_Sf_SwigStatic_methods,
    swig_Metro_Sf_SwigStatic_attributes,
    swig_Metro_Sf_SwigStatic_constants,
    swig_Metro_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Metro_bases[] = {0};
static const char *swig_Metro_base_names[] = {0};
static swig_lua_class _wrap_class_Metro = { "Metro", "Metro", &SWIGTYPE_p_daisysp__Metro,_proxy__wrap_new_Metro, swig_delete_Metro, swig_Metro_methods, swig_Metro_attributes, &swig_Metro_Sf_SwigStatic, swig_Metro_meta, swig_Metro_bases, swig_Metro_base_names };

static int _wrap_new_Port(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Port *result = 0 ;
  
  SWIG_check_num_args("daisysp::Port::Port",0,0)
  result = (daisysp::Port *)new daisysp::Port();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__Port,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Port *arg1 = (daisysp::Port *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("daisysp::Port::Init",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Port::Init",1,"daisysp::Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Port::Init",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::Port::Init",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Port,0))){
    SWIG_fail_ptr("Port_Init",1,SWIGTYPE_p_daisysp__Port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->Init(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Port *arg1 = (daisysp::Port *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("daisysp::Port::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Port::Process",1,"daisysp::Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Port::Process",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Port,0))){
    SWIG_fail_ptr("Port_Process",1,SWIGTYPE_p_daisysp__Port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->Process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_SetHtime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Port *arg1 = (daisysp::Port *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::Port::SetHtime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Port::SetHtime",1,"daisysp::Port *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::Port::SetHtime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Port,0))){
    SWIG_fail_ptr("Port_SetHtime",1,SWIGTYPE_p_daisysp__Port);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetHtime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Port_GetHtime(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::Port *arg1 = (daisysp::Port *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::Port::GetHtime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::Port::GetHtime",1,"daisysp::Port *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__Port,0))){
    SWIG_fail_ptr("Port_GetHtime",1,SWIGTYPE_p_daisysp__Port);
  }
  
  result = (float)(arg1)->GetHtime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Port(void *obj) {
daisysp::Port *arg1 = (daisysp::Port *) obj;
delete arg1;
}
static int _proxy__wrap_new_Port(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Port);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Port_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Port_methods[]= {
    { "Init", _wrap_Port_Init},
    { "Process", _wrap_Port_Process},
    { "SetHtime", _wrap_Port_SetHtime},
    { "GetHtime", _wrap_Port_GetHtime},
    {0,0}
};
static swig_lua_method swig_Port_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Port_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Port_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Port_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Port_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Port_Sf_SwigStatic = {
    "Port",
    swig_Port_Sf_SwigStatic_methods,
    swig_Port_Sf_SwigStatic_attributes,
    swig_Port_Sf_SwigStatic_constants,
    swig_Port_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Port_bases[] = {0};
static const char *swig_Port_base_names[] = {0};
static swig_lua_class _wrap_class_Port = { "Port", "Port", &SWIGTYPE_p_daisysp__Port,_proxy__wrap_new_Port, swig_delete_Port, swig_Port_methods, swig_Port_attributes, &swig_Port_Sf_SwigStatic, swig_Port_meta, swig_Port_bases, swig_Port_base_names };

static int _wrap_new_SampleHold(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SampleHold *result = 0 ;
  
  SWIG_check_num_args("daisysp::SampleHold::SampleHold",0,0)
  result = (daisysp::SampleHold *)new daisysp::SampleHold();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SampleHold,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleHold_Process__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SampleHold *arg1 = (daisysp::SampleHold *) 0 ;
  bool arg2 ;
  float arg3 ;
  daisysp::SampleHold::Mode arg4 ;
  float result;
  
  SWIG_check_num_args("daisysp::SampleHold::Process",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SampleHold::Process",1,"daisysp::SampleHold *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::SampleHold::Process",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::SampleHold::Process",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("daisysp::SampleHold::Process",4,"daisysp::SampleHold::Mode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SampleHold,0))){
    SWIG_fail_ptr("SampleHold_Process",1,SWIGTYPE_p_daisysp__SampleHold);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (daisysp::SampleHold::Mode)(int)lua_tonumber(L, 4);
  result = (float)(arg1)->Process(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleHold_Process__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SampleHold *arg1 = (daisysp::SampleHold *) 0 ;
  bool arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("daisysp::SampleHold::Process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SampleHold::Process",1,"daisysp::SampleHold *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("daisysp::SampleHold::Process",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("daisysp::SampleHold::Process",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SampleHold,0))){
    SWIG_fail_ptr("SampleHold_Process",1,SWIGTYPE_p_daisysp__SampleHold);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->Process(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleHold_Process(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__SampleHold, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SampleHold_Process__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_daisysp__SampleHold, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SampleHold_Process__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SampleHold_Process'\n"
    "  Possible C/C++ prototypes are:\n"
    "    daisysp::SampleHold::Process(bool,float,daisysp::SampleHold::Mode)\n"
    "    daisysp::SampleHold::Process(bool,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_SampleHold(void *obj) {
daisysp::SampleHold *arg1 = (daisysp::SampleHold *) obj;
delete arg1;
}
static int _proxy__wrap_new_SampleHold(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SampleHold);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SampleHold_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SampleHold_methods[]= {
    { "Process", _wrap_SampleHold_Process},
    {0,0}
};
static swig_lua_method swig_SampleHold_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SampleHold_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SampleHold_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MODE_SAMPLE_HOLD", daisysp::SampleHold::MODE_SAMPLE_HOLD)},
    {SWIG_LUA_CONSTTAB_INT("MODE_TRACK_HOLD", daisysp::SampleHold::MODE_TRACK_HOLD)},
    {SWIG_LUA_CONSTTAB_INT("MODE_LAST", daisysp::SampleHold::MODE_LAST)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SampleHold_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SampleHold_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SampleHold_Sf_SwigStatic = {
    "SampleHold",
    swig_SampleHold_Sf_SwigStatic_methods,
    swig_SampleHold_Sf_SwigStatic_attributes,
    swig_SampleHold_Sf_SwigStatic_constants,
    swig_SampleHold_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SampleHold_bases[] = {0};
static const char *swig_SampleHold_base_names[] = {0};
static swig_lua_class _wrap_class_SampleHold = { "SampleHold", "SampleHold", &SWIGTYPE_p_daisysp__SampleHold,_proxy__wrap_new_SampleHold, swig_delete_SampleHold, swig_SampleHold_methods, swig_SampleHold_attributes, &swig_SampleHold_Sf_SwigStatic, swig_SampleHold_meta, swig_SampleHold_bases, swig_SampleHold_base_names };

static int _wrap_new_SmoothRandomGenerator(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SmoothRandomGenerator *result = 0 ;
  
  SWIG_check_num_args("daisysp::SmoothRandomGenerator::SmoothRandomGenerator",0,0)
  result = (daisysp::SmoothRandomGenerator *)new daisysp::SmoothRandomGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_daisysp__SmoothRandomGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothRandomGenerator_Init(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SmoothRandomGenerator *arg1 = (daisysp::SmoothRandomGenerator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SmoothRandomGenerator::Init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SmoothRandomGenerator::Init",1,"daisysp::SmoothRandomGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SmoothRandomGenerator::Init",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SmoothRandomGenerator,0))){
    SWIG_fail_ptr("SmoothRandomGenerator_Init",1,SWIGTYPE_p_daisysp__SmoothRandomGenerator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->Init(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothRandomGenerator_Process(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SmoothRandomGenerator *arg1 = (daisysp::SmoothRandomGenerator *) 0 ;
  float result;
  
  SWIG_check_num_args("daisysp::SmoothRandomGenerator::Process",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SmoothRandomGenerator::Process",1,"daisysp::SmoothRandomGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SmoothRandomGenerator,0))){
    SWIG_fail_ptr("SmoothRandomGenerator_Process",1,SWIGTYPE_p_daisysp__SmoothRandomGenerator);
  }
  
  result = (float)(arg1)->Process();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SmoothRandomGenerator_SetFreq(lua_State* L) {
  int SWIG_arg = 0;
  daisysp::SmoothRandomGenerator *arg1 = (daisysp::SmoothRandomGenerator *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("daisysp::SmoothRandomGenerator::SetFreq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("daisysp::SmoothRandomGenerator::SetFreq",1,"daisysp::SmoothRandomGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("daisysp::SmoothRandomGenerator::SetFreq",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_daisysp__SmoothRandomGenerator,0))){
    SWIG_fail_ptr("SmoothRandomGenerator_SetFreq",1,SWIGTYPE_p_daisysp__SmoothRandomGenerator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->SetFreq(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SmoothRandomGenerator(void *obj) {
daisysp::SmoothRandomGenerator *arg1 = (daisysp::SmoothRandomGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_SmoothRandomGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SmoothRandomGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SmoothRandomGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SmoothRandomGenerator_methods[]= {
    { "Init", _wrap_SmoothRandomGenerator_Init},
    { "Process", _wrap_SmoothRandomGenerator_Process},
    { "SetFreq", _wrap_SmoothRandomGenerator_SetFreq},
    {0,0}
};
static swig_lua_method swig_SmoothRandomGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SmoothRandomGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SmoothRandomGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SmoothRandomGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SmoothRandomGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SmoothRandomGenerator_Sf_SwigStatic = {
    "SmoothRandomGenerator",
    swig_SmoothRandomGenerator_Sf_SwigStatic_methods,
    swig_SmoothRandomGenerator_Sf_SwigStatic_attributes,
    swig_SmoothRandomGenerator_Sf_SwigStatic_constants,
    swig_SmoothRandomGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SmoothRandomGenerator_bases[] = {0};
static const char *swig_SmoothRandomGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_SmoothRandomGenerator = { "SmoothRandomGenerator", "SmoothRandomGenerator", &SWIGTYPE_p_daisysp__SmoothRandomGenerator,_proxy__wrap_new_SmoothRandomGenerator, swig_delete_SmoothRandomGenerator, swig_SmoothRandomGenerator_methods, swig_SmoothRandomGenerator_attributes, &swig_SmoothRandomGenerator_Sf_SwigStatic, swig_SmoothRandomGenerator_meta, swig_SmoothRandomGenerator_bases, swig_SmoothRandomGenerator_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "kRandFrac", _wrap_kRandFrac_get, SWIG_Lua_set_immutable },
    { "kOneTwelfth", _wrap_kOneTwelfth_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ADENV_SEG_IDLE", daisysp::ADENV_SEG_IDLE)},
    {SWIG_LUA_CONSTTAB_INT("ADENV_SEG_ATTACK", daisysp::ADENV_SEG_ATTACK)},
    {SWIG_LUA_CONSTTAB_INT("ADENV_SEG_DECAY", daisysp::ADENV_SEG_DECAY)},
    {SWIG_LUA_CONSTTAB_INT("ADENV_SEG_LAST", daisysp::ADENV_SEG_LAST)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_SEG_IDLE", daisysp::ADSR_SEG_IDLE)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_SEG_ATTACK", daisysp::ADSR_SEG_ATTACK)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_SEG_DECAY", daisysp::ADSR_SEG_DECAY)},
    {SWIG_LUA_CONSTTAB_INT("ADSR_SEG_RELEASE", daisysp::ADSR_SEG_RELEASE)},
    {SWIG_LUA_CONSTTAB_INT("AnalogSnareDrum_kNumModes", daisysp::AnalogSnareDrum::kNumModes)},
    {SWIG_LUA_CONSTTAB_INT("CROSSFADE_LIN", daisysp::CROSSFADE_LIN)},
    {SWIG_LUA_CONSTTAB_INT("CROSSFADE_CPOW", daisysp::CROSSFADE_CPOW)},
    {SWIG_LUA_CONSTTAB_INT("CROSSFADE_LOG", daisysp::CROSSFADE_LOG)},
    {SWIG_LUA_CONSTTAB_INT("CROSSFADE_EXP", daisysp::CROSSFADE_EXP)},
    {SWIG_LUA_CONSTTAB_INT("CROSSFADE_LAST", daisysp::CROSSFADE_LAST)},
    {SWIG_LUA_CONSTTAB_INT("DSY_REVERBSC_MAX_SIZE", 98936)},
    {SWIG_LUA_CONSTTAB_INT("SHIFT_BUFFER_SIZE", 16384)},
    {SWIG_LUA_CONSTTAB_INT("DSY_NLFILT_MAX_DELAY", 1024)},
    {SWIG_LUA_CONSTTAB_INT("PLUCK_MODE_RECURSIVE", daisysp::PLUCK_MODE_RECURSIVE)},
    {SWIG_LUA_CONSTTAB_INT("PLUCK_MODE_WEIGHTED_AVERAGE", daisysp::PLUCK_MODE_WEIGHTED_AVERAGE)},
    {SWIG_LUA_CONSTTAB_INT("PLUCK_LAST", daisysp::PLUCK_LAST)},
    {SWIG_LUA_CONSTTAB_INT("BlOsc_WAVE_TRIANGLE", daisysp::BlOsc::WAVE_TRIANGLE)},
    {SWIG_LUA_CONSTTAB_INT("BlOsc_WAVE_SAW", daisysp::BlOsc::WAVE_SAW)},
    {SWIG_LUA_CONSTTAB_INT("BlOsc_WAVE_SQUARE", daisysp::BlOsc::WAVE_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("BlOsc_WAVE_OFF", daisysp::BlOsc::WAVE_OFF)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_SIN", daisysp::Oscillator::WAVE_SIN)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_TRI", daisysp::Oscillator::WAVE_TRI)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_SAW", daisysp::Oscillator::WAVE_SAW)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_RAMP", daisysp::Oscillator::WAVE_RAMP)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_SQUARE", daisysp::Oscillator::WAVE_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_POLYBLEP_TRI", daisysp::Oscillator::WAVE_POLYBLEP_TRI)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_POLYBLEP_SAW", daisysp::Oscillator::WAVE_POLYBLEP_SAW)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_POLYBLEP_SQUARE", daisysp::Oscillator::WAVE_POLYBLEP_SQUARE)},
    {SWIG_LUA_CONSTTAB_INT("Oscillator_WAVE_LAST", daisysp::Oscillator::WAVE_LAST)},
    {SWIG_LUA_CONSTTAB_FLOAT("PI_F", 3.1415927410125732421875)},
    {SWIG_LUA_CONSTTAB_FLOAT("TWOPI_F", (2.0*3.1415927410125732421875))},
    {SWIG_LUA_CONSTTAB_FLOAT("HALFPI_F", (3.1415927410125732421875*0.5))},
    {SWIG_LUA_CONSTTAB_INT("Mapping_LINEAR", daisysp::Mapping::LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("Mapping_EXP", daisysp::Mapping::EXP)},
    {SWIG_LUA_CONSTTAB_INT("Mapping_LOG", daisysp::Mapping::LOG)},
    {SWIG_LUA_CONSTTAB_INT("Looper_Mode_NORMAL", daisysp::Looper::Mode::NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("Looper_Mode_ONETIME_DUB", daisysp::Looper::Mode::ONETIME_DUB)},
    {SWIG_LUA_CONSTTAB_INT("Looper_Mode_REPLACE", daisysp::Looper::Mode::REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("Looper_Mode_FRIPPERTRONICS", daisysp::Looper::Mode::FRIPPERTRONICS)},
    {SWIG_LUA_CONSTTAB_INT("SampleHold_MODE_SAMPLE_HOLD", daisysp::SampleHold::MODE_SAMPLE_HOLD)},
    {SWIG_LUA_CONSTTAB_INT("SampleHold_MODE_TRACK_HOLD", daisysp::SampleHold::MODE_TRACK_HOLD)},
    {SWIG_LUA_CONSTTAB_INT("SampleHold_MODE_LAST", daisysp::SampleHold::MODE_LAST)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "hash_xs32", _wrap_hash_xs32},
    { "myrand", _wrap_myrand},
    { "fmax", _wrap_fmax},
    { "fmin", _wrap_fmin},
    { "fclamp", _wrap_fclamp},
    { "fastpower", _wrap_fastpower},
    { "fastroot", _wrap_fastroot},
    { "pow10f", _wrap_pow10f},
    { "fastlog2f", _wrap_fastlog2f},
    { "fastlog10f", _wrap_fastlog10f},
    { "mtof", _wrap_mtof},
    { "fonepole", _wrap_fonepole},
    { "fmap", _wrap_fmap},
    { "ThisBlepSample", _wrap_ThisBlepSample},
    { "NextBlepSample", _wrap_NextBlepSample},
    { "NextIntegratedBlepSample", _wrap_NextIntegratedBlepSample},
    { "ThisIntegratedBlepSample", _wrap_ThisIntegratedBlepSample},
    { "SoftLimit", _wrap_SoftLimit},
    { "SoftClip", _wrap_SoftClip},
    { "TestFloat", _wrap_TestFloat},
    { "soft_saturate", _wrap_soft_saturate},
    { "is_power2", _wrap_is_power2},
    { "get_next_power2", _wrap_get_next_power2},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_AdEnv,
&_wrap_class_Adsr,
&_wrap_class_Line,
&_wrap_class_Phasor,
&_wrap_class_AnalogBassDrum,
&_wrap_class_AnalogSnareDrum,
&_wrap_class_SquareNoise,
&_wrap_class_RingModNoise,
&_wrap_class_SwingVCA,
&_wrap_class_LinearVCA,
&_wrap_class_SyntheticBassDrumClick,
&_wrap_class_SyntheticBassDrumAttackNoise,
&_wrap_class_SyntheticBassDrum,
&_wrap_class_SyntheticSnareDrum,
&_wrap_class_Balance,
&_wrap_class_Compressor,
&_wrap_class_CrossFade,
&_wrap_class_Limiter,
&_wrap_class_Autowah,
&_wrap_class_Bitcrush,
&_wrap_class_ChorusEngine,
&_wrap_class_Chorus,
&_wrap_class_Decimator,
&_wrap_class_Flanger,
&_wrap_class_Fold,
&_wrap_class_Overdrive,
&_wrap_class_ReverbScDl,
&_wrap_class_ReverbSc,
&_wrap_class_PhaserEngine,
&_wrap_class_Phaser,
&_wrap_class_PitchShifter,
&_wrap_class_SampleRateReducer,
&_wrap_class_Tremolo,
&_wrap_class_Allpass,
&_wrap_class_ATone,
&_wrap_class_Biquad,
&_wrap_class_Comb,
&_wrap_class_Mode,
&_wrap_class_MoogLadder,
&_wrap_class_NlFilt,
&_wrap_class_Svf,
&_wrap_class_Tone,
&_wrap_class_ClockedNoise,
&_wrap_class_Dust,
&_wrap_class_GrainletOscillator,
&_wrap_class_Particle,
&_wrap_class_WhiteNoise,
&_wrap_class_Drip,
&_wrap_class_ModalVoice,
&_wrap_class_Pluck,
&_wrap_class_Resonator,
&_wrap_class_String,
&_wrap_class_StringVoice,
&_wrap_class_BlOsc,
&_wrap_class_Fm2,
&_wrap_class_FormantOscillator,
&_wrap_class_Oscillator,
&_wrap_class_OscillatorBank,
&_wrap_class_VariableSawOscillator,
&_wrap_class_VariableShapeOscillator,
&_wrap_class_VosimOscillator,
&_wrap_class_ZOscillator,
&_wrap_class_DcBlock,
&_wrap_class_Jitter,
&_wrap_class_Looper,
&_wrap_class_Maytrig,
&_wrap_class_Metro,
&_wrap_class_Port,
&_wrap_class_SampleHold,
&_wrap_class_SmoothRandomGenerator,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "daisysp",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_daisysp__ATone = {"_p_daisysp__ATone", "daisysp::ATone *", 0, 0, (void*)&_wrap_class_ATone, 0};
static swig_type_info _swigt__p_daisysp__AdEnv = {"_p_daisysp__AdEnv", "daisysp::AdEnv *", 0, 0, (void*)&_wrap_class_AdEnv, 0};
static swig_type_info _swigt__p_daisysp__Adsr = {"_p_daisysp__Adsr", "daisysp::Adsr *", 0, 0, (void*)&_wrap_class_Adsr, 0};
static swig_type_info _swigt__p_daisysp__Allpass = {"_p_daisysp__Allpass", "daisysp::Allpass *", 0, 0, (void*)&_wrap_class_Allpass, 0};
static swig_type_info _swigt__p_daisysp__AnalogBassDrum = {"_p_daisysp__AnalogBassDrum", "daisysp::AnalogBassDrum *", 0, 0, (void*)&_wrap_class_AnalogBassDrum, 0};
static swig_type_info _swigt__p_daisysp__AnalogSnareDrum = {"_p_daisysp__AnalogSnareDrum", "daisysp::AnalogSnareDrum *", 0, 0, (void*)&_wrap_class_AnalogSnareDrum, 0};
static swig_type_info _swigt__p_daisysp__Autowah = {"_p_daisysp__Autowah", "daisysp::Autowah *", 0, 0, (void*)&_wrap_class_Autowah, 0};
static swig_type_info _swigt__p_daisysp__Balance = {"_p_daisysp__Balance", "daisysp::Balance *", 0, 0, (void*)&_wrap_class_Balance, 0};
static swig_type_info _swigt__p_daisysp__Biquad = {"_p_daisysp__Biquad", "daisysp::Biquad *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_daisysp__Bitcrush = {"_p_daisysp__Bitcrush", "daisysp::Bitcrush *", 0, 0, (void*)&_wrap_class_Bitcrush, 0};
static swig_type_info _swigt__p_daisysp__BlOsc = {"_p_daisysp__BlOsc", "daisysp::BlOsc *", 0, 0, (void*)&_wrap_class_BlOsc, 0};
static swig_type_info _swigt__p_daisysp__Chorus = {"_p_daisysp__Chorus", "daisysp::Chorus *", 0, 0, (void*)&_wrap_class_Chorus, 0};
static swig_type_info _swigt__p_daisysp__ChorusEngine = {"_p_daisysp__ChorusEngine", "daisysp::ChorusEngine *", 0, 0, (void*)&_wrap_class_ChorusEngine, 0};
static swig_type_info _swigt__p_daisysp__ClockedNoise = {"_p_daisysp__ClockedNoise", "daisysp::ClockedNoise *", 0, 0, (void*)&_wrap_class_ClockedNoise, 0};
static swig_type_info _swigt__p_daisysp__Comb = {"_p_daisysp__Comb", "daisysp::Comb *", 0, 0, (void*)&_wrap_class_Comb, 0};
static swig_type_info _swigt__p_daisysp__Compressor = {"_p_daisysp__Compressor", "daisysp::Compressor *", 0, 0, (void*)&_wrap_class_Compressor, 0};
static swig_type_info _swigt__p_daisysp__CrossFade = {"_p_daisysp__CrossFade", "daisysp::CrossFade *", 0, 0, (void*)&_wrap_class_CrossFade, 0};
static swig_type_info _swigt__p_daisysp__DcBlock = {"_p_daisysp__DcBlock", "daisysp::DcBlock *", 0, 0, (void*)&_wrap_class_DcBlock, 0};
static swig_type_info _swigt__p_daisysp__Decimator = {"_p_daisysp__Decimator", "daisysp::Decimator *", 0, 0, (void*)&_wrap_class_Decimator, 0};
static swig_type_info _swigt__p_daisysp__Drip = {"_p_daisysp__Drip", "daisysp::Drip *", 0, 0, (void*)&_wrap_class_Drip, 0};
static swig_type_info _swigt__p_daisysp__Dust = {"_p_daisysp__Dust", "daisysp::Dust *", 0, 0, (void*)&_wrap_class_Dust, 0};
static swig_type_info _swigt__p_daisysp__Flanger = {"_p_daisysp__Flanger", "daisysp::Flanger *", 0, 0, (void*)&_wrap_class_Flanger, 0};
static swig_type_info _swigt__p_daisysp__Fm2 = {"_p_daisysp__Fm2", "daisysp::Fm2 *", 0, 0, (void*)&_wrap_class_Fm2, 0};
static swig_type_info _swigt__p_daisysp__Fold = {"_p_daisysp__Fold", "daisysp::Fold *", 0, 0, (void*)&_wrap_class_Fold, 0};
static swig_type_info _swigt__p_daisysp__FormantOscillator = {"_p_daisysp__FormantOscillator", "daisysp::FormantOscillator *", 0, 0, (void*)&_wrap_class_FormantOscillator, 0};
static swig_type_info _swigt__p_daisysp__GrainletOscillator = {"_p_daisysp__GrainletOscillator", "daisysp::GrainletOscillator *", 0, 0, (void*)&_wrap_class_GrainletOscillator, 0};
static swig_type_info _swigt__p_daisysp__Jitter = {"_p_daisysp__Jitter", "daisysp::Jitter *", 0, 0, (void*)&_wrap_class_Jitter, 0};
static swig_type_info _swigt__p_daisysp__Limiter = {"_p_daisysp__Limiter", "daisysp::Limiter *", 0, 0, (void*)&_wrap_class_Limiter, 0};
static swig_type_info _swigt__p_daisysp__Line = {"_p_daisysp__Line", "daisysp::Line *", 0, 0, (void*)&_wrap_class_Line, 0};
static swig_type_info _swigt__p_daisysp__LinearVCA = {"_p_daisysp__LinearVCA", "daisysp::LinearVCA *", 0, 0, (void*)&_wrap_class_LinearVCA, 0};
static swig_type_info _swigt__p_daisysp__Looper = {"_p_daisysp__Looper", "daisysp::Looper *", 0, 0, (void*)&_wrap_class_Looper, 0};
static swig_type_info _swigt__p_daisysp__Maytrig = {"_p_daisysp__Maytrig", "daisysp::Maytrig *", 0, 0, (void*)&_wrap_class_Maytrig, 0};
static swig_type_info _swigt__p_daisysp__Metro = {"_p_daisysp__Metro", "daisysp::Metro *", 0, 0, (void*)&_wrap_class_Metro, 0};
static swig_type_info _swigt__p_daisysp__ModalVoice = {"_p_daisysp__ModalVoice", "daisysp::ModalVoice *", 0, 0, (void*)&_wrap_class_ModalVoice, 0};
static swig_type_info _swigt__p_daisysp__Mode = {"_p_daisysp__Mode", "daisysp::Mode *", 0, 0, (void*)&_wrap_class_Mode, 0};
static swig_type_info _swigt__p_daisysp__MoogLadder = {"_p_daisysp__MoogLadder", "daisysp::MoogLadder *", 0, 0, (void*)&_wrap_class_MoogLadder, 0};
static swig_type_info _swigt__p_daisysp__NlFilt = {"_p_daisysp__NlFilt", "daisysp::NlFilt *", 0, 0, (void*)&_wrap_class_NlFilt, 0};
static swig_type_info _swigt__p_daisysp__Oscillator = {"_p_daisysp__Oscillator", "daisysp::Oscillator *", 0, 0, (void*)&_wrap_class_Oscillator, 0};
static swig_type_info _swigt__p_daisysp__OscillatorBank = {"_p_daisysp__OscillatorBank", "daisysp::OscillatorBank *", 0, 0, (void*)&_wrap_class_OscillatorBank, 0};
static swig_type_info _swigt__p_daisysp__Overdrive = {"_p_daisysp__Overdrive", "daisysp::Overdrive *", 0, 0, (void*)&_wrap_class_Overdrive, 0};
static swig_type_info _swigt__p_daisysp__Particle = {"_p_daisysp__Particle", "daisysp::Particle *", 0, 0, (void*)&_wrap_class_Particle, 0};
static swig_type_info _swigt__p_daisysp__Phaser = {"_p_daisysp__Phaser", "daisysp::Phaser *", 0, 0, (void*)&_wrap_class_Phaser, 0};
static swig_type_info _swigt__p_daisysp__PhaserEngine = {"_p_daisysp__PhaserEngine", "daisysp::PhaserEngine *", 0, 0, (void*)&_wrap_class_PhaserEngine, 0};
static swig_type_info _swigt__p_daisysp__Phasor = {"_p_daisysp__Phasor", "daisysp::Phasor *", 0, 0, (void*)&_wrap_class_Phasor, 0};
static swig_type_info _swigt__p_daisysp__PitchShifter = {"_p_daisysp__PitchShifter", "daisysp::PitchShifter *", 0, 0, (void*)&_wrap_class_PitchShifter, 0};
static swig_type_info _swigt__p_daisysp__Pluck = {"_p_daisysp__Pluck", "daisysp::Pluck *", 0, 0, (void*)&_wrap_class_Pluck, 0};
static swig_type_info _swigt__p_daisysp__Port = {"_p_daisysp__Port", "daisysp::Port *", 0, 0, (void*)&_wrap_class_Port, 0};
static swig_type_info _swigt__p_daisysp__Resonator = {"_p_daisysp__Resonator", "daisysp::Resonator *", 0, 0, (void*)&_wrap_class_Resonator, 0};
static swig_type_info _swigt__p_daisysp__ReverbSc = {"_p_daisysp__ReverbSc", "daisysp::ReverbSc *", 0, 0, (void*)&_wrap_class_ReverbSc, 0};
static swig_type_info _swigt__p_daisysp__ReverbScDl = {"_p_daisysp__ReverbScDl", "daisysp::ReverbScDl *", 0, 0, (void*)&_wrap_class_ReverbScDl, 0};
static swig_type_info _swigt__p_daisysp__RingModNoise = {"_p_daisysp__RingModNoise", "daisysp::RingModNoise *", 0, 0, (void*)&_wrap_class_RingModNoise, 0};
static swig_type_info _swigt__p_daisysp__SampleHold = {"_p_daisysp__SampleHold", "daisysp::SampleHold *", 0, 0, (void*)&_wrap_class_SampleHold, 0};
static swig_type_info _swigt__p_daisysp__SampleRateReducer = {"_p_daisysp__SampleRateReducer", "daisysp::SampleRateReducer *", 0, 0, (void*)&_wrap_class_SampleRateReducer, 0};
static swig_type_info _swigt__p_daisysp__SmoothRandomGenerator = {"_p_daisysp__SmoothRandomGenerator", "daisysp::SmoothRandomGenerator *", 0, 0, (void*)&_wrap_class_SmoothRandomGenerator, 0};
static swig_type_info _swigt__p_daisysp__SquareNoise = {"_p_daisysp__SquareNoise", "daisysp::SquareNoise *", 0, 0, (void*)&_wrap_class_SquareNoise, 0};
static swig_type_info _swigt__p_daisysp__String = {"_p_daisysp__String", "daisysp::String *", 0, 0, (void*)&_wrap_class_String, 0};
static swig_type_info _swigt__p_daisysp__StringVoice = {"_p_daisysp__StringVoice", "daisysp::StringVoice *", 0, 0, (void*)&_wrap_class_StringVoice, 0};
static swig_type_info _swigt__p_daisysp__Svf = {"_p_daisysp__Svf", "daisysp::Svf *", 0, 0, (void*)&_wrap_class_Svf, 0};
static swig_type_info _swigt__p_daisysp__SwingVCA = {"_p_daisysp__SwingVCA", "daisysp::SwingVCA *", 0, 0, (void*)&_wrap_class_SwingVCA, 0};
static swig_type_info _swigt__p_daisysp__SyntheticBassDrum = {"_p_daisysp__SyntheticBassDrum", "daisysp::SyntheticBassDrum *", 0, 0, (void*)&_wrap_class_SyntheticBassDrum, 0};
static swig_type_info _swigt__p_daisysp__SyntheticBassDrumAttackNoise = {"_p_daisysp__SyntheticBassDrumAttackNoise", "daisysp::SyntheticBassDrumAttackNoise *", 0, 0, (void*)&_wrap_class_SyntheticBassDrumAttackNoise, 0};
static swig_type_info _swigt__p_daisysp__SyntheticBassDrumClick = {"_p_daisysp__SyntheticBassDrumClick", "daisysp::SyntheticBassDrumClick *", 0, 0, (void*)&_wrap_class_SyntheticBassDrumClick, 0};
static swig_type_info _swigt__p_daisysp__SyntheticSnareDrum = {"_p_daisysp__SyntheticSnareDrum", "daisysp::SyntheticSnareDrum *", 0, 0, (void*)&_wrap_class_SyntheticSnareDrum, 0};
static swig_type_info _swigt__p_daisysp__Tone = {"_p_daisysp__Tone", "daisysp::Tone *", 0, 0, (void*)&_wrap_class_Tone, 0};
static swig_type_info _swigt__p_daisysp__Tremolo = {"_p_daisysp__Tremolo", "daisysp::Tremolo *", 0, 0, (void*)&_wrap_class_Tremolo, 0};
static swig_type_info _swigt__p_daisysp__VariableSawOscillator = {"_p_daisysp__VariableSawOscillator", "daisysp::VariableSawOscillator *", 0, 0, (void*)&_wrap_class_VariableSawOscillator, 0};
static swig_type_info _swigt__p_daisysp__VariableShapeOscillator = {"_p_daisysp__VariableShapeOscillator", "daisysp::VariableShapeOscillator *", 0, 0, (void*)&_wrap_class_VariableShapeOscillator, 0};
static swig_type_info _swigt__p_daisysp__VosimOscillator = {"_p_daisysp__VosimOscillator", "daisysp::VosimOscillator *", 0, 0, (void*)&_wrap_class_VosimOscillator, 0};
static swig_type_info _swigt__p_daisysp__WhiteNoise = {"_p_daisysp__WhiteNoise", "daisysp::WhiteNoise *", 0, 0, (void*)&_wrap_class_WhiteNoise, 0};
static swig_type_info _swigt__p_daisysp__ZOscillator = {"_p_daisysp__ZOscillator", "daisysp::ZOscillator *", 0, 0, (void*)&_wrap_class_ZOscillator, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_daisysp__ATone,
  &_swigt__p_daisysp__AdEnv,
  &_swigt__p_daisysp__Adsr,
  &_swigt__p_daisysp__Allpass,
  &_swigt__p_daisysp__AnalogBassDrum,
  &_swigt__p_daisysp__AnalogSnareDrum,
  &_swigt__p_daisysp__Autowah,
  &_swigt__p_daisysp__Balance,
  &_swigt__p_daisysp__Biquad,
  &_swigt__p_daisysp__Bitcrush,
  &_swigt__p_daisysp__BlOsc,
  &_swigt__p_daisysp__Chorus,
  &_swigt__p_daisysp__ChorusEngine,
  &_swigt__p_daisysp__ClockedNoise,
  &_swigt__p_daisysp__Comb,
  &_swigt__p_daisysp__Compressor,
  &_swigt__p_daisysp__CrossFade,
  &_swigt__p_daisysp__DcBlock,
  &_swigt__p_daisysp__Decimator,
  &_swigt__p_daisysp__Drip,
  &_swigt__p_daisysp__Dust,
  &_swigt__p_daisysp__Flanger,
  &_swigt__p_daisysp__Fm2,
  &_swigt__p_daisysp__Fold,
  &_swigt__p_daisysp__FormantOscillator,
  &_swigt__p_daisysp__GrainletOscillator,
  &_swigt__p_daisysp__Jitter,
  &_swigt__p_daisysp__Limiter,
  &_swigt__p_daisysp__Line,
  &_swigt__p_daisysp__LinearVCA,
  &_swigt__p_daisysp__Looper,
  &_swigt__p_daisysp__Maytrig,
  &_swigt__p_daisysp__Metro,
  &_swigt__p_daisysp__ModalVoice,
  &_swigt__p_daisysp__Mode,
  &_swigt__p_daisysp__MoogLadder,
  &_swigt__p_daisysp__NlFilt,
  &_swigt__p_daisysp__Oscillator,
  &_swigt__p_daisysp__OscillatorBank,
  &_swigt__p_daisysp__Overdrive,
  &_swigt__p_daisysp__Particle,
  &_swigt__p_daisysp__Phaser,
  &_swigt__p_daisysp__PhaserEngine,
  &_swigt__p_daisysp__Phasor,
  &_swigt__p_daisysp__PitchShifter,
  &_swigt__p_daisysp__Pluck,
  &_swigt__p_daisysp__Port,
  &_swigt__p_daisysp__Resonator,
  &_swigt__p_daisysp__ReverbSc,
  &_swigt__p_daisysp__ReverbScDl,
  &_swigt__p_daisysp__RingModNoise,
  &_swigt__p_daisysp__SampleHold,
  &_swigt__p_daisysp__SampleRateReducer,
  &_swigt__p_daisysp__SmoothRandomGenerator,
  &_swigt__p_daisysp__SquareNoise,
  &_swigt__p_daisysp__String,
  &_swigt__p_daisysp__StringVoice,
  &_swigt__p_daisysp__Svf,
  &_swigt__p_daisysp__SwingVCA,
  &_swigt__p_daisysp__SyntheticBassDrum,
  &_swigt__p_daisysp__SyntheticBassDrumAttackNoise,
  &_swigt__p_daisysp__SyntheticBassDrumClick,
  &_swigt__p_daisysp__SyntheticSnareDrum,
  &_swigt__p_daisysp__Tone,
  &_swigt__p_daisysp__Tremolo,
  &_swigt__p_daisysp__VariableSawOscillator,
  &_swigt__p_daisysp__VariableShapeOscillator,
  &_swigt__p_daisysp__VosimOscillator,
  &_swigt__p_daisysp__WhiteNoise,
  &_swigt__p_daisysp__ZOscillator,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_float,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_daisysp__ATone[] = {  {&_swigt__p_daisysp__ATone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__AdEnv[] = {  {&_swigt__p_daisysp__AdEnv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Adsr[] = {  {&_swigt__p_daisysp__Adsr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Allpass[] = {  {&_swigt__p_daisysp__Allpass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__AnalogBassDrum[] = {  {&_swigt__p_daisysp__AnalogBassDrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__AnalogSnareDrum[] = {  {&_swigt__p_daisysp__AnalogSnareDrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Autowah[] = {  {&_swigt__p_daisysp__Autowah, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Balance[] = {  {&_swigt__p_daisysp__Balance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Biquad[] = {  {&_swigt__p_daisysp__Biquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Bitcrush[] = {  {&_swigt__p_daisysp__Bitcrush, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__BlOsc[] = {  {&_swigt__p_daisysp__BlOsc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Chorus[] = {  {&_swigt__p_daisysp__Chorus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__ChorusEngine[] = {  {&_swigt__p_daisysp__ChorusEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__ClockedNoise[] = {  {&_swigt__p_daisysp__ClockedNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Comb[] = {  {&_swigt__p_daisysp__Comb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Compressor[] = {  {&_swigt__p_daisysp__Compressor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__CrossFade[] = {  {&_swigt__p_daisysp__CrossFade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__DcBlock[] = {  {&_swigt__p_daisysp__DcBlock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Decimator[] = {  {&_swigt__p_daisysp__Decimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Drip[] = {  {&_swigt__p_daisysp__Drip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Dust[] = {  {&_swigt__p_daisysp__Dust, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Flanger[] = {  {&_swigt__p_daisysp__Flanger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Fm2[] = {  {&_swigt__p_daisysp__Fm2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Fold[] = {  {&_swigt__p_daisysp__Fold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__FormantOscillator[] = {  {&_swigt__p_daisysp__FormantOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__GrainletOscillator[] = {  {&_swigt__p_daisysp__GrainletOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Jitter[] = {  {&_swigt__p_daisysp__Jitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Limiter[] = {  {&_swigt__p_daisysp__Limiter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Line[] = {  {&_swigt__p_daisysp__Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__LinearVCA[] = {  {&_swigt__p_daisysp__LinearVCA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Looper[] = {  {&_swigt__p_daisysp__Looper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Maytrig[] = {  {&_swigt__p_daisysp__Maytrig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Metro[] = {  {&_swigt__p_daisysp__Metro, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__ModalVoice[] = {  {&_swigt__p_daisysp__ModalVoice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Mode[] = {  {&_swigt__p_daisysp__Mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__MoogLadder[] = {  {&_swigt__p_daisysp__MoogLadder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__NlFilt[] = {  {&_swigt__p_daisysp__NlFilt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Oscillator[] = {  {&_swigt__p_daisysp__Oscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__OscillatorBank[] = {  {&_swigt__p_daisysp__OscillatorBank, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Overdrive[] = {  {&_swigt__p_daisysp__Overdrive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Particle[] = {  {&_swigt__p_daisysp__Particle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Phaser[] = {  {&_swigt__p_daisysp__Phaser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__PhaserEngine[] = {  {&_swigt__p_daisysp__PhaserEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Phasor[] = {  {&_swigt__p_daisysp__Phasor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__PitchShifter[] = {  {&_swigt__p_daisysp__PitchShifter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Pluck[] = {  {&_swigt__p_daisysp__Pluck, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Port[] = {  {&_swigt__p_daisysp__Port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Resonator[] = {  {&_swigt__p_daisysp__Resonator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__ReverbSc[] = {  {&_swigt__p_daisysp__ReverbSc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__ReverbScDl[] = {  {&_swigt__p_daisysp__ReverbScDl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__RingModNoise[] = {  {&_swigt__p_daisysp__RingModNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SampleHold[] = {  {&_swigt__p_daisysp__SampleHold, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SampleRateReducer[] = {  {&_swigt__p_daisysp__SampleRateReducer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SmoothRandomGenerator[] = {  {&_swigt__p_daisysp__SmoothRandomGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SquareNoise[] = {  {&_swigt__p_daisysp__SquareNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__String[] = {  {&_swigt__p_daisysp__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__StringVoice[] = {  {&_swigt__p_daisysp__StringVoice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Svf[] = {  {&_swigt__p_daisysp__Svf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SwingVCA[] = {  {&_swigt__p_daisysp__SwingVCA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SyntheticBassDrum[] = {  {&_swigt__p_daisysp__SyntheticBassDrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SyntheticBassDrumAttackNoise[] = {  {&_swigt__p_daisysp__SyntheticBassDrumAttackNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SyntheticBassDrumClick[] = {  {&_swigt__p_daisysp__SyntheticBassDrumClick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__SyntheticSnareDrum[] = {  {&_swigt__p_daisysp__SyntheticSnareDrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Tone[] = {  {&_swigt__p_daisysp__Tone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__Tremolo[] = {  {&_swigt__p_daisysp__Tremolo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__VariableSawOscillator[] = {  {&_swigt__p_daisysp__VariableSawOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__VariableShapeOscillator[] = {  {&_swigt__p_daisysp__VariableShapeOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__VosimOscillator[] = {  {&_swigt__p_daisysp__VosimOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__WhiteNoise[] = {  {&_swigt__p_daisysp__WhiteNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_daisysp__ZOscillator[] = {  {&_swigt__p_daisysp__ZOscillator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_daisysp__ATone,
  _swigc__p_daisysp__AdEnv,
  _swigc__p_daisysp__Adsr,
  _swigc__p_daisysp__Allpass,
  _swigc__p_daisysp__AnalogBassDrum,
  _swigc__p_daisysp__AnalogSnareDrum,
  _swigc__p_daisysp__Autowah,
  _swigc__p_daisysp__Balance,
  _swigc__p_daisysp__Biquad,
  _swigc__p_daisysp__Bitcrush,
  _swigc__p_daisysp__BlOsc,
  _swigc__p_daisysp__Chorus,
  _swigc__p_daisysp__ChorusEngine,
  _swigc__p_daisysp__ClockedNoise,
  _swigc__p_daisysp__Comb,
  _swigc__p_daisysp__Compressor,
  _swigc__p_daisysp__CrossFade,
  _swigc__p_daisysp__DcBlock,
  _swigc__p_daisysp__Decimator,
  _swigc__p_daisysp__Drip,
  _swigc__p_daisysp__Dust,
  _swigc__p_daisysp__Flanger,
  _swigc__p_daisysp__Fm2,
  _swigc__p_daisysp__Fold,
  _swigc__p_daisysp__FormantOscillator,
  _swigc__p_daisysp__GrainletOscillator,
  _swigc__p_daisysp__Jitter,
  _swigc__p_daisysp__Limiter,
  _swigc__p_daisysp__Line,
  _swigc__p_daisysp__LinearVCA,
  _swigc__p_daisysp__Looper,
  _swigc__p_daisysp__Maytrig,
  _swigc__p_daisysp__Metro,
  _swigc__p_daisysp__ModalVoice,
  _swigc__p_daisysp__Mode,
  _swigc__p_daisysp__MoogLadder,
  _swigc__p_daisysp__NlFilt,
  _swigc__p_daisysp__Oscillator,
  _swigc__p_daisysp__OscillatorBank,
  _swigc__p_daisysp__Overdrive,
  _swigc__p_daisysp__Particle,
  _swigc__p_daisysp__Phaser,
  _swigc__p_daisysp__PhaserEngine,
  _swigc__p_daisysp__Phasor,
  _swigc__p_daisysp__PitchShifter,
  _swigc__p_daisysp__Pluck,
  _swigc__p_daisysp__Port,
  _swigc__p_daisysp__Resonator,
  _swigc__p_daisysp__ReverbSc,
  _swigc__p_daisysp__ReverbScDl,
  _swigc__p_daisysp__RingModNoise,
  _swigc__p_daisysp__SampleHold,
  _swigc__p_daisysp__SampleRateReducer,
  _swigc__p_daisysp__SmoothRandomGenerator,
  _swigc__p_daisysp__SquareNoise,
  _swigc__p_daisysp__String,
  _swigc__p_daisysp__StringVoice,
  _swigc__p_daisysp__Svf,
  _swigc__p_daisysp__SwingVCA,
  _swigc__p_daisysp__SyntheticBassDrum,
  _swigc__p_daisysp__SyntheticBassDrumAttackNoise,
  _swigc__p_daisysp__SyntheticBassDrumClick,
  _swigc__p_daisysp__SyntheticSnareDrum,
  _swigc__p_daisysp__Tone,
  _swigc__p_daisysp__Tremolo,
  _swigc__p_daisysp__VariableSawOscillator,
  _swigc__p_daisysp__VariableShapeOscillator,
  _swigc__p_daisysp__VosimOscillator,
  _swigc__p_daisysp__WhiteNoise,
  _swigc__p_daisysp__ZOscillator,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_float,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

